# 1 "mnist_inference.cpp"
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 376 "<built-in>" 3
# 1 "<command line>" 1
# 1 "<built-in>" 2
# 1 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/autopilot_ssdm_op.h" 1
# 108 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_ReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Read(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_WriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Write(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_CanReadReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_NbWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_CanWriteReq(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_PrintNone(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_PrintInt(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_PrintDouble(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_Return(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow)) __attribute__((overloadable));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow)) __attribute__((overloadable));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_Unroll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_Inline(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBindPort(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_DataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow)) __attribute__((overloadable));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow)) __attribute__((overloadable));

    void __xilinx_ip_top(...) __attribute__ ((nothrow)) __attribute__((overloadable));


}
# 2 "<built-in>" 2
# 1 "mnist_inference.cpp" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 416 "/usr/include/features.h" 3 4
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 417 "/usr/include/features.h" 2 3 4
# 438 "/usr/include/features.h" 3 4
# 1 "/usr/include/sys/cdefs.h" 1 3 4
# 501 "/usr/include/sys/cdefs.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 502 "/usr/include/sys/cdefs.h" 2 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 503 "/usr/include/sys/cdefs.h" 2 3 4
# 439 "/usr/include/features.h" 2 3 4
# 462 "/usr/include/features.h" 3 4
# 1 "/usr/include/gnu/stubs.h" 1 3 4
# 10 "/usr/include/gnu/stubs.h" 3 4
# 1 "/usr/include/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/gnu/stubs.h" 2 3 4
# 463 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/bits/libc-header-start.h" 2 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {




# 1 "/eda/xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 62 "/eda/xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/eda/xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stdarg.h" 1 3 4
# 30 "/eda/xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stdarg.h" 3 4
typedef __builtin_va_list va_list;
# 48 "/eda/xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4

# 1 "/usr/include/bits/types.h" 1 3 4
# 27 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 28 "/usr/include/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 140 "/usr/include/bits/types.h" 3 4
# 1 "/usr/include/bits/typesizes.h" 1 3 4
# 141 "/usr/include/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 39 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;






typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) throw ();







extern FILE *tmpfile (void) ;
# 183 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;




extern char *tmpnam_r (char *__s) throw () ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 237 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 270 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();
# 434 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));
# 491 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 516 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 527 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 543 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
          ;
# 593 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 609 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 668 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 679 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 713 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 737 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 756 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;







extern void perror (const char *__s);






# 1 "/usr/include/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 788 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 806 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 864 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 879 "/usr/include/stdio.h" 3 4
}
# 2 "mnist_inference.cpp" 2
# 1 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 1 3
# 36 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 3
# 1 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 1 3
# 40 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3

# 1 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 1 3
# 236 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 258 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 508 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 3
# 1 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/os_defines.h" 1 3
# 509 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 2 3


# 1 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/cpu_defines.h" 1 3
# 512 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/x86_64-pc-linux-gnu/bits/c++config.h" 2 3
# 42 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3
# 1 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 1 3
# 36 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
# 67 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };



  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 261 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 278 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 408 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 43 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3
# 1 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/type_traits.h" 1 3
# 33 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 44 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3

# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4






extern "C" {






# 1 "/usr/include/bits/math-vector.h" 1 3 4
# 25 "/usr/include/bits/math-vector.h" 3 4
# 1 "/usr/include/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/bits/floatn.h" 1 3 4
# 119 "/usr/include/bits/floatn.h" 3 4
# 1 "/usr/include/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/bits/floatn-common.h" 3 4
# 1 "/usr/include/bits/long-double.h" 1 3 4
# 25 "/usr/include/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 120 "/usr/include/bits/floatn.h" 2 3 4
# 44 "/usr/include/math.h" 2 3 4
# 138 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/flt-eval-method.h" 1 3 4
# 139 "/usr/include/math.h" 2 3 4
# 149 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 190 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/fp-logb.h" 1 3 4
# 191 "/usr/include/math.h" 2 3 4
# 233 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/fp-fast.h" 1 3 4
# 234 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 289 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));


extern int __isnan (double __value) throw () __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) throw ();


extern int __issignaling (double __value) throw ()
     __attribute__ ((__const__));
# 290 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


 extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

 extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();



 extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ();





extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();





 extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


 extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();




extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();




extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();






 extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();



extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();




extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();






extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();
# 182 "/usr/include/bits/mathcalls.h" 3 4
extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();






extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));




extern double nan (const char *__tagb) throw (); extern double __nan (const char *__tagb) throw ();
# 217 "/usr/include/bits/mathcalls.h" 3 4
extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();





extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();




extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();







extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();






extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw (); extern double __nextafter (double __x, double __y) throw ();

extern double nexttoward (double __x, long double __y) throw (); extern double __nexttoward (double __x, long double __y) throw ();




extern double nextdown (double __x) throw (); extern double __nextdown (double __x) throw ();

extern double nextup (double __x) throw (); extern double __nextup (double __x) throw ();



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern long int llogb (double __x) throw (); extern long int __llogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
__extension__
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
__extension__
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));


extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();




extern double roundeven (double __x) throw () __attribute__ ((__const__)); extern double __roundeven (double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) throw ();



extern double fmaxmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) throw () __attribute__ ((__const__));


extern double fminmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) throw () __attribute__ ((__const__));


extern int totalorder (double __x, double __y) throw ()
     __attribute__ ((__const__));


extern int totalordermag (double __x, double __y) throw ()
     __attribute__ ((__const__));


extern int canonicalize (double *__cx, const double *__x) throw ();


extern double getpayload (const double *__x) throw (); extern double __getpayload (const double *__x) throw ();


extern int setpayload (double *__x, double __payload) throw ();


extern int setpayloadsig (double *__x, double __payload) throw ();







extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 291 "/usr/include/math.h" 2 3 4
# 306 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));


extern int __isnanf (float __value) throw () __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) throw ();


extern int __issignalingf (float __value) throw ()
     __attribute__ ((__const__));
# 307 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


 extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

 extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();



 extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ();





extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();





 extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


 extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();




extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();




extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();






 extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();



extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();




extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();






extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();
# 177 "/usr/include/bits/mathcalls.h" 3 4
extern int isinff (float __value) throw () __attribute__ ((__const__));




extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();






extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));




extern float nanf (const char *__tagb) throw (); extern float __nanf (const char *__tagb) throw ();
# 211 "/usr/include/bits/mathcalls.h" 3 4
extern int isnanf (float __value) throw () __attribute__ ((__const__));





extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();





extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();




extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();







extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();






extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw (); extern float __nextafterf (float __x, float __y) throw ();

extern float nexttowardf (float __x, long double __y) throw (); extern float __nexttowardf (float __x, long double __y) throw ();




extern float nextdownf (float __x) throw (); extern float __nextdownf (float __x) throw ();

extern float nextupf (float __x) throw (); extern float __nextupf (float __x) throw ();



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern long int llogbf (float __x) throw (); extern long int __llogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
__extension__
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
__extension__
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();




extern float roundevenf (float __x) throw () __attribute__ ((__const__)); extern float __roundevenf (float __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) throw ();



extern float fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern int totalorderf (float __x, float __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf (float __x, float __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef (float *__cx, const float *__x) throw ();


extern float getpayloadf (const float *__x) throw (); extern float __getpayloadf (const float *__x) throw ();


extern int setpayloadf (float *__x, float __payload) throw ();


extern int setpayloadsigf (float *__x, float __payload) throw ();







extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 308 "/usr/include/math.h" 2 3 4
# 349 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));


extern int __isnanl (long double __value) throw () __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) throw ();


extern int __issignalingl (long double __value) throw ()
     __attribute__ ((__const__));
# 350 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


 extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

 extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();



 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ();





extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();





 extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


 extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();




extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();




extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();






 extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();



extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();




extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();






extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();
# 177 "/usr/include/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) throw () __attribute__ ((__const__));




extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();






extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));




extern long double nanl (const char *__tagb) throw (); extern long double __nanl (const char *__tagb) throw ();
# 211 "/usr/include/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) throw () __attribute__ ((__const__));





extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();





extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();




extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();







extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();






extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw (); extern long double __nextafterl (long double __x, long double __y) throw ();

extern long double nexttowardl (long double __x, long double __y) throw (); extern long double __nexttowardl (long double __x, long double __y) throw ();




extern long double nextdownl (long double __x) throw (); extern long double __nextdownl (long double __x) throw ();

extern long double nextupl (long double __x) throw (); extern long double __nextupl (long double __x) throw ();



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long int llogbl (long double __x) throw (); extern long int __llogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
__extension__
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
__extension__
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();




extern long double roundevenl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundevenl (long double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) throw ();



extern long double fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern int totalorderl (long double __x, long double __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagl (long double __x, long double __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizel (long double *__cx, const long double *__x) throw ();


extern long double getpayloadl (const long double *__x) throw (); extern long double __getpayloadl (const long double *__x) throw ();


extern int setpayloadl (long double *__x, long double __payload) throw ();


extern int setpayloadsigl (long double *__x, long double __payload) throw ();







extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 351 "/usr/include/math.h" 2 3 4
# 389 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32 acosf32 (_Float32 __x) throw (); extern _Float32 __acosf32 (_Float32 __x) throw ();

extern _Float32 asinf32 (_Float32 __x) throw (); extern _Float32 __asinf32 (_Float32 __x) throw ();

extern _Float32 atanf32 (_Float32 __x) throw (); extern _Float32 __atanf32 (_Float32 __x) throw ();

extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) throw (); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) throw ();


 extern _Float32 cosf32 (_Float32 __x) throw (); extern _Float32 __cosf32 (_Float32 __x) throw ();

 extern _Float32 sinf32 (_Float32 __x) throw (); extern _Float32 __sinf32 (_Float32 __x) throw ();

extern _Float32 tanf32 (_Float32 __x) throw (); extern _Float32 __tanf32 (_Float32 __x) throw ();




extern _Float32 coshf32 (_Float32 __x) throw (); extern _Float32 __coshf32 (_Float32 __x) throw ();

extern _Float32 sinhf32 (_Float32 __x) throw (); extern _Float32 __sinhf32 (_Float32 __x) throw ();

extern _Float32 tanhf32 (_Float32 __x) throw (); extern _Float32 __tanhf32 (_Float32 __x) throw ();



 extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw (); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw ();





extern _Float32 acoshf32 (_Float32 __x) throw (); extern _Float32 __acoshf32 (_Float32 __x) throw ();

extern _Float32 asinhf32 (_Float32 __x) throw (); extern _Float32 __asinhf32 (_Float32 __x) throw ();

extern _Float32 atanhf32 (_Float32 __x) throw (); extern _Float32 __atanhf32 (_Float32 __x) throw ();





 extern _Float32 expf32 (_Float32 __x) throw (); extern _Float32 __expf32 (_Float32 __x) throw ();


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) throw (); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) throw ();


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) throw (); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) throw ();


 extern _Float32 logf32 (_Float32 __x) throw (); extern _Float32 __logf32 (_Float32 __x) throw ();


extern _Float32 log10f32 (_Float32 __x) throw (); extern _Float32 __log10f32 (_Float32 __x) throw ();


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) throw (); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32 exp10f32 (_Float32 __x) throw (); extern _Float32 __exp10f32 (_Float32 __x) throw ();




extern _Float32 expm1f32 (_Float32 __x) throw (); extern _Float32 __expm1f32 (_Float32 __x) throw ();


extern _Float32 log1pf32 (_Float32 __x) throw (); extern _Float32 __log1pf32 (_Float32 __x) throw ();


extern _Float32 logbf32 (_Float32 __x) throw (); extern _Float32 __logbf32 (_Float32 __x) throw ();




extern _Float32 exp2f32 (_Float32 __x) throw (); extern _Float32 __exp2f32 (_Float32 __x) throw ();


extern _Float32 log2f32 (_Float32 __x) throw (); extern _Float32 __log2f32 (_Float32 __x) throw ();






 extern _Float32 powf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 sqrtf32 (_Float32 __x) throw (); extern _Float32 __sqrtf32 (_Float32 __x) throw ();



extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) throw ();




extern _Float32 cbrtf32 (_Float32 __x) throw (); extern _Float32 __cbrtf32 (_Float32 __x) throw ();






extern _Float32 ceilf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) throw ();
# 196 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) throw (); extern _Float32 __nanf32 (const char *__tagb) throw ();
# 217 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) throw (); extern _Float32 __j0f32 (_Float32) throw ();
extern _Float32 j1f32 (_Float32) throw (); extern _Float32 __j1f32 (_Float32) throw ();
extern _Float32 jnf32 (int, _Float32) throw (); extern _Float32 __jnf32 (int, _Float32) throw ();
extern _Float32 y0f32 (_Float32) throw (); extern _Float32 __y0f32 (_Float32) throw ();
extern _Float32 y1f32 (_Float32) throw (); extern _Float32 __y1f32 (_Float32) throw ();
extern _Float32 ynf32 (int, _Float32) throw (); extern _Float32 __ynf32 (int, _Float32) throw ();





extern _Float32 erff32 (_Float32) throw (); extern _Float32 __erff32 (_Float32) throw ();
extern _Float32 erfcf32 (_Float32) throw (); extern _Float32 __erfcf32 (_Float32) throw ();
extern _Float32 lgammaf32 (_Float32) throw (); extern _Float32 __lgammaf32 (_Float32) throw ();




extern _Float32 tgammaf32 (_Float32) throw (); extern _Float32 __tgammaf32 (_Float32) throw ();
# 249 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) throw (); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) throw ();






extern _Float32 rintf32 (_Float32 __x) throw (); extern _Float32 __rintf32 (_Float32 __x) throw ();


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) throw ();






extern _Float32 nextdownf32 (_Float32 __x) throw (); extern _Float32 __nextdownf32 (_Float32 __x) throw ();

extern _Float32 nextupf32 (_Float32 __x) throw (); extern _Float32 __nextupf32 (_Float32 __x) throw ();



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) throw ();



extern _Float32 scalbnf32 (_Float32 __x, int __n) throw (); extern _Float32 __scalbnf32 (_Float32 __x, int __n) throw ();



extern int ilogbf32 (_Float32 __x) throw (); extern int __ilogbf32 (_Float32 __x) throw ();




extern long int llogbf32 (_Float32 __x) throw (); extern long int __llogbf32 (_Float32 __x) throw ();




extern _Float32 scalblnf32 (_Float32 __x, long int __n) throw (); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) throw ();



extern _Float32 nearbyintf32 (_Float32 __x) throw (); extern _Float32 __nearbyintf32 (_Float32 __x) throw ();



extern _Float32 roundf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) throw () __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw (); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw ();






extern long int lrintf32 (_Float32 __x) throw (); extern long int __lrintf32 (_Float32 __x) throw ();
__extension__
extern long long int llrintf32 (_Float32 __x) throw (); extern long long int __llrintf32 (_Float32 __x) throw ();



extern long int lroundf32 (_Float32 __x) throw (); extern long int __lroundf32 (_Float32 __x) throw ();
__extension__
extern long long int llroundf32 (_Float32 __x) throw (); extern long long int __llroundf32 (_Float32 __x) throw ();



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw (); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw ();




extern _Float32 roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ();



extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern int totalorderf32 (_Float32 __x, _Float32 __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf32 (_Float32 __x, _Float32 __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) throw ();


extern _Float32 getpayloadf32 (const _Float32 *__x) throw (); extern _Float32 __getpayloadf32 (const _Float32 *__x) throw ();


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) throw ();


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) throw ();
# 390 "/usr/include/math.h" 2 3 4
# 406 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64 acosf64 (_Float64 __x) throw (); extern _Float64 __acosf64 (_Float64 __x) throw ();

extern _Float64 asinf64 (_Float64 __x) throw (); extern _Float64 __asinf64 (_Float64 __x) throw ();

extern _Float64 atanf64 (_Float64 __x) throw (); extern _Float64 __atanf64 (_Float64 __x) throw ();

extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) throw (); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) throw ();


 extern _Float64 cosf64 (_Float64 __x) throw (); extern _Float64 __cosf64 (_Float64 __x) throw ();

 extern _Float64 sinf64 (_Float64 __x) throw (); extern _Float64 __sinf64 (_Float64 __x) throw ();

extern _Float64 tanf64 (_Float64 __x) throw (); extern _Float64 __tanf64 (_Float64 __x) throw ();




extern _Float64 coshf64 (_Float64 __x) throw (); extern _Float64 __coshf64 (_Float64 __x) throw ();

extern _Float64 sinhf64 (_Float64 __x) throw (); extern _Float64 __sinhf64 (_Float64 __x) throw ();

extern _Float64 tanhf64 (_Float64 __x) throw (); extern _Float64 __tanhf64 (_Float64 __x) throw ();



 extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw (); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw ();





extern _Float64 acoshf64 (_Float64 __x) throw (); extern _Float64 __acoshf64 (_Float64 __x) throw ();

extern _Float64 asinhf64 (_Float64 __x) throw (); extern _Float64 __asinhf64 (_Float64 __x) throw ();

extern _Float64 atanhf64 (_Float64 __x) throw (); extern _Float64 __atanhf64 (_Float64 __x) throw ();





 extern _Float64 expf64 (_Float64 __x) throw (); extern _Float64 __expf64 (_Float64 __x) throw ();


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) throw (); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) throw ();


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) throw (); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) throw ();


 extern _Float64 logf64 (_Float64 __x) throw (); extern _Float64 __logf64 (_Float64 __x) throw ();


extern _Float64 log10f64 (_Float64 __x) throw (); extern _Float64 __log10f64 (_Float64 __x) throw ();


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) throw (); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64 exp10f64 (_Float64 __x) throw (); extern _Float64 __exp10f64 (_Float64 __x) throw ();




extern _Float64 expm1f64 (_Float64 __x) throw (); extern _Float64 __expm1f64 (_Float64 __x) throw ();


extern _Float64 log1pf64 (_Float64 __x) throw (); extern _Float64 __log1pf64 (_Float64 __x) throw ();


extern _Float64 logbf64 (_Float64 __x) throw (); extern _Float64 __logbf64 (_Float64 __x) throw ();




extern _Float64 exp2f64 (_Float64 __x) throw (); extern _Float64 __exp2f64 (_Float64 __x) throw ();


extern _Float64 log2f64 (_Float64 __x) throw (); extern _Float64 __log2f64 (_Float64 __x) throw ();






 extern _Float64 powf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 sqrtf64 (_Float64 __x) throw (); extern _Float64 __sqrtf64 (_Float64 __x) throw ();



extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) throw ();




extern _Float64 cbrtf64 (_Float64 __x) throw (); extern _Float64 __cbrtf64 (_Float64 __x) throw ();






extern _Float64 ceilf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) throw ();
# 196 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) throw (); extern _Float64 __nanf64 (const char *__tagb) throw ();
# 217 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) throw (); extern _Float64 __j0f64 (_Float64) throw ();
extern _Float64 j1f64 (_Float64) throw (); extern _Float64 __j1f64 (_Float64) throw ();
extern _Float64 jnf64 (int, _Float64) throw (); extern _Float64 __jnf64 (int, _Float64) throw ();
extern _Float64 y0f64 (_Float64) throw (); extern _Float64 __y0f64 (_Float64) throw ();
extern _Float64 y1f64 (_Float64) throw (); extern _Float64 __y1f64 (_Float64) throw ();
extern _Float64 ynf64 (int, _Float64) throw (); extern _Float64 __ynf64 (int, _Float64) throw ();





extern _Float64 erff64 (_Float64) throw (); extern _Float64 __erff64 (_Float64) throw ();
extern _Float64 erfcf64 (_Float64) throw (); extern _Float64 __erfcf64 (_Float64) throw ();
extern _Float64 lgammaf64 (_Float64) throw (); extern _Float64 __lgammaf64 (_Float64) throw ();




extern _Float64 tgammaf64 (_Float64) throw (); extern _Float64 __tgammaf64 (_Float64) throw ();
# 249 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) throw (); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) throw ();






extern _Float64 rintf64 (_Float64 __x) throw (); extern _Float64 __rintf64 (_Float64 __x) throw ();


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) throw ();






extern _Float64 nextdownf64 (_Float64 __x) throw (); extern _Float64 __nextdownf64 (_Float64 __x) throw ();

extern _Float64 nextupf64 (_Float64 __x) throw (); extern _Float64 __nextupf64 (_Float64 __x) throw ();



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) throw ();



extern _Float64 scalbnf64 (_Float64 __x, int __n) throw (); extern _Float64 __scalbnf64 (_Float64 __x, int __n) throw ();



extern int ilogbf64 (_Float64 __x) throw (); extern int __ilogbf64 (_Float64 __x) throw ();




extern long int llogbf64 (_Float64 __x) throw (); extern long int __llogbf64 (_Float64 __x) throw ();




extern _Float64 scalblnf64 (_Float64 __x, long int __n) throw (); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) throw ();



extern _Float64 nearbyintf64 (_Float64 __x) throw (); extern _Float64 __nearbyintf64 (_Float64 __x) throw ();



extern _Float64 roundf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) throw () __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw (); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw ();






extern long int lrintf64 (_Float64 __x) throw (); extern long int __lrintf64 (_Float64 __x) throw ();
__extension__
extern long long int llrintf64 (_Float64 __x) throw (); extern long long int __llrintf64 (_Float64 __x) throw ();



extern long int lroundf64 (_Float64 __x) throw (); extern long int __lroundf64 (_Float64 __x) throw ();
__extension__
extern long long int llroundf64 (_Float64 __x) throw (); extern long long int __llroundf64 (_Float64 __x) throw ();



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw (); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw ();




extern _Float64 roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ();



extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern int totalorderf64 (_Float64 __x, _Float64 __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf64 (_Float64 __x, _Float64 __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) throw ();


extern _Float64 getpayloadf64 (const _Float64 *__x) throw (); extern _Float64 __getpayloadf64 (const _Float64 *__x) throw ();


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) throw ();


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) throw ();
# 407 "/usr/include/math.h" 2 3 4
# 440 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32x acosf32x (_Float32x __x) throw (); extern _Float32x __acosf32x (_Float32x __x) throw ();

extern _Float32x asinf32x (_Float32x __x) throw (); extern _Float32x __asinf32x (_Float32x __x) throw ();

extern _Float32x atanf32x (_Float32x __x) throw (); extern _Float32x __atanf32x (_Float32x __x) throw ();

extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) throw (); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) throw ();


 extern _Float32x cosf32x (_Float32x __x) throw (); extern _Float32x __cosf32x (_Float32x __x) throw ();

 extern _Float32x sinf32x (_Float32x __x) throw (); extern _Float32x __sinf32x (_Float32x __x) throw ();

extern _Float32x tanf32x (_Float32x __x) throw (); extern _Float32x __tanf32x (_Float32x __x) throw ();




extern _Float32x coshf32x (_Float32x __x) throw (); extern _Float32x __coshf32x (_Float32x __x) throw ();

extern _Float32x sinhf32x (_Float32x __x) throw (); extern _Float32x __sinhf32x (_Float32x __x) throw ();

extern _Float32x tanhf32x (_Float32x __x) throw (); extern _Float32x __tanhf32x (_Float32x __x) throw ();



 extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw (); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw ();





extern _Float32x acoshf32x (_Float32x __x) throw (); extern _Float32x __acoshf32x (_Float32x __x) throw ();

extern _Float32x asinhf32x (_Float32x __x) throw (); extern _Float32x __asinhf32x (_Float32x __x) throw ();

extern _Float32x atanhf32x (_Float32x __x) throw (); extern _Float32x __atanhf32x (_Float32x __x) throw ();





 extern _Float32x expf32x (_Float32x __x) throw (); extern _Float32x __expf32x (_Float32x __x) throw ();


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) throw (); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) throw ();


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) throw (); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) throw ();


 extern _Float32x logf32x (_Float32x __x) throw (); extern _Float32x __logf32x (_Float32x __x) throw ();


extern _Float32x log10f32x (_Float32x __x) throw (); extern _Float32x __log10f32x (_Float32x __x) throw ();


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) throw (); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32x exp10f32x (_Float32x __x) throw (); extern _Float32x __exp10f32x (_Float32x __x) throw ();




extern _Float32x expm1f32x (_Float32x __x) throw (); extern _Float32x __expm1f32x (_Float32x __x) throw ();


extern _Float32x log1pf32x (_Float32x __x) throw (); extern _Float32x __log1pf32x (_Float32x __x) throw ();


extern _Float32x logbf32x (_Float32x __x) throw (); extern _Float32x __logbf32x (_Float32x __x) throw ();




extern _Float32x exp2f32x (_Float32x __x) throw (); extern _Float32x __exp2f32x (_Float32x __x) throw ();


extern _Float32x log2f32x (_Float32x __x) throw (); extern _Float32x __log2f32x (_Float32x __x) throw ();






 extern _Float32x powf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x sqrtf32x (_Float32x __x) throw (); extern _Float32x __sqrtf32x (_Float32x __x) throw ();



extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) throw ();




extern _Float32x cbrtf32x (_Float32x __x) throw (); extern _Float32x __cbrtf32x (_Float32x __x) throw ();






extern _Float32x ceilf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) throw ();
# 196 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) throw (); extern _Float32x __nanf32x (const char *__tagb) throw ();
# 217 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) throw (); extern _Float32x __j0f32x (_Float32x) throw ();
extern _Float32x j1f32x (_Float32x) throw (); extern _Float32x __j1f32x (_Float32x) throw ();
extern _Float32x jnf32x (int, _Float32x) throw (); extern _Float32x __jnf32x (int, _Float32x) throw ();
extern _Float32x y0f32x (_Float32x) throw (); extern _Float32x __y0f32x (_Float32x) throw ();
extern _Float32x y1f32x (_Float32x) throw (); extern _Float32x __y1f32x (_Float32x) throw ();
extern _Float32x ynf32x (int, _Float32x) throw (); extern _Float32x __ynf32x (int, _Float32x) throw ();





extern _Float32x erff32x (_Float32x) throw (); extern _Float32x __erff32x (_Float32x) throw ();
extern _Float32x erfcf32x (_Float32x) throw (); extern _Float32x __erfcf32x (_Float32x) throw ();
extern _Float32x lgammaf32x (_Float32x) throw (); extern _Float32x __lgammaf32x (_Float32x) throw ();




extern _Float32x tgammaf32x (_Float32x) throw (); extern _Float32x __tgammaf32x (_Float32x) throw ();
# 249 "/usr/include/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) throw (); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) throw ();






extern _Float32x rintf32x (_Float32x __x) throw (); extern _Float32x __rintf32x (_Float32x __x) throw ();


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) throw ();






extern _Float32x nextdownf32x (_Float32x __x) throw (); extern _Float32x __nextdownf32x (_Float32x __x) throw ();

extern _Float32x nextupf32x (_Float32x __x) throw (); extern _Float32x __nextupf32x (_Float32x __x) throw ();



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) throw ();



extern _Float32x scalbnf32x (_Float32x __x, int __n) throw (); extern _Float32x __scalbnf32x (_Float32x __x, int __n) throw ();



extern int ilogbf32x (_Float32x __x) throw (); extern int __ilogbf32x (_Float32x __x) throw ();




extern long int llogbf32x (_Float32x __x) throw (); extern long int __llogbf32x (_Float32x __x) throw ();




extern _Float32x scalblnf32x (_Float32x __x, long int __n) throw (); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) throw ();



extern _Float32x nearbyintf32x (_Float32x __x) throw (); extern _Float32x __nearbyintf32x (_Float32x __x) throw ();



extern _Float32x roundf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) throw () __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw (); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw ();






extern long int lrintf32x (_Float32x __x) throw (); extern long int __lrintf32x (_Float32x __x) throw ();
__extension__
extern long long int llrintf32x (_Float32x __x) throw (); extern long long int __llrintf32x (_Float32x __x) throw ();



extern long int lroundf32x (_Float32x __x) throw (); extern long int __lroundf32x (_Float32x __x) throw ();
__extension__
extern long long int llroundf32x (_Float32x __x) throw (); extern long long int __llroundf32x (_Float32x __x) throw ();



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw (); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw ();




extern _Float32x roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ();



extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern int totalorderf32x (_Float32x __x, _Float32x __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf32x (_Float32x __x, _Float32x __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) throw ();


extern _Float32x getpayloadf32x (const _Float32x *__x) throw (); extern _Float32x __getpayloadf32x (const _Float32x *__x) throw ();


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) throw ();


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) throw ();
# 441 "/usr/include/math.h" 2 3 4
# 457 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64x acosf64x (_Float64x __x) throw (); extern _Float64x __acosf64x (_Float64x __x) throw ();

extern _Float64x asinf64x (_Float64x __x) throw (); extern _Float64x __asinf64x (_Float64x __x) throw ();

extern _Float64x atanf64x (_Float64x __x) throw (); extern _Float64x __atanf64x (_Float64x __x) throw ();

extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) throw (); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) throw ();


 extern _Float64x cosf64x (_Float64x __x) throw (); extern _Float64x __cosf64x (_Float64x __x) throw ();

 extern _Float64x sinf64x (_Float64x __x) throw (); extern _Float64x __sinf64x (_Float64x __x) throw ();

extern _Float64x tanf64x (_Float64x __x) throw (); extern _Float64x __tanf64x (_Float64x __x) throw ();




extern _Float64x coshf64x (_Float64x __x) throw (); extern _Float64x __coshf64x (_Float64x __x) throw ();

extern _Float64x sinhf64x (_Float64x __x) throw (); extern _Float64x __sinhf64x (_Float64x __x) throw ();

extern _Float64x tanhf64x (_Float64x __x) throw (); extern _Float64x __tanhf64x (_Float64x __x) throw ();



 extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw (); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw ();





extern _Float64x acoshf64x (_Float64x __x) throw (); extern _Float64x __acoshf64x (_Float64x __x) throw ();

extern _Float64x asinhf64x (_Float64x __x) throw (); extern _Float64x __asinhf64x (_Float64x __x) throw ();

extern _Float64x atanhf64x (_Float64x __x) throw (); extern _Float64x __atanhf64x (_Float64x __x) throw ();





 extern _Float64x expf64x (_Float64x __x) throw (); extern _Float64x __expf64x (_Float64x __x) throw ();


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) throw (); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) throw ();


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) throw (); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) throw ();


 extern _Float64x logf64x (_Float64x __x) throw (); extern _Float64x __logf64x (_Float64x __x) throw ();


extern _Float64x log10f64x (_Float64x __x) throw (); extern _Float64x __log10f64x (_Float64x __x) throw ();


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) throw (); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64x exp10f64x (_Float64x __x) throw (); extern _Float64x __exp10f64x (_Float64x __x) throw ();




extern _Float64x expm1f64x (_Float64x __x) throw (); extern _Float64x __expm1f64x (_Float64x __x) throw ();


extern _Float64x log1pf64x (_Float64x __x) throw (); extern _Float64x __log1pf64x (_Float64x __x) throw ();


extern _Float64x logbf64x (_Float64x __x) throw (); extern _Float64x __logbf64x (_Float64x __x) throw ();




extern _Float64x exp2f64x (_Float64x __x) throw (); extern _Float64x __exp2f64x (_Float64x __x) throw ();


extern _Float64x log2f64x (_Float64x __x) throw (); extern _Float64x __log2f64x (_Float64x __x) throw ();






 extern _Float64x powf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x sqrtf64x (_Float64x __x) throw (); extern _Float64x __sqrtf64x (_Float64x __x) throw ();



extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) throw ();




extern _Float64x cbrtf64x (_Float64x __x) throw (); extern _Float64x __cbrtf64x (_Float64x __x) throw ();






extern _Float64x ceilf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) throw ();
# 196 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) throw (); extern _Float64x __nanf64x (const char *__tagb) throw ();
# 217 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) throw (); extern _Float64x __j0f64x (_Float64x) throw ();
extern _Float64x j1f64x (_Float64x) throw (); extern _Float64x __j1f64x (_Float64x) throw ();
extern _Float64x jnf64x (int, _Float64x) throw (); extern _Float64x __jnf64x (int, _Float64x) throw ();
extern _Float64x y0f64x (_Float64x) throw (); extern _Float64x __y0f64x (_Float64x) throw ();
extern _Float64x y1f64x (_Float64x) throw (); extern _Float64x __y1f64x (_Float64x) throw ();
extern _Float64x ynf64x (int, _Float64x) throw (); extern _Float64x __ynf64x (int, _Float64x) throw ();





extern _Float64x erff64x (_Float64x) throw (); extern _Float64x __erff64x (_Float64x) throw ();
extern _Float64x erfcf64x (_Float64x) throw (); extern _Float64x __erfcf64x (_Float64x) throw ();
extern _Float64x lgammaf64x (_Float64x) throw (); extern _Float64x __lgammaf64x (_Float64x) throw ();




extern _Float64x tgammaf64x (_Float64x) throw (); extern _Float64x __tgammaf64x (_Float64x) throw ();
# 249 "/usr/include/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) throw (); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) throw ();






extern _Float64x rintf64x (_Float64x __x) throw (); extern _Float64x __rintf64x (_Float64x __x) throw ();


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) throw ();






extern _Float64x nextdownf64x (_Float64x __x) throw (); extern _Float64x __nextdownf64x (_Float64x __x) throw ();

extern _Float64x nextupf64x (_Float64x __x) throw (); extern _Float64x __nextupf64x (_Float64x __x) throw ();



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) throw ();



extern _Float64x scalbnf64x (_Float64x __x, int __n) throw (); extern _Float64x __scalbnf64x (_Float64x __x, int __n) throw ();



extern int ilogbf64x (_Float64x __x) throw (); extern int __ilogbf64x (_Float64x __x) throw ();




extern long int llogbf64x (_Float64x __x) throw (); extern long int __llogbf64x (_Float64x __x) throw ();




extern _Float64x scalblnf64x (_Float64x __x, long int __n) throw (); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) throw ();



extern _Float64x nearbyintf64x (_Float64x __x) throw (); extern _Float64x __nearbyintf64x (_Float64x __x) throw ();



extern _Float64x roundf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) throw () __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw (); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw ();






extern long int lrintf64x (_Float64x __x) throw (); extern long int __lrintf64x (_Float64x __x) throw ();
__extension__
extern long long int llrintf64x (_Float64x __x) throw (); extern long long int __llrintf64x (_Float64x __x) throw ();



extern long int lroundf64x (_Float64x __x) throw (); extern long int __lroundf64x (_Float64x __x) throw ();
__extension__
extern long long int llroundf64x (_Float64x __x) throw (); extern long long int __llroundf64x (_Float64x __x) throw ();



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw (); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw ();




extern _Float64x roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ();




extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ();





extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ();





extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ();



extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern int totalorderf64x (_Float64x __x, _Float64x __y) throw ()
     __attribute__ ((__const__));


extern int totalordermagf64x (_Float64x __x, _Float64x __y) throw ()
     __attribute__ ((__const__));


extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) throw ();


extern _Float64x getpayloadf64x (const _Float64x *__x) throw (); extern _Float64x __getpayloadf64x (const _Float64x *__x) throw ();


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) throw ();


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) throw ();
# 458 "/usr/include/math.h" 2 3 4
# 503 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern float fadd (double __x, double __y) throw ();


extern float fdiv (double __x, double __y) throw ();


extern float fmul (double __x, double __y) throw ();


extern float fsub (double __x, double __y) throw ();
# 504 "/usr/include/math.h" 2 3 4
# 517 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern float faddl (long double __x, long double __y) throw ();


extern float fdivl (long double __x, long double __y) throw ();


extern float fmull (long double __x, long double __y) throw ();


extern float fsubl (long double __x, long double __y) throw ();
# 518 "/usr/include/math.h" 2 3 4
# 537 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern double daddl (long double __x, long double __y) throw ();


extern double ddivl (long double __x, long double __y) throw ();


extern double dmull (long double __x, long double __y) throw ();


extern double dsubl (long double __x, long double __y) throw ();
# 538 "/usr/include/math.h" 2 3 4
# 616 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32divf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32mulf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32subf32x (_Float32x __x, _Float32x __y) throw ();
# 617 "/usr/include/math.h" 2 3 4
# 626 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32divf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32mulf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32subf64 (_Float64 __x, _Float64 __y) throw ();
# 627 "/usr/include/math.h" 2 3 4
# 636 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32divf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32mulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32subf64x (_Float64x __x, _Float64x __y) throw ();
# 637 "/usr/include/math.h" 2 3 4
# 666 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xdivf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xmulf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xsubf64 (_Float64 __x, _Float64 __y) throw ();
# 667 "/usr/include/math.h" 2 3 4
# 676 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xdivf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xmulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xsubf64x (_Float64x __x, _Float64x __y) throw ();
# 677 "/usr/include/math.h" 2 3 4
# 706 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64divf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64mulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64subf64x (_Float64x __x, _Float64x __y) throw ();
# 707 "/usr/include/math.h" 2 3 4
# 773 "/usr/include/math.h" 3 4
extern int signgam;
# 853 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 973 "/usr/include/math.h" 3 4
# 1 "/usr/include/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     throw () __attribute__ ((__const__));
# 46 "/usr/include/bits/iscanonical.h" 3 4
extern "C++" {
inline int iscanonical (float __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (double __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (long double __val) { return __iscanonicall (__val); }



}
# 974 "/usr/include/math.h" 2 3 4
# 985 "/usr/include/math.h" 3 4
extern "C++" {
inline int issignaling (float __val) { return __issignalingf (__val); }
inline int issignaling (double __val) { return __issignaling (__val); }
inline int
issignaling (long double __val)
{



  return __issignalingl (__val);

}





}
# 1016 "/usr/include/math.h" 3 4
extern "C++" {
# 1047 "/usr/include/math.h" 3 4
template <class __T> inline bool
iszero (__T __val)
{
  return __val == 0;
}

}
# 1498 "/usr/include/math.h" 3 4
extern "C++" {
template<typename> struct __iseqsig_type;

template<> struct __iseqsig_type<float>
{
  static int __call (float __x, float __y) throw ()
  {
    return __iseqsigf (__x, __y);
  }
};

template<> struct __iseqsig_type<double>
{
  static int __call (double __x, double __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};

template<> struct __iseqsig_type<long double>
{
  static int __call (long double __x, long double __y) throw ()
  {

    return __iseqsigl (__x, __y);



  }
};
# 1541 "/usr/include/math.h" 3 4
template<typename _T1, typename _T2>
inline int
iseqsig (_T1 __x, _T2 __y) throw ()
{

  typedef decltype (((__x) + (__y) + 0.0f)) _T3;



  return __iseqsig_type<_T3>::__call (__x, __y);
}

}




}
# 46 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3

# 1 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 1 3
# 34 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 3




# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/eda/xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {






# 1 "/usr/include/bits/waitflags.h" 1 3 4
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 58 "/usr/include/stdlib.h" 3 4
typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 158 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 250 "/usr/include/stdlib.h" 3 4
extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 272 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/bits/types/locale_t.h" 3 4
# 1 "/usr/include/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 273 "/usr/include/stdlib.h" 2 3 4

extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 337 "/usr/include/stdlib.h" 3 4
extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





# 1 "/usr/include/sys/types.h" 1 3 4
# 27 "/usr/include/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 97 "/usr/include/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 114 "/usr/include/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;





# 1 "/usr/include/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/sys/types.h" 2 3 4

# 1 "/usr/include/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 130 "/usr/include/sys/types.h" 2 3 4
# 1 "/usr/include/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;






# 1 "/eda/xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 145 "/usr/include/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;





# 1 "/usr/include/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 36 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 2 3 4
# 60 "/usr/include/endian.h" 3 4
# 1 "/usr/include/bits/byteswap.h" 1 3 4
# 33 "/usr/include/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{



  return ((__uint16_t) ((((__bsx) >> 8) & 0xff) | (((__bsx) & 0xff) << 8)));

}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{



  return ((((__bsx) & 0xff000000u) >> 24) | (((__bsx) & 0x00ff0000u) >> 8) | (((__bsx) & 0x0000ff00u) << 8) | (((__bsx) & 0x000000ffu) << 24));

}
# 69 "/usr/include/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{



  return ((((__bsx) & 0xff00000000000000ull) >> 56) | (((__bsx) & 0x00ff000000000000ull) >> 40) | (((__bsx) & 0x0000ff0000000000ull) >> 24) | (((__bsx) & 0x000000ff00000000ull) >> 8) | (((__bsx) & 0x00000000ff000000ull) << 8) | (((__bsx) & 0x0000000000ff0000ull) << 24) | (((__bsx) & 0x000000000000ff00ull) << 40) | (((__bsx) & 0x00000000000000ffull) << 56));

}
# 61 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 62 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/sys/types.h" 2 3 4


# 1 "/usr/include/sys/select.h" 1 3 4
# 30 "/usr/include/sys/select.h" 3 4
# 1 "/usr/include/bits/select.h" 1 3 4
# 22 "/usr/include/bits/select.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 23 "/usr/include/bits/select.h" 2 3 4
# 31 "/usr/include/sys/select.h" 2 3 4


# 1 "/usr/include/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/sys/select.h" 2 3 4



# 1 "/usr/include/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/sys/select.h" 2 3 4

# 1 "/usr/include/bits/types/struct_timespec.h" 1 3 4








struct timespec
{
  __time_t tv_sec;
  __syscall_slong_t tv_nsec;
};
# 40 "/usr/include/sys/select.h" 2 3 4
# 49 "/usr/include/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/sys/select.h" 3 4
}
# 180 "/usr/include/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;






# 1 "/usr/include/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/bits/thread-shared-types.h" 1 3 4
# 77 "/usr/include/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/bits/wordsize.h" 1 3 4
# 22 "/usr/include/bits/pthreadtypes-arch.h" 2 3 4
# 65 "/usr/include/bits/pthreadtypes-arch.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 99 "/usr/include/bits/pthreadtypes-arch.h" 3 4
};
# 78 "/usr/include/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;
# 118 "/usr/include/bits/thread-shared-types.h" 3 4
struct __pthread_mutex_s
{
  int __lock ;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;
# 148 "/usr/include/bits/thread-shared-types.h" 3 4
  int __kind;





  short __spins; short __elision;
  __pthread_list_t __list;
# 166 "/usr/include/bits/thread-shared-types.h" 3 4
};




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/sys/types.h" 2 3 4


}
# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) ;






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__));



extern void free (void *__ptr) throw ();



# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/eda/xilinx/Vitis_HLS/2023.1/lnx64/tools/clang-3.9-csynth/lib/clang/7.0.0/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 567 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) ;



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 607 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 672 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 685 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 695 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 707 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 717 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 728 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 739 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 749 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 759 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 771 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 781 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 797 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 869 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 954 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1010 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/bits/stdlib-float.h" 1 3 4
# 1011 "/usr/include/stdlib.h" 2 3 4
# 1020 "/usr/include/stdlib.h" 3 4
}
# 39 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 2 3







extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }







  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 100 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 48 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 2 3
# 77 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 412 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }
# 536 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 1065 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }
# 1889 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/cmath" 3
}





}
# 37 "/eda/xilinx/Vitis_HLS/2023.1/tps/lnx64/gcc-8.3.0/lib/gcc/x86_64-pc-linux-gnu/8.3.0/../../../../include/c++/8.3.0/math.h" 2 3

using std::abs;
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::cos;
using std::sin;
using std::tan;
using std::cosh;
using std::sinh;
using std::tanh;
using std::exp;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sqrt;
using std::ceil;
using std::fabs;
using std::floor;
using std::fmod;


using std::fpclassify;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::signbit;
using std::isgreater;
using std::isgreaterequal;
using std::isless;
using std::islessequal;
using std::islessgreater;
using std::isunordered;



using std::acosh;
using std::asinh;
using std::atanh;
using std::cbrt;
using std::copysign;
using std::erf;
using std::erfc;
using std::exp2;
using std::expm1;
using std::fdim;
using std::fma;
using std::fmax;
using std::fmin;
using std::hypot;
using std::ilogb;
using std::lgamma;
using std::llrint;
using std::llround;
using std::log1p;
using std::log2;
using std::logb;
using std::lrint;
using std::lround;
using std::nearbyint;
using std::nextafter;
using std::nexttoward;
using std::remainder;
using std::remquo;
using std::rint;
using std::round;
using std::scalbln;
using std::scalbn;
using std::tgamma;
using std::trunc;
# 3 "mnist_inference.cpp" 2

# 1 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h" 1








# 1 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h" 1
# 41 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h"
# 1 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_decl.h" 1
# 54 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_decl.h"
enum ap_q_mode {
  AP_RND,
  AP_RND_ZERO,
  AP_RND_MIN_INF,
  AP_RND_INF,
  AP_RND_CONV,
  AP_TRN,
  AP_TRN_ZERO,
};
# 76 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_decl.h"
enum ap_o_mode {
  AP_SAT,
  AP_SAT_ZERO,
  AP_SAT_SYM,
  AP_WRAP,
  AP_WRAP_SM,
};
# 133 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_decl.h"
template <int _AP_W, bool _AP_S>
struct ap_int_base;

template <int _AP_W>
struct ap_int;

template <int _AP_W>
struct ap_uint;

template <int _AP_W, bool _AP_S>
struct ap_range_ref;

template <int _AP_W, bool _AP_S>
struct ap_bit_ref;

template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref;

template <int _AP_W, int _AP_I, bool _AP_S = true, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed_base;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_fixed;

template <int _AP_W, int _AP_I, ap_q_mode _AP_Q = AP_TRN,
          ap_o_mode _AP_O = AP_WRAP, int _AP_N = 0>
struct ap_ufixed;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref;

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref;


enum BaseMode { AP_BIN = 2, AP_OCT = 8, AP_DEC = 10, AP_HEX = 16 };
# 187 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_decl.h"
typedef signed long long ap_slong;
typedef unsigned long long ap_ulong;


enum {
  _AP_SIZE_char = 8,
  _AP_SIZE_short = sizeof(short) * 8,
  _AP_SIZE_int = sizeof(int) * 8,
  _AP_SIZE_long = sizeof(long) * 8,
  _AP_SIZE_ap_slong = sizeof(ap_slong) * 8
};
# 42 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h" 2
# 164 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h"
enum { CHAR_IS_SIGNED = (char)-1 < 0 };


namespace _ap_type {
template <typename _Tp>
struct is_signed {
  static const bool value = _Tp(-1) < _Tp(1);
};

template <typename _Tp>
struct is_integral {
  static const bool value = false;
};





template <> struct is_integral<bool> { static const bool value = true; };
template <> struct is_integral<char> { static const bool value = true; };
template <> struct is_integral<signed char> { static const bool value = true; };
template <> struct is_integral<unsigned char> { static const bool value = true; };
template <> struct is_integral<short> { static const bool value = true; };
template <> struct is_integral<unsigned short> { static const bool value = true; };
template <> struct is_integral<int> { static const bool value = true; };
template <> struct is_integral<unsigned int> { static const bool value = true; };
template <> struct is_integral<long> { static const bool value = true; };
template <> struct is_integral<unsigned long> { static const bool value = true; };
template <> struct is_integral<ap_slong> { static const bool value = true; };
template <> struct is_integral<ap_ulong> { static const bool value = true; };


template <bool, typename _Tp = void>
struct enable_if {};

template <typename _Tp>
struct enable_if<true, _Tp> {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const {
  typedef _Tp type;
};

template <typename _Tp>
struct remove_const<_Tp const> {
  typedef _Tp type;
};
}
# 507 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h"
template <int _AP_N, bool _AP_S>
struct ssdm_int;

template <int _AP_N>
struct ssdm_int<_AP_N, true> {
  typedef int __attribute__((bitwidth(_AP_N))) DataType;
  int V __attribute__((bitwidth(_AP_N)));
  inline __attribute__((always_inline)) ssdm_int<_AP_N, true>(){};
                inline __attribute__((always_inline)) ssdm_int<_AP_N, true>(int o __attribute__((bitwidth(_AP_N)))):V(o){};
};

template <int _AP_N>
struct ssdm_int<_AP_N, false> {
  typedef unsigned __attribute__((bitwidth(_AP_N))) DataType;
  unsigned V __attribute__((bitwidth(_AP_N)));
  inline __attribute__((always_inline)) ssdm_int<_AP_N, false>(){};
                inline __attribute__((always_inline)) ssdm_int<_AP_N, false>(unsigned o __attribute__((bitwidth(_AP_N)))):V(o){};
};
# 575 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h"
# 1 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/autopilot_ssdm_bits.h" 1
# 576 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h" 2

extern "C" void _ssdm_string2bits(...);
# 587 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h"
static inline unsigned char guess_radix(const char* s) {
  unsigned char rd = 10;
  const char* p = s;

  if (p[0] == '-' || p[0] == '+') ++p;

  if (p[0] == '0') {
    if (p[1] == 'b' || p[1] == 'B') {
      rd = 2;
    } else if (p[1] == 'o' || p[1] == 'O') {
      rd = 8;
    } else if (p[1] == 'x' || p[1] == 'X') {
      rd = 16;
    } else if (p[1] == 'd' || p[1] == 'D') {
      rd = 10;
    }
  }
  return rd;
}







typedef __fp16 half;
# 718 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_common.h"
inline __attribute__((always_inline)) ap_ulong doubleToRawBits(double pf) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned int floatToRawBits(float pf) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__D = pf;
  return LD.__L;
}

inline __attribute__((always_inline)) unsigned short halfToRawBits(half pf) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__D = pf;
  return LD.__L;



}


inline __attribute__((always_inline)) double rawBitsToDouble(ap_ulong pi) {
  union {
    ap_ulong __L;
    double __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) float rawBitsToFloat(unsigned long pi) {
  union {
    unsigned int __L;
    float __D;
  } LD;
  LD.__L = pi;
  return LD.__D;
}


inline __attribute__((always_inline)) half rawBitsToHalf(unsigned short pi) {

  union {
    unsigned short __L;
    half __D;
  } LD;
  LD.__L = pi;
  return LD.__D;






}
# 10 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h" 2
# 1 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h" 1
# 16 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
# 1 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h" 1
# 11 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h"
# 1 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h" 1
# 40 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_N, bool _AP_S>
struct retval;


template <int _AP_N>
struct retval<_AP_N, true> {
  typedef ap_slong Type;
};

template <int _AP_N>
struct retval<_AP_N, false> {
  typedef ap_ulong Type;
};


template <>
struct retval<1, true> {
  typedef signed char Type;
};

template <>
struct retval<1, false> {
  typedef unsigned char Type;
};


template <>
struct retval<2, true> {
  typedef short Type;
};

template <>
struct retval<2, false> {
  typedef unsigned short Type;
};


template <>
struct retval<3, true> {
  typedef long Type;
};

template <>
struct retval<3, false> {
  typedef unsigned long Type;
};

template <>
struct retval<4, true> {
  typedef long Type;
};

template <>
struct retval<4, false> {
  typedef unsigned long Type;
};




template <int _AP_W2, bool _AP_S2>
struct _ap_int_factory;
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,true> { typedef ap_int<_AP_W2> type; };
template <int _AP_W2>
struct _ap_int_factory<_AP_W2,false> { typedef ap_uint<_AP_W2> type; };

template <int _AP_W, bool _AP_S>
struct ap_int_base : public ssdm_int<_AP_W, _AP_S> {
 private:
                inline __attribute__((always_inline)) __attribute__((nodebug)) int countLeadingOnes() const {




    return 0;

  }

 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;







  typedef typename retval<(((_AP_W + 7) / 8) > (8) ? ((_AP_W + 7) / 8) : (8)), _AP_S>::Type RetType;

  static const int width = _AP_W;
  static const bool sign_flag = _AP_S;

  template <int _AP_W2, bool _AP_S2>
  struct RType {
    enum {
      mult_w = _AP_W + _AP_W2,
      mult_s = _AP_S || _AP_S2,
      plus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,
      div_w = _AP_W + _AP_S2,
      div_s = _AP_S || _AP_S2,
      mod_w = ((_AP_W) < (_AP_W2 + (!_AP_S2 && _AP_S)) ? (_AP_W) : (_AP_W2 + (!_AP_S2 && _AP_S))),
      mod_s = _AP_S,
      logic_w = ((_AP_W + (_AP_S2 && !_AP_S)) > (_AP_W2 + (_AP_S && !_AP_S2)) ? (_AP_W + (_AP_S2 && !_AP_S)) : (_AP_W2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };


    typedef ap_int_base<mult_w, mult_s> mult_base;
    typedef ap_int_base<plus_w, plus_s> plus_base;
    typedef ap_int_base<minus_w, minus_s> minus_base;
    typedef ap_int_base<logic_w, logic_s> logic_base;
    typedef ap_int_base<div_w, div_s> div_base;
    typedef ap_int_base<mod_w, mod_s> mod_base;
    typedef ap_int_base<_AP_W, _AP_S> arg1_base;

    typedef typename _ap_int_factory<mult_w, mult_s>::type mult;
    typedef typename _ap_int_factory<plus_w, plus_s>::type plus;
    typedef typename _ap_int_factory<minus_w, minus_s>::type minus;
    typedef typename _ap_int_factory<logic_w, logic_s>::type logic;
    typedef typename _ap_int_factory<div_w, div_s>::type div;
    typedef typename _ap_int_factory<mod_w, mod_s>::type mod;
    typedef typename _ap_int_factory<_AP_W, _AP_S>::type arg1;
    typedef bool reduce;
  };





  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base() {





  }


  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op.V) {
    Base::V = op.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    Base::V = op.V;
  }
# 208 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const bool op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const char op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const signed char op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const unsigned char op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const short op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const unsigned short op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const int op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const unsigned int op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const long op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const unsigned long op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_slong op):Base(op) { Base::V = op; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_ulong op):Base(op) { Base::V = op; }




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(half op) {
    ap_int_base<_AP_W, _AP_S> t((float)op);
    Base::V = t.V;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(float op) {
    const int BITS = 23 + 8 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = floatToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<8 + 1, true> exp = 0;
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 23, BITS - 2); __Result__; });
    exp = exp - ((1 << (8 - 1)) - 1);

    ap_int_base<23 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 23 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23); __Result__; });


    if ((reg.V & 0x7ffffffful) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 23 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 23 + 2) {
          ap_int_base<23 + 2, true> man_shift;
          man_shift.V = (man.V >> sh_amt);






          Base::V = man_shift.V;
        } else {



            Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {



          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(double op) {
    const int BITS = 52 + 11 + 1;
    ap_int_base<BITS, false> reg;
    reg.V = doubleToRawBits(op);
    bool is_neg = ({ typeof(reg.V) __Val2__ = reg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), BITS - 1); __Result__; });

    ap_int_base<11 + 1, true> exp, bias = ((1 << (11 - 1)) - 1);
    exp.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, BITS - 2); __Result__; });
    exp = exp - bias;

    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(reg.V)>::type __Result__ = 0; typeof(reg.V) __Val2__ = reg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });

    (static_cast<void>(0));


    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });


    if ((reg.V & 0x7fffffffffffffffull) == 0) {
      Base::V = 0;
    } else {
      int sh_amt = 52 - exp.V;
      if (sh_amt == 0) {
        Base::V = man.V;
      } else if (sh_amt > 0) {
        if (sh_amt < 52 + 2) {
          ap_int_base<23 + 2, true> man_shift;
          man_shift.V = (man.V >> sh_amt);






          Base::V = man_shift.V;
        } else {



           Base::V = 0;
        }
      } else {
        sh_amt = -sh_amt;
        if (sh_amt < _AP_W) {
          Base::V = man.V;
          Base::V <<= sh_amt;
        } else {



          Base::V = 0;
        }
      }
    }
    if (is_neg) *this = -(*this);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    op.checkOverflowCsimFix(_AP_W, _AP_S);
    Base::V = op.to_ap_int_base().V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_range_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = (ref.get()).V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_bit_ref<_AP_W2, _AP_S2>& ref) {
    Base::V = ref.operator bool();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref) {
    const ap_int_base<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>::_AP_WR,
                      false>
        tmp = ref.get();
    Base::V = tmp.V;
  }
# 387 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_W, _AP_S,
                      AP_TRN, AP_WRAP, 0, true);
    Base::V = t;
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = (val.get()).V;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    Base::V = val.operator bool();
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base read() volatile {

    ap_int_base ret;
    ret.V = Base::V;
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void write(const ap_int_base<_AP_W, _AP_S>& op2) volatile {

    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const volatile ap_int_base<_AP_W, _AP_S>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const ap_int_base<_AP_W, _AP_S>& op2) volatile {
    *((volatile typename Base::DataType *)(&(Base::V))) = op2.V;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const volatile ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(const ap_int_base<_AP_W2, _AP_S2>& op2) {
    Base::V = op2.V;
    return *this;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(const volatile ap_int_base<_AP_W, _AP_S>& op2) {
    Base::V = op2.V;
    return *this;
  }


  ap_int_base& operator=(const ap_int_base<_AP_W, _AP_S>& op2) = default;
# 481 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(bool op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(signed char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(unsigned char op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(unsigned short op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(unsigned int op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(unsigned long op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(ap_slong op) { Base::V = op; return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(ap_ulong op) { Base::V = op; return *this; }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (bool)op2;
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    Base::V = (ap_int_base<_AP_W2, false>(op2)).V;
    return *this;
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op2) {
    Base::V = op2.get().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = op.to_ap_int_base().V;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = (bool)op;
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    Base::V = ((const ap_int_base<_AP_W2, false>)(op)).V;
    return *this;
  }





                inline __attribute__((always_inline)) __attribute__((nodebug)) operator RetType() const { return (RetType)(Base::V); }




                inline __attribute__((always_inline)) __attribute__((nodebug)) bool to_bool() const { return (bool)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) char to_char() const { return (char)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) signed char to_schar() const { return (signed char)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned char to_uchar() const { return (unsigned char)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) short to_short() const { return (short)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned short to_ushort() const { return (unsigned short)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) int to_int() const { return (int)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned to_uint() const { return (unsigned)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) long to_long() const { return (long)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned long to_ulong() const { return (unsigned long)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_slong to_int64() const { return (ap_slong)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ulong to_uint64() const { return (ap_ulong)(Base::V); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) half to_half() const { return (float)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) float to_float() const { return (float)(Base::V); }
                inline __attribute__((always_inline)) __attribute__((nodebug)) double to_double() const { return (double)(Base::V); }
# 586 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const volatile { return _AP_W; }
                inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return _AP_W; }


                inline __attribute__((always_inline)) __attribute__((nodebug)) bool iszero() const { return Base::V == 0; }


                inline __attribute__((always_inline)) __attribute__((nodebug)) bool is_zero() const { return Base::V == 0; }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool sign() const {
    if (_AP_S &&
        ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }))
      return true;
    else
      return false;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void clear(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void invert(int i) {
                                                           ;
    bool val = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    if (val)
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(0) __Repl2__ = !!0; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
    else
      Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool test(int i) const {
                                                           ;
    return ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& get() { return *this; }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(int i) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(int i, bool v) {
                                                           ;
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& lrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << n;
    typeof(Base::V) r_p = Base::V >> (_AP_W - n);
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& rrotate(int n) {
                                                              ;


    typeof(Base::V) l_p = Base::V << (_AP_W - n);
    typeof(Base::V) r_p = Base::V >> n;
    Base::V = l_p | r_p;



    return *this;
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& reverse() {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void set_bit(int i, bool v) {
    Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(v) __Repl2__ = !!v; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), i, i); __Result__; });
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) bool get_bit(int i) const {
    return (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void b_not() { Base::V = ~Base::V; }

  template<typename T>
                inline __attribute__((always_inline)) __attribute__((nodebug)) void checkOverflowBaseC(T val) {
# 757 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
    (void)val;

    return;
  }

                inline __attribute__((always_inline)) __attribute__((nodebug)) bool checkOverflowCsim(int _ap_w2, bool _ap_s2,
          bool print = true) const {
# 807 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
      (void)_ap_w2;
      (void)_ap_s2;
      (void)print;

      return 0;
  }
# 841 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator *=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V *= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator +=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V += op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator -=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V -= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator /=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V /= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator %=(const ap_int_base<_AP_W2, _AP_S2>& op2) { Base::V %= op2.V; return *this; }
# 859 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator &=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V &= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator |=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V |= op2.V; return *this; }
  template <int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator ^=(const ap_int_base<_AP_W2, _AP_S2>& op2) { (static_cast<void>(0)); Base::V ^= op2.V; return *this; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator++() {
    operator+=((ap_int_base<1, false>)1);
    return *this;
  }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator--() {
    operator-=((ap_int_base<1, false>)1);
    return *this;
  }




  inline __attribute__((always_inline)) __attribute__((nodebug)) const typename RType<_AP_W,_AP_S>::arg1 operator++(int) {
    ap_int_base t = *this;
    operator+=((ap_int_base<1, false>)1);
    return t;
  }
  inline __attribute__((always_inline)) __attribute__((nodebug)) const typename RType<_AP_W,_AP_S>::arg1 operator--(int) {
    ap_int_base t = *this;
    operator-=((ap_int_base<1, false>)1);
    return t;
  }




                inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator+() const { return *this; }


                inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<1, false>::minus operator-() const {
    return ap_int_base<1, false>(0) - *this;
  }




                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!() const { return Base::V == 0; }





                inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator~() const {
    ap_int_base<_AP_W, _AP_S> r(0);
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>(sh);
    } else
      return operator<<(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r(0);
    r.V = Base::V << op2.to_uint();
    return r;
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<(sh);
    }
    return operator>>(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W,_AP_S>::arg1 operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    ap_int_base r(0);
    r.V = Base::V >> op2.to_uint();
    return r;
  }
# 970 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator>>=(sh);
    } else
      return operator<<=(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator<<=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V <<= op2.to_uint();
    return *this;
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, true>& op2) {
    bool isNeg = ({ typeof(op2.V) __Val2__ = op2.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    ap_int_base<_AP_W2, false> sh = op2;
    if (isNeg) {
      sh = -op2;
      return operator<<=(sh);
    }
    return operator>>=(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base& operator>>=(const ap_int_base<_AP_W2, false>& op2) {
    Base::V >>= op2.to_uint();
    return *this;
  }
# 1019 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V == op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return !(Base::V == op2.V);
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V < op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V >= op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V > op2.V;
  }
  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(const ap_int_base<_AP_W2, _AP_S2>& op2) const {
    return Base::V <= op2.V;
  }




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range(int Hi, int Lo) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ap_range_ref<_AP_W, _AP_S>(const_cast<ap_int_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> operator()(int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }
# 1128 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W, _AP_S> operator[](int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W, _AP_S> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator[](int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator[](const ap_int_base<_AP_W2, _AP_S2>& index) const {
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index.to_int());
    return br.to_bool();
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W, _AP_S> bit(int index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index);
    return bvh;
  }
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W, _AP_S> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> bvh(this, index.to_int());
    return bvh;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool bit(int index) const {
                                                                       ;
                                                                 ;
    ap_bit_ref<_AP_W, _AP_S> br(this, index);
    return br.to_bool();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool bit(const ap_int_base<_AP_W2, _AP_S2>& index) const {
    return bit(index.to_int());
  }
# 1195 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
                inline __attribute__((always_inline)) __attribute__((nodebug)) int countLeadingZeros() const {

    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1UL), x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      ap_int_base<64, false> x;
      x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - 1, 0); __Result__; });
      t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, _AP_W - 1); __Result__; });
      return __builtin_ctzll(t.V);
    } else {
      enum { __N = (_AP_W + 63) / 64 };
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      VITIS_LOOP_1213_1: for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - i * 64 - 64, _AP_W - i * 64 - 1); __Result__; });
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t.V != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        enum { REST = (_AP_W - 1) % 64 };
        ap_int_base<64, false> x;
        x.V = ({ typename _ap_type::remove_const<typeof(this->V)>::type __Result__ = 0; typeof(this->V) __Val2__ = this->V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, REST); __Result__; });
        t.V = ({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; typeof(x.V) __Repl2__ = x.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 63 - REST, 63); __Result__; });
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(const ap_int_base<_AP_W2, _AP_S2>& a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  concat(ap_int_base<_AP_W2, _AP_S2>& a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline))
      __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this), a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) const {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_int_base, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      _AP_W, ap_int_base, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       a2);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) const {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        const_cast<ap_int_base<_AP_W, _AP_S>&>(*this),
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline))
      __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_int_base, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        _AP_W, ap_int_base, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this, a2);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator&(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this & a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator|(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this | a2.get();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_W2 + _AP_W3) > (_AP_W) ? (_AP_W2 + _AP_W3) : (_AP_W)), _AP_S> operator^(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& a2) {
    return *this ^ a2.get();
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W3, false>& val) {
    Base::V = val.V;
  }





  inline __attribute__((always_inline)) __attribute__((nodebug)) bool and_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_and_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool nand_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_nand_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool or_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool nor_reduce() const { return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_or_reduce((void*)(&__what2__)); })); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool xor_reduce() const { return ({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool xnor_reduce() const {
    return !(({ typeof(Base::V) __what2__ = Base::V; __builtin_bit_xor_reduce((void*)(&__what2__)); }));
  }
# 1435 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string(signed char rd = 2, bool sign = _AP_S) const {
    (void)(rd);
    (void)(sign);
    return 0;
  }

};
# 1496 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mult_base ret(0); ret.V = lhs.V * rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::plus_base ret(0); ret.V = lhs.V + rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::minus_base ret(0); ret.V = lhs.V - rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret(0); ret.V = lhs.V & rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret(0); ret.V = lhs.V | rhs.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base lhs(op); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base rhs(op2); typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::logic_base ret(0); ret.V = lhs.V ^ rhs.V; return ret; }
# 1515 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::div_base ret(0); ret.V = op.V / op2.V; return ret; }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { typename ap_int_base<_AP_W, _AP_S>::template RType< _AP_W2, _AP_S2>::mod_base ret(0); ret.V = op.V % op2.V; return ret; }
# 1543 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) PTR_TYPE* operator +(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op + op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) PTR_TYPE* operator +(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 + i_op; }
template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) PTR_TYPE* operator -(PTR_TYPE* i_op, const ap_int_base<_AP_W, _AP_S>& op) { ap_slong op2 = op.to_int64(); return i_op - op2; } template <typename PTR_TYPE, int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) PTR_TYPE* operator -(const ap_int_base<_AP_W, _AP_S>& op, PTR_TYPE* i_op) { ap_slong op2 = op.to_int64(); return op2 - i_op; }
# 1572 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator *(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator *(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator /(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator /(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator +(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator +(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator -(float i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float operator -(const ap_int_base<_AP_W, _AP_S>& op, float i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator *(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator *(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator /(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator /(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator +(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator +(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator -(double i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double operator -(const ap_int_base<_AP_W, _AP_S>& op, double i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1597 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator *(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op * op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator *(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 * i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator /(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op / op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator /(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 / i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator +(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op + op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator +(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 + i_op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator -(half i_op, const ap_int_base<_AP_W, _AP_S>& op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return i_op - op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half operator -(const ap_int_base<_AP_W, _AP_S>& op, half i_op) { typename ap_int_base<_AP_W, _AP_S>::RetType op2 = op; return op2 - i_op; }
# 1629 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op * ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op + ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op - ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op / ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op % ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op & ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op | ap_int_base<1, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, bool i_op) { return op ^ ap_int_base<1, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op * ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op + ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op - ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op / ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op % ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op & ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op | ap_int_base<8, CHAR_IS_SIGNED>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, CHAR_IS_SIGNED>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, char i_op) { return op ^ ap_int_base<8, CHAR_IS_SIGNED>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op * ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op + ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op - ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op / ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op % ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op & ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op | ap_int_base<8, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, signed char i_op) { return op ^ ap_int_base<8, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op * ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op + ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op - ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op / ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op % ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op & ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op | ap_int_base<8, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<8, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned char i_op) { return op ^ ap_int_base<8, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op * ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op + ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op - ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op / ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op % ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op & ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op | ap_int_base<_AP_SIZE_short, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, short i_op) { return op ^ ap_int_base<_AP_SIZE_short, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op * ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op + ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op - ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op / ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op % ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op & ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op | ap_int_base<_AP_SIZE_short, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_short, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned short i_op) { return op ^ ap_int_base<_AP_SIZE_short, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op * ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op + ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op - ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op / ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op % ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op & ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op | ap_int_base<_AP_SIZE_int, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, int i_op) { return op ^ ap_int_base<_AP_SIZE_int, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op * ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op + ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op - ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op / ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op % ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op & ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op | ap_int_base<_AP_SIZE_int, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_int, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned int i_op) { return op ^ ap_int_base<_AP_SIZE_int, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op * ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op + ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op - ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op / ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op % ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op & ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op | ap_int_base<_AP_SIZE_long, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, long i_op) { return op ^ ap_int_base<_AP_SIZE_long, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op * ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op + ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op - ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op / ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op % ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op & ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op | ap_int_base<_AP_SIZE_long, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_long, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, unsigned long i_op) { return op ^ ap_int_base<_AP_SIZE_long, false>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, true>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, true>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_slong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, true>(i_op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) *(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mult operator *(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op * ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) +(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::plus operator +(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op + ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) -(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::minus operator -(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op - ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) /(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::div operator /(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op / ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) %(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::mod operator %(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op % ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) &(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator &(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op & ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) |(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator |(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op | ap_int_base<_AP_SIZE_ap_slong, false>(i_op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) ^(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_SIZE_ap_slong, false>::logic operator ^(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong i_op) { return op ^ ap_int_base<_AP_SIZE_ap_slong, false>(i_op); }
# 1668 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (CHAR_IS_SIGNED) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, short op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, int op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, long op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V << op2) : (op.V >> (-op2)); else r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { ap_int_base<_AP_W, _AP_S> r(0); if (true) r.V = op2 >= 0 ? (op.V >> op2) : (op.V << (-op2)); else r.V = op.V >> op2; return r; }
# 1692 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, bool op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator<<( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V << op2; return r; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, _AP_S>::template RType<_AP_W,_AP_S>::arg1 operator>>( const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { ap_int_base<_AP_W, _AP_S> r(0); r.V = op.V >> op2; return r; }
# 1723 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op += ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op -= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op *= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op /= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op %= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op &= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op |= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op ^= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >>= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <<= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op += ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op -= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op *= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op /= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op %= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op &= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op |= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op ^= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >>= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <<= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op += ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op -= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op *= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op /= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op %= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op &= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op |= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op ^= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >>= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <<= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op += ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op -= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op *= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op /= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op %= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op &= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op |= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op ^= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >>= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <<= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op += ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op -= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op *= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op /= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op %= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op &= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op |= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op ^= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >>= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <<= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op += ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op -= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op *= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op /= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op %= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op &= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op |= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op ^= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >>= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <<= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op += ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op -= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op *= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op /= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op %= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op &= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op |= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op ^= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >>= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <<= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op += ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op -= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op *= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op /= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op %= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op &= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op |= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op ^= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >>= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <<= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op += ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op -= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op *= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op /= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op %= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op &= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op |= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op ^= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >>= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <<= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op += ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op -= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op *= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op /= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op %= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op &= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op |= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op ^= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >>= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <<= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator +=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op += ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator -=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op -= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator *=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op *= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator /=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op /= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator %=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op %= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator &=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op &= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator |=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op |= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator ^=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op ^= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator >>=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >>= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, _AP_S>& operator <<=( ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <<= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1756 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half& operator +=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half& operator -=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half& operator *=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) half& operator /=( half& op2, ap_int_base<_AP_W, _AP_S>& op) { half op_rt = op.to_half(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float& operator +=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float& operator -=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float& operator *=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) float& operator /=( float& op2, ap_int_base<_AP_W, _AP_S>& op) { float op_rt = op.to_float(); return op2 /= op_rt; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double& operator +=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 += op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double& operator -=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 -= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double& operator *=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 *= op_rt; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) double& operator /=( double& op2, ap_int_base<_AP_W, _AP_S>& op) { double op_rt = op.to_double(); return op2 /= op_rt; }
# 1784 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(bool i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<1, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, bool op2) { return op != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, CHAR_IS_SIGNED>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, char op2) { return op != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(signed char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, signed char op2) { return op != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned char i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<8, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned char op2) { return op != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, short op2) { return op != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned short i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_short, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned short op2) { return op != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, int op2) { return op != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned int i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_int, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned int op2) { return op != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, long op2) { return op != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned long i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_long, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, unsigned long op2) { return op != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(ap_slong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, true>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_slong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) > op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) < op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) >= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) <= op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) == op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(ap_ulong i_op, const ap_int_base<_AP_W, _AP_S>& op) { return ap_int_base<_AP_SIZE_ap_slong, false>(i_op) != op; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op, ap_ulong op2) { return op != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1821 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() > op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 > op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() < op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 < op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() >= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 >= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() <= op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 <= op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() == op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 == op2.to_double() ; }
  template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, double op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(double op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W, _AP_S>& op1, float op2) { return op1.to_double() != op2 ; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(float op1, const ap_int_base<_AP_W, _AP_S>& op2) { return op1 != op2.to_double() ; }
# 1851 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) + op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) - op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) * op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) / op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) % op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) & op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) | op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) ^ op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) >> op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<_AP_W2, false>(op2); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1) << op2; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<_AP_W2, false>(op2); }
# 1882 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator +=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator -=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator *=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator /=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator %=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator >>=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<_AP_W2, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator <<=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 1914 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator &=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator |=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W2, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W1, _AP_S1>& operator ^=( ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<_AP_W1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 1933 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator ==(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator ==(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator !=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator !=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator >=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator >=(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <(op2.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<_AP_W1, false>(op1).operator <=(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_range_ref<_AP_W2, _AP_S2>& op2) { return op1.operator <=(op2.operator ap_int_base<_AP_W2, false>()); }
# 1960 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::plus operator +(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 + ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::plus operator +(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) + op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::minus operator -(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 - ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::minus operator -(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) - op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mult operator *(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 * ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mult operator *(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) * op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::div operator /(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 / ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::div operator /(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) / op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::mod operator %(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 % ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::mod operator %(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) % op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator &(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 & ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator &(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) & op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator |(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 | ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator |(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) | op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::logic operator ^(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 ^ ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::logic operator ^(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) ^ op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator >>(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >> ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator >>(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >> op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W1, _AP_S1>::template RType<1, false>::arg1 operator <<(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 << ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<1, false>::template RType<_AP_W2, _AP_S2>::arg1 operator <<(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) << op2; }
# 1991 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator +=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 += ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator +=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp += op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator -=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 -= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator -=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp -= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator *=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 *= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator *=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp *= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator /=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 /= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator /=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp /= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator %=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 %= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator %=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp %= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator >>=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >>= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator >>=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp >>= op2; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator <<=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <<= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator <<=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp <<= op2; op1 = tmp; return op1; }
# 2023 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator &=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V &= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator &=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V &= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator |=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V |= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator |=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V |= op2.V; op1 = tmp; return op1; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W1, _AP_S1>& operator ^=( ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op2); op1.V ^= tmp.V; return op1; } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref<_AP_W1, _AP_S1>& operator ^=( ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { ap_int_base<1, false> tmp(op1); tmp.V ^= op2.V; op1 = tmp; return op1; }
# 2042 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 == ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) == op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 != ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) != op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 > ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) > op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 >= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) >= op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 < ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) < op2; }
template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_int_base<_AP_W1, _AP_S1>& op1, const ap_bit_ref<_AP_W2, _AP_S2>& op2) { return op1 <= ap_int_base<1, false>(op2); } template <int _AP_W1, bool _AP_S1, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W1, _AP_S1>& op1, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op1) <= op2; }
# 2149 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_base.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 == op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() == op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 != op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() != op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 > op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() > op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 >= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() >= op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 < op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() < op2; }
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_int_base<_AP_W3, _AP_S3>& op1, const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op2) { return op1 <= op2.get(); } template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2, int _AP_W3, bool _AP_S3> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& op1, const ap_int_base<_AP_W3, _AP_S3>& op2) { return op1.get() <= op2; }
# 12 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h" 2
# 1 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h" 1
# 27 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W1, typename _AP_T1, int _AP_W2, typename _AP_T2>
struct ap_concat_ref {
  enum {
    _AP_WR = _AP_W1 + _AP_W2,
  };

  _AP_T1& mbv1;
  _AP_T2& mbv2;

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref(const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& ref)
      : mbv1(ref.mbv1), mbv2(ref.mbv2) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref(_AP_T1& bv1, _AP_T2& bv2) : mbv1(bv1), mbv2(bv2) {}

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> Part1;
    Part1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(Part1);
    ap_int_base<_AP_W2, false> Part2;
    Part2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(Part2);
    return *this;
  }
# 70 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(bool val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(signed char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(unsigned char val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(unsigned short val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(unsigned int val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(unsigned long val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(ap_slong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(ap_ulong val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(half val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(float val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(double val) { ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val); return operator=(tmpVal); }





  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W1, _AP_T1, _AP_W2, _AP_T2>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(const ap_bit_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }
  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(const ap_range_ref<_AP_W3, _AP_S3>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> tmpVal(val);
    return operator=(tmpVal);
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((const ap_int_base<_AP_W3, false>)(val));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const ap_fixed_base<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&
          val) {
    return operator=(val.to_ap_int_base());
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref& operator=(
      const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>& val) {
    return operator=((ap_ulong)(bool)(val));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_int_base<_AP_WR, false>() const { return get(); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_ulong() const { return get().to_uint64(); }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                       ap_range_ref<_AP_W3, _AP_S3> >
  operator,(const ap_range_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_range_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_range_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(*this, a2);
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(volatile ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const ap_int_base<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3, ap_int_base<_AP_W3, _AP_S3> >
      operator,(const volatile ap_int_base<_AP_W3, _AP_S3> &a2) {

    ap_int_base<_AP_W3, _AP_S3> op(a2);
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3,
                         ap_int_base<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_int_base<_AP_W3, _AP_S3>&>(op));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >
  operator,(const ap_bit_ref<_AP_W3, _AP_S3> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, 1, ap_bit_ref<_AP_W3, _AP_S3> >(
        *this, const_cast<ap_bit_ref<_AP_W3, _AP_S3>&>(a2));
  }

  template <int _AP_W3, typename _AP_T3, int _AP_W4, typename _AP_T4>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                       ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >
  operator,(const ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> &a2) {
    return ap_concat_ref<_AP_WR, ap_concat_ref, _AP_W3 + _AP_W4,
                         ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4> >(
        *this, const_cast<ap_concat_ref<_AP_W3, _AP_T3, _AP_W4, _AP_T4>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      _AP_WR, ap_concat_ref, _AP_W3,
      af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
  operator,(
      const af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, _AP_W3,
        af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<
            af_range_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(a2));
  }

  template <int _AP_W3, int _AP_I3, bool _AP_S3, ap_q_mode _AP_Q3,
            ap_o_mode _AP_O3, int _AP_N3>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_WR, ap_concat_ref, 1,
                    af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >
      operator,(const af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>
                    &a2) {
    return ap_concat_ref<
        _AP_WR, ap_concat_ref, 1,
        af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3> >(
        *this,
        const_cast<af_bit_ref<_AP_W3, _AP_I3, _AP_S3, _AP_Q3, _AP_O3, _AP_N3>&>(
            a2));
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator&(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() & a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator|(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() | a2;
  }

  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_WR) > (_AP_W3) ? (_AP_WR) : (_AP_W3)), _AP_S3> operator^(
      const ap_int_base<_AP_W3, _AP_S3>& a2) {
    return get() ^ a2;
  }
# 258 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_WR, false> get() const {
    ap_int_base<_AP_WR, false> tmpVal(0);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W2, false> v2(mbv2);
    ap_int_base<_AP_W1, false> v1(mbv1);
    tmpVal.V = ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v2.V) __Repl2__ = v2.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 0, W_ref2 - 1); __Result__; });
    tmpVal.V =
        ({ typename _ap_type::remove_const<typeof(tmpVal.V)>::type __Result__ = 0; typeof(tmpVal.V) __Val2__ = tmpVal.V; typeof(v1.V) __Repl2__ = v1.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    return tmpVal;
  }

  template <int _AP_W3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W3, false>& val) {
    ap_int_base<_AP_W1 + _AP_W2, false> vval(val);
    int W_ref1 = mbv1.length();
    int W_ref2 = mbv2.length();
    ap_int_base<_AP_W1, false> tmpVal1;
    tmpVal1.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), W_ref2, W_ref1 + W_ref2 - 1); __Result__; });
    mbv1.set(tmpVal1);
    ap_int_base<_AP_W2, false> tmpVal2;
    tmpVal2.V = ({ typename _ap_type::remove_const<typeof(vval.V)>::type __Result__ = 0; typeof(vval.V) __Val2__ = vval.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, W_ref2 - 1); __Result__; });
    mbv2.set(tmpVal2);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return mbv1.length() + mbv2.length(); }
};




template <int _AP_W, bool _AP_S>
struct ap_range_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref(const ap_range_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_ulong() const { return to_uint64(); }
# 339 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(bool val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(signed char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(unsigned char val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(unsigned short val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(unsigned int val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(unsigned long val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(ap_slong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(ap_ulong val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(half val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(float val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(double val) { ap_int_base<_AP_W, false> tmp(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const ap_range_ref& val) {
    return operator=((const ap_int_base<_AP_W, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    return operator=(val.to_ap_int_base());
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)(val));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)(val));
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
      operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, a2);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug))
  ap_concat_ref<_AP_W, ap_range_ref, _AP_W, ap_int_base<_AP_W, _AP_S> >
  operator,(ap_int_base<_AP_W, _AP_S>& a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W,
                         ap_int_base<_AP_W, _AP_S> >(*this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<_AP_W, ap_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      _AP_W, ap_range_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, ap_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &a2) {
    return ap_concat_ref<
        _AP_W, ap_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop == hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop < hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> hop(op2);
    return lop <= hop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<=(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator|=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V |= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator&=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V &= op2.V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= (op2.d_bv).V;
    return *this;
  };

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_range_ref<_AP_W, _AP_S>& operator^=(
      const ap_int_base<_AP_W2, _AP_S2>& op2) {
    (this->d_bv).V ^= op2.V;
    return *this;
  };



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (~ret);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (!ret);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (-ret);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned to_uint() const {
    ap_int_base<_AP_W, false> t;
    t.V = d_bv.V;
    return (unsigned)(({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned long to_ulong() const {
    ap_int_base<_AP_W, false> t;
    t.V = d_bv.V;
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ulong to_uint64() const {
    ap_int_base<_AP_W, false> t;
    t.V = d_bv.V;
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(t.V)>::type __Result__ = 0; typeof(t.V) __Val2__ = t.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool and_reduce() const {
    bool ret = true;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_676_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret &= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool or_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_690_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret |= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool xor_reduce() const {
    bool ret = false;
    bool reverse = l_index > h_index;
    unsigned low = reverse ? h_index : l_index;
    unsigned high = reverse ? l_index : h_index;
    VITIS_LOOP_704_1: for (unsigned i = low; i != high; ++i) {

#pragma HLS unroll

 ret ^= ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), i); __Result__; });
    }
    return ret;
  }
# 720 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string(signed char radix = 2) const {
    (void)(radix);
    return 0;
  }

};
# 760 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S>
struct ap_bit_ref {



  typedef ap_int_base<_AP_W, _AP_S> ref_type;
  ref_type& d_bv;
  int d_index;

 public:

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref(const ap_bit_ref<_AP_W, _AP_S>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool to_bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }
# 798 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(bool val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(signed char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(unsigned char val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(unsigned short val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(unsigned int val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(unsigned long val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(ap_slong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(ap_ulong val) { d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
# 820 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(half val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(float val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(double val) { bool tmp_val = val; d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp_val) __Repl2__ = !!tmp_val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; }); return *this; }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(val.V != 0));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_int_base<_AP_W2, false>)val);
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(const ap_bit_ref& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((const ap_int_base<_AP_W2, false>)val);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=((ap_ulong)(bool)val);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=((const ap_int_base<_AP_W2 + _AP_W3, false>)val);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, a2);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(const volatile ap_int_base<_AP_W2, _AP_S2> &a2) {
    ap_int_base<_AP_W2, _AP_S2> op(a2);
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_int_base<_AP_W2, _AP_S2>&>(op));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(a2));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &a2) {
    return ap_concat_ref<1, ap_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      1, ap_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<
        1, ap_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<
            af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(a2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &a2) {
    return ap_concat_ref<1, ap_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            a2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    return get() != op.get();
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool get() { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  template <int _AP_W3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W3, false>& val) {
    operator=(val);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return 1; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string() const { return 0; }

};
# 1018 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 > bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) > ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 < bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) < ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 >= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) >= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 <= bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) <= ap_int_base<_AP_SIZE_ap_slong, false>(op2); }






template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<1, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(bool op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, bool op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<1, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, CHAR_IS_SIGNED>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(signed char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, signed char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<8, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned char op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned char op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<8, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned short op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned short op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_short, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned int op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned int op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_int, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(unsigned long op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, unsigned long op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_long, false>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(ap_slong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_slong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, true>(op2); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 == bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) == ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_bit_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(ap_ulong op2, const ap_bit_ref<_AP_W, _AP_S>& op) { return op2 != bool(op); } template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1>& op, ap_ulong op2) { return ap_int_base<_AP_W + _AP_W1, false>(op) != ap_int_base<_AP_SIZE_ap_slong, false>(op2); }
# 1077 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::plus operator +(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::minus operator -(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mult operator *(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::div operator /(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::mod operator %(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::plus operator +(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::minus operator -(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mult operator *(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::div operator /(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::mod operator %(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::plus operator +(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::minus operator -(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mult operator *(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::div operator /(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::mod operator %(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::plus operator +(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::minus operator -(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mult operator *(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::div operator /(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::mod operator %(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::plus operator +(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::minus operator -(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mult operator *(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::div operator /(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::mod operator %(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::plus operator +(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::minus operator -(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mult operator *(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::div operator /(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::mod operator %(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::plus operator +(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::minus operator -(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mult operator *(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::div operator /(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::mod operator %(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::plus operator +(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::minus operator -(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mult operator *(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::div operator /(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::mod operator %(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::plus operator +(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::minus operator -(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mult operator *(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::div operator /(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::mod operator %(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::plus operator +(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::minus operator -(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mult operator *(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::div operator /(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::mod operator %(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::plus operator +(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::minus operator -(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mult operator *(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::div operator /(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::mod operator %(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) % ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) + ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::plus operator +(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) + ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) - ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::minus operator -(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) - ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) * ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mult operator *(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) * ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::div operator /(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) / ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::div operator /(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) / ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) % ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::mod operator %(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) % ap_int_base<_AP_W, false>(op); }
# 1100 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator &(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator |(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::logic operator ^(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator >>(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(1), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, bool op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(1), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(1), (false)>::template RType<_AP_W, false>::arg1 operator <<(bool op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(1), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator &(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator |(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::logic operator ^(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator >>(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (CHAR_IS_SIGNED)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (CHAR_IS_SIGNED)>::template RType<_AP_W, false>::arg1 operator <<(char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator &(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator |(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::logic operator ^(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator >>(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (true)>::template RType<_AP_W, false>::arg1 operator <<(signed char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator &(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator |(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(8), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(8), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(8), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned char op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(8), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator &(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator |(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::logic operator ^(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator >>(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (true)>::template RType<_AP_W, false>::arg1 operator <<(short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator &(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator |(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_short), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_short), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned short op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator &(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator |(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::logic operator ^(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator >>(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (true)>::template RType<_AP_W, false>::arg1 operator <<(int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator &(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator |(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_int), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_int), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned int op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator &(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator |(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::logic operator ^(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator >>(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (true)>::template RType<_AP_W, false>::arg1 operator <<(long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator &(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator |(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::logic operator ^(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator >>(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_long), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_long), (false)>::template RType<_AP_W, false>::arg1 operator <<(unsigned long op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator &(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator |(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::logic operator ^(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator >>(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (true)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (true)>::template RType<_AP_W, false>::arg1 operator <<(ap_slong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) << ap_int_base<_AP_W, false>(op); }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) & ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator &(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) & ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) | ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator |(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) | ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) ^ ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::logic operator ^(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) ^ ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >> ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator >>(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >> ap_int_base<_AP_W, false>(op); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<(_AP_SIZE_ap_slong), (false)>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) << ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<(_AP_SIZE_ap_slong), (false)>::template RType<_AP_W, false>::arg1 operator <<(ap_ulong op2, const ap_range_ref<_AP_W, _AP_S>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) << ap_int_base<_AP_W, false>(op); }
# 1128 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::plus operator +(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())+( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::minus operator -(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())-( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mult operator *(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())*( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::div operator /(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())/( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::mod operator %(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())%( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator &(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())&( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator |(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())|( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::logic operator ^(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())^( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator >>(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())>>( rhs.operator ap_int_base<_AP_W2, false>()); }
template <int _AP_W, bool _AP_S, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_W, false>::template RType<_AP_W2, false>::arg1 operator <<(const ap_range_ref<_AP_W, _AP_S>& lhs, const ap_range_ref<_AP_W2, _AP_S2>& rhs) { return (lhs.operator ap_int_base<_AP_W, false>())<<( rhs.operator ap_int_base<_AP_W2, false>()); }
# 1177 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::plus operator +( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() + rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::minus operator -( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() - rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mult operator *( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() * rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::div operator /( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() / rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::mod operator %( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() % rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator &( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() & rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator |( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() | rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::logic operator ^( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() ^ rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator >>( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() >> rhs.get(); }
template <int _AP_LW1, typename _AP_LT1, int _AP_LW2, typename _AP_LT2, int _AP_RW1, typename _AP_RT1, int _AP_RW2, typename _AP_RT2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_int_base<_AP_LW1 + _AP_LW2, false>::template RType< _AP_RW1 + _AP_RW2, false>::arg1 operator <<( const ap_concat_ref<_AP_LW1, _AP_LT1, _AP_LW2, _AP_LT2>& lhs, const ap_concat_ref<_AP_RW1, _AP_RT1, _AP_RW2, _AP_RT2>& rhs) { return lhs.get() << rhs.get(); }
# 1324 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 1; ret >>= 1; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); ret <<= 1; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 1, false> operator,( bool op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, bool op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op2); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 1, false> operator,( bool op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<1 + _AP_W + _AP_W2, false> val(op1); ap_int_base<1 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + _AP_W, false> val(op2); ap_int_base<1 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 1; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 1, false> operator,( bool op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + _AP_W, false> val(op1); ap_int_base<1 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 1, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, bool op2) { ap_int_base<1 + 1, false> val(op2); val[1] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 1, false> operator,( bool op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<1 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, char op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op2); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> val(op1); ap_int_base<8 + _AP_W + _AP_W2, CHAR_IS_SIGNED> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (CHAR_IS_SIGNED) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, char op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, CHAR_IS_SIGNED> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, signed char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( signed char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, signed char op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op2); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( signed char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, true> val(op1); ap_int_base<8 + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( signed char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, signed char op2) { ap_int_base<8 + 1, true> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( signed char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); if (_AP_S) { ret <<= 8; ret >>= 8; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); ret <<= 8; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<8 + 1, false> operator,( unsigned char op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned char op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op2); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + 8, false> operator,( unsigned char op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<8 + _AP_W + _AP_W2, false> val(op1); ap_int_base<8 + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + _AP_W, false> val(op2); ap_int_base<8 + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= 8; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + 8, false> operator,( unsigned char op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + _AP_W, false> val(op1); ap_int_base<8 + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned char op2) { ap_int_base<8 + 1, false> val(op2); val[8] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + 8, false> operator,( unsigned char op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<8 + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_short + 1, false> operator,( short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, short op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_short, false> operator,( short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_short; ret >>= _AP_SIZE_short; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); ret <<= _AP_SIZE_short; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_short + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_short + 1, false> operator,( unsigned short op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_short, false> operator,( unsigned short op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_short; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_short, false> operator,( unsigned short op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_short + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_short, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned short op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op2); val[_AP_SIZE_short] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_short, false> operator,( unsigned short op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_short + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_int + 1, false> operator,( int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, int op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_int, false> operator,( int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_int; ret >>= _AP_SIZE_int; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); ret <<= _AP_SIZE_int; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_int + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_int + 1, false> operator,( unsigned int op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_int, false> operator,( unsigned int op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_int; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_int, false> operator,( unsigned int op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_int + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_int, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned int op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op2); val[_AP_SIZE_int] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_int, false> operator,( unsigned int op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_int + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_long + 1, false> operator,( long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, long op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_long, false> operator,( long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_long; ret >>= _AP_SIZE_long; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); ret <<= _AP_SIZE_long; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_long + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_long + 1, false> operator,( unsigned long op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_long, false> operator,( unsigned long op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_long; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_long, false> operator,( unsigned long op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_long + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_long, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, unsigned long op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op2); val[_AP_SIZE_long] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_long, false> operator,( unsigned long op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_long + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (true) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_slong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op1); if (true) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, true> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (true) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_slong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_slong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, true> val(op1); val <<= 1; val[0] = op2; return val; }
template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_int_base<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_int_base<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); if (_AP_S) { ret <<= _AP_SIZE_ap_slong; ret >>= _AP_SIZE_ap_slong; } ret |= val << _AP_W; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const ap_range_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); ret <<= _AP_SIZE_ap_slong; if (false) { val <<= _AP_W; val >>= _AP_W; } ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_range_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( const ap_bit_ref<_AP_W, _AP_S> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, bool _AP_S> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_SIZE_ap_slong + 1, false> operator,( ap_ulong op1, const ap_bit_ref<_AP_W, _AP_S> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op1); if (false) { val <<= _AP_W + _AP_W2; val >>= _AP_W + _AP_W2; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, typename _AP_T, int _AP_W2, typename _AP_T2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_W2 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const ap_concat_ref<_AP_W, _AP_T, _AP_W2, _AP_T2> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W + _AP_W2, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op2); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op1); if (false) { val <<= _AP_W; val >>= _AP_W; } ret <<= _AP_SIZE_ap_slong; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> val(op1); ap_int_base<_AP_SIZE_ap_slong + _AP_W, false> ret(op2); int len = op2.length(); val <<= len; ret |= val; return ret; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op1, ap_ulong op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op2); val[_AP_SIZE_ap_slong] = op1; return val; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<1 + _AP_SIZE_ap_slong, false> operator,( ap_ulong op1, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> &op2) { ap_int_base<_AP_SIZE_ap_slong + 1, false> val(op1); val <<= 1; val[0] = op2; return val; }
# 1348 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_ref.h"
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator <<( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() << int(rhs); }

template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned int rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, unsigned long rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_slong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
template <int _AP_W, typename _AP_T, int _AP_W1, typename _AP_T1> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint<_AP_W + _AP_W1> operator >>( const ap_concat_ref<_AP_W, _AP_T, _AP_W1, _AP_T1> lhs, ap_ulong rhs) { return ap_uint<_AP_W + _AP_W1>(lhs).get() >> int(rhs); }
# 13 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h" 2




template <int _AP_W>
struct ap_int : ap_int_base<_AP_W, true> {
  typedef ap_int_base<_AP_W, true> Base;

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int() {}
  template <int _AP_W2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_int<_AP_W2>& op): Base((ap_int_base<_AP_W2, true>)op){



    op.checkOverflowCsim(_AP_W, true);

    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const volatile ap_int<_AP_W2>& op) {
    const_cast<const ap_int<_AP_W2>& >(op).checkOverflowCsim(_AP_W, true);
    Base::V = op.V;
  }

  template <int _AP_W2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_uint<_AP_W2>& op): Base((ap_int_base<_AP_W2, false>)op){



    op.checkOverflowCsim(_AP_W, true);

    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const volatile ap_uint<_AP_W2>& op) {
    const_cast<const ap_uint<_AP_W2>& >(op).checkOverflowCsim(_AP_W, true);
    Base::V = op.V;
  }




                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned V __attribute__((bitwidth(_AP_W))), bool raw): Base(0) {
    Base::V = V;
    (void)(raw);
  }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op) {

  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}







  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(bool val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(char val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(signed char val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned char val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(short val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned short val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(int val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned int val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(long val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(unsigned long val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(ap_slong val):Base(val){ this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(ap_ulong val):Base(val){ this->checkOverflowBaseC(val); }

                ap_int(double val) : Base(val) {}
                ap_int(float val) : Base(val) {}
  ap_int(half val) : Base(val) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int(const char* s, signed char rd) : Base(s, rd) {}




  ap_int &operator=(const ap_int<_AP_W> &op2) = default;
# 161 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int& operator=(const volatile ap_int<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const ap_int<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const volatile ap_int<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

};




template <int _AP_W>
struct ap_uint : ap_int_base<_AP_W, false> {
  typedef ap_int_base<_AP_W, false> Base;

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint() {}
  template <int _AP_W2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_uint<_AP_W2>& op):Base((ap_int_base<_AP_W2, false>)op) {
    op.checkOverflowCsim(_AP_W, false);

  }

  template <int _AP_W2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_int<_AP_W2>& op):Base((ap_int_base<_AP_W2, true>)op) {
    op.checkOverflowCsim(_AP_W, false);

  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const volatile ap_uint<_AP_W2>& op) {
    const_cast<const ap_uint<_AP_W2>& >(op).checkOverflowCsim(_AP_W, false);
    Base::V = op.V;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const volatile ap_int<_AP_W2>& op) {
    const_cast<const ap_int<_AP_W2>& >(op).checkOverflowCsim(_AP_W, false);
    Base::V = op.V;
  }




                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned V __attribute__((bitwidth(_AP_W))), bool raw):Base(0) {
    Base::V = V;
    (void)(raw);
  }



  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_range_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_bit_ref<_AP_W2, _AP_S2>& ref) : Base(ref) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& ref)
      : Base(ref) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const volatile ap_fixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, true, _AP_Q2, _AP_O2, _AP_N2>)op) {}

  template <int _AP_W2, int _AP_I2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2,
            int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const volatile ap_ufixed<_AP_W2, _AP_I2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base((ap_fixed_base<_AP_W2, _AP_I2, false, _AP_Q2, _AP_O2, _AP_N2>)op) {
  }

  template <int _AP_W2, bool _AP_S2>
                inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op) {

  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}






  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(bool val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(char val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(signed char val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned char val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(short val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned short val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(int val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned int val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(long val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(unsigned long val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(ap_slong val):Base(val) { this->checkOverflowBaseC(val); }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(ap_ulong val):Base(val) { this->checkOverflowBaseC(val); }

                ap_uint(double val) : Base(val) {}
                ap_uint(float val) : Base(val) {}
  ap_uint(half val) : Base(val) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint(const char* s, signed char rd) : Base(s, rd) {}





  ap_uint &operator=(const ap_uint<_AP_W> &op2) = default;
# 317 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_uint& operator=(const volatile ap_uint<_AP_W>& op2) {
    Base::V = op2.V;
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const ap_uint<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const volatile ap_uint<_AP_W>& op2) volatile {
    *((volatile typename Base::Base::DataType *)(&(Base::V))) = op2.V;
  }

};
# 352 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h"
# 1 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_special.h" 1
# 20 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 48 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_special.h"
template <int _AP_W>
class complex<ap_int<_AP_W> > {
 public:
  typedef ap_int<_AP_W> _Tp;
  typedef _Tp value_type;




  __attribute__((nodebug)) complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  __attribute__((nodebug)) complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  __attribute__((nodebug)) complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  __attribute__((nodebug)) const _Tp& real() const { return _M_real; }
  const _Tp& imag() const { return _M_imag; }







  __attribute__((nodebug)) void real(_Tp __val) { _M_real = __val; }

  __attribute__((nodebug)) void imag(_Tp __val) { _M_imag = __val; }



  __attribute__((nodebug)) complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator=(const complex<_Up> &__z) {
    _M_real = __z.real();
    _M_imag = __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 181 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_int_special.h"
template <int _AP_W>
inline __attribute__((nodebug)) bool operator==(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W>
inline __attribute__((nodebug)) bool operator==(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W>
inline __attribute__((nodebug)) bool operator!=(const complex<ap_int<_AP_W> > &__x, const ap_int<_AP_W> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W>
inline __attribute__((nodebug)) bool operator!=(const ap_int<_AP_W> &__x, const complex<ap_int<_AP_W> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 353 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_int.h" 2
# 17 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h" 2
# 87 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
template <int _AP_W2, int _AP_I2, bool _AP_S2>
struct _ap_fixed_factory;
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, true> {
  typedef ap_fixed<_AP_W2, _AP_I2> type;
};
template <int _AP_W2, int _AP_I2>
struct _ap_fixed_factory<_AP_W2, _AP_I2, false> {
  typedef ap_ufixed<_AP_W2, _AP_I2> type;
};
# 108 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct ap_fixed_base : ssdm_int<_AP_W, _AP_S> {
 public:
  typedef ssdm_int<_AP_W, _AP_S> Base;
  static const int width = _AP_W;
  static const int iwidth = _AP_I;
  static const ap_q_mode qmode = _AP_Q;
  static const ap_o_mode omode = _AP_O;


  template <int _AP_W2, int _AP_I2, bool _AP_S2>
  struct RType {
    enum {
      _AP_F = _AP_W - _AP_I,
      F2 = _AP_W2 - _AP_I2,
      mult_w = _AP_W + _AP_W2,
      mult_i = _AP_I + _AP_I2,
      mult_s = _AP_S || _AP_S2,
      plus_w = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
               1 + ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      plus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      plus_s = _AP_S || _AP_S2,
      minus_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1 +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      minus_i =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) + 1,
      minus_s = true,

      div_w = _AP_S2 + _AP_W + ((F2) > (0) ? (F2) : (0)),



      div_i = _AP_S2 + _AP_I + F2,
      div_s = _AP_S || _AP_S2,
      logic_w =
          ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))) +
          ((_AP_F) > (F2) ? (_AP_F) : (F2)),
      logic_i = ((_AP_I + (_AP_S2 && !_AP_S)) > (_AP_I2 + (_AP_S && !_AP_S2)) ? (_AP_I + (_AP_S2 && !_AP_S)) : (_AP_I2 + (_AP_S && !_AP_S2))),
      logic_s = _AP_S || _AP_S2
    };

    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> lhs;
    typedef ap_fixed_base<_AP_W2, _AP_I2, _AP_S2> rhs;

    typedef ap_fixed_base<mult_w, mult_i, mult_s> mult_base;
    typedef ap_fixed_base<plus_w, plus_i, plus_s> plus_base;
    typedef ap_fixed_base<minus_w, minus_i, minus_s> minus_base;
    typedef ap_fixed_base<logic_w, logic_i, logic_s> logic_base;
    typedef ap_fixed_base<div_w, div_i, div_s> div_base;
    typedef ap_fixed_base<_AP_W, _AP_I, _AP_S> arg1_base;

    typedef typename _ap_fixed_factory<mult_w, mult_i, mult_s>::type mult;
    typedef typename _ap_fixed_factory<plus_w, plus_i, plus_s>::type plus;
    typedef typename _ap_fixed_factory<minus_w, minus_i, minus_s>::type minus;
    typedef typename _ap_fixed_factory<logic_w, logic_i, logic_s>::type logic;
    typedef typename _ap_fixed_factory<div_w, div_i, div_s>::type div;
    typedef typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type arg1;
  };

 private:
# 295 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
                      inline __attribute__((always_inline)) __attribute__((nodebug)) void report() {}




                      inline __attribute__((always_inline)) __attribute__((nodebug)) void overflow_adjust(bool underflow, bool overflow, bool lD,
                              bool sign) {
    if (!underflow && !overflow) return;
    if (_AP_O == AP_WRAP) {
      if (_AP_N == 0) return;
      if (_AP_S) {


        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        if (_AP_N > 1) {

          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
      } else {

        ap_int_base<_AP_W, false> mask(-1);
        Base::V =
            ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 1); __Result__; });
      }
    } else if (_AP_O == AP_SAT_ZERO) {
      Base::V = 0;
    } else if (_AP_O == AP_WRAP_SM && _AP_S) {
      bool Ro = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      if (_AP_N == 0) {
        if (lD != Ro) {
          Base::V = ~Base::V;
          Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(lD) __Repl2__ = !!lD; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
        }
      } else {
        if (_AP_N == 1 && sign != Ro) {
          Base::V = ~Base::V;
        } else if (_AP_N > 1) {
          bool lNo = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - _AP_N); __Result__; });
          if (lNo == sign) Base::V = ~Base::V;
          ap_int_base<_AP_W, false> mask(-1);
          if (sign) mask.V = 0;
          Base::V =
              ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(mask.V) __Repl2__ = mask.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - _AP_N, _AP_W - 2); __Result__; });
        }
        Base::V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; typeof(sign) __Repl2__ = !!sign; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), _AP_W - 1, _AP_W - 1); __Result__; });
      }
    } else {
      if (_AP_S) {
        if (overflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          Base::V = ~Base::V;
        } else if (underflow) {
          Base::V = 1;
          Base::V <<= _AP_W - 1;
          if (_AP_O == AP_SAT_SYM) Base::V |= 1;
        }
      } else {
        if (overflow)
          Base::V = ~(ap_int_base<_AP_W, false>(0).V);
        else if (underflow)
          Base::V = 0;
      }
    }
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool quantization_adjust(bool qb, bool r, bool s) {
    bool carry = (bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    if (_AP_Q == AP_TRN) return false;
    if (_AP_Q == AP_RND_ZERO)
      qb &= s || r;
    else if (_AP_Q == AP_RND_MIN_INF)
      qb &= r;
    else if (_AP_Q == AP_RND_INF)
      qb &= !s || r;
    else if (_AP_Q == AP_RND_CONV)
      qb &= ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 0); __Result__; }) || r;
    else if (_AP_Q == AP_TRN_ZERO)
      qb = s && (qb || r);
    Base::V += qb;
    return carry && (!(bool)({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }));
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) int countLeadingOnes() const {




    return 0;

  }

 public:



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op):Base(op.V) {

    operator=(op);



    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_int_base<_AP_W2, _AP_S2>& op):Base(op.V) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp(0);
    tmp.V = op.V;

    operator=(tmp);



    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const volatile ap_int_base<_AP_W2, _AP_S2>& op) {
    ap_fixed_base<_AP_W2, _AP_W2, _AP_S2> tmp;
    tmp.V = op.V;
    operator=(tmp);
    report();
  }
# 458 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const char* s) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), 10, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const char* s, signed char rd) {
    typeof(Base::V) t;
    _ssdm_string2bits((void*)(&t), (const char*)(s), rd, _AP_I, _AP_S, _AP_Q,
                      _AP_O, _AP_N, true);
    Base::V = t;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_bit_ref<_AP_W2, _AP_S2>& op) {
    *this = ((bool)op);
    report();
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_range_ref<_AP_W2, _AP_S2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op) {
    *this = (ap_int_base<_AP_W2 + _AP_W3, false>(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (bool(op));
    report();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    *this = (ap_int_base<_AP_W2, false>(op));
    report();
  }
# 526 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const bool x) { ap_fixed_base<(1), (1), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const char x) { ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const signed char x) { ap_fixed_base<(8), (8), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const unsigned char x) { ap_fixed_base<(8), (8), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const unsigned short x) { ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const unsigned int x) { ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const unsigned long x) { ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_slong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)> tmp; tmp.V = x; *this = tmp; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(const ap_ulong x) { ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)> tmp; tmp.V = x; *this = tmp; }







          __attribute__((nodebug)) ap_fixed_base(double d) {
    ap_int_base<64, false> ireg;
    ireg.V = doubleToRawBits(d);
    bool isneg = ({ typeof(ireg.V) __Val2__ = ireg.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 63); __Result__; });

    ap_int_base<11 + 1, true> exp, bias = ((1 << (11 - 1)) - 1);
    ap_int_base<11, false> exp_tmp;
    exp_tmp.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 52, 52 + 11 - 1); __Result__; });
    exp = exp_tmp - bias;
    ap_int_base<52 + 2, true> man;
    man.V = ({ typename _ap_type::remove_const<typeof(ireg.V)>::type __Result__ = 0; typeof(ireg.V) __Val2__ = ireg.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, 52 - 1); __Result__; });


    (static_cast<void>(0));

    man.V = ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; typeof(1) __Repl2__ = !!1; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52); __Result__; });
    if (isneg) man = -man;
    if ((ireg.V & 0x7fffffffffffffffLL) == 0) {
      Base::V = 0;
    } else {
      int _AP_W2 = 52 + 2, _AP_I2 = exp.V + 2, _AP_F = _AP_W - _AP_I,
          F2 = _AP_W2 - _AP_I2;
      bool _AP_S2 = true,
           QUAN_INC = F2 > _AP_F &&
                      !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));
      bool carry = false;

      unsigned sh_amt = (F2 > _AP_F) ? F2 - _AP_F : _AP_F - F2;
      if (F2 == _AP_F)
        Base::V = man.V;
      else if (F2 > _AP_F) {
        if (sh_amt < 52 + 2)
          Base::V = man.V >> sh_amt;
        else {
          Base::V = isneg ? -1 : 0;
        }
        if ((_AP_Q != AP_TRN) && !((_AP_Q == AP_TRN_ZERO) && !_AP_S2)) {
          bool qb = (F2 - _AP_F > _AP_W2) ? isneg : (bool)({ typeof(man.V) __Val2__ = man.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

          bool r =
              (F2 > _AP_F + 1)
                  ? ({ typename _ap_type::remove_const<typeof(man.V)>::type __Result__ = 0; typeof(man.V) __Val2__ = man.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, (F2 - _AP_F - 2 < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1)); __Result__; }) != 0


                  : false;
          carry = quantization_adjust(qb, r, isneg);
        }
      } else {
        Base::V = man.V;
        if (sh_amt < _AP_W)
          Base::V = Base::V << sh_amt;
        else
          Base::V = 0;
      }

      if ((_AP_O != AP_WRAP || _AP_N != 0) &&
          ((!_AP_S && _AP_S2) ||
           _AP_I - _AP_S <
               _AP_I2 - _AP_S2 +
                   (QUAN_INC ||
                    (_AP_S2 && (_AP_O == AP_SAT_SYM))))) {
        bool deleted_zeros = _AP_S2 ? true : !carry, deleted_ones = true;
        bool neg_src = isneg;
        bool lD = false;
        int pos1 = F2 - _AP_F + _AP_W;
        int pos2 = F2 - _AP_F + _AP_W + 1;
        bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
        if (pos1 < _AP_W2 && pos1 >= 0)

          lD = (man.V >> pos1) & 1;
        if (pos1 < _AP_W2) {
          bool Range1_all_ones = true;
          bool Range1_all_zeros = true;
          bool Range2_all_ones = true;
          ap_int_base<52 + 2, false> Range2;
          ap_int_base<52 + 2, false> all_ones(-1);

          if (pos2 >= 0 && pos2 < _AP_W2) {


            Range2.V = man.V;
            Range2.V >>= pos2;
            Range2_all_ones = Range2 == (all_ones >> pos2);
          } else if (pos2 < 0)
            Range2_all_ones = false;
          if (pos1 >= 0 && pos2 < _AP_W2) {
            Range1_all_ones = Range2_all_ones && lD;
            Range1_all_zeros = !Range2.V && !lD;
          } else if (pos2 == _AP_W2) {
            Range1_all_ones = lD;
            Range1_all_zeros = !lD;
          } else if (pos1 < 0) {
            Range1_all_zeros = !man.V;
            Range1_all_ones = false;
          }

          deleted_zeros =
              deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
          deleted_ones =
              carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
          neg_src = isneg && !(carry && Range1_all_ones);
        } else
          neg_src = isneg && newsignbit;
        bool neg_trg = _AP_S && newsignbit;
        bool overflow = (neg_trg || !deleted_zeros) && !isneg;
        bool underflow = (!neg_trg || !deleted_ones) && neg_src;
        if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
          underflow |=
              neg_src &&
              (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                         : true);
        overflow_adjust(underflow, overflow, lD, neg_src);
      }
    }
    report();
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(float d) { *this = ap_fixed_base(double(d)); }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base(half d) { *this = ap_fixed_base(double(d)); }
# 800 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {

    const int _AP_F = _AP_W - _AP_I;
    const int F2 = _AP_W2 - _AP_I2;
    const int QUAN_INC =
          F2 > _AP_F && !(_AP_Q == AP_TRN || (_AP_Q == AP_TRN_ZERO && !_AP_S2));

    if (!op) Base::V = 0;
    bool carry = false;
    bool signbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W2 - 1); __Result__; });
    bool isneg = signbit && _AP_S2;
    if (F2 == _AP_F)
      Base::V = op.V;
    else if (F2 > _AP_F) {
      unsigned int sh_amt = F2 - _AP_F;

      if (sh_amt < _AP_W2) {
        Base::V = op.V >> sh_amt;
      } else {
        Base::V = isneg ? -1 : 0;
      }
      if (_AP_Q != AP_TRN && !(_AP_Q == AP_TRN_ZERO && !_AP_S2)) {
        bool qbit = ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), F2 - _AP_F - 1); __Result__; });

        bool qb = (F2 - _AP_F > _AP_W2) ? _AP_S2 && signbit : qbit;
        enum { hi = ((F2 - _AP_F - 2) < _AP_W2) ? (F2 - _AP_F - 2) : (_AP_W2 - 1) };

        bool r = (F2 > _AP_F + 1) ? (({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, hi); __Result__; }) != 0) : false;
        carry = quantization_adjust(qb, r, isneg);
      }
    } else {
      unsigned sh_amt = _AP_F - F2;

      if (sh_amt < _AP_W) {
        if (_AP_W > _AP_W2) {

          Base::V = op.V;
          Base::V <<= sh_amt;
        } else {

          Base::V = op.V << sh_amt;
        }
      } else {
        Base::V = 0;
      }
    }

    if ((_AP_O != AP_WRAP || _AP_N != 0) &&
        ((!_AP_S && _AP_S2) ||
         _AP_I - _AP_S <
             _AP_I2 - _AP_S2 +
                 (QUAN_INC || (_AP_S2 && _AP_O == AP_SAT_SYM)))) {
      bool deleted_zeros = _AP_S2 ? true : !carry;
      bool deleted_ones = true;
      bool neg_src = isneg;
      bool newsignbit = ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
      enum { pos1 = F2 - _AP_F + _AP_W, pos2 = F2 - _AP_F + _AP_W + 1 };
      bool lD = (pos1 < _AP_W2 && pos1 >= 0) ? ({ typeof(op.V) __Val2__ = op.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), pos1); __Result__; })
                                             : false;
      if (pos1 < _AP_W2) {
        bool Range1_all_ones = true;
        bool Range1_all_zeros = true;
        bool Range2_all_ones = true;
        ap_int_base<_AP_W2, false> all_ones(-1);

        if (pos2 < _AP_W2 && pos2 >= 0) {
          ap_int_base<_AP_W2, false> Range2(0);
          Range2.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos2, _AP_W2 - 1); __Result__; });
          Range2_all_ones = Range2 == (all_ones >> pos2);
        } else if (pos2 < 0) {
          Range2_all_ones = false;
        }

        if (pos1 >= 0 && pos2 < _AP_W2) {
          ap_int_base<_AP_W2, false> Range1(0);
          Range1.V = ({ typename _ap_type::remove_const<typeof(op.V)>::type __Result__ = 0; typeof(op.V) __Val2__ = op.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), pos1, _AP_W2 - 1); __Result__; });
          Range1_all_ones = Range1 == (all_ones >> pos1);
          Range1_all_zeros = !Range1.V;
        } else if (pos2 == _AP_W2) {
          Range1_all_ones = lD;
          Range1_all_zeros = !lD;
        } else if (pos1 < 0) {
          Range1_all_zeros = !op.V;
          Range1_all_ones = false;
        }

        deleted_zeros =
            deleted_zeros && (carry ? Range1_all_ones : Range1_all_zeros);
        deleted_ones =
            carry ? Range2_all_ones && (pos1 < 0 || !lD) : Range1_all_ones;
        neg_src = isneg && !(carry && Range1_all_ones);
      } else
        neg_src = isneg && newsignbit;
      bool neg_trg = _AP_S && newsignbit;
      bool overflow = (neg_trg || !deleted_zeros) && !isneg;
      bool underflow = (!neg_trg || !deleted_ones) && neg_src;
      if ((_AP_O == AP_SAT_SYM) && _AP_S2 && _AP_S)
        underflow |=
            neg_src &&
            (_AP_W > 1 ? ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 2); __Result__; }) == 0
                       : true);

      overflow_adjust(underflow, overflow, lD, neg_src);
    }
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator=(
      const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    operator=(const_cast<const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(op));
    return *this;
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& setBits(ap_ulong bv) {

    Base::V = bv;
    return *this;
  }


  static inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base bitsToFixed(ap_ulong bv) {

    ap_fixed_base t;

    t.V = bv;



    return t;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) void checkOverflowCsimFix(int _ap_w2, bool _ap_s2) const {
# 973 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
      (void)_ap_w2;
      (void)_ap_s2;

      return;
  }





                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> to_ap_int_base(
      bool Cnative = true) const {
    ap_int_base<((_AP_I) > (1) ? (_AP_I) : (1)), _AP_S> ret(0);
    if (_AP_I == 0) {
      ret.V = 0;
    } else if (_AP_I > 0 && _AP_I <= _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), _AP_W - _AP_I, _AP_W - 1); __Result__; });
    } else if (_AP_I > _AP_W) {
      ret.V = ({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_W - 1); __Result__; });
      ret.V <<= (_AP_I - _AP_W);
    }
# 1002 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
    if (Cnative && _AP_I < _AP_W) {

      if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; }) && (_AP_I < _AP_W) &&
          (({ typename _ap_type::remove_const<typeof(Base::V)>::type __Result__ = 0; typeof(Base::V) __Val2__ = Base::V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, _AP_I < 0 ? _AP_W - 1 : _AP_W - _AP_I - 1); __Result__; }) != (unsigned long)0))


        ret = ret + 1;
    } else {

    }
    return ret;
  };

 public:
  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_int_base<_AP_W2, _AP_S2>() const {
    return ap_int_base<_AP_W2, _AP_S2>(to_ap_int_base());
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) char to_char() const { return to_ap_int_base().to_char(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int to_int() const { return to_ap_int_base().to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned to_uint() const { return to_ap_int_base().to_uint(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_slong to_int64() const { return to_ap_int_base().to_int64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ulong to_uint64() const { return to_ap_int_base().to_uint64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int<_AP_I> to_ap_int() const { return ap_int<_AP_I>(to_ap_int_base()); }



  inline __attribute__((always_inline)) __attribute__((nodebug)) double to_double() const {




    enum { BITS = 52 + 11 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp(0);
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1 << (11 - 1)) - 1);
    int lsb_index = _AP_W - l - 1 - 52;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    ap_ulong m = 0;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (ap_ulong)(tmp.V >> (lsb_index - 1))
                           : (ap_ulong)(tmp.V << (1 - lsb_index));
    } else {
      m = (ap_ulong)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;


    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 52 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 52, 52 + 11 - 1); __Result__; });


    return rawBitsToDouble(m);
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) float to_float() const {




    enum { BITS = 23 + 8 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1 << (8 - 1)) - 1);
    int lsb_index = _AP_W - l - 1 - 23;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned long m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned long)(tmp.V >> (lsb_index - 1))
                           : (unsigned long)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned long)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 23 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 23, 23 + 8 - 1); __Result__; });

    return rawBitsToFloat(m);
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) half to_half() const {




    enum { BITS = 10 + 5 + 1 };
    if (!Base::V) return 0.0f;
    bool s = _AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; });
    ap_int_base<_AP_W, false> tmp;
    if (s)
      tmp.V = -Base::V;
    else
      tmp.V = Base::V;
    int l = tmp.countLeadingZeros();
    int e = _AP_I - l - 1 + ((1 << (5 - 1)) - 1);
    int lsb_index = _AP_W - l - 1 - 10;

    bool a = (lsb_index >=2) ?
        (({ typename _ap_type::remove_const<typeof(tmp.V)>::type __Result__ = 0; typeof(tmp.V) __Val2__ = tmp.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), 0, lsb_index - 2); __Result__; }) != 0) : 0;

    a |= (lsb_index >=0) ? ({ typeof(tmp.V) __Val2__ = tmp.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), lsb_index); __Result__; }) : 0;

    unsigned short m;

    if (_AP_W > BITS) {
      m = (lsb_index >= 1) ? (unsigned short)(tmp.V >> (lsb_index - 1))
                           : (unsigned short)(tmp.V << (1 - lsb_index));
    } else {
      m = (unsigned short)tmp.V;
      m = (lsb_index >= 1) ? (m >> (lsb_index - 1))
                           : (m << (1 - lsb_index));
    }
    m += a;
    m >>= 1;

    if (({ typeof(m) __Val2__ = m; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), 10 + 1); __Result__; })) {
      e += 1;
    }

    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(s) __Repl2__ = !!s; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), BITS - 1, BITS - 1); __Result__; });
    m = ({ typename _ap_type::remove_const<typeof(m)>::type __Result__ = 0; typeof(m) __Val2__ = m; typeof(e) __Repl2__ = e; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), 10, 10 + 5 - 1); __Result__; });

    return rawBitsToHalf(m);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) operator long double() const { return (long double)to_double(); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator double() const { return to_double(); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator float() const { return to_float(); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator half() const { return to_half(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator bool() const { return (bool)Base::V != 0; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator char() const { return (char)to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator signed char() const { return (signed char)to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator unsigned char() const { return (unsigned char)to_uint(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator short() const { return (short)to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator unsigned short() const { return (unsigned short)to_uint(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator int() const { return to_int(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator unsigned int() const { return to_uint(); }



                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator long() const { return (long)to_int64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator unsigned long() const { return (unsigned long)to_uint64(); }






                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_ulong() const { return to_uint64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_slong() const { return to_int64(); }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return _AP_W; };
# 1231 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
                      inline __attribute__((always_inline)) __attribute__((nodebug)) int countLeadingZeros() const {


    if (_AP_W <= 32) {
      ap_int_base<32, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctz(t.V);
    } else if (_AP_W <= 64) {
      ap_int_base<64, false> t(-1ULL);
      t.range(_AP_W - 1, 0) = this->range(0, _AP_W - 1);
      return __builtin_ctzll(t.V);
    } else {
      enum {__N = (_AP_W + 63) / 64};
      int NZeros = 0;
      int i = 0;
      bool hitNonZero = false;
      VITIS_LOOP_1247_1: for (i = 0; i < __N - 1; ++i) {
        ap_int_base<64, false> t;
        t.range(0, 63) = this->range(_AP_W - i * 64 - 64, _AP_W - i * 64 - 1);
        NZeros += hitNonZero ? 0 : __builtin_clzll(t.V);
        hitNonZero |= (t != 0);
      }
      if (!hitNonZero) {
        ap_int_base<64, false> t(-1ULL);
        t.range(63 - (_AP_W - 1) % 64, 63) = this->range(0, (_AP_W - 1) % 64);
        NZeros += __builtin_clzll(t.V);
      }
      return NZeros;
    }



  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::mult operator*(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::mult_base r(0), t(0);
    r.V = Base::V;
    t.V = op2.V;
    r.V *= op2.V;
    return r;
  }



  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::div operator/(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2)
      const {
    typename RType<_AP_W2, _AP_I2, _AP_S2>::div_base r;
# 1301 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
        ap_fixed_base<_AP_W + ((_AP_W2 - _AP_I2) > (0) ? (_AP_W2 - _AP_I2) : (0)),_AP_I, _AP_S> t(*this);



        r.V = t.V / op2.V;
# 1334 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
    return r;
  }
# 1349 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::plus_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V + rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::minus_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V - rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V & rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V | rhs.V; return ret; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename RType<_AP_W2, _AP_I2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { typename RType<_AP_W2, _AP_I2, _AP_S2>::logic_base ret(0), lhs(*this), rhs(op2); ret.V = lhs.V ^ rhs.V; return ret; }
# 1367 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator *=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator *(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator /=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator /(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator +=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator +(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator -=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator -(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator &=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator &(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator |=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator |(op2); return *this; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator ^=( const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) { *this = operator ^(op2); return *this; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator++() {
    operator+=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator--() {
    operator-=(ap_fixed_base<_AP_W - _AP_I + 1, 1, false>(1));
    return *this;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) const ap_fixed_base operator++(int) {
    ap_fixed_base r(*this);
    operator++();
    return r;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) const ap_fixed_base operator--(int) {
    ap_fixed_base r(*this);
    operator--();
    return r;
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) typename _ap_fixed_factory<_AP_W, _AP_I, _AP_S>::type operator+() { return *this; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) typename _ap_fixed_factory<_AP_W + 1, _AP_I + 1, true>::type operator-() const {
    ap_fixed_base<_AP_W + 1, _AP_I + 1, true> r(*this);
    r.V = -r.V;
    return r;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> getNeg() {
    ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> r(*this);
    r.V = -r.V;
    return r;
  }



                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!() const { return Base::V == (unsigned long)0; }




                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S> operator~() const {
    ap_fixed_base<_AP_W, _AP_I, _AP_S> r(0);
    r.V = ~Base::V;
    return r;
  }




  template <int _AP_SHIFT>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> lshift() const {
    ap_fixed_base<_AP_W, _AP_I + _AP_SHIFT, _AP_S> r(0);
    r.V = Base::V;
    return r;
  }

  template <int _AP_SHIFT>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> rshift() const {
    ap_fixed_base<_AP_W, _AP_I - _AP_SHIFT, _AP_S> r(0);
    r.V = Base::V;
    return r;
  }





                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(unsigned int sh) const {
    ap_fixed_base r(0);
    r.V = Base::V << sh;
# 1485 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
    return r;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(unsigned int sh) const {
    ap_fixed_base r(0);
    r.V = Base::V >> sh;
# 1507 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
    return r;
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(int sh) const {
    ap_fixed_base r(0);
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator>>(ush);
    } else {
      return operator<<(ush);
    }
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(int sh) const {
    bool isNeg = sh < 0;
    unsigned int ush = isNeg ? -sh : sh;
    if (isNeg) {
      return operator<<(ush);
    } else {
      return operator>>(ush);
    }
  }


  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, true>& op2) const {


    int sh = op2.to_int();
    return operator<<(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, true>& op2) const {
    int sh = op2.to_int();
    return operator>>(sh);
  }


  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator<<(sh);
  }

  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(const ap_int_base<_AP_W2, false>& op2) const {
    unsigned int sh = op2.to_uint();
    return operator>>(sh);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator<<(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator<<(op2.to_ap_int_base());
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base operator>>(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          op2) {
    return operator>>(op2.to_ap_int_base());
  }





                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator<<=(const int sh) {
    *this = operator<<(sh);
    return *this;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator<<=(const unsigned int sh) {
    *this = operator<<(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator<<=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator<<=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator<<(sh.to_int());
    return *this;
  }


                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator>>=(const int sh) {
    *this = operator>>(sh);
    return *this;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator>>=(const unsigned int sh) {
    *this = operator>>(sh);
    return *this;
  }

  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator>>=(const ap_int_base<_AP_W2, _AP_S2>& sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base& operator>>=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          sh) {
    *this = operator>>(sh.to_int());
    return *this;
  }
# 1651 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V > op2.V; else if (_AP_F > F2) return Base::V > ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V > op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V < op2.V; else if (_AP_F > F2) return Base::V < ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V < op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V >= op2.V; else if (_AP_F > F2) return Base::V >= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V >= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V <= op2.V; else if (_AP_F > F2) return Base::V <= ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V <= op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V == op2.V; else if (_AP_F > F2) return Base::V == ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V == op2.V; return false; }
  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2, ap_o_mode _AP_O2, int _AP_N2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) const { enum { _AP_F = _AP_W - _AP_I, F2 = _AP_W2 - _AP_I2 }; if (_AP_F == F2) return Base::V != op2.V; else if (_AP_F > F2) return Base::V != ap_fixed_base<((_AP_W2 + _AP_F - F2) > (1) ? (_AP_W2 + _AP_F - F2) : (1)), _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>(op2).V; else return ap_fixed_base<((_AP_W + F2 - _AP_F + 1) > (1) ? (_AP_W + F2 - _AP_F + 1) : (1)), _AP_I + 1, _AP_S, _AP_Q, _AP_O, _AP_N>(*this).V != op2.V; return false; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >(double d) const { return to_double() > d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <(double d) const { return to_double() < d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=(double d) const { return to_double() >= d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=(double d) const { return to_double() <= d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==(double d) const { return to_double() == d; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=(double d) const { return to_double() != d; }


  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator[](
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator[](unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      unsigned index) {
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, index);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> bit(
      const ap_int_base<_AP_W2, _AP_S2>& index) {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this,
                                                                index.to_int());
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool bit(unsigned index) const {
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index); __Result__; });
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> get_bit(
      const ap_int_base<_AP_W2, true>& index) {
    (static_cast<void>(0));

    (static_cast<void>(0));
    return af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        this, index.to_int() + _AP_W - _AP_I);
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool get_bit(int index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index + _AP_W - _AP_I); __Result__; });

  }
# 1737 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
  template <int _AP_W2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool get_bit(const ap_int_base<_AP_W2, true>& index) const {
    (static_cast<void>(0));
    (static_cast<void>(0));
    return ({ typeof(const_cast<ap_fixed_base*>(this)->V) __Val2__ = const_cast<ap_fixed_base*>(this)->V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), index.to_int() + _AP_W - _AP_I); __Result__; });

  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(int Hi,
                                                                      int Lo) {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(this, Hi, Lo);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      int Hi, int Lo) const {
    (static_cast<void>(0));
    return af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>(
        const_cast<ap_fixed_base*>(this), Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> range() const {
    return this->range(_AP_W - 1, 0);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) {
    return this->range(Hi, Lo);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      int Hi, int Lo) const {
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

  template <int _AP_W2, bool _AP_S2, int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> operator()(
      const ap_int_base<_AP_W2, _AP_S2>& HiIdx,
      const ap_int_base<_AP_W3, _AP_S3>& LoIdx) const {
    int Hi = HiIdx.to_int();
    int Lo = LoIdx.to_int();
    return this->range(Hi, Lo);
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool is_zero() const { return Base::V == (unsigned long)0; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) bool is_neg() const {
    if (_AP_S && ({ typeof(Base::V) __Val2__ = Base::V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), _AP_W - 1); __Result__; })) return true;
    return false;
  }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int wl() const { return _AP_W; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int iwl() const { return _AP_I; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_q_mode q_mode() const { return _AP_Q; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_o_mode o_mode() const { return _AP_O; }

                      inline __attribute__((always_inline)) __attribute__((nodebug)) int n_bits() const { return _AP_N; }
# 1920 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string(unsigned char radix = 2, bool sign = _AP_S) const {
    (void)(radix);
    (void)(sign);
    return 0;
  }

};

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void b_not(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) {
  ret.V = ~op.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void b_and(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V & op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void b_or(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V | op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void b_xor(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  ret.V = op1.V ^ op2.V;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void neg(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
  ap_fixed_base<_AP_W2 + !_AP_S2, _AP_I2 + !_AP_S2, true, _AP_Q2, _AP_O2,
                _AP_N2>
      t(0);
  t.V = -op.V;
  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void lshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F2 = _AP_W2 - _AP_I2,
    _AP_I3 = ((_AP_I) > (_AP_I2) ? (_AP_I) : (_AP_I2)),
    _AP_W3 = _AP_I3 + F2,
  };

  ap_fixed_base<_AP_W3, _AP_I3, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t(0);
  t.V = op.V;
  t.V <<= i;

  ret = t;
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N, int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
          ap_o_mode _AP_O2, int _AP_N2>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) void rshift(
    ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ret,
    const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op,
    int i) {
  enum {
    F = _AP_W - _AP_I,
    F2 = _AP_W2 - _AP_I2,
    F3 = ((F) > (F2) ? (F) : (F2)),
    _AP_W3 = _AP_I2 + F3,
    sh = F - F2,
  };

  ap_fixed_base<_AP_W3, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> t(0);
  t.V = op.V;
  if (sh >= 0)
    t.V <<= (int) sh;
  t.V >>= i;

  ret = t;
}
# 2372 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::plus operator +( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::minus operator -( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::mult operator *( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::div operator /( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator &( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator |( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::logic operator ^( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (1), (1), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator +=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator -=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator *=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator /=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator &=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator |=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ^=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >>=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <<=(ap_int_base<(1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator >=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator <=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator ==(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool i_op) { return op.operator !=(ap_fixed_base<(1), (1), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( bool i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(1), (1), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::plus operator +( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::minus operator -( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::mult operator *( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::div operator /( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator &( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator |( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::logic operator ^( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (CHAR_IS_SIGNED)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >>=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <<=(ap_int_base<(8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (CHAR_IS_SIGNED)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::plus operator +( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::minus operator -( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::mult operator *( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::div operator /( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator &( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator |( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::logic operator ^( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >>=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <<=(ap_int_base<(8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( signed char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::plus operator +( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::minus operator -( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::mult operator *( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::div operator /( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator &( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator |( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::logic operator ^( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (8), (8), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator +=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator -=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator *=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator /=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator &=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator |=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ^=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >>=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <<=(ap_int_base<(8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator >=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator <=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator ==(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char i_op) { return op.operator !=(ap_fixed_base<(8), (8), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned char i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(8), (8), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::plus operator +( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::minus operator -( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::mult operator *( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::div operator /( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator &( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator |( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::logic operator ^( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::plus operator +( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::minus operator -( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::mult operator *( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::div operator /( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator &( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator |( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::logic operator ^( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_short), (_AP_SIZE_short), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned short i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_short), (_AP_SIZE_short), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::plus operator +( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::minus operator -( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::mult operator *( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::div operator /( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator &( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator |( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::logic operator ^( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::plus operator +( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::minus operator -( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::mult operator *( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::div operator /( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator &( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator |( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::logic operator ^( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_int), (_AP_SIZE_int), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned int i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_int), (_AP_SIZE_int), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::plus operator +( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::minus operator -( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::mult operator *( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::div operator /( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator &( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator |( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::logic operator ^( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::plus operator +( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::minus operator -( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::mult operator *( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::div operator /( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator &( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator |( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::logic operator ^( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_long), (_AP_SIZE_long), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned long i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_long), (_AP_SIZE_long), (false)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::plus operator +( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::minus operator -( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::mult operator *( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::div operator /( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator &( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator |( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::logic operator ^( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_slong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (true)>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::plus operator +( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::minus operator -( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::mult operator *( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::div operator /( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator &( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator |( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::logic operator ^( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator >>( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< (_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>::lhs operator <<( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator +=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator -=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator *=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator /=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator &=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator |=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ^=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator >>=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >>=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator <<=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <<=(ap_int_base<(_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator >=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator >=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator <=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator <=(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator ==(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator ==(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong i_op) { return op.operator !=(ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_ulong i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<(_AP_SIZE_ap_slong), (_AP_SIZE_ap_slong), (false)>(i_op).operator !=(op); }
# 2460 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_base.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::plus operator +( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator +(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::plus operator +( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::minus operator -( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator -(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::minus operator -( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::mult operator *( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator *(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::mult operator *( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::div operator /( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator /(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::div operator /( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator &( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator &(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator &( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator |( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator |(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator |( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>::template RType< _AP_W, _AP_I, _AP_S>::logic operator ^( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ^(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) typename ap_fixed_base<_AP_W, _AP_I, _AP_S>::template RType< _AP_W2, _AP_W2, _AP_S2>::logic operator ^( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator +=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator +=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator +=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator +=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator -=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator -=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator -=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator -=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator *=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator *=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator *=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator *=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator /=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator /=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator /=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator /=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator &=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator &=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator &=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator &=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator |=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator |=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator |=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator |=(op.to_ap_int_base()); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& operator ^=( ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ^=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W2, _AP_S2>& operator ^=( ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return i_op.operator ^=(op.to_ap_int_base()); }



template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator ==(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator ==(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator !=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator !=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator >=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator >=(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& i_op) { return op.operator <=(ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op)); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& i_op, const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_fixed_base<_AP_W2, _AP_W2, _AP_S2>(i_op).operator <=(op); }




template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator==(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator!=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator<=(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>(op1);
}

template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
                    inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(
    double op1,
    const ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op2) {
  return op2.operator>=(op1);
}
# 11 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h" 2
# 1 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h" 1
# 25 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_bit_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int d_index;

 public:
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref(
      const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), d_index(ref.d_index) {






  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref(ref_type* bv, int index = 0) : d_bv(*bv), d_index(index) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref(const ref_type* bv, int index = 0)
      : d_bv(*const_cast<ref_type*>(bv)), d_index(index) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) operator bool() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }



  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(bool val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val) __Repl2__ = !!val; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), d_index, d_index); __Result__; });
    return *this;
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(const af_bit_ref& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    return operator=(bool(val));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(const ap_int_base<_AP_W2, _AP_S2>& val) {
    return operator=(val != 0);
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    return operator=(ap_int_base<_AP_W2, false>(val));
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_bit_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    return operator=(ap_int_base<_AP_W2 + _AP_W3, false>(val));
  }




  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
  operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> > operator,(
      const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(*this,
                                                                        op);
  }

  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >(
        *this, op);
  }

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<1, af_bit_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(*this,
                                                                         op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<
      1, af_bit_ref, _AP_W2,
      af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        1, af_bit_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(*this,
                                                                       op);
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                    _AP_Q2, _AP_O2, _AP_N2> >
  operator,(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<1, af_bit_ref, 1, af_bit_ref<_AP_W2, _AP_I2, _AP_S2,
                                                      _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() == op.get();
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op) {
    return get() != op.get();
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator~() const {
    bool bit = ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; });
    return bit ? false : true;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) bool get() const { return ({ typeof(d_bv.V) __Val2__ = d_bv.V; bool __Result__ = __builtin_bit_select((void*)(&__Val2__), d_index); __Result__; }); }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const { return 1; }





  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string() const { return 0; }

};
# 212 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O,
          int _AP_N>
struct af_range_ref {



  typedef ap_fixed_base<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N> ref_type;
  ref_type& d_bv;
  int l_index;
  int h_index;

 public:

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref(
      const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& ref)
      : d_bv(ref.d_bv), l_index(ref.l_index), h_index(ref.h_index) {}




  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref(ref_type* bv, int h, int l)
      : d_bv(*bv), l_index(l), h_index(h) {
# 242 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h"
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref(const ref_type* bv, int h, int l)
      : d_bv(*const_cast<ref_type*>(bv)), l_index(l), h_index(h) {
# 254 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h"
  }
# 266 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const bool val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const signed char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const unsigned char val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const unsigned short val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const unsigned int val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const unsigned long val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_slong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_ulong val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const half val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const float val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const double val) { ap_int_base<_AP_W, false> loc(val); d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(loc.V) __Repl2__ = loc.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; }); return *this; }



  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const char* val) {
    const ap_int_base<_AP_W, false> tmp(val);
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(tmp.V) __Repl2__ = tmp.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }



  template <int _AP_W3, bool _AP_S3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_int_base<_AP_W3, _AP_S3>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_range_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const ap_bit_ref<_AP_W2, _AP_S2>& val) {
    const ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(
      const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&
          val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
    return *this;
  }




  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(const af_range_ref& val) {
    ap_int_base<_AP_W, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<_AP_W2, false> tmp(val);
    return operator=(tmp);
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& val) {
    ap_int_base<1, false> tmp((bool)val);
    return operator=(tmp);
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) af_range_ref& operator=(
      const ap_concat_ref<_AP_W2, _AP_T3, _AP_W3, _AP_T3>& val) {
    const ap_int_base<_AP_W2 + _AP_W3, false> tmp(val);
    return operator=(tmp);
  }




  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(const ap_range_ref<_AP_W2, _AP_S2>& op2) {
    return !(operator<(op2));
  }




  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator==(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop == rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator!=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator==(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop < rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    ap_int_base<_AP_W, false> lop(*this);
    ap_int_base<_AP_W2, false> rop(op2);
    return lop > rop;
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator<=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator>(op2));
  }

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator>=(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op2) {
    return !(operator<(op2));
  }





  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_int_base<_AP_W2, _AP_S2> >
      operator,(ap_int_base<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_int_base<_AP_W2, _AP_S2> >(*this, op);
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >
  operator,(const ap_bit_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, 1, ap_bit_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_bit_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, int _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2, ap_range_ref<_AP_W2, _AP_S2> >
  operator,(const ap_range_ref<_AP_W2, _AP_S2> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                         ap_range_ref<_AP_W2, _AP_S2> >(
        *this, const_cast<ap_range_ref<_AP_W2, _AP_S2>&>(op));
  }


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                       ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >
  operator,(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> &op) {
    return ap_concat_ref<_AP_W, af_range_ref, _AP_W2 + _AP_W3,
                         ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3> >(
        *this, const_cast<ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>&>(op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, af_range_ref, _AP_W2,
                    af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>
                    &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, _AP_W2,
        af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug))
      ap_concat_ref<_AP_W, af_range_ref, 1,
                    af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >
      operator,(
          const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> &op) {
    return ap_concat_ref<
        _AP_W, af_range_ref, 1,
        af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2> >(
        *this,
        const_cast<af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>&>(
            op));
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_ulong() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret.to_uint64();
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) operator ap_int_base<_AP_W, false>() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> to_ap_int_base() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) char to_char() const {
    return (char)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int to_int() const {
    return (int)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned to_uint() const {
    return (unsigned)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) long to_long() const {
    return (long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) unsigned long to_ulong() const {
    return (unsigned long)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_slong to_int64() const {
    return (ap_slong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ulong to_uint64() const {
    return (ap_ulong)(({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; }));
  }



  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator~() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (~ret);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator!() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (!ret);
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator+() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> operator-() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return (-ret);
  }


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_int_base<_AP_W, false> get() const {
    ap_int_base<_AP_W, false> ret;
    ret.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; __builtin_bit_part_select((void*)(&__Result__), (void*)(&__Val2__), l_index, h_index); __Result__; });
    return ret;
  }

  template <int _AP_W2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) void set(const ap_int_base<_AP_W2, false>& val) {
    d_bv.V = ({ typename _ap_type::remove_const<typeof(d_bv.V)>::type __Result__ = 0; typeof(d_bv.V) __Val2__ = d_bv.V; typeof(val.V) __Repl2__ = val.V; __builtin_bit_part_set((void*)(&__Result__), (void*)(&__Val2__), (void*)(&__Repl2__), l_index, h_index); __Result__; });
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) int length() const {
    return h_index >= l_index ? h_index - l_index + 1 : l_index - h_index + 1;
  }
# 615 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) char* to_string(signed char rd = 2) const {
     (void)(rd);
    return 0;
  }

};
# 679 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(1), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( bool op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(1), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, bool op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( bool op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (CHAR_IS_SIGNED)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (CHAR_IS_SIGNED)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( signed char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, signed char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( signed char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(8), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned char op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(8), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned char op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned char op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_short), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned short op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_short), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned short op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned short op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_int), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned int op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_int), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned int op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned int op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_long), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned long op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_long), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, unsigned long op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( unsigned long op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_slong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (true)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_slong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_slong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) > ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) < ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) >= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) <= ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) == ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == bool(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return ap_int_base<_AP_W, false>(op) != ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_ulong op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return ap_int_base<(_AP_SIZE_ap_slong), (false)>(op2) != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, ap_ulong op2) { return bool(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( ap_ulong op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != bool(op); }
# 725 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_ref.h"
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) > op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 > ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) < op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 < ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) >= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator >=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 >= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) <= op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator <=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 <= ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) == op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator ==( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 == ap_int_base<1, false>(op); }
template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S>& op2) { return ap_int_base<_AP_W, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_range_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<_AP_W, false>(op); } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op, const ap_int_base<_AP_W2, _AP_S2>& op2) { return ap_int_base<1, false>(op) != op2; } template <int _AP_W, int _AP_I, bool _AP_S, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N, int _AP_W2, bool _AP_S2> inline __attribute__((always_inline)) __attribute__((nodebug)) bool operator !=( const ap_int_base<_AP_W2, _AP_S2>& op2, const af_bit_ref<_AP_W, _AP_I, _AP_S, _AP_Q, _AP_O, _AP_N>& op) { return op2 != ap_int_base<1, false>(op); }
# 12 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h" 2





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_fixed : ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, true, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                      _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                               _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 66 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }
# 101 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}


  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}





                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(bool v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(signed char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(short v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned short v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(int v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned int v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(long v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(unsigned long v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(ap_slong v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed(const char* s, signed char rd) : Base(s, rd) {}







  ap_fixed &
  operator=(const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &op) = default;
# 168 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_fixed& operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const volatile ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }
};





template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
struct ap_ufixed : ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> {
  typedef ap_fixed_base<_AP_W, _AP_I, false, _AP_Q, _AP_O, _AP_N> Base;


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed() : Base() {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                       _AP_O2, _AP_N2>& op)
      : Base(op) {}


  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const volatile ap_fixed_base<_AP_W2, _AP_I2, _AP_S2, _AP_Q2,
                                                _AP_O2, _AP_N2>& op)
      : Base(op) {}
# 237 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const volatile ap_int_base<_AP_W2, _AP_S2>& op) : Base(op) {}




  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned V __attribute__((bitwidth(_AP_W))), bool raw) {
    Base::V = V;
    (void)(raw);
  }
# 269 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h"
  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_bit_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, bool _AP_S2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_range_ref<_AP_W2, _AP_S2>& op) : Base(op) {}

  template <int _AP_W2, typename _AP_T2, int _AP_W3, typename _AP_T3>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const ap_concat_ref<_AP_W2, _AP_T2, _AP_W3, _AP_T3>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(
      const af_bit_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}

  template <int _AP_W2, int _AP_I2, bool _AP_S2, ap_q_mode _AP_Q2,
            ap_o_mode _AP_O2, int _AP_N2>
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(
      const af_range_ref<_AP_W2, _AP_I2, _AP_S2, _AP_Q2, _AP_O2, _AP_N2>& op)
      : Base(op) {}




                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(bool v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(signed char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned char v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(short v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned short v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(int v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned int v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(long v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(unsigned long v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(ap_slong v) : Base(v) {}
                      inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(ap_ulong v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(half v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(float v) : Base(v) {}
  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(double v) : Base(v) {}


  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const char* s) : Base(s) {}

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed(const char* s, signed char rd) : Base(s, rd) {}



  ap_ufixed &
  operator=(const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &op) = default;
# 327 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h"
  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(
      const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) volatile {
    Base::V = op.V;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) ap_ufixed& operator=(
      const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N>& op) {
    Base::V = op.V;
    return *this;
  }

  inline __attribute__((always_inline)) __attribute__((nodebug)) void operator=(const volatile ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O,
                                                 _AP_N>& op) volatile {
    Base::V = op.V;
  }
};
# 365 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h"
# 1 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_special.h" 1
# 20 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_special.h"
namespace std {
template<typename _Tp> class complex;
}







namespace std {
# 48 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  __attribute__((nodebug)) complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  __attribute__((nodebug)) complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  __attribute__((nodebug)) complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const __attribute__((nodebug)) _Tp& real() const { return _M_real; }
  const __attribute__((nodebug)) _Tp& imag() const { return _M_imag; }







  __attribute__((nodebug)) void real(_Tp __val) { _M_real = __val; }

  __attribute__((nodebug)) void imag(_Tp __val) { _M_imag = __val; }



  __attribute__((nodebug)) complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator=(const complex<_Up> &__z) {
    auto tmp1 = __z;
    complex<_Tp> tmp2 = {tmp1.real(), tmp1.imag()};
    *this = tmp2;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 190 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
class complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > {
 public:
  typedef ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> _Tp;
  typedef _Tp value_type;




  __attribute__((nodebug)) complex() : _M_real(_Tp()), _M_imag(_Tp()) {}


  __attribute__((nodebug)) complex(const _Tp &__r, const _Tp &__i = _Tp(0))
      : _M_real(__r), _M_imag(__i) {}


  template <typename _Up>
  __attribute__((nodebug)) complex(const complex<_Up> &__z) : _M_real(__z.real()), _M_imag(__z.imag()) {}


  const __attribute__((nodebug)) _Tp& real() const { return _M_real; }
  const __attribute__((nodebug)) _Tp& imag() const { return _M_imag; }







  __attribute__((nodebug)) void real(_Tp __val) { _M_real = __val; }

  __attribute__((nodebug)) void imag(_Tp __val) { _M_imag = __val; }



  __attribute__((nodebug)) complex<_Tp> &operator=(const _Tp __t) {
    _M_real = __t;
    _M_imag = _Tp(0);
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator+=(const _Tp &__t) {
    _M_real += __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator-=(const _Tp &__t) {
    _M_real -= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator*=(const _Tp &__t) {
    _M_real *= __t;
    _M_imag *= __t;
    return *this;
  }



  __attribute__((nodebug)) complex<_Tp> &operator/=(const _Tp &__t) {
    _M_real /= __t;
    _M_imag /= __t;
    return *this;
  }


  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator=(const complex<_Up> &__z) {
    auto tmp1 = __z;
    complex<_Tp> tmp2 = {tmp1.real(), tmp1.imag()};
    *this = tmp2;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator+=(const complex<_Up> &__z) {
    _M_real += __z.real();
    _M_imag += __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator-=(const complex<_Up> &__z) {
    _M_real -= __z.real();
    _M_imag -= __z.imag();
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator*=(const complex<_Up> &__z) {
    const _Tp __r = _M_real * __z.real() - _M_imag * __z.imag();
    _M_imag = _M_real * __z.imag() + _M_imag * __z.real();
    _M_real = __r;
    return *this;
  }



  template <typename _Up>
  __attribute__((nodebug)) complex<_Tp> &operator/=(const complex<_Up> &__z) {
    complex<_Tp> cj (__z.real(), -__z.imag());
    complex<_Tp> a = (*this) * cj;
    complex<_Tp> b = cj * __z;
    _M_real = a.real() / b.real();
    _M_imag = a.imag() / b.real();
    return *this;
  }

 private:
  _Tp _M_real;
  _Tp _M_imag;

};
# 323 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/etc/ap_fixed_special.h"
template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator==(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator==(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator!=(
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator!=(
    const ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_fixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator==(
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() == __y &&
         __x.imag() == 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator==(
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x == __y.real() &&
         0 == __y.imag();
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator!=(
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__x,
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__y) {
  return __x.real() != __y ||
         __x.imag() != 0;
}


template <int _AP_W, int _AP_I, ap_q_mode _AP_Q, ap_o_mode _AP_O, int _AP_N>
inline __attribute__((nodebug)) bool operator!=(
    const ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> &__x,
    const complex<ap_ufixed<_AP_W, _AP_I, _AP_Q, _AP_O, _AP_N> > &__y) {
  return __x != __y.real() ||
         0 != __y.imag();
}

}
# 366 "/eda/xilinx/Vitis_HLS/2023.1/common/technology/autopilot/ap_fixed.h" 2
# 5 "mnist_inference.cpp" 2


typedef ap_fixed<16, 8> fixed_point_t;

void mnist_inference(float input[28][28], float output[10]) {
    float conv_output[26][26] = {0};


    conv_output[0][0] = -0.019604;
    conv_output[0][0] += input[0][0] * 0.088207;
    conv_output[0][0] += input[0][1] * 0.061727;
    conv_output[0][0] += input[0][2] * -0.114732;
    conv_output[0][0] += input[1][0] * -0.083850;
    conv_output[0][0] += input[1][1] * 0.038051;
    conv_output[0][0] += input[1][2] * 0.042449;
    conv_output[0][0] += input[2][0] * -0.084779;
    conv_output[0][0] += input[2][1] * 0.206606;
    conv_output[0][0] += input[2][2] * -0.146001;
    conv_output[0][0] = fmaxf(0, conv_output[0][0]);
    conv_output[0][1] = -0.019604;
    conv_output[0][1] += input[0][1] * 0.088207;
    conv_output[0][1] += input[0][2] * 0.061727;
    conv_output[0][1] += input[0][3] * -0.114732;
    conv_output[0][1] += input[1][1] * -0.083850;
    conv_output[0][1] += input[1][2] * 0.038051;
    conv_output[0][1] += input[1][3] * 0.042449;
    conv_output[0][1] += input[2][1] * -0.084779;
    conv_output[0][1] += input[2][2] * 0.206606;
    conv_output[0][1] += input[2][3] * -0.146001;
    conv_output[0][1] = fmaxf(0, conv_output[0][1]);
    conv_output[0][2] = -0.019604;
    conv_output[0][2] += input[0][2] * 0.088207;
    conv_output[0][2] += input[0][3] * 0.061727;
    conv_output[0][2] += input[0][4] * -0.114732;
    conv_output[0][2] += input[1][2] * -0.083850;
    conv_output[0][2] += input[1][3] * 0.038051;
    conv_output[0][2] += input[1][4] * 0.042449;
    conv_output[0][2] += input[2][2] * -0.084779;
    conv_output[0][2] += input[2][3] * 0.206606;
    conv_output[0][2] += input[2][4] * -0.146001;
    conv_output[0][2] = fmaxf(0, conv_output[0][2]);
    conv_output[0][3] = -0.019604;
    conv_output[0][3] += input[0][3] * 0.088207;
    conv_output[0][3] += input[0][4] * 0.061727;
    conv_output[0][3] += input[0][5] * -0.114732;
    conv_output[0][3] += input[1][3] * -0.083850;
    conv_output[0][3] += input[1][4] * 0.038051;
    conv_output[0][3] += input[1][5] * 0.042449;
    conv_output[0][3] += input[2][3] * -0.084779;
    conv_output[0][3] += input[2][4] * 0.206606;
    conv_output[0][3] += input[2][5] * -0.146001;
    conv_output[0][3] = fmaxf(0, conv_output[0][3]);
    conv_output[0][4] = -0.019604;
    conv_output[0][4] += input[0][4] * 0.088207;
    conv_output[0][4] += input[0][5] * 0.061727;
    conv_output[0][4] += input[0][6] * -0.114732;
    conv_output[0][4] += input[1][4] * -0.083850;
    conv_output[0][4] += input[1][5] * 0.038051;
    conv_output[0][4] += input[1][6] * 0.042449;
    conv_output[0][4] += input[2][4] * -0.084779;
    conv_output[0][4] += input[2][5] * 0.206606;
    conv_output[0][4] += input[2][6] * -0.146001;
    conv_output[0][4] = fmaxf(0, conv_output[0][4]);
    conv_output[0][5] = -0.019604;
    conv_output[0][5] += input[0][5] * 0.088207;
    conv_output[0][5] += input[0][6] * 0.061727;
    conv_output[0][5] += input[0][7] * -0.114732;
    conv_output[0][5] += input[1][5] * -0.083850;
    conv_output[0][5] += input[1][6] * 0.038051;
    conv_output[0][5] += input[1][7] * 0.042449;
    conv_output[0][5] += input[2][5] * -0.084779;
    conv_output[0][5] += input[2][6] * 0.206606;
    conv_output[0][5] += input[2][7] * -0.146001;
    conv_output[0][5] = fmaxf(0, conv_output[0][5]);
    conv_output[0][6] = -0.019604;
    conv_output[0][6] += input[0][6] * 0.088207;
    conv_output[0][6] += input[0][7] * 0.061727;
    conv_output[0][6] += input[0][8] * -0.114732;
    conv_output[0][6] += input[1][6] * -0.083850;
    conv_output[0][6] += input[1][7] * 0.038051;
    conv_output[0][6] += input[1][8] * 0.042449;
    conv_output[0][6] += input[2][6] * -0.084779;
    conv_output[0][6] += input[2][7] * 0.206606;
    conv_output[0][6] += input[2][8] * -0.146001;
    conv_output[0][6] = fmaxf(0, conv_output[0][6]);
    conv_output[0][7] = -0.019604;
    conv_output[0][7] += input[0][7] * 0.088207;
    conv_output[0][7] += input[0][8] * 0.061727;
    conv_output[0][7] += input[0][9] * -0.114732;
    conv_output[0][7] += input[1][7] * -0.083850;
    conv_output[0][7] += input[1][8] * 0.038051;
    conv_output[0][7] += input[1][9] * 0.042449;
    conv_output[0][7] += input[2][7] * -0.084779;
    conv_output[0][7] += input[2][8] * 0.206606;
    conv_output[0][7] += input[2][9] * -0.146001;
    conv_output[0][7] = fmaxf(0, conv_output[0][7]);
    conv_output[0][8] = -0.019604;
    conv_output[0][8] += input[0][8] * 0.088207;
    conv_output[0][8] += input[0][9] * 0.061727;
    conv_output[0][8] += input[0][10] * -0.114732;
    conv_output[0][8] += input[1][8] * -0.083850;
    conv_output[0][8] += input[1][9] * 0.038051;
    conv_output[0][8] += input[1][10] * 0.042449;
    conv_output[0][8] += input[2][8] * -0.084779;
    conv_output[0][8] += input[2][9] * 0.206606;
    conv_output[0][8] += input[2][10] * -0.146001;
    conv_output[0][8] = fmaxf(0, conv_output[0][8]);
    conv_output[0][9] = -0.019604;
    conv_output[0][9] += input[0][9] * 0.088207;
    conv_output[0][9] += input[0][10] * 0.061727;
    conv_output[0][9] += input[0][11] * -0.114732;
    conv_output[0][9] += input[1][9] * -0.083850;
    conv_output[0][9] += input[1][10] * 0.038051;
    conv_output[0][9] += input[1][11] * 0.042449;
    conv_output[0][9] += input[2][9] * -0.084779;
    conv_output[0][9] += input[2][10] * 0.206606;
    conv_output[0][9] += input[2][11] * -0.146001;
    conv_output[0][9] = fmaxf(0, conv_output[0][9]);
    conv_output[0][10] = -0.019604;
    conv_output[0][10] += input[0][10] * 0.088207;
    conv_output[0][10] += input[0][11] * 0.061727;
    conv_output[0][10] += input[0][12] * -0.114732;
    conv_output[0][10] += input[1][10] * -0.083850;
    conv_output[0][10] += input[1][11] * 0.038051;
    conv_output[0][10] += input[1][12] * 0.042449;
    conv_output[0][10] += input[2][10] * -0.084779;
    conv_output[0][10] += input[2][11] * 0.206606;
    conv_output[0][10] += input[2][12] * -0.146001;
    conv_output[0][10] = fmaxf(0, conv_output[0][10]);
    conv_output[0][11] = -0.019604;
    conv_output[0][11] += input[0][11] * 0.088207;
    conv_output[0][11] += input[0][12] * 0.061727;
    conv_output[0][11] += input[0][13] * -0.114732;
    conv_output[0][11] += input[1][11] * -0.083850;
    conv_output[0][11] += input[1][12] * 0.038051;
    conv_output[0][11] += input[1][13] * 0.042449;
    conv_output[0][11] += input[2][11] * -0.084779;
    conv_output[0][11] += input[2][12] * 0.206606;
    conv_output[0][11] += input[2][13] * -0.146001;
    conv_output[0][11] = fmaxf(0, conv_output[0][11]);
    conv_output[0][12] = -0.019604;
    conv_output[0][12] += input[0][12] * 0.088207;
    conv_output[0][12] += input[0][13] * 0.061727;
    conv_output[0][12] += input[0][14] * -0.114732;
    conv_output[0][12] += input[1][12] * -0.083850;
    conv_output[0][12] += input[1][13] * 0.038051;
    conv_output[0][12] += input[1][14] * 0.042449;
    conv_output[0][12] += input[2][12] * -0.084779;
    conv_output[0][12] += input[2][13] * 0.206606;
    conv_output[0][12] += input[2][14] * -0.146001;
    conv_output[0][12] = fmaxf(0, conv_output[0][12]);
    conv_output[0][13] = -0.019604;
    conv_output[0][13] += input[0][13] * 0.088207;
    conv_output[0][13] += input[0][14] * 0.061727;
    conv_output[0][13] += input[0][15] * -0.114732;
    conv_output[0][13] += input[1][13] * -0.083850;
    conv_output[0][13] += input[1][14] * 0.038051;
    conv_output[0][13] += input[1][15] * 0.042449;
    conv_output[0][13] += input[2][13] * -0.084779;
    conv_output[0][13] += input[2][14] * 0.206606;
    conv_output[0][13] += input[2][15] * -0.146001;
    conv_output[0][13] = fmaxf(0, conv_output[0][13]);
    conv_output[0][14] = -0.019604;
    conv_output[0][14] += input[0][14] * 0.088207;
    conv_output[0][14] += input[0][15] * 0.061727;
    conv_output[0][14] += input[0][16] * -0.114732;
    conv_output[0][14] += input[1][14] * -0.083850;
    conv_output[0][14] += input[1][15] * 0.038051;
    conv_output[0][14] += input[1][16] * 0.042449;
    conv_output[0][14] += input[2][14] * -0.084779;
    conv_output[0][14] += input[2][15] * 0.206606;
    conv_output[0][14] += input[2][16] * -0.146001;
    conv_output[0][14] = fmaxf(0, conv_output[0][14]);
    conv_output[0][15] = -0.019604;
    conv_output[0][15] += input[0][15] * 0.088207;
    conv_output[0][15] += input[0][16] * 0.061727;
    conv_output[0][15] += input[0][17] * -0.114732;
    conv_output[0][15] += input[1][15] * -0.083850;
    conv_output[0][15] += input[1][16] * 0.038051;
    conv_output[0][15] += input[1][17] * 0.042449;
    conv_output[0][15] += input[2][15] * -0.084779;
    conv_output[0][15] += input[2][16] * 0.206606;
    conv_output[0][15] += input[2][17] * -0.146001;
    conv_output[0][15] = fmaxf(0, conv_output[0][15]);
    conv_output[0][16] = -0.019604;
    conv_output[0][16] += input[0][16] * 0.088207;
    conv_output[0][16] += input[0][17] * 0.061727;
    conv_output[0][16] += input[0][18] * -0.114732;
    conv_output[0][16] += input[1][16] * -0.083850;
    conv_output[0][16] += input[1][17] * 0.038051;
    conv_output[0][16] += input[1][18] * 0.042449;
    conv_output[0][16] += input[2][16] * -0.084779;
    conv_output[0][16] += input[2][17] * 0.206606;
    conv_output[0][16] += input[2][18] * -0.146001;
    conv_output[0][16] = fmaxf(0, conv_output[0][16]);
    conv_output[0][17] = -0.019604;
    conv_output[0][17] += input[0][17] * 0.088207;
    conv_output[0][17] += input[0][18] * 0.061727;
    conv_output[0][17] += input[0][19] * -0.114732;
    conv_output[0][17] += input[1][17] * -0.083850;
    conv_output[0][17] += input[1][18] * 0.038051;
    conv_output[0][17] += input[1][19] * 0.042449;
    conv_output[0][17] += input[2][17] * -0.084779;
    conv_output[0][17] += input[2][18] * 0.206606;
    conv_output[0][17] += input[2][19] * -0.146001;
    conv_output[0][17] = fmaxf(0, conv_output[0][17]);
    conv_output[0][18] = -0.019604;
    conv_output[0][18] += input[0][18] * 0.088207;
    conv_output[0][18] += input[0][19] * 0.061727;
    conv_output[0][18] += input[0][20] * -0.114732;
    conv_output[0][18] += input[1][18] * -0.083850;
    conv_output[0][18] += input[1][19] * 0.038051;
    conv_output[0][18] += input[1][20] * 0.042449;
    conv_output[0][18] += input[2][18] * -0.084779;
    conv_output[0][18] += input[2][19] * 0.206606;
    conv_output[0][18] += input[2][20] * -0.146001;
    conv_output[0][18] = fmaxf(0, conv_output[0][18]);
    conv_output[0][19] = -0.019604;
    conv_output[0][19] += input[0][19] * 0.088207;
    conv_output[0][19] += input[0][20] * 0.061727;
    conv_output[0][19] += input[0][21] * -0.114732;
    conv_output[0][19] += input[1][19] * -0.083850;
    conv_output[0][19] += input[1][20] * 0.038051;
    conv_output[0][19] += input[1][21] * 0.042449;
    conv_output[0][19] += input[2][19] * -0.084779;
    conv_output[0][19] += input[2][20] * 0.206606;
    conv_output[0][19] += input[2][21] * -0.146001;
    conv_output[0][19] = fmaxf(0, conv_output[0][19]);
    conv_output[0][20] = -0.019604;
    conv_output[0][20] += input[0][20] * 0.088207;
    conv_output[0][20] += input[0][21] * 0.061727;
    conv_output[0][20] += input[0][22] * -0.114732;
    conv_output[0][20] += input[1][20] * -0.083850;
    conv_output[0][20] += input[1][21] * 0.038051;
    conv_output[0][20] += input[1][22] * 0.042449;
    conv_output[0][20] += input[2][20] * -0.084779;
    conv_output[0][20] += input[2][21] * 0.206606;
    conv_output[0][20] += input[2][22] * -0.146001;
    conv_output[0][20] = fmaxf(0, conv_output[0][20]);
    conv_output[0][21] = -0.019604;
    conv_output[0][21] += input[0][21] * 0.088207;
    conv_output[0][21] += input[0][22] * 0.061727;
    conv_output[0][21] += input[0][23] * -0.114732;
    conv_output[0][21] += input[1][21] * -0.083850;
    conv_output[0][21] += input[1][22] * 0.038051;
    conv_output[0][21] += input[1][23] * 0.042449;
    conv_output[0][21] += input[2][21] * -0.084779;
    conv_output[0][21] += input[2][22] * 0.206606;
    conv_output[0][21] += input[2][23] * -0.146001;
    conv_output[0][21] = fmaxf(0, conv_output[0][21]);
    conv_output[0][22] = -0.019604;
    conv_output[0][22] += input[0][22] * 0.088207;
    conv_output[0][22] += input[0][23] * 0.061727;
    conv_output[0][22] += input[0][24] * -0.114732;
    conv_output[0][22] += input[1][22] * -0.083850;
    conv_output[0][22] += input[1][23] * 0.038051;
    conv_output[0][22] += input[1][24] * 0.042449;
    conv_output[0][22] += input[2][22] * -0.084779;
    conv_output[0][22] += input[2][23] * 0.206606;
    conv_output[0][22] += input[2][24] * -0.146001;
    conv_output[0][22] = fmaxf(0, conv_output[0][22]);
    conv_output[0][23] = -0.019604;
    conv_output[0][23] += input[0][23] * 0.088207;
    conv_output[0][23] += input[0][24] * 0.061727;
    conv_output[0][23] += input[0][25] * -0.114732;
    conv_output[0][23] += input[1][23] * -0.083850;
    conv_output[0][23] += input[1][24] * 0.038051;
    conv_output[0][23] += input[1][25] * 0.042449;
    conv_output[0][23] += input[2][23] * -0.084779;
    conv_output[0][23] += input[2][24] * 0.206606;
    conv_output[0][23] += input[2][25] * -0.146001;
    conv_output[0][23] = fmaxf(0, conv_output[0][23]);
    conv_output[0][24] = -0.019604;
    conv_output[0][24] += input[0][24] * 0.088207;
    conv_output[0][24] += input[0][25] * 0.061727;
    conv_output[0][24] += input[0][26] * -0.114732;
    conv_output[0][24] += input[1][24] * -0.083850;
    conv_output[0][24] += input[1][25] * 0.038051;
    conv_output[0][24] += input[1][26] * 0.042449;
    conv_output[0][24] += input[2][24] * -0.084779;
    conv_output[0][24] += input[2][25] * 0.206606;
    conv_output[0][24] += input[2][26] * -0.146001;
    conv_output[0][24] = fmaxf(0, conv_output[0][24]);
    conv_output[0][25] = -0.019604;
    conv_output[0][25] += input[0][25] * 0.088207;
    conv_output[0][25] += input[0][26] * 0.061727;
    conv_output[0][25] += input[0][27] * -0.114732;
    conv_output[0][25] += input[1][25] * -0.083850;
    conv_output[0][25] += input[1][26] * 0.038051;
    conv_output[0][25] += input[1][27] * 0.042449;
    conv_output[0][25] += input[2][25] * -0.084779;
    conv_output[0][25] += input[2][26] * 0.206606;
    conv_output[0][25] += input[2][27] * -0.146001;
    conv_output[0][25] = fmaxf(0, conv_output[0][25]);
    conv_output[1][0] = -0.019604;
    conv_output[1][0] += input[1][0] * 0.088207;
    conv_output[1][0] += input[1][1] * 0.061727;
    conv_output[1][0] += input[1][2] * -0.114732;
    conv_output[1][0] += input[2][0] * -0.083850;
    conv_output[1][0] += input[2][1] * 0.038051;
    conv_output[1][0] += input[2][2] * 0.042449;
    conv_output[1][0] += input[3][0] * -0.084779;
    conv_output[1][0] += input[3][1] * 0.206606;
    conv_output[1][0] += input[3][2] * -0.146001;
    conv_output[1][0] = fmaxf(0, conv_output[1][0]);
    conv_output[1][1] = -0.019604;
    conv_output[1][1] += input[1][1] * 0.088207;
    conv_output[1][1] += input[1][2] * 0.061727;
    conv_output[1][1] += input[1][3] * -0.114732;
    conv_output[1][1] += input[2][1] * -0.083850;
    conv_output[1][1] += input[2][2] * 0.038051;
    conv_output[1][1] += input[2][3] * 0.042449;
    conv_output[1][1] += input[3][1] * -0.084779;
    conv_output[1][1] += input[3][2] * 0.206606;
    conv_output[1][1] += input[3][3] * -0.146001;
    conv_output[1][1] = fmaxf(0, conv_output[1][1]);
    conv_output[1][2] = -0.019604;
    conv_output[1][2] += input[1][2] * 0.088207;
    conv_output[1][2] += input[1][3] * 0.061727;
    conv_output[1][2] += input[1][4] * -0.114732;
    conv_output[1][2] += input[2][2] * -0.083850;
    conv_output[1][2] += input[2][3] * 0.038051;
    conv_output[1][2] += input[2][4] * 0.042449;
    conv_output[1][2] += input[3][2] * -0.084779;
    conv_output[1][2] += input[3][3] * 0.206606;
    conv_output[1][2] += input[3][4] * -0.146001;
    conv_output[1][2] = fmaxf(0, conv_output[1][2]);
    conv_output[1][3] = -0.019604;
    conv_output[1][3] += input[1][3] * 0.088207;
    conv_output[1][3] += input[1][4] * 0.061727;
    conv_output[1][3] += input[1][5] * -0.114732;
    conv_output[1][3] += input[2][3] * -0.083850;
    conv_output[1][3] += input[2][4] * 0.038051;
    conv_output[1][3] += input[2][5] * 0.042449;
    conv_output[1][3] += input[3][3] * -0.084779;
    conv_output[1][3] += input[3][4] * 0.206606;
    conv_output[1][3] += input[3][5] * -0.146001;
    conv_output[1][3] = fmaxf(0, conv_output[1][3]);
    conv_output[1][4] = -0.019604;
    conv_output[1][4] += input[1][4] * 0.088207;
    conv_output[1][4] += input[1][5] * 0.061727;
    conv_output[1][4] += input[1][6] * -0.114732;
    conv_output[1][4] += input[2][4] * -0.083850;
    conv_output[1][4] += input[2][5] * 0.038051;
    conv_output[1][4] += input[2][6] * 0.042449;
    conv_output[1][4] += input[3][4] * -0.084779;
    conv_output[1][4] += input[3][5] * 0.206606;
    conv_output[1][4] += input[3][6] * -0.146001;
    conv_output[1][4] = fmaxf(0, conv_output[1][4]);
    conv_output[1][5] = -0.019604;
    conv_output[1][5] += input[1][5] * 0.088207;
    conv_output[1][5] += input[1][6] * 0.061727;
    conv_output[1][5] += input[1][7] * -0.114732;
    conv_output[1][5] += input[2][5] * -0.083850;
    conv_output[1][5] += input[2][6] * 0.038051;
    conv_output[1][5] += input[2][7] * 0.042449;
    conv_output[1][5] += input[3][5] * -0.084779;
    conv_output[1][5] += input[3][6] * 0.206606;
    conv_output[1][5] += input[3][7] * -0.146001;
    conv_output[1][5] = fmaxf(0, conv_output[1][5]);
    conv_output[1][6] = -0.019604;
    conv_output[1][6] += input[1][6] * 0.088207;
    conv_output[1][6] += input[1][7] * 0.061727;
    conv_output[1][6] += input[1][8] * -0.114732;
    conv_output[1][6] += input[2][6] * -0.083850;
    conv_output[1][6] += input[2][7] * 0.038051;
    conv_output[1][6] += input[2][8] * 0.042449;
    conv_output[1][6] += input[3][6] * -0.084779;
    conv_output[1][6] += input[3][7] * 0.206606;
    conv_output[1][6] += input[3][8] * -0.146001;
    conv_output[1][6] = fmaxf(0, conv_output[1][6]);
    conv_output[1][7] = -0.019604;
    conv_output[1][7] += input[1][7] * 0.088207;
    conv_output[1][7] += input[1][8] * 0.061727;
    conv_output[1][7] += input[1][9] * -0.114732;
    conv_output[1][7] += input[2][7] * -0.083850;
    conv_output[1][7] += input[2][8] * 0.038051;
    conv_output[1][7] += input[2][9] * 0.042449;
    conv_output[1][7] += input[3][7] * -0.084779;
    conv_output[1][7] += input[3][8] * 0.206606;
    conv_output[1][7] += input[3][9] * -0.146001;
    conv_output[1][7] = fmaxf(0, conv_output[1][7]);
    conv_output[1][8] = -0.019604;
    conv_output[1][8] += input[1][8] * 0.088207;
    conv_output[1][8] += input[1][9] * 0.061727;
    conv_output[1][8] += input[1][10] * -0.114732;
    conv_output[1][8] += input[2][8] * -0.083850;
    conv_output[1][8] += input[2][9] * 0.038051;
    conv_output[1][8] += input[2][10] * 0.042449;
    conv_output[1][8] += input[3][8] * -0.084779;
    conv_output[1][8] += input[3][9] * 0.206606;
    conv_output[1][8] += input[3][10] * -0.146001;
    conv_output[1][8] = fmaxf(0, conv_output[1][8]);
    conv_output[1][9] = -0.019604;
    conv_output[1][9] += input[1][9] * 0.088207;
    conv_output[1][9] += input[1][10] * 0.061727;
    conv_output[1][9] += input[1][11] * -0.114732;
    conv_output[1][9] += input[2][9] * -0.083850;
    conv_output[1][9] += input[2][10] * 0.038051;
    conv_output[1][9] += input[2][11] * 0.042449;
    conv_output[1][9] += input[3][9] * -0.084779;
    conv_output[1][9] += input[3][10] * 0.206606;
    conv_output[1][9] += input[3][11] * -0.146001;
    conv_output[1][9] = fmaxf(0, conv_output[1][9]);
    conv_output[1][10] = -0.019604;
    conv_output[1][10] += input[1][10] * 0.088207;
    conv_output[1][10] += input[1][11] * 0.061727;
    conv_output[1][10] += input[1][12] * -0.114732;
    conv_output[1][10] += input[2][10] * -0.083850;
    conv_output[1][10] += input[2][11] * 0.038051;
    conv_output[1][10] += input[2][12] * 0.042449;
    conv_output[1][10] += input[3][10] * -0.084779;
    conv_output[1][10] += input[3][11] * 0.206606;
    conv_output[1][10] += input[3][12] * -0.146001;
    conv_output[1][10] = fmaxf(0, conv_output[1][10]);
    conv_output[1][11] = -0.019604;
    conv_output[1][11] += input[1][11] * 0.088207;
    conv_output[1][11] += input[1][12] * 0.061727;
    conv_output[1][11] += input[1][13] * -0.114732;
    conv_output[1][11] += input[2][11] * -0.083850;
    conv_output[1][11] += input[2][12] * 0.038051;
    conv_output[1][11] += input[2][13] * 0.042449;
    conv_output[1][11] += input[3][11] * -0.084779;
    conv_output[1][11] += input[3][12] * 0.206606;
    conv_output[1][11] += input[3][13] * -0.146001;
    conv_output[1][11] = fmaxf(0, conv_output[1][11]);
    conv_output[1][12] = -0.019604;
    conv_output[1][12] += input[1][12] * 0.088207;
    conv_output[1][12] += input[1][13] * 0.061727;
    conv_output[1][12] += input[1][14] * -0.114732;
    conv_output[1][12] += input[2][12] * -0.083850;
    conv_output[1][12] += input[2][13] * 0.038051;
    conv_output[1][12] += input[2][14] * 0.042449;
    conv_output[1][12] += input[3][12] * -0.084779;
    conv_output[1][12] += input[3][13] * 0.206606;
    conv_output[1][12] += input[3][14] * -0.146001;
    conv_output[1][12] = fmaxf(0, conv_output[1][12]);
    conv_output[1][13] = -0.019604;
    conv_output[1][13] += input[1][13] * 0.088207;
    conv_output[1][13] += input[1][14] * 0.061727;
    conv_output[1][13] += input[1][15] * -0.114732;
    conv_output[1][13] += input[2][13] * -0.083850;
    conv_output[1][13] += input[2][14] * 0.038051;
    conv_output[1][13] += input[2][15] * 0.042449;
    conv_output[1][13] += input[3][13] * -0.084779;
    conv_output[1][13] += input[3][14] * 0.206606;
    conv_output[1][13] += input[3][15] * -0.146001;
    conv_output[1][13] = fmaxf(0, conv_output[1][13]);
    conv_output[1][14] = -0.019604;
    conv_output[1][14] += input[1][14] * 0.088207;
    conv_output[1][14] += input[1][15] * 0.061727;
    conv_output[1][14] += input[1][16] * -0.114732;
    conv_output[1][14] += input[2][14] * -0.083850;
    conv_output[1][14] += input[2][15] * 0.038051;
    conv_output[1][14] += input[2][16] * 0.042449;
    conv_output[1][14] += input[3][14] * -0.084779;
    conv_output[1][14] += input[3][15] * 0.206606;
    conv_output[1][14] += input[3][16] * -0.146001;
    conv_output[1][14] = fmaxf(0, conv_output[1][14]);
    conv_output[1][15] = -0.019604;
    conv_output[1][15] += input[1][15] * 0.088207;
    conv_output[1][15] += input[1][16] * 0.061727;
    conv_output[1][15] += input[1][17] * -0.114732;
    conv_output[1][15] += input[2][15] * -0.083850;
    conv_output[1][15] += input[2][16] * 0.038051;
    conv_output[1][15] += input[2][17] * 0.042449;
    conv_output[1][15] += input[3][15] * -0.084779;
    conv_output[1][15] += input[3][16] * 0.206606;
    conv_output[1][15] += input[3][17] * -0.146001;
    conv_output[1][15] = fmaxf(0, conv_output[1][15]);
    conv_output[1][16] = -0.019604;
    conv_output[1][16] += input[1][16] * 0.088207;
    conv_output[1][16] += input[1][17] * 0.061727;
    conv_output[1][16] += input[1][18] * -0.114732;
    conv_output[1][16] += input[2][16] * -0.083850;
    conv_output[1][16] += input[2][17] * 0.038051;
    conv_output[1][16] += input[2][18] * 0.042449;
    conv_output[1][16] += input[3][16] * -0.084779;
    conv_output[1][16] += input[3][17] * 0.206606;
    conv_output[1][16] += input[3][18] * -0.146001;
    conv_output[1][16] = fmaxf(0, conv_output[1][16]);
    conv_output[1][17] = -0.019604;
    conv_output[1][17] += input[1][17] * 0.088207;
    conv_output[1][17] += input[1][18] * 0.061727;
    conv_output[1][17] += input[1][19] * -0.114732;
    conv_output[1][17] += input[2][17] * -0.083850;
    conv_output[1][17] += input[2][18] * 0.038051;
    conv_output[1][17] += input[2][19] * 0.042449;
    conv_output[1][17] += input[3][17] * -0.084779;
    conv_output[1][17] += input[3][18] * 0.206606;
    conv_output[1][17] += input[3][19] * -0.146001;
    conv_output[1][17] = fmaxf(0, conv_output[1][17]);
    conv_output[1][18] = -0.019604;
    conv_output[1][18] += input[1][18] * 0.088207;
    conv_output[1][18] += input[1][19] * 0.061727;
    conv_output[1][18] += input[1][20] * -0.114732;
    conv_output[1][18] += input[2][18] * -0.083850;
    conv_output[1][18] += input[2][19] * 0.038051;
    conv_output[1][18] += input[2][20] * 0.042449;
    conv_output[1][18] += input[3][18] * -0.084779;
    conv_output[1][18] += input[3][19] * 0.206606;
    conv_output[1][18] += input[3][20] * -0.146001;
    conv_output[1][18] = fmaxf(0, conv_output[1][18]);
    conv_output[1][19] = -0.019604;
    conv_output[1][19] += input[1][19] * 0.088207;
    conv_output[1][19] += input[1][20] * 0.061727;
    conv_output[1][19] += input[1][21] * -0.114732;
    conv_output[1][19] += input[2][19] * -0.083850;
    conv_output[1][19] += input[2][20] * 0.038051;
    conv_output[1][19] += input[2][21] * 0.042449;
    conv_output[1][19] += input[3][19] * -0.084779;
    conv_output[1][19] += input[3][20] * 0.206606;
    conv_output[1][19] += input[3][21] * -0.146001;
    conv_output[1][19] = fmaxf(0, conv_output[1][19]);
    conv_output[1][20] = -0.019604;
    conv_output[1][20] += input[1][20] * 0.088207;
    conv_output[1][20] += input[1][21] * 0.061727;
    conv_output[1][20] += input[1][22] * -0.114732;
    conv_output[1][20] += input[2][20] * -0.083850;
    conv_output[1][20] += input[2][21] * 0.038051;
    conv_output[1][20] += input[2][22] * 0.042449;
    conv_output[1][20] += input[3][20] * -0.084779;
    conv_output[1][20] += input[3][21] * 0.206606;
    conv_output[1][20] += input[3][22] * -0.146001;
    conv_output[1][20] = fmaxf(0, conv_output[1][20]);
    conv_output[1][21] = -0.019604;
    conv_output[1][21] += input[1][21] * 0.088207;
    conv_output[1][21] += input[1][22] * 0.061727;
    conv_output[1][21] += input[1][23] * -0.114732;
    conv_output[1][21] += input[2][21] * -0.083850;
    conv_output[1][21] += input[2][22] * 0.038051;
    conv_output[1][21] += input[2][23] * 0.042449;
    conv_output[1][21] += input[3][21] * -0.084779;
    conv_output[1][21] += input[3][22] * 0.206606;
    conv_output[1][21] += input[3][23] * -0.146001;
    conv_output[1][21] = fmaxf(0, conv_output[1][21]);
    conv_output[1][22] = -0.019604;
    conv_output[1][22] += input[1][22] * 0.088207;
    conv_output[1][22] += input[1][23] * 0.061727;
    conv_output[1][22] += input[1][24] * -0.114732;
    conv_output[1][22] += input[2][22] * -0.083850;
    conv_output[1][22] += input[2][23] * 0.038051;
    conv_output[1][22] += input[2][24] * 0.042449;
    conv_output[1][22] += input[3][22] * -0.084779;
    conv_output[1][22] += input[3][23] * 0.206606;
    conv_output[1][22] += input[3][24] * -0.146001;
    conv_output[1][22] = fmaxf(0, conv_output[1][22]);
    conv_output[1][23] = -0.019604;
    conv_output[1][23] += input[1][23] * 0.088207;
    conv_output[1][23] += input[1][24] * 0.061727;
    conv_output[1][23] += input[1][25] * -0.114732;
    conv_output[1][23] += input[2][23] * -0.083850;
    conv_output[1][23] += input[2][24] * 0.038051;
    conv_output[1][23] += input[2][25] * 0.042449;
    conv_output[1][23] += input[3][23] * -0.084779;
    conv_output[1][23] += input[3][24] * 0.206606;
    conv_output[1][23] += input[3][25] * -0.146001;
    conv_output[1][23] = fmaxf(0, conv_output[1][23]);
    conv_output[1][24] = -0.019604;
    conv_output[1][24] += input[1][24] * 0.088207;
    conv_output[1][24] += input[1][25] * 0.061727;
    conv_output[1][24] += input[1][26] * -0.114732;
    conv_output[1][24] += input[2][24] * -0.083850;
    conv_output[1][24] += input[2][25] * 0.038051;
    conv_output[1][24] += input[2][26] * 0.042449;
    conv_output[1][24] += input[3][24] * -0.084779;
    conv_output[1][24] += input[3][25] * 0.206606;
    conv_output[1][24] += input[3][26] * -0.146001;
    conv_output[1][24] = fmaxf(0, conv_output[1][24]);
    conv_output[1][25] = -0.019604;
    conv_output[1][25] += input[1][25] * 0.088207;
    conv_output[1][25] += input[1][26] * 0.061727;
    conv_output[1][25] += input[1][27] * -0.114732;
    conv_output[1][25] += input[2][25] * -0.083850;
    conv_output[1][25] += input[2][26] * 0.038051;
    conv_output[1][25] += input[2][27] * 0.042449;
    conv_output[1][25] += input[3][25] * -0.084779;
    conv_output[1][25] += input[3][26] * 0.206606;
    conv_output[1][25] += input[3][27] * -0.146001;
    conv_output[1][25] = fmaxf(0, conv_output[1][25]);
    conv_output[2][0] = -0.019604;
    conv_output[2][0] += input[2][0] * 0.088207;
    conv_output[2][0] += input[2][1] * 0.061727;
    conv_output[2][0] += input[2][2] * -0.114732;
    conv_output[2][0] += input[3][0] * -0.083850;
    conv_output[2][0] += input[3][1] * 0.038051;
    conv_output[2][0] += input[3][2] * 0.042449;
    conv_output[2][0] += input[4][0] * -0.084779;
    conv_output[2][0] += input[4][1] * 0.206606;
    conv_output[2][0] += input[4][2] * -0.146001;
    conv_output[2][0] = fmaxf(0, conv_output[2][0]);
    conv_output[2][1] = -0.019604;
    conv_output[2][1] += input[2][1] * 0.088207;
    conv_output[2][1] += input[2][2] * 0.061727;
    conv_output[2][1] += input[2][3] * -0.114732;
    conv_output[2][1] += input[3][1] * -0.083850;
    conv_output[2][1] += input[3][2] * 0.038051;
    conv_output[2][1] += input[3][3] * 0.042449;
    conv_output[2][1] += input[4][1] * -0.084779;
    conv_output[2][1] += input[4][2] * 0.206606;
    conv_output[2][1] += input[4][3] * -0.146001;
    conv_output[2][1] = fmaxf(0, conv_output[2][1]);
    conv_output[2][2] = -0.019604;
    conv_output[2][2] += input[2][2] * 0.088207;
    conv_output[2][2] += input[2][3] * 0.061727;
    conv_output[2][2] += input[2][4] * -0.114732;
    conv_output[2][2] += input[3][2] * -0.083850;
    conv_output[2][2] += input[3][3] * 0.038051;
    conv_output[2][2] += input[3][4] * 0.042449;
    conv_output[2][2] += input[4][2] * -0.084779;
    conv_output[2][2] += input[4][3] * 0.206606;
    conv_output[2][2] += input[4][4] * -0.146001;
    conv_output[2][2] = fmaxf(0, conv_output[2][2]);
    conv_output[2][3] = -0.019604;
    conv_output[2][3] += input[2][3] * 0.088207;
    conv_output[2][3] += input[2][4] * 0.061727;
    conv_output[2][3] += input[2][5] * -0.114732;
    conv_output[2][3] += input[3][3] * -0.083850;
    conv_output[2][3] += input[3][4] * 0.038051;
    conv_output[2][3] += input[3][5] * 0.042449;
    conv_output[2][3] += input[4][3] * -0.084779;
    conv_output[2][3] += input[4][4] * 0.206606;
    conv_output[2][3] += input[4][5] * -0.146001;
    conv_output[2][3] = fmaxf(0, conv_output[2][3]);
    conv_output[2][4] = -0.019604;
    conv_output[2][4] += input[2][4] * 0.088207;
    conv_output[2][4] += input[2][5] * 0.061727;
    conv_output[2][4] += input[2][6] * -0.114732;
    conv_output[2][4] += input[3][4] * -0.083850;
    conv_output[2][4] += input[3][5] * 0.038051;
    conv_output[2][4] += input[3][6] * 0.042449;
    conv_output[2][4] += input[4][4] * -0.084779;
    conv_output[2][4] += input[4][5] * 0.206606;
    conv_output[2][4] += input[4][6] * -0.146001;
    conv_output[2][4] = fmaxf(0, conv_output[2][4]);
    conv_output[2][5] = -0.019604;
    conv_output[2][5] += input[2][5] * 0.088207;
    conv_output[2][5] += input[2][6] * 0.061727;
    conv_output[2][5] += input[2][7] * -0.114732;
    conv_output[2][5] += input[3][5] * -0.083850;
    conv_output[2][5] += input[3][6] * 0.038051;
    conv_output[2][5] += input[3][7] * 0.042449;
    conv_output[2][5] += input[4][5] * -0.084779;
    conv_output[2][5] += input[4][6] * 0.206606;
    conv_output[2][5] += input[4][7] * -0.146001;
    conv_output[2][5] = fmaxf(0, conv_output[2][5]);
    conv_output[2][6] = -0.019604;
    conv_output[2][6] += input[2][6] * 0.088207;
    conv_output[2][6] += input[2][7] * 0.061727;
    conv_output[2][6] += input[2][8] * -0.114732;
    conv_output[2][6] += input[3][6] * -0.083850;
    conv_output[2][6] += input[3][7] * 0.038051;
    conv_output[2][6] += input[3][8] * 0.042449;
    conv_output[2][6] += input[4][6] * -0.084779;
    conv_output[2][6] += input[4][7] * 0.206606;
    conv_output[2][6] += input[4][8] * -0.146001;
    conv_output[2][6] = fmaxf(0, conv_output[2][6]);
    conv_output[2][7] = -0.019604;
    conv_output[2][7] += input[2][7] * 0.088207;
    conv_output[2][7] += input[2][8] * 0.061727;
    conv_output[2][7] += input[2][9] * -0.114732;
    conv_output[2][7] += input[3][7] * -0.083850;
    conv_output[2][7] += input[3][8] * 0.038051;
    conv_output[2][7] += input[3][9] * 0.042449;
    conv_output[2][7] += input[4][7] * -0.084779;
    conv_output[2][7] += input[4][8] * 0.206606;
    conv_output[2][7] += input[4][9] * -0.146001;
    conv_output[2][7] = fmaxf(0, conv_output[2][7]);
    conv_output[2][8] = -0.019604;
    conv_output[2][8] += input[2][8] * 0.088207;
    conv_output[2][8] += input[2][9] * 0.061727;
    conv_output[2][8] += input[2][10] * -0.114732;
    conv_output[2][8] += input[3][8] * -0.083850;
    conv_output[2][8] += input[3][9] * 0.038051;
    conv_output[2][8] += input[3][10] * 0.042449;
    conv_output[2][8] += input[4][8] * -0.084779;
    conv_output[2][8] += input[4][9] * 0.206606;
    conv_output[2][8] += input[4][10] * -0.146001;
    conv_output[2][8] = fmaxf(0, conv_output[2][8]);
    conv_output[2][9] = -0.019604;
    conv_output[2][9] += input[2][9] * 0.088207;
    conv_output[2][9] += input[2][10] * 0.061727;
    conv_output[2][9] += input[2][11] * -0.114732;
    conv_output[2][9] += input[3][9] * -0.083850;
    conv_output[2][9] += input[3][10] * 0.038051;
    conv_output[2][9] += input[3][11] * 0.042449;
    conv_output[2][9] += input[4][9] * -0.084779;
    conv_output[2][9] += input[4][10] * 0.206606;
    conv_output[2][9] += input[4][11] * -0.146001;
    conv_output[2][9] = fmaxf(0, conv_output[2][9]);
    conv_output[2][10] = -0.019604;
    conv_output[2][10] += input[2][10] * 0.088207;
    conv_output[2][10] += input[2][11] * 0.061727;
    conv_output[2][10] += input[2][12] * -0.114732;
    conv_output[2][10] += input[3][10] * -0.083850;
    conv_output[2][10] += input[3][11] * 0.038051;
    conv_output[2][10] += input[3][12] * 0.042449;
    conv_output[2][10] += input[4][10] * -0.084779;
    conv_output[2][10] += input[4][11] * 0.206606;
    conv_output[2][10] += input[4][12] * -0.146001;
    conv_output[2][10] = fmaxf(0, conv_output[2][10]);
    conv_output[2][11] = -0.019604;
    conv_output[2][11] += input[2][11] * 0.088207;
    conv_output[2][11] += input[2][12] * 0.061727;
    conv_output[2][11] += input[2][13] * -0.114732;
    conv_output[2][11] += input[3][11] * -0.083850;
    conv_output[2][11] += input[3][12] * 0.038051;
    conv_output[2][11] += input[3][13] * 0.042449;
    conv_output[2][11] += input[4][11] * -0.084779;
    conv_output[2][11] += input[4][12] * 0.206606;
    conv_output[2][11] += input[4][13] * -0.146001;
    conv_output[2][11] = fmaxf(0, conv_output[2][11]);
    conv_output[2][12] = -0.019604;
    conv_output[2][12] += input[2][12] * 0.088207;
    conv_output[2][12] += input[2][13] * 0.061727;
    conv_output[2][12] += input[2][14] * -0.114732;
    conv_output[2][12] += input[3][12] * -0.083850;
    conv_output[2][12] += input[3][13] * 0.038051;
    conv_output[2][12] += input[3][14] * 0.042449;
    conv_output[2][12] += input[4][12] * -0.084779;
    conv_output[2][12] += input[4][13] * 0.206606;
    conv_output[2][12] += input[4][14] * -0.146001;
    conv_output[2][12] = fmaxf(0, conv_output[2][12]);
    conv_output[2][13] = -0.019604;
    conv_output[2][13] += input[2][13] * 0.088207;
    conv_output[2][13] += input[2][14] * 0.061727;
    conv_output[2][13] += input[2][15] * -0.114732;
    conv_output[2][13] += input[3][13] * -0.083850;
    conv_output[2][13] += input[3][14] * 0.038051;
    conv_output[2][13] += input[3][15] * 0.042449;
    conv_output[2][13] += input[4][13] * -0.084779;
    conv_output[2][13] += input[4][14] * 0.206606;
    conv_output[2][13] += input[4][15] * -0.146001;
    conv_output[2][13] = fmaxf(0, conv_output[2][13]);
    conv_output[2][14] = -0.019604;
    conv_output[2][14] += input[2][14] * 0.088207;
    conv_output[2][14] += input[2][15] * 0.061727;
    conv_output[2][14] += input[2][16] * -0.114732;
    conv_output[2][14] += input[3][14] * -0.083850;
    conv_output[2][14] += input[3][15] * 0.038051;
    conv_output[2][14] += input[3][16] * 0.042449;
    conv_output[2][14] += input[4][14] * -0.084779;
    conv_output[2][14] += input[4][15] * 0.206606;
    conv_output[2][14] += input[4][16] * -0.146001;
    conv_output[2][14] = fmaxf(0, conv_output[2][14]);
    conv_output[2][15] = -0.019604;
    conv_output[2][15] += input[2][15] * 0.088207;
    conv_output[2][15] += input[2][16] * 0.061727;
    conv_output[2][15] += input[2][17] * -0.114732;
    conv_output[2][15] += input[3][15] * -0.083850;
    conv_output[2][15] += input[3][16] * 0.038051;
    conv_output[2][15] += input[3][17] * 0.042449;
    conv_output[2][15] += input[4][15] * -0.084779;
    conv_output[2][15] += input[4][16] * 0.206606;
    conv_output[2][15] += input[4][17] * -0.146001;
    conv_output[2][15] = fmaxf(0, conv_output[2][15]);
    conv_output[2][16] = -0.019604;
    conv_output[2][16] += input[2][16] * 0.088207;
    conv_output[2][16] += input[2][17] * 0.061727;
    conv_output[2][16] += input[2][18] * -0.114732;
    conv_output[2][16] += input[3][16] * -0.083850;
    conv_output[2][16] += input[3][17] * 0.038051;
    conv_output[2][16] += input[3][18] * 0.042449;
    conv_output[2][16] += input[4][16] * -0.084779;
    conv_output[2][16] += input[4][17] * 0.206606;
    conv_output[2][16] += input[4][18] * -0.146001;
    conv_output[2][16] = fmaxf(0, conv_output[2][16]);
    conv_output[2][17] = -0.019604;
    conv_output[2][17] += input[2][17] * 0.088207;
    conv_output[2][17] += input[2][18] * 0.061727;
    conv_output[2][17] += input[2][19] * -0.114732;
    conv_output[2][17] += input[3][17] * -0.083850;
    conv_output[2][17] += input[3][18] * 0.038051;
    conv_output[2][17] += input[3][19] * 0.042449;
    conv_output[2][17] += input[4][17] * -0.084779;
    conv_output[2][17] += input[4][18] * 0.206606;
    conv_output[2][17] += input[4][19] * -0.146001;
    conv_output[2][17] = fmaxf(0, conv_output[2][17]);
    conv_output[2][18] = -0.019604;
    conv_output[2][18] += input[2][18] * 0.088207;
    conv_output[2][18] += input[2][19] * 0.061727;
    conv_output[2][18] += input[2][20] * -0.114732;
    conv_output[2][18] += input[3][18] * -0.083850;
    conv_output[2][18] += input[3][19] * 0.038051;
    conv_output[2][18] += input[3][20] * 0.042449;
    conv_output[2][18] += input[4][18] * -0.084779;
    conv_output[2][18] += input[4][19] * 0.206606;
    conv_output[2][18] += input[4][20] * -0.146001;
    conv_output[2][18] = fmaxf(0, conv_output[2][18]);
    conv_output[2][19] = -0.019604;
    conv_output[2][19] += input[2][19] * 0.088207;
    conv_output[2][19] += input[2][20] * 0.061727;
    conv_output[2][19] += input[2][21] * -0.114732;
    conv_output[2][19] += input[3][19] * -0.083850;
    conv_output[2][19] += input[3][20] * 0.038051;
    conv_output[2][19] += input[3][21] * 0.042449;
    conv_output[2][19] += input[4][19] * -0.084779;
    conv_output[2][19] += input[4][20] * 0.206606;
    conv_output[2][19] += input[4][21] * -0.146001;
    conv_output[2][19] = fmaxf(0, conv_output[2][19]);
    conv_output[2][20] = -0.019604;
    conv_output[2][20] += input[2][20] * 0.088207;
    conv_output[2][20] += input[2][21] * 0.061727;
    conv_output[2][20] += input[2][22] * -0.114732;
    conv_output[2][20] += input[3][20] * -0.083850;
    conv_output[2][20] += input[3][21] * 0.038051;
    conv_output[2][20] += input[3][22] * 0.042449;
    conv_output[2][20] += input[4][20] * -0.084779;
    conv_output[2][20] += input[4][21] * 0.206606;
    conv_output[2][20] += input[4][22] * -0.146001;
    conv_output[2][20] = fmaxf(0, conv_output[2][20]);
    conv_output[2][21] = -0.019604;
    conv_output[2][21] += input[2][21] * 0.088207;
    conv_output[2][21] += input[2][22] * 0.061727;
    conv_output[2][21] += input[2][23] * -0.114732;
    conv_output[2][21] += input[3][21] * -0.083850;
    conv_output[2][21] += input[3][22] * 0.038051;
    conv_output[2][21] += input[3][23] * 0.042449;
    conv_output[2][21] += input[4][21] * -0.084779;
    conv_output[2][21] += input[4][22] * 0.206606;
    conv_output[2][21] += input[4][23] * -0.146001;
    conv_output[2][21] = fmaxf(0, conv_output[2][21]);
    conv_output[2][22] = -0.019604;
    conv_output[2][22] += input[2][22] * 0.088207;
    conv_output[2][22] += input[2][23] * 0.061727;
    conv_output[2][22] += input[2][24] * -0.114732;
    conv_output[2][22] += input[3][22] * -0.083850;
    conv_output[2][22] += input[3][23] * 0.038051;
    conv_output[2][22] += input[3][24] * 0.042449;
    conv_output[2][22] += input[4][22] * -0.084779;
    conv_output[2][22] += input[4][23] * 0.206606;
    conv_output[2][22] += input[4][24] * -0.146001;
    conv_output[2][22] = fmaxf(0, conv_output[2][22]);
    conv_output[2][23] = -0.019604;
    conv_output[2][23] += input[2][23] * 0.088207;
    conv_output[2][23] += input[2][24] * 0.061727;
    conv_output[2][23] += input[2][25] * -0.114732;
    conv_output[2][23] += input[3][23] * -0.083850;
    conv_output[2][23] += input[3][24] * 0.038051;
    conv_output[2][23] += input[3][25] * 0.042449;
    conv_output[2][23] += input[4][23] * -0.084779;
    conv_output[2][23] += input[4][24] * 0.206606;
    conv_output[2][23] += input[4][25] * -0.146001;
    conv_output[2][23] = fmaxf(0, conv_output[2][23]);
    conv_output[2][24] = -0.019604;
    conv_output[2][24] += input[2][24] * 0.088207;
    conv_output[2][24] += input[2][25] * 0.061727;
    conv_output[2][24] += input[2][26] * -0.114732;
    conv_output[2][24] += input[3][24] * -0.083850;
    conv_output[2][24] += input[3][25] * 0.038051;
    conv_output[2][24] += input[3][26] * 0.042449;
    conv_output[2][24] += input[4][24] * -0.084779;
    conv_output[2][24] += input[4][25] * 0.206606;
    conv_output[2][24] += input[4][26] * -0.146001;
    conv_output[2][24] = fmaxf(0, conv_output[2][24]);
    conv_output[2][25] = -0.019604;
    conv_output[2][25] += input[2][25] * 0.088207;
    conv_output[2][25] += input[2][26] * 0.061727;
    conv_output[2][25] += input[2][27] * -0.114732;
    conv_output[2][25] += input[3][25] * -0.083850;
    conv_output[2][25] += input[3][26] * 0.038051;
    conv_output[2][25] += input[3][27] * 0.042449;
    conv_output[2][25] += input[4][25] * -0.084779;
    conv_output[2][25] += input[4][26] * 0.206606;
    conv_output[2][25] += input[4][27] * -0.146001;
    conv_output[2][25] = fmaxf(0, conv_output[2][25]);
    conv_output[3][0] = -0.019604;
    conv_output[3][0] += input[3][0] * 0.088207;
    conv_output[3][0] += input[3][1] * 0.061727;
    conv_output[3][0] += input[3][2] * -0.114732;
    conv_output[3][0] += input[4][0] * -0.083850;
    conv_output[3][0] += input[4][1] * 0.038051;
    conv_output[3][0] += input[4][2] * 0.042449;
    conv_output[3][0] += input[5][0] * -0.084779;
    conv_output[3][0] += input[5][1] * 0.206606;
    conv_output[3][0] += input[5][2] * -0.146001;
    conv_output[3][0] = fmaxf(0, conv_output[3][0]);
    conv_output[3][1] = -0.019604;
    conv_output[3][1] += input[3][1] * 0.088207;
    conv_output[3][1] += input[3][2] * 0.061727;
    conv_output[3][1] += input[3][3] * -0.114732;
    conv_output[3][1] += input[4][1] * -0.083850;
    conv_output[3][1] += input[4][2] * 0.038051;
    conv_output[3][1] += input[4][3] * 0.042449;
    conv_output[3][1] += input[5][1] * -0.084779;
    conv_output[3][1] += input[5][2] * 0.206606;
    conv_output[3][1] += input[5][3] * -0.146001;
    conv_output[3][1] = fmaxf(0, conv_output[3][1]);
    conv_output[3][2] = -0.019604;
    conv_output[3][2] += input[3][2] * 0.088207;
    conv_output[3][2] += input[3][3] * 0.061727;
    conv_output[3][2] += input[3][4] * -0.114732;
    conv_output[3][2] += input[4][2] * -0.083850;
    conv_output[3][2] += input[4][3] * 0.038051;
    conv_output[3][2] += input[4][4] * 0.042449;
    conv_output[3][2] += input[5][2] * -0.084779;
    conv_output[3][2] += input[5][3] * 0.206606;
    conv_output[3][2] += input[5][4] * -0.146001;
    conv_output[3][2] = fmaxf(0, conv_output[3][2]);
    conv_output[3][3] = -0.019604;
    conv_output[3][3] += input[3][3] * 0.088207;
    conv_output[3][3] += input[3][4] * 0.061727;
    conv_output[3][3] += input[3][5] * -0.114732;
    conv_output[3][3] += input[4][3] * -0.083850;
    conv_output[3][3] += input[4][4] * 0.038051;
    conv_output[3][3] += input[4][5] * 0.042449;
    conv_output[3][3] += input[5][3] * -0.084779;
    conv_output[3][3] += input[5][4] * 0.206606;
    conv_output[3][3] += input[5][5] * -0.146001;
    conv_output[3][3] = fmaxf(0, conv_output[3][3]);
    conv_output[3][4] = -0.019604;
    conv_output[3][4] += input[3][4] * 0.088207;
    conv_output[3][4] += input[3][5] * 0.061727;
    conv_output[3][4] += input[3][6] * -0.114732;
    conv_output[3][4] += input[4][4] * -0.083850;
    conv_output[3][4] += input[4][5] * 0.038051;
    conv_output[3][4] += input[4][6] * 0.042449;
    conv_output[3][4] += input[5][4] * -0.084779;
    conv_output[3][4] += input[5][5] * 0.206606;
    conv_output[3][4] += input[5][6] * -0.146001;
    conv_output[3][4] = fmaxf(0, conv_output[3][4]);
    conv_output[3][5] = -0.019604;
    conv_output[3][5] += input[3][5] * 0.088207;
    conv_output[3][5] += input[3][6] * 0.061727;
    conv_output[3][5] += input[3][7] * -0.114732;
    conv_output[3][5] += input[4][5] * -0.083850;
    conv_output[3][5] += input[4][6] * 0.038051;
    conv_output[3][5] += input[4][7] * 0.042449;
    conv_output[3][5] += input[5][5] * -0.084779;
    conv_output[3][5] += input[5][6] * 0.206606;
    conv_output[3][5] += input[5][7] * -0.146001;
    conv_output[3][5] = fmaxf(0, conv_output[3][5]);
    conv_output[3][6] = -0.019604;
    conv_output[3][6] += input[3][6] * 0.088207;
    conv_output[3][6] += input[3][7] * 0.061727;
    conv_output[3][6] += input[3][8] * -0.114732;
    conv_output[3][6] += input[4][6] * -0.083850;
    conv_output[3][6] += input[4][7] * 0.038051;
    conv_output[3][6] += input[4][8] * 0.042449;
    conv_output[3][6] += input[5][6] * -0.084779;
    conv_output[3][6] += input[5][7] * 0.206606;
    conv_output[3][6] += input[5][8] * -0.146001;
    conv_output[3][6] = fmaxf(0, conv_output[3][6]);
    conv_output[3][7] = -0.019604;
    conv_output[3][7] += input[3][7] * 0.088207;
    conv_output[3][7] += input[3][8] * 0.061727;
    conv_output[3][7] += input[3][9] * -0.114732;
    conv_output[3][7] += input[4][7] * -0.083850;
    conv_output[3][7] += input[4][8] * 0.038051;
    conv_output[3][7] += input[4][9] * 0.042449;
    conv_output[3][7] += input[5][7] * -0.084779;
    conv_output[3][7] += input[5][8] * 0.206606;
    conv_output[3][7] += input[5][9] * -0.146001;
    conv_output[3][7] = fmaxf(0, conv_output[3][7]);
    conv_output[3][8] = -0.019604;
    conv_output[3][8] += input[3][8] * 0.088207;
    conv_output[3][8] += input[3][9] * 0.061727;
    conv_output[3][8] += input[3][10] * -0.114732;
    conv_output[3][8] += input[4][8] * -0.083850;
    conv_output[3][8] += input[4][9] * 0.038051;
    conv_output[3][8] += input[4][10] * 0.042449;
    conv_output[3][8] += input[5][8] * -0.084779;
    conv_output[3][8] += input[5][9] * 0.206606;
    conv_output[3][8] += input[5][10] * -0.146001;
    conv_output[3][8] = fmaxf(0, conv_output[3][8]);
    conv_output[3][9] = -0.019604;
    conv_output[3][9] += input[3][9] * 0.088207;
    conv_output[3][9] += input[3][10] * 0.061727;
    conv_output[3][9] += input[3][11] * -0.114732;
    conv_output[3][9] += input[4][9] * -0.083850;
    conv_output[3][9] += input[4][10] * 0.038051;
    conv_output[3][9] += input[4][11] * 0.042449;
    conv_output[3][9] += input[5][9] * -0.084779;
    conv_output[3][9] += input[5][10] * 0.206606;
    conv_output[3][9] += input[5][11] * -0.146001;
    conv_output[3][9] = fmaxf(0, conv_output[3][9]);
    conv_output[3][10] = -0.019604;
    conv_output[3][10] += input[3][10] * 0.088207;
    conv_output[3][10] += input[3][11] * 0.061727;
    conv_output[3][10] += input[3][12] * -0.114732;
    conv_output[3][10] += input[4][10] * -0.083850;
    conv_output[3][10] += input[4][11] * 0.038051;
    conv_output[3][10] += input[4][12] * 0.042449;
    conv_output[3][10] += input[5][10] * -0.084779;
    conv_output[3][10] += input[5][11] * 0.206606;
    conv_output[3][10] += input[5][12] * -0.146001;
    conv_output[3][10] = fmaxf(0, conv_output[3][10]);
    conv_output[3][11] = -0.019604;
    conv_output[3][11] += input[3][11] * 0.088207;
    conv_output[3][11] += input[3][12] * 0.061727;
    conv_output[3][11] += input[3][13] * -0.114732;
    conv_output[3][11] += input[4][11] * -0.083850;
    conv_output[3][11] += input[4][12] * 0.038051;
    conv_output[3][11] += input[4][13] * 0.042449;
    conv_output[3][11] += input[5][11] * -0.084779;
    conv_output[3][11] += input[5][12] * 0.206606;
    conv_output[3][11] += input[5][13] * -0.146001;
    conv_output[3][11] = fmaxf(0, conv_output[3][11]);
    conv_output[3][12] = -0.019604;
    conv_output[3][12] += input[3][12] * 0.088207;
    conv_output[3][12] += input[3][13] * 0.061727;
    conv_output[3][12] += input[3][14] * -0.114732;
    conv_output[3][12] += input[4][12] * -0.083850;
    conv_output[3][12] += input[4][13] * 0.038051;
    conv_output[3][12] += input[4][14] * 0.042449;
    conv_output[3][12] += input[5][12] * -0.084779;
    conv_output[3][12] += input[5][13] * 0.206606;
    conv_output[3][12] += input[5][14] * -0.146001;
    conv_output[3][12] = fmaxf(0, conv_output[3][12]);
    conv_output[3][13] = -0.019604;
    conv_output[3][13] += input[3][13] * 0.088207;
    conv_output[3][13] += input[3][14] * 0.061727;
    conv_output[3][13] += input[3][15] * -0.114732;
    conv_output[3][13] += input[4][13] * -0.083850;
    conv_output[3][13] += input[4][14] * 0.038051;
    conv_output[3][13] += input[4][15] * 0.042449;
    conv_output[3][13] += input[5][13] * -0.084779;
    conv_output[3][13] += input[5][14] * 0.206606;
    conv_output[3][13] += input[5][15] * -0.146001;
    conv_output[3][13] = fmaxf(0, conv_output[3][13]);
    conv_output[3][14] = -0.019604;
    conv_output[3][14] += input[3][14] * 0.088207;
    conv_output[3][14] += input[3][15] * 0.061727;
    conv_output[3][14] += input[3][16] * -0.114732;
    conv_output[3][14] += input[4][14] * -0.083850;
    conv_output[3][14] += input[4][15] * 0.038051;
    conv_output[3][14] += input[4][16] * 0.042449;
    conv_output[3][14] += input[5][14] * -0.084779;
    conv_output[3][14] += input[5][15] * 0.206606;
    conv_output[3][14] += input[5][16] * -0.146001;
    conv_output[3][14] = fmaxf(0, conv_output[3][14]);
    conv_output[3][15] = -0.019604;
    conv_output[3][15] += input[3][15] * 0.088207;
    conv_output[3][15] += input[3][16] * 0.061727;
    conv_output[3][15] += input[3][17] * -0.114732;
    conv_output[3][15] += input[4][15] * -0.083850;
    conv_output[3][15] += input[4][16] * 0.038051;
    conv_output[3][15] += input[4][17] * 0.042449;
    conv_output[3][15] += input[5][15] * -0.084779;
    conv_output[3][15] += input[5][16] * 0.206606;
    conv_output[3][15] += input[5][17] * -0.146001;
    conv_output[3][15] = fmaxf(0, conv_output[3][15]);
    conv_output[3][16] = -0.019604;
    conv_output[3][16] += input[3][16] * 0.088207;
    conv_output[3][16] += input[3][17] * 0.061727;
    conv_output[3][16] += input[3][18] * -0.114732;
    conv_output[3][16] += input[4][16] * -0.083850;
    conv_output[3][16] += input[4][17] * 0.038051;
    conv_output[3][16] += input[4][18] * 0.042449;
    conv_output[3][16] += input[5][16] * -0.084779;
    conv_output[3][16] += input[5][17] * 0.206606;
    conv_output[3][16] += input[5][18] * -0.146001;
    conv_output[3][16] = fmaxf(0, conv_output[3][16]);
    conv_output[3][17] = -0.019604;
    conv_output[3][17] += input[3][17] * 0.088207;
    conv_output[3][17] += input[3][18] * 0.061727;
    conv_output[3][17] += input[3][19] * -0.114732;
    conv_output[3][17] += input[4][17] * -0.083850;
    conv_output[3][17] += input[4][18] * 0.038051;
    conv_output[3][17] += input[4][19] * 0.042449;
    conv_output[3][17] += input[5][17] * -0.084779;
    conv_output[3][17] += input[5][18] * 0.206606;
    conv_output[3][17] += input[5][19] * -0.146001;
    conv_output[3][17] = fmaxf(0, conv_output[3][17]);
    conv_output[3][18] = -0.019604;
    conv_output[3][18] += input[3][18] * 0.088207;
    conv_output[3][18] += input[3][19] * 0.061727;
    conv_output[3][18] += input[3][20] * -0.114732;
    conv_output[3][18] += input[4][18] * -0.083850;
    conv_output[3][18] += input[4][19] * 0.038051;
    conv_output[3][18] += input[4][20] * 0.042449;
    conv_output[3][18] += input[5][18] * -0.084779;
    conv_output[3][18] += input[5][19] * 0.206606;
    conv_output[3][18] += input[5][20] * -0.146001;
    conv_output[3][18] = fmaxf(0, conv_output[3][18]);
    conv_output[3][19] = -0.019604;
    conv_output[3][19] += input[3][19] * 0.088207;
    conv_output[3][19] += input[3][20] * 0.061727;
    conv_output[3][19] += input[3][21] * -0.114732;
    conv_output[3][19] += input[4][19] * -0.083850;
    conv_output[3][19] += input[4][20] * 0.038051;
    conv_output[3][19] += input[4][21] * 0.042449;
    conv_output[3][19] += input[5][19] * -0.084779;
    conv_output[3][19] += input[5][20] * 0.206606;
    conv_output[3][19] += input[5][21] * -0.146001;
    conv_output[3][19] = fmaxf(0, conv_output[3][19]);
    conv_output[3][20] = -0.019604;
    conv_output[3][20] += input[3][20] * 0.088207;
    conv_output[3][20] += input[3][21] * 0.061727;
    conv_output[3][20] += input[3][22] * -0.114732;
    conv_output[3][20] += input[4][20] * -0.083850;
    conv_output[3][20] += input[4][21] * 0.038051;
    conv_output[3][20] += input[4][22] * 0.042449;
    conv_output[3][20] += input[5][20] * -0.084779;
    conv_output[3][20] += input[5][21] * 0.206606;
    conv_output[3][20] += input[5][22] * -0.146001;
    conv_output[3][20] = fmaxf(0, conv_output[3][20]);
    conv_output[3][21] = -0.019604;
    conv_output[3][21] += input[3][21] * 0.088207;
    conv_output[3][21] += input[3][22] * 0.061727;
    conv_output[3][21] += input[3][23] * -0.114732;
    conv_output[3][21] += input[4][21] * -0.083850;
    conv_output[3][21] += input[4][22] * 0.038051;
    conv_output[3][21] += input[4][23] * 0.042449;
    conv_output[3][21] += input[5][21] * -0.084779;
    conv_output[3][21] += input[5][22] * 0.206606;
    conv_output[3][21] += input[5][23] * -0.146001;
    conv_output[3][21] = fmaxf(0, conv_output[3][21]);
    conv_output[3][22] = -0.019604;
    conv_output[3][22] += input[3][22] * 0.088207;
    conv_output[3][22] += input[3][23] * 0.061727;
    conv_output[3][22] += input[3][24] * -0.114732;
    conv_output[3][22] += input[4][22] * -0.083850;
    conv_output[3][22] += input[4][23] * 0.038051;
    conv_output[3][22] += input[4][24] * 0.042449;
    conv_output[3][22] += input[5][22] * -0.084779;
    conv_output[3][22] += input[5][23] * 0.206606;
    conv_output[3][22] += input[5][24] * -0.146001;
    conv_output[3][22] = fmaxf(0, conv_output[3][22]);
    conv_output[3][23] = -0.019604;
    conv_output[3][23] += input[3][23] * 0.088207;
    conv_output[3][23] += input[3][24] * 0.061727;
    conv_output[3][23] += input[3][25] * -0.114732;
    conv_output[3][23] += input[4][23] * -0.083850;
    conv_output[3][23] += input[4][24] * 0.038051;
    conv_output[3][23] += input[4][25] * 0.042449;
    conv_output[3][23] += input[5][23] * -0.084779;
    conv_output[3][23] += input[5][24] * 0.206606;
    conv_output[3][23] += input[5][25] * -0.146001;
    conv_output[3][23] = fmaxf(0, conv_output[3][23]);
    conv_output[3][24] = -0.019604;
    conv_output[3][24] += input[3][24] * 0.088207;
    conv_output[3][24] += input[3][25] * 0.061727;
    conv_output[3][24] += input[3][26] * -0.114732;
    conv_output[3][24] += input[4][24] * -0.083850;
    conv_output[3][24] += input[4][25] * 0.038051;
    conv_output[3][24] += input[4][26] * 0.042449;
    conv_output[3][24] += input[5][24] * -0.084779;
    conv_output[3][24] += input[5][25] * 0.206606;
    conv_output[3][24] += input[5][26] * -0.146001;
    conv_output[3][24] = fmaxf(0, conv_output[3][24]);
    conv_output[3][25] = -0.019604;
    conv_output[3][25] += input[3][25] * 0.088207;
    conv_output[3][25] += input[3][26] * 0.061727;
    conv_output[3][25] += input[3][27] * -0.114732;
    conv_output[3][25] += input[4][25] * -0.083850;
    conv_output[3][25] += input[4][26] * 0.038051;
    conv_output[3][25] += input[4][27] * 0.042449;
    conv_output[3][25] += input[5][25] * -0.084779;
    conv_output[3][25] += input[5][26] * 0.206606;
    conv_output[3][25] += input[5][27] * -0.146001;
    conv_output[3][25] = fmaxf(0, conv_output[3][25]);
    conv_output[4][0] = -0.019604;
    conv_output[4][0] += input[4][0] * 0.088207;
    conv_output[4][0] += input[4][1] * 0.061727;
    conv_output[4][0] += input[4][2] * -0.114732;
    conv_output[4][0] += input[5][0] * -0.083850;
    conv_output[4][0] += input[5][1] * 0.038051;
    conv_output[4][0] += input[5][2] * 0.042449;
    conv_output[4][0] += input[6][0] * -0.084779;
    conv_output[4][0] += input[6][1] * 0.206606;
    conv_output[4][0] += input[6][2] * -0.146001;
    conv_output[4][0] = fmaxf(0, conv_output[4][0]);
    conv_output[4][1] = -0.019604;
    conv_output[4][1] += input[4][1] * 0.088207;
    conv_output[4][1] += input[4][2] * 0.061727;
    conv_output[4][1] += input[4][3] * -0.114732;
    conv_output[4][1] += input[5][1] * -0.083850;
    conv_output[4][1] += input[5][2] * 0.038051;
    conv_output[4][1] += input[5][3] * 0.042449;
    conv_output[4][1] += input[6][1] * -0.084779;
    conv_output[4][1] += input[6][2] * 0.206606;
    conv_output[4][1] += input[6][3] * -0.146001;
    conv_output[4][1] = fmaxf(0, conv_output[4][1]);
    conv_output[4][2] = -0.019604;
    conv_output[4][2] += input[4][2] * 0.088207;
    conv_output[4][2] += input[4][3] * 0.061727;
    conv_output[4][2] += input[4][4] * -0.114732;
    conv_output[4][2] += input[5][2] * -0.083850;
    conv_output[4][2] += input[5][3] * 0.038051;
    conv_output[4][2] += input[5][4] * 0.042449;
    conv_output[4][2] += input[6][2] * -0.084779;
    conv_output[4][2] += input[6][3] * 0.206606;
    conv_output[4][2] += input[6][4] * -0.146001;
    conv_output[4][2] = fmaxf(0, conv_output[4][2]);
    conv_output[4][3] = -0.019604;
    conv_output[4][3] += input[4][3] * 0.088207;
    conv_output[4][3] += input[4][4] * 0.061727;
    conv_output[4][3] += input[4][5] * -0.114732;
    conv_output[4][3] += input[5][3] * -0.083850;
    conv_output[4][3] += input[5][4] * 0.038051;
    conv_output[4][3] += input[5][5] * 0.042449;
    conv_output[4][3] += input[6][3] * -0.084779;
    conv_output[4][3] += input[6][4] * 0.206606;
    conv_output[4][3] += input[6][5] * -0.146001;
    conv_output[4][3] = fmaxf(0, conv_output[4][3]);
    conv_output[4][4] = -0.019604;
    conv_output[4][4] += input[4][4] * 0.088207;
    conv_output[4][4] += input[4][5] * 0.061727;
    conv_output[4][4] += input[4][6] * -0.114732;
    conv_output[4][4] += input[5][4] * -0.083850;
    conv_output[4][4] += input[5][5] * 0.038051;
    conv_output[4][4] += input[5][6] * 0.042449;
    conv_output[4][4] += input[6][4] * -0.084779;
    conv_output[4][4] += input[6][5] * 0.206606;
    conv_output[4][4] += input[6][6] * -0.146001;
    conv_output[4][4] = fmaxf(0, conv_output[4][4]);
    conv_output[4][5] = -0.019604;
    conv_output[4][5] += input[4][5] * 0.088207;
    conv_output[4][5] += input[4][6] * 0.061727;
    conv_output[4][5] += input[4][7] * -0.114732;
    conv_output[4][5] += input[5][5] * -0.083850;
    conv_output[4][5] += input[5][6] * 0.038051;
    conv_output[4][5] += input[5][7] * 0.042449;
    conv_output[4][5] += input[6][5] * -0.084779;
    conv_output[4][5] += input[6][6] * 0.206606;
    conv_output[4][5] += input[6][7] * -0.146001;
    conv_output[4][5] = fmaxf(0, conv_output[4][5]);
    conv_output[4][6] = -0.019604;
    conv_output[4][6] += input[4][6] * 0.088207;
    conv_output[4][6] += input[4][7] * 0.061727;
    conv_output[4][6] += input[4][8] * -0.114732;
    conv_output[4][6] += input[5][6] * -0.083850;
    conv_output[4][6] += input[5][7] * 0.038051;
    conv_output[4][6] += input[5][8] * 0.042449;
    conv_output[4][6] += input[6][6] * -0.084779;
    conv_output[4][6] += input[6][7] * 0.206606;
    conv_output[4][6] += input[6][8] * -0.146001;
    conv_output[4][6] = fmaxf(0, conv_output[4][6]);
    conv_output[4][7] = -0.019604;
    conv_output[4][7] += input[4][7] * 0.088207;
    conv_output[4][7] += input[4][8] * 0.061727;
    conv_output[4][7] += input[4][9] * -0.114732;
    conv_output[4][7] += input[5][7] * -0.083850;
    conv_output[4][7] += input[5][8] * 0.038051;
    conv_output[4][7] += input[5][9] * 0.042449;
    conv_output[4][7] += input[6][7] * -0.084779;
    conv_output[4][7] += input[6][8] * 0.206606;
    conv_output[4][7] += input[6][9] * -0.146001;
    conv_output[4][7] = fmaxf(0, conv_output[4][7]);
    conv_output[4][8] = -0.019604;
    conv_output[4][8] += input[4][8] * 0.088207;
    conv_output[4][8] += input[4][9] * 0.061727;
    conv_output[4][8] += input[4][10] * -0.114732;
    conv_output[4][8] += input[5][8] * -0.083850;
    conv_output[4][8] += input[5][9] * 0.038051;
    conv_output[4][8] += input[5][10] * 0.042449;
    conv_output[4][8] += input[6][8] * -0.084779;
    conv_output[4][8] += input[6][9] * 0.206606;
    conv_output[4][8] += input[6][10] * -0.146001;
    conv_output[4][8] = fmaxf(0, conv_output[4][8]);
    conv_output[4][9] = -0.019604;
    conv_output[4][9] += input[4][9] * 0.088207;
    conv_output[4][9] += input[4][10] * 0.061727;
    conv_output[4][9] += input[4][11] * -0.114732;
    conv_output[4][9] += input[5][9] * -0.083850;
    conv_output[4][9] += input[5][10] * 0.038051;
    conv_output[4][9] += input[5][11] * 0.042449;
    conv_output[4][9] += input[6][9] * -0.084779;
    conv_output[4][9] += input[6][10] * 0.206606;
    conv_output[4][9] += input[6][11] * -0.146001;
    conv_output[4][9] = fmaxf(0, conv_output[4][9]);
    conv_output[4][10] = -0.019604;
    conv_output[4][10] += input[4][10] * 0.088207;
    conv_output[4][10] += input[4][11] * 0.061727;
    conv_output[4][10] += input[4][12] * -0.114732;
    conv_output[4][10] += input[5][10] * -0.083850;
    conv_output[4][10] += input[5][11] * 0.038051;
    conv_output[4][10] += input[5][12] * 0.042449;
    conv_output[4][10] += input[6][10] * -0.084779;
    conv_output[4][10] += input[6][11] * 0.206606;
    conv_output[4][10] += input[6][12] * -0.146001;
    conv_output[4][10] = fmaxf(0, conv_output[4][10]);
    conv_output[4][11] = -0.019604;
    conv_output[4][11] += input[4][11] * 0.088207;
    conv_output[4][11] += input[4][12] * 0.061727;
    conv_output[4][11] += input[4][13] * -0.114732;
    conv_output[4][11] += input[5][11] * -0.083850;
    conv_output[4][11] += input[5][12] * 0.038051;
    conv_output[4][11] += input[5][13] * 0.042449;
    conv_output[4][11] += input[6][11] * -0.084779;
    conv_output[4][11] += input[6][12] * 0.206606;
    conv_output[4][11] += input[6][13] * -0.146001;
    conv_output[4][11] = fmaxf(0, conv_output[4][11]);
    conv_output[4][12] = -0.019604;
    conv_output[4][12] += input[4][12] * 0.088207;
    conv_output[4][12] += input[4][13] * 0.061727;
    conv_output[4][12] += input[4][14] * -0.114732;
    conv_output[4][12] += input[5][12] * -0.083850;
    conv_output[4][12] += input[5][13] * 0.038051;
    conv_output[4][12] += input[5][14] * 0.042449;
    conv_output[4][12] += input[6][12] * -0.084779;
    conv_output[4][12] += input[6][13] * 0.206606;
    conv_output[4][12] += input[6][14] * -0.146001;
    conv_output[4][12] = fmaxf(0, conv_output[4][12]);
    conv_output[4][13] = -0.019604;
    conv_output[4][13] += input[4][13] * 0.088207;
    conv_output[4][13] += input[4][14] * 0.061727;
    conv_output[4][13] += input[4][15] * -0.114732;
    conv_output[4][13] += input[5][13] * -0.083850;
    conv_output[4][13] += input[5][14] * 0.038051;
    conv_output[4][13] += input[5][15] * 0.042449;
    conv_output[4][13] += input[6][13] * -0.084779;
    conv_output[4][13] += input[6][14] * 0.206606;
    conv_output[4][13] += input[6][15] * -0.146001;
    conv_output[4][13] = fmaxf(0, conv_output[4][13]);
    conv_output[4][14] = -0.019604;
    conv_output[4][14] += input[4][14] * 0.088207;
    conv_output[4][14] += input[4][15] * 0.061727;
    conv_output[4][14] += input[4][16] * -0.114732;
    conv_output[4][14] += input[5][14] * -0.083850;
    conv_output[4][14] += input[5][15] * 0.038051;
    conv_output[4][14] += input[5][16] * 0.042449;
    conv_output[4][14] += input[6][14] * -0.084779;
    conv_output[4][14] += input[6][15] * 0.206606;
    conv_output[4][14] += input[6][16] * -0.146001;
    conv_output[4][14] = fmaxf(0, conv_output[4][14]);
    conv_output[4][15] = -0.019604;
    conv_output[4][15] += input[4][15] * 0.088207;
    conv_output[4][15] += input[4][16] * 0.061727;
    conv_output[4][15] += input[4][17] * -0.114732;
    conv_output[4][15] += input[5][15] * -0.083850;
    conv_output[4][15] += input[5][16] * 0.038051;
    conv_output[4][15] += input[5][17] * 0.042449;
    conv_output[4][15] += input[6][15] * -0.084779;
    conv_output[4][15] += input[6][16] * 0.206606;
    conv_output[4][15] += input[6][17] * -0.146001;
    conv_output[4][15] = fmaxf(0, conv_output[4][15]);
    conv_output[4][16] = -0.019604;
    conv_output[4][16] += input[4][16] * 0.088207;
    conv_output[4][16] += input[4][17] * 0.061727;
    conv_output[4][16] += input[4][18] * -0.114732;
    conv_output[4][16] += input[5][16] * -0.083850;
    conv_output[4][16] += input[5][17] * 0.038051;
    conv_output[4][16] += input[5][18] * 0.042449;
    conv_output[4][16] += input[6][16] * -0.084779;
    conv_output[4][16] += input[6][17] * 0.206606;
    conv_output[4][16] += input[6][18] * -0.146001;
    conv_output[4][16] = fmaxf(0, conv_output[4][16]);
    conv_output[4][17] = -0.019604;
    conv_output[4][17] += input[4][17] * 0.088207;
    conv_output[4][17] += input[4][18] * 0.061727;
    conv_output[4][17] += input[4][19] * -0.114732;
    conv_output[4][17] += input[5][17] * -0.083850;
    conv_output[4][17] += input[5][18] * 0.038051;
    conv_output[4][17] += input[5][19] * 0.042449;
    conv_output[4][17] += input[6][17] * -0.084779;
    conv_output[4][17] += input[6][18] * 0.206606;
    conv_output[4][17] += input[6][19] * -0.146001;
    conv_output[4][17] = fmaxf(0, conv_output[4][17]);
    conv_output[4][18] = -0.019604;
    conv_output[4][18] += input[4][18] * 0.088207;
    conv_output[4][18] += input[4][19] * 0.061727;
    conv_output[4][18] += input[4][20] * -0.114732;
    conv_output[4][18] += input[5][18] * -0.083850;
    conv_output[4][18] += input[5][19] * 0.038051;
    conv_output[4][18] += input[5][20] * 0.042449;
    conv_output[4][18] += input[6][18] * -0.084779;
    conv_output[4][18] += input[6][19] * 0.206606;
    conv_output[4][18] += input[6][20] * -0.146001;
    conv_output[4][18] = fmaxf(0, conv_output[4][18]);
    conv_output[4][19] = -0.019604;
    conv_output[4][19] += input[4][19] * 0.088207;
    conv_output[4][19] += input[4][20] * 0.061727;
    conv_output[4][19] += input[4][21] * -0.114732;
    conv_output[4][19] += input[5][19] * -0.083850;
    conv_output[4][19] += input[5][20] * 0.038051;
    conv_output[4][19] += input[5][21] * 0.042449;
    conv_output[4][19] += input[6][19] * -0.084779;
    conv_output[4][19] += input[6][20] * 0.206606;
    conv_output[4][19] += input[6][21] * -0.146001;
    conv_output[4][19] = fmaxf(0, conv_output[4][19]);
    conv_output[4][20] = -0.019604;
    conv_output[4][20] += input[4][20] * 0.088207;
    conv_output[4][20] += input[4][21] * 0.061727;
    conv_output[4][20] += input[4][22] * -0.114732;
    conv_output[4][20] += input[5][20] * -0.083850;
    conv_output[4][20] += input[5][21] * 0.038051;
    conv_output[4][20] += input[5][22] * 0.042449;
    conv_output[4][20] += input[6][20] * -0.084779;
    conv_output[4][20] += input[6][21] * 0.206606;
    conv_output[4][20] += input[6][22] * -0.146001;
    conv_output[4][20] = fmaxf(0, conv_output[4][20]);
    conv_output[4][21] = -0.019604;
    conv_output[4][21] += input[4][21] * 0.088207;
    conv_output[4][21] += input[4][22] * 0.061727;
    conv_output[4][21] += input[4][23] * -0.114732;
    conv_output[4][21] += input[5][21] * -0.083850;
    conv_output[4][21] += input[5][22] * 0.038051;
    conv_output[4][21] += input[5][23] * 0.042449;
    conv_output[4][21] += input[6][21] * -0.084779;
    conv_output[4][21] += input[6][22] * 0.206606;
    conv_output[4][21] += input[6][23] * -0.146001;
    conv_output[4][21] = fmaxf(0, conv_output[4][21]);
    conv_output[4][22] = -0.019604;
    conv_output[4][22] += input[4][22] * 0.088207;
    conv_output[4][22] += input[4][23] * 0.061727;
    conv_output[4][22] += input[4][24] * -0.114732;
    conv_output[4][22] += input[5][22] * -0.083850;
    conv_output[4][22] += input[5][23] * 0.038051;
    conv_output[4][22] += input[5][24] * 0.042449;
    conv_output[4][22] += input[6][22] * -0.084779;
    conv_output[4][22] += input[6][23] * 0.206606;
    conv_output[4][22] += input[6][24] * -0.146001;
    conv_output[4][22] = fmaxf(0, conv_output[4][22]);
    conv_output[4][23] = -0.019604;
    conv_output[4][23] += input[4][23] * 0.088207;
    conv_output[4][23] += input[4][24] * 0.061727;
    conv_output[4][23] += input[4][25] * -0.114732;
    conv_output[4][23] += input[5][23] * -0.083850;
    conv_output[4][23] += input[5][24] * 0.038051;
    conv_output[4][23] += input[5][25] * 0.042449;
    conv_output[4][23] += input[6][23] * -0.084779;
    conv_output[4][23] += input[6][24] * 0.206606;
    conv_output[4][23] += input[6][25] * -0.146001;
    conv_output[4][23] = fmaxf(0, conv_output[4][23]);
    conv_output[4][24] = -0.019604;
    conv_output[4][24] += input[4][24] * 0.088207;
    conv_output[4][24] += input[4][25] * 0.061727;
    conv_output[4][24] += input[4][26] * -0.114732;
    conv_output[4][24] += input[5][24] * -0.083850;
    conv_output[4][24] += input[5][25] * 0.038051;
    conv_output[4][24] += input[5][26] * 0.042449;
    conv_output[4][24] += input[6][24] * -0.084779;
    conv_output[4][24] += input[6][25] * 0.206606;
    conv_output[4][24] += input[6][26] * -0.146001;
    conv_output[4][24] = fmaxf(0, conv_output[4][24]);
    conv_output[4][25] = -0.019604;
    conv_output[4][25] += input[4][25] * 0.088207;
    conv_output[4][25] += input[4][26] * 0.061727;
    conv_output[4][25] += input[4][27] * -0.114732;
    conv_output[4][25] += input[5][25] * -0.083850;
    conv_output[4][25] += input[5][26] * 0.038051;
    conv_output[4][25] += input[5][27] * 0.042449;
    conv_output[4][25] += input[6][25] * -0.084779;
    conv_output[4][25] += input[6][26] * 0.206606;
    conv_output[4][25] += input[6][27] * -0.146001;
    conv_output[4][25] = fmaxf(0, conv_output[4][25]);
    conv_output[5][0] = -0.019604;
    conv_output[5][0] += input[5][0] * 0.088207;
    conv_output[5][0] += input[5][1] * 0.061727;
    conv_output[5][0] += input[5][2] * -0.114732;
    conv_output[5][0] += input[6][0] * -0.083850;
    conv_output[5][0] += input[6][1] * 0.038051;
    conv_output[5][0] += input[6][2] * 0.042449;
    conv_output[5][0] += input[7][0] * -0.084779;
    conv_output[5][0] += input[7][1] * 0.206606;
    conv_output[5][0] += input[7][2] * -0.146001;
    conv_output[5][0] = fmaxf(0, conv_output[5][0]);
    conv_output[5][1] = -0.019604;
    conv_output[5][1] += input[5][1] * 0.088207;
    conv_output[5][1] += input[5][2] * 0.061727;
    conv_output[5][1] += input[5][3] * -0.114732;
    conv_output[5][1] += input[6][1] * -0.083850;
    conv_output[5][1] += input[6][2] * 0.038051;
    conv_output[5][1] += input[6][3] * 0.042449;
    conv_output[5][1] += input[7][1] * -0.084779;
    conv_output[5][1] += input[7][2] * 0.206606;
    conv_output[5][1] += input[7][3] * -0.146001;
    conv_output[5][1] = fmaxf(0, conv_output[5][1]);
    conv_output[5][2] = -0.019604;
    conv_output[5][2] += input[5][2] * 0.088207;
    conv_output[5][2] += input[5][3] * 0.061727;
    conv_output[5][2] += input[5][4] * -0.114732;
    conv_output[5][2] += input[6][2] * -0.083850;
    conv_output[5][2] += input[6][3] * 0.038051;
    conv_output[5][2] += input[6][4] * 0.042449;
    conv_output[5][2] += input[7][2] * -0.084779;
    conv_output[5][2] += input[7][3] * 0.206606;
    conv_output[5][2] += input[7][4] * -0.146001;
    conv_output[5][2] = fmaxf(0, conv_output[5][2]);
    conv_output[5][3] = -0.019604;
    conv_output[5][3] += input[5][3] * 0.088207;
    conv_output[5][3] += input[5][4] * 0.061727;
    conv_output[5][3] += input[5][5] * -0.114732;
    conv_output[5][3] += input[6][3] * -0.083850;
    conv_output[5][3] += input[6][4] * 0.038051;
    conv_output[5][3] += input[6][5] * 0.042449;
    conv_output[5][3] += input[7][3] * -0.084779;
    conv_output[5][3] += input[7][4] * 0.206606;
    conv_output[5][3] += input[7][5] * -0.146001;
    conv_output[5][3] = fmaxf(0, conv_output[5][3]);
    conv_output[5][4] = -0.019604;
    conv_output[5][4] += input[5][4] * 0.088207;
    conv_output[5][4] += input[5][5] * 0.061727;
    conv_output[5][4] += input[5][6] * -0.114732;
    conv_output[5][4] += input[6][4] * -0.083850;
    conv_output[5][4] += input[6][5] * 0.038051;
    conv_output[5][4] += input[6][6] * 0.042449;
    conv_output[5][4] += input[7][4] * -0.084779;
    conv_output[5][4] += input[7][5] * 0.206606;
    conv_output[5][4] += input[7][6] * -0.146001;
    conv_output[5][4] = fmaxf(0, conv_output[5][4]);
    conv_output[5][5] = -0.019604;
    conv_output[5][5] += input[5][5] * 0.088207;
    conv_output[5][5] += input[5][6] * 0.061727;
    conv_output[5][5] += input[5][7] * -0.114732;
    conv_output[5][5] += input[6][5] * -0.083850;
    conv_output[5][5] += input[6][6] * 0.038051;
    conv_output[5][5] += input[6][7] * 0.042449;
    conv_output[5][5] += input[7][5] * -0.084779;
    conv_output[5][5] += input[7][6] * 0.206606;
    conv_output[5][5] += input[7][7] * -0.146001;
    conv_output[5][5] = fmaxf(0, conv_output[5][5]);
    conv_output[5][6] = -0.019604;
    conv_output[5][6] += input[5][6] * 0.088207;
    conv_output[5][6] += input[5][7] * 0.061727;
    conv_output[5][6] += input[5][8] * -0.114732;
    conv_output[5][6] += input[6][6] * -0.083850;
    conv_output[5][6] += input[6][7] * 0.038051;
    conv_output[5][6] += input[6][8] * 0.042449;
    conv_output[5][6] += input[7][6] * -0.084779;
    conv_output[5][6] += input[7][7] * 0.206606;
    conv_output[5][6] += input[7][8] * -0.146001;
    conv_output[5][6] = fmaxf(0, conv_output[5][6]);
    conv_output[5][7] = -0.019604;
    conv_output[5][7] += input[5][7] * 0.088207;
    conv_output[5][7] += input[5][8] * 0.061727;
    conv_output[5][7] += input[5][9] * -0.114732;
    conv_output[5][7] += input[6][7] * -0.083850;
    conv_output[5][7] += input[6][8] * 0.038051;
    conv_output[5][7] += input[6][9] * 0.042449;
    conv_output[5][7] += input[7][7] * -0.084779;
    conv_output[5][7] += input[7][8] * 0.206606;
    conv_output[5][7] += input[7][9] * -0.146001;
    conv_output[5][7] = fmaxf(0, conv_output[5][7]);
    conv_output[5][8] = -0.019604;
    conv_output[5][8] += input[5][8] * 0.088207;
    conv_output[5][8] += input[5][9] * 0.061727;
    conv_output[5][8] += input[5][10] * -0.114732;
    conv_output[5][8] += input[6][8] * -0.083850;
    conv_output[5][8] += input[6][9] * 0.038051;
    conv_output[5][8] += input[6][10] * 0.042449;
    conv_output[5][8] += input[7][8] * -0.084779;
    conv_output[5][8] += input[7][9] * 0.206606;
    conv_output[5][8] += input[7][10] * -0.146001;
    conv_output[5][8] = fmaxf(0, conv_output[5][8]);
    conv_output[5][9] = -0.019604;
    conv_output[5][9] += input[5][9] * 0.088207;
    conv_output[5][9] += input[5][10] * 0.061727;
    conv_output[5][9] += input[5][11] * -0.114732;
    conv_output[5][9] += input[6][9] * -0.083850;
    conv_output[5][9] += input[6][10] * 0.038051;
    conv_output[5][9] += input[6][11] * 0.042449;
    conv_output[5][9] += input[7][9] * -0.084779;
    conv_output[5][9] += input[7][10] * 0.206606;
    conv_output[5][9] += input[7][11] * -0.146001;
    conv_output[5][9] = fmaxf(0, conv_output[5][9]);
    conv_output[5][10] = -0.019604;
    conv_output[5][10] += input[5][10] * 0.088207;
    conv_output[5][10] += input[5][11] * 0.061727;
    conv_output[5][10] += input[5][12] * -0.114732;
    conv_output[5][10] += input[6][10] * -0.083850;
    conv_output[5][10] += input[6][11] * 0.038051;
    conv_output[5][10] += input[6][12] * 0.042449;
    conv_output[5][10] += input[7][10] * -0.084779;
    conv_output[5][10] += input[7][11] * 0.206606;
    conv_output[5][10] += input[7][12] * -0.146001;
    conv_output[5][10] = fmaxf(0, conv_output[5][10]);
    conv_output[5][11] = -0.019604;
    conv_output[5][11] += input[5][11] * 0.088207;
    conv_output[5][11] += input[5][12] * 0.061727;
    conv_output[5][11] += input[5][13] * -0.114732;
    conv_output[5][11] += input[6][11] * -0.083850;
    conv_output[5][11] += input[6][12] * 0.038051;
    conv_output[5][11] += input[6][13] * 0.042449;
    conv_output[5][11] += input[7][11] * -0.084779;
    conv_output[5][11] += input[7][12] * 0.206606;
    conv_output[5][11] += input[7][13] * -0.146001;
    conv_output[5][11] = fmaxf(0, conv_output[5][11]);
    conv_output[5][12] = -0.019604;
    conv_output[5][12] += input[5][12] * 0.088207;
    conv_output[5][12] += input[5][13] * 0.061727;
    conv_output[5][12] += input[5][14] * -0.114732;
    conv_output[5][12] += input[6][12] * -0.083850;
    conv_output[5][12] += input[6][13] * 0.038051;
    conv_output[5][12] += input[6][14] * 0.042449;
    conv_output[5][12] += input[7][12] * -0.084779;
    conv_output[5][12] += input[7][13] * 0.206606;
    conv_output[5][12] += input[7][14] * -0.146001;
    conv_output[5][12] = fmaxf(0, conv_output[5][12]);
    conv_output[5][13] = -0.019604;
    conv_output[5][13] += input[5][13] * 0.088207;
    conv_output[5][13] += input[5][14] * 0.061727;
    conv_output[5][13] += input[5][15] * -0.114732;
    conv_output[5][13] += input[6][13] * -0.083850;
    conv_output[5][13] += input[6][14] * 0.038051;
    conv_output[5][13] += input[6][15] * 0.042449;
    conv_output[5][13] += input[7][13] * -0.084779;
    conv_output[5][13] += input[7][14] * 0.206606;
    conv_output[5][13] += input[7][15] * -0.146001;
    conv_output[5][13] = fmaxf(0, conv_output[5][13]);
    conv_output[5][14] = -0.019604;
    conv_output[5][14] += input[5][14] * 0.088207;
    conv_output[5][14] += input[5][15] * 0.061727;
    conv_output[5][14] += input[5][16] * -0.114732;
    conv_output[5][14] += input[6][14] * -0.083850;
    conv_output[5][14] += input[6][15] * 0.038051;
    conv_output[5][14] += input[6][16] * 0.042449;
    conv_output[5][14] += input[7][14] * -0.084779;
    conv_output[5][14] += input[7][15] * 0.206606;
    conv_output[5][14] += input[7][16] * -0.146001;
    conv_output[5][14] = fmaxf(0, conv_output[5][14]);
    conv_output[5][15] = -0.019604;
    conv_output[5][15] += input[5][15] * 0.088207;
    conv_output[5][15] += input[5][16] * 0.061727;
    conv_output[5][15] += input[5][17] * -0.114732;
    conv_output[5][15] += input[6][15] * -0.083850;
    conv_output[5][15] += input[6][16] * 0.038051;
    conv_output[5][15] += input[6][17] * 0.042449;
    conv_output[5][15] += input[7][15] * -0.084779;
    conv_output[5][15] += input[7][16] * 0.206606;
    conv_output[5][15] += input[7][17] * -0.146001;
    conv_output[5][15] = fmaxf(0, conv_output[5][15]);
    conv_output[5][16] = -0.019604;
    conv_output[5][16] += input[5][16] * 0.088207;
    conv_output[5][16] += input[5][17] * 0.061727;
    conv_output[5][16] += input[5][18] * -0.114732;
    conv_output[5][16] += input[6][16] * -0.083850;
    conv_output[5][16] += input[6][17] * 0.038051;
    conv_output[5][16] += input[6][18] * 0.042449;
    conv_output[5][16] += input[7][16] * -0.084779;
    conv_output[5][16] += input[7][17] * 0.206606;
    conv_output[5][16] += input[7][18] * -0.146001;
    conv_output[5][16] = fmaxf(0, conv_output[5][16]);
    conv_output[5][17] = -0.019604;
    conv_output[5][17] += input[5][17] * 0.088207;
    conv_output[5][17] += input[5][18] * 0.061727;
    conv_output[5][17] += input[5][19] * -0.114732;
    conv_output[5][17] += input[6][17] * -0.083850;
    conv_output[5][17] += input[6][18] * 0.038051;
    conv_output[5][17] += input[6][19] * 0.042449;
    conv_output[5][17] += input[7][17] * -0.084779;
    conv_output[5][17] += input[7][18] * 0.206606;
    conv_output[5][17] += input[7][19] * -0.146001;
    conv_output[5][17] = fmaxf(0, conv_output[5][17]);
    conv_output[5][18] = -0.019604;
    conv_output[5][18] += input[5][18] * 0.088207;
    conv_output[5][18] += input[5][19] * 0.061727;
    conv_output[5][18] += input[5][20] * -0.114732;
    conv_output[5][18] += input[6][18] * -0.083850;
    conv_output[5][18] += input[6][19] * 0.038051;
    conv_output[5][18] += input[6][20] * 0.042449;
    conv_output[5][18] += input[7][18] * -0.084779;
    conv_output[5][18] += input[7][19] * 0.206606;
    conv_output[5][18] += input[7][20] * -0.146001;
    conv_output[5][18] = fmaxf(0, conv_output[5][18]);
    conv_output[5][19] = -0.019604;
    conv_output[5][19] += input[5][19] * 0.088207;
    conv_output[5][19] += input[5][20] * 0.061727;
    conv_output[5][19] += input[5][21] * -0.114732;
    conv_output[5][19] += input[6][19] * -0.083850;
    conv_output[5][19] += input[6][20] * 0.038051;
    conv_output[5][19] += input[6][21] * 0.042449;
    conv_output[5][19] += input[7][19] * -0.084779;
    conv_output[5][19] += input[7][20] * 0.206606;
    conv_output[5][19] += input[7][21] * -0.146001;
    conv_output[5][19] = fmaxf(0, conv_output[5][19]);
    conv_output[5][20] = -0.019604;
    conv_output[5][20] += input[5][20] * 0.088207;
    conv_output[5][20] += input[5][21] * 0.061727;
    conv_output[5][20] += input[5][22] * -0.114732;
    conv_output[5][20] += input[6][20] * -0.083850;
    conv_output[5][20] += input[6][21] * 0.038051;
    conv_output[5][20] += input[6][22] * 0.042449;
    conv_output[5][20] += input[7][20] * -0.084779;
    conv_output[5][20] += input[7][21] * 0.206606;
    conv_output[5][20] += input[7][22] * -0.146001;
    conv_output[5][20] = fmaxf(0, conv_output[5][20]);
    conv_output[5][21] = -0.019604;
    conv_output[5][21] += input[5][21] * 0.088207;
    conv_output[5][21] += input[5][22] * 0.061727;
    conv_output[5][21] += input[5][23] * -0.114732;
    conv_output[5][21] += input[6][21] * -0.083850;
    conv_output[5][21] += input[6][22] * 0.038051;
    conv_output[5][21] += input[6][23] * 0.042449;
    conv_output[5][21] += input[7][21] * -0.084779;
    conv_output[5][21] += input[7][22] * 0.206606;
    conv_output[5][21] += input[7][23] * -0.146001;
    conv_output[5][21] = fmaxf(0, conv_output[5][21]);
    conv_output[5][22] = -0.019604;
    conv_output[5][22] += input[5][22] * 0.088207;
    conv_output[5][22] += input[5][23] * 0.061727;
    conv_output[5][22] += input[5][24] * -0.114732;
    conv_output[5][22] += input[6][22] * -0.083850;
    conv_output[5][22] += input[6][23] * 0.038051;
    conv_output[5][22] += input[6][24] * 0.042449;
    conv_output[5][22] += input[7][22] * -0.084779;
    conv_output[5][22] += input[7][23] * 0.206606;
    conv_output[5][22] += input[7][24] * -0.146001;
    conv_output[5][22] = fmaxf(0, conv_output[5][22]);
    conv_output[5][23] = -0.019604;
    conv_output[5][23] += input[5][23] * 0.088207;
    conv_output[5][23] += input[5][24] * 0.061727;
    conv_output[5][23] += input[5][25] * -0.114732;
    conv_output[5][23] += input[6][23] * -0.083850;
    conv_output[5][23] += input[6][24] * 0.038051;
    conv_output[5][23] += input[6][25] * 0.042449;
    conv_output[5][23] += input[7][23] * -0.084779;
    conv_output[5][23] += input[7][24] * 0.206606;
    conv_output[5][23] += input[7][25] * -0.146001;
    conv_output[5][23] = fmaxf(0, conv_output[5][23]);
    conv_output[5][24] = -0.019604;
    conv_output[5][24] += input[5][24] * 0.088207;
    conv_output[5][24] += input[5][25] * 0.061727;
    conv_output[5][24] += input[5][26] * -0.114732;
    conv_output[5][24] += input[6][24] * -0.083850;
    conv_output[5][24] += input[6][25] * 0.038051;
    conv_output[5][24] += input[6][26] * 0.042449;
    conv_output[5][24] += input[7][24] * -0.084779;
    conv_output[5][24] += input[7][25] * 0.206606;
    conv_output[5][24] += input[7][26] * -0.146001;
    conv_output[5][24] = fmaxf(0, conv_output[5][24]);
    conv_output[5][25] = -0.019604;
    conv_output[5][25] += input[5][25] * 0.088207;
    conv_output[5][25] += input[5][26] * 0.061727;
    conv_output[5][25] += input[5][27] * -0.114732;
    conv_output[5][25] += input[6][25] * -0.083850;
    conv_output[5][25] += input[6][26] * 0.038051;
    conv_output[5][25] += input[6][27] * 0.042449;
    conv_output[5][25] += input[7][25] * -0.084779;
    conv_output[5][25] += input[7][26] * 0.206606;
    conv_output[5][25] += input[7][27] * -0.146001;
    conv_output[5][25] = fmaxf(0, conv_output[5][25]);
    conv_output[6][0] = -0.019604;
    conv_output[6][0] += input[6][0] * 0.088207;
    conv_output[6][0] += input[6][1] * 0.061727;
    conv_output[6][0] += input[6][2] * -0.114732;
    conv_output[6][0] += input[7][0] * -0.083850;
    conv_output[6][0] += input[7][1] * 0.038051;
    conv_output[6][0] += input[7][2] * 0.042449;
    conv_output[6][0] += input[8][0] * -0.084779;
    conv_output[6][0] += input[8][1] * 0.206606;
    conv_output[6][0] += input[8][2] * -0.146001;
    conv_output[6][0] = fmaxf(0, conv_output[6][0]);
    conv_output[6][1] = -0.019604;
    conv_output[6][1] += input[6][1] * 0.088207;
    conv_output[6][1] += input[6][2] * 0.061727;
    conv_output[6][1] += input[6][3] * -0.114732;
    conv_output[6][1] += input[7][1] * -0.083850;
    conv_output[6][1] += input[7][2] * 0.038051;
    conv_output[6][1] += input[7][3] * 0.042449;
    conv_output[6][1] += input[8][1] * -0.084779;
    conv_output[6][1] += input[8][2] * 0.206606;
    conv_output[6][1] += input[8][3] * -0.146001;
    conv_output[6][1] = fmaxf(0, conv_output[6][1]);
    conv_output[6][2] = -0.019604;
    conv_output[6][2] += input[6][2] * 0.088207;
    conv_output[6][2] += input[6][3] * 0.061727;
    conv_output[6][2] += input[6][4] * -0.114732;
    conv_output[6][2] += input[7][2] * -0.083850;
    conv_output[6][2] += input[7][3] * 0.038051;
    conv_output[6][2] += input[7][4] * 0.042449;
    conv_output[6][2] += input[8][2] * -0.084779;
    conv_output[6][2] += input[8][3] * 0.206606;
    conv_output[6][2] += input[8][4] * -0.146001;
    conv_output[6][2] = fmaxf(0, conv_output[6][2]);
    conv_output[6][3] = -0.019604;
    conv_output[6][3] += input[6][3] * 0.088207;
    conv_output[6][3] += input[6][4] * 0.061727;
    conv_output[6][3] += input[6][5] * -0.114732;
    conv_output[6][3] += input[7][3] * -0.083850;
    conv_output[6][3] += input[7][4] * 0.038051;
    conv_output[6][3] += input[7][5] * 0.042449;
    conv_output[6][3] += input[8][3] * -0.084779;
    conv_output[6][3] += input[8][4] * 0.206606;
    conv_output[6][3] += input[8][5] * -0.146001;
    conv_output[6][3] = fmaxf(0, conv_output[6][3]);
    conv_output[6][4] = -0.019604;
    conv_output[6][4] += input[6][4] * 0.088207;
    conv_output[6][4] += input[6][5] * 0.061727;
    conv_output[6][4] += input[6][6] * -0.114732;
    conv_output[6][4] += input[7][4] * -0.083850;
    conv_output[6][4] += input[7][5] * 0.038051;
    conv_output[6][4] += input[7][6] * 0.042449;
    conv_output[6][4] += input[8][4] * -0.084779;
    conv_output[6][4] += input[8][5] * 0.206606;
    conv_output[6][4] += input[8][6] * -0.146001;
    conv_output[6][4] = fmaxf(0, conv_output[6][4]);
    conv_output[6][5] = -0.019604;
    conv_output[6][5] += input[6][5] * 0.088207;
    conv_output[6][5] += input[6][6] * 0.061727;
    conv_output[6][5] += input[6][7] * -0.114732;
    conv_output[6][5] += input[7][5] * -0.083850;
    conv_output[6][5] += input[7][6] * 0.038051;
    conv_output[6][5] += input[7][7] * 0.042449;
    conv_output[6][5] += input[8][5] * -0.084779;
    conv_output[6][5] += input[8][6] * 0.206606;
    conv_output[6][5] += input[8][7] * -0.146001;
    conv_output[6][5] = fmaxf(0, conv_output[6][5]);
    conv_output[6][6] = -0.019604;
    conv_output[6][6] += input[6][6] * 0.088207;
    conv_output[6][6] += input[6][7] * 0.061727;
    conv_output[6][6] += input[6][8] * -0.114732;
    conv_output[6][6] += input[7][6] * -0.083850;
    conv_output[6][6] += input[7][7] * 0.038051;
    conv_output[6][6] += input[7][8] * 0.042449;
    conv_output[6][6] += input[8][6] * -0.084779;
    conv_output[6][6] += input[8][7] * 0.206606;
    conv_output[6][6] += input[8][8] * -0.146001;
    conv_output[6][6] = fmaxf(0, conv_output[6][6]);
    conv_output[6][7] = -0.019604;
    conv_output[6][7] += input[6][7] * 0.088207;
    conv_output[6][7] += input[6][8] * 0.061727;
    conv_output[6][7] += input[6][9] * -0.114732;
    conv_output[6][7] += input[7][7] * -0.083850;
    conv_output[6][7] += input[7][8] * 0.038051;
    conv_output[6][7] += input[7][9] * 0.042449;
    conv_output[6][7] += input[8][7] * -0.084779;
    conv_output[6][7] += input[8][8] * 0.206606;
    conv_output[6][7] += input[8][9] * -0.146001;
    conv_output[6][7] = fmaxf(0, conv_output[6][7]);
    conv_output[6][8] = -0.019604;
    conv_output[6][8] += input[6][8] * 0.088207;
    conv_output[6][8] += input[6][9] * 0.061727;
    conv_output[6][8] += input[6][10] * -0.114732;
    conv_output[6][8] += input[7][8] * -0.083850;
    conv_output[6][8] += input[7][9] * 0.038051;
    conv_output[6][8] += input[7][10] * 0.042449;
    conv_output[6][8] += input[8][8] * -0.084779;
    conv_output[6][8] += input[8][9] * 0.206606;
    conv_output[6][8] += input[8][10] * -0.146001;
    conv_output[6][8] = fmaxf(0, conv_output[6][8]);
    conv_output[6][9] = -0.019604;
    conv_output[6][9] += input[6][9] * 0.088207;
    conv_output[6][9] += input[6][10] * 0.061727;
    conv_output[6][9] += input[6][11] * -0.114732;
    conv_output[6][9] += input[7][9] * -0.083850;
    conv_output[6][9] += input[7][10] * 0.038051;
    conv_output[6][9] += input[7][11] * 0.042449;
    conv_output[6][9] += input[8][9] * -0.084779;
    conv_output[6][9] += input[8][10] * 0.206606;
    conv_output[6][9] += input[8][11] * -0.146001;
    conv_output[6][9] = fmaxf(0, conv_output[6][9]);
    conv_output[6][10] = -0.019604;
    conv_output[6][10] += input[6][10] * 0.088207;
    conv_output[6][10] += input[6][11] * 0.061727;
    conv_output[6][10] += input[6][12] * -0.114732;
    conv_output[6][10] += input[7][10] * -0.083850;
    conv_output[6][10] += input[7][11] * 0.038051;
    conv_output[6][10] += input[7][12] * 0.042449;
    conv_output[6][10] += input[8][10] * -0.084779;
    conv_output[6][10] += input[8][11] * 0.206606;
    conv_output[6][10] += input[8][12] * -0.146001;
    conv_output[6][10] = fmaxf(0, conv_output[6][10]);
    conv_output[6][11] = -0.019604;
    conv_output[6][11] += input[6][11] * 0.088207;
    conv_output[6][11] += input[6][12] * 0.061727;
    conv_output[6][11] += input[6][13] * -0.114732;
    conv_output[6][11] += input[7][11] * -0.083850;
    conv_output[6][11] += input[7][12] * 0.038051;
    conv_output[6][11] += input[7][13] * 0.042449;
    conv_output[6][11] += input[8][11] * -0.084779;
    conv_output[6][11] += input[8][12] * 0.206606;
    conv_output[6][11] += input[8][13] * -0.146001;
    conv_output[6][11] = fmaxf(0, conv_output[6][11]);
    conv_output[6][12] = -0.019604;
    conv_output[6][12] += input[6][12] * 0.088207;
    conv_output[6][12] += input[6][13] * 0.061727;
    conv_output[6][12] += input[6][14] * -0.114732;
    conv_output[6][12] += input[7][12] * -0.083850;
    conv_output[6][12] += input[7][13] * 0.038051;
    conv_output[6][12] += input[7][14] * 0.042449;
    conv_output[6][12] += input[8][12] * -0.084779;
    conv_output[6][12] += input[8][13] * 0.206606;
    conv_output[6][12] += input[8][14] * -0.146001;
    conv_output[6][12] = fmaxf(0, conv_output[6][12]);
    conv_output[6][13] = -0.019604;
    conv_output[6][13] += input[6][13] * 0.088207;
    conv_output[6][13] += input[6][14] * 0.061727;
    conv_output[6][13] += input[6][15] * -0.114732;
    conv_output[6][13] += input[7][13] * -0.083850;
    conv_output[6][13] += input[7][14] * 0.038051;
    conv_output[6][13] += input[7][15] * 0.042449;
    conv_output[6][13] += input[8][13] * -0.084779;
    conv_output[6][13] += input[8][14] * 0.206606;
    conv_output[6][13] += input[8][15] * -0.146001;
    conv_output[6][13] = fmaxf(0, conv_output[6][13]);
    conv_output[6][14] = -0.019604;
    conv_output[6][14] += input[6][14] * 0.088207;
    conv_output[6][14] += input[6][15] * 0.061727;
    conv_output[6][14] += input[6][16] * -0.114732;
    conv_output[6][14] += input[7][14] * -0.083850;
    conv_output[6][14] += input[7][15] * 0.038051;
    conv_output[6][14] += input[7][16] * 0.042449;
    conv_output[6][14] += input[8][14] * -0.084779;
    conv_output[6][14] += input[8][15] * 0.206606;
    conv_output[6][14] += input[8][16] * -0.146001;
    conv_output[6][14] = fmaxf(0, conv_output[6][14]);
    conv_output[6][15] = -0.019604;
    conv_output[6][15] += input[6][15] * 0.088207;
    conv_output[6][15] += input[6][16] * 0.061727;
    conv_output[6][15] += input[6][17] * -0.114732;
    conv_output[6][15] += input[7][15] * -0.083850;
    conv_output[6][15] += input[7][16] * 0.038051;
    conv_output[6][15] += input[7][17] * 0.042449;
    conv_output[6][15] += input[8][15] * -0.084779;
    conv_output[6][15] += input[8][16] * 0.206606;
    conv_output[6][15] += input[8][17] * -0.146001;
    conv_output[6][15] = fmaxf(0, conv_output[6][15]);
    conv_output[6][16] = -0.019604;
    conv_output[6][16] += input[6][16] * 0.088207;
    conv_output[6][16] += input[6][17] * 0.061727;
    conv_output[6][16] += input[6][18] * -0.114732;
    conv_output[6][16] += input[7][16] * -0.083850;
    conv_output[6][16] += input[7][17] * 0.038051;
    conv_output[6][16] += input[7][18] * 0.042449;
    conv_output[6][16] += input[8][16] * -0.084779;
    conv_output[6][16] += input[8][17] * 0.206606;
    conv_output[6][16] += input[8][18] * -0.146001;
    conv_output[6][16] = fmaxf(0, conv_output[6][16]);
    conv_output[6][17] = -0.019604;
    conv_output[6][17] += input[6][17] * 0.088207;
    conv_output[6][17] += input[6][18] * 0.061727;
    conv_output[6][17] += input[6][19] * -0.114732;
    conv_output[6][17] += input[7][17] * -0.083850;
    conv_output[6][17] += input[7][18] * 0.038051;
    conv_output[6][17] += input[7][19] * 0.042449;
    conv_output[6][17] += input[8][17] * -0.084779;
    conv_output[6][17] += input[8][18] * 0.206606;
    conv_output[6][17] += input[8][19] * -0.146001;
    conv_output[6][17] = fmaxf(0, conv_output[6][17]);
    conv_output[6][18] = -0.019604;
    conv_output[6][18] += input[6][18] * 0.088207;
    conv_output[6][18] += input[6][19] * 0.061727;
    conv_output[6][18] += input[6][20] * -0.114732;
    conv_output[6][18] += input[7][18] * -0.083850;
    conv_output[6][18] += input[7][19] * 0.038051;
    conv_output[6][18] += input[7][20] * 0.042449;
    conv_output[6][18] += input[8][18] * -0.084779;
    conv_output[6][18] += input[8][19] * 0.206606;
    conv_output[6][18] += input[8][20] * -0.146001;
    conv_output[6][18] = fmaxf(0, conv_output[6][18]);
    conv_output[6][19] = -0.019604;
    conv_output[6][19] += input[6][19] * 0.088207;
    conv_output[6][19] += input[6][20] * 0.061727;
    conv_output[6][19] += input[6][21] * -0.114732;
    conv_output[6][19] += input[7][19] * -0.083850;
    conv_output[6][19] += input[7][20] * 0.038051;
    conv_output[6][19] += input[7][21] * 0.042449;
    conv_output[6][19] += input[8][19] * -0.084779;
    conv_output[6][19] += input[8][20] * 0.206606;
    conv_output[6][19] += input[8][21] * -0.146001;
    conv_output[6][19] = fmaxf(0, conv_output[6][19]);
    conv_output[6][20] = -0.019604;
    conv_output[6][20] += input[6][20] * 0.088207;
    conv_output[6][20] += input[6][21] * 0.061727;
    conv_output[6][20] += input[6][22] * -0.114732;
    conv_output[6][20] += input[7][20] * -0.083850;
    conv_output[6][20] += input[7][21] * 0.038051;
    conv_output[6][20] += input[7][22] * 0.042449;
    conv_output[6][20] += input[8][20] * -0.084779;
    conv_output[6][20] += input[8][21] * 0.206606;
    conv_output[6][20] += input[8][22] * -0.146001;
    conv_output[6][20] = fmaxf(0, conv_output[6][20]);
    conv_output[6][21] = -0.019604;
    conv_output[6][21] += input[6][21] * 0.088207;
    conv_output[6][21] += input[6][22] * 0.061727;
    conv_output[6][21] += input[6][23] * -0.114732;
    conv_output[6][21] += input[7][21] * -0.083850;
    conv_output[6][21] += input[7][22] * 0.038051;
    conv_output[6][21] += input[7][23] * 0.042449;
    conv_output[6][21] += input[8][21] * -0.084779;
    conv_output[6][21] += input[8][22] * 0.206606;
    conv_output[6][21] += input[8][23] * -0.146001;
    conv_output[6][21] = fmaxf(0, conv_output[6][21]);
    conv_output[6][22] = -0.019604;
    conv_output[6][22] += input[6][22] * 0.088207;
    conv_output[6][22] += input[6][23] * 0.061727;
    conv_output[6][22] += input[6][24] * -0.114732;
    conv_output[6][22] += input[7][22] * -0.083850;
    conv_output[6][22] += input[7][23] * 0.038051;
    conv_output[6][22] += input[7][24] * 0.042449;
    conv_output[6][22] += input[8][22] * -0.084779;
    conv_output[6][22] += input[8][23] * 0.206606;
    conv_output[6][22] += input[8][24] * -0.146001;
    conv_output[6][22] = fmaxf(0, conv_output[6][22]);
    conv_output[6][23] = -0.019604;
    conv_output[6][23] += input[6][23] * 0.088207;
    conv_output[6][23] += input[6][24] * 0.061727;
    conv_output[6][23] += input[6][25] * -0.114732;
    conv_output[6][23] += input[7][23] * -0.083850;
    conv_output[6][23] += input[7][24] * 0.038051;
    conv_output[6][23] += input[7][25] * 0.042449;
    conv_output[6][23] += input[8][23] * -0.084779;
    conv_output[6][23] += input[8][24] * 0.206606;
    conv_output[6][23] += input[8][25] * -0.146001;
    conv_output[6][23] = fmaxf(0, conv_output[6][23]);
    conv_output[6][24] = -0.019604;
    conv_output[6][24] += input[6][24] * 0.088207;
    conv_output[6][24] += input[6][25] * 0.061727;
    conv_output[6][24] += input[6][26] * -0.114732;
    conv_output[6][24] += input[7][24] * -0.083850;
    conv_output[6][24] += input[7][25] * 0.038051;
    conv_output[6][24] += input[7][26] * 0.042449;
    conv_output[6][24] += input[8][24] * -0.084779;
    conv_output[6][24] += input[8][25] * 0.206606;
    conv_output[6][24] += input[8][26] * -0.146001;
    conv_output[6][24] = fmaxf(0, conv_output[6][24]);
    conv_output[6][25] = -0.019604;
    conv_output[6][25] += input[6][25] * 0.088207;
    conv_output[6][25] += input[6][26] * 0.061727;
    conv_output[6][25] += input[6][27] * -0.114732;
    conv_output[6][25] += input[7][25] * -0.083850;
    conv_output[6][25] += input[7][26] * 0.038051;
    conv_output[6][25] += input[7][27] * 0.042449;
    conv_output[6][25] += input[8][25] * -0.084779;
    conv_output[6][25] += input[8][26] * 0.206606;
    conv_output[6][25] += input[8][27] * -0.146001;
    conv_output[6][25] = fmaxf(0, conv_output[6][25]);
    conv_output[7][0] = -0.019604;
    conv_output[7][0] += input[7][0] * 0.088207;
    conv_output[7][0] += input[7][1] * 0.061727;
    conv_output[7][0] += input[7][2] * -0.114732;
    conv_output[7][0] += input[8][0] * -0.083850;
    conv_output[7][0] += input[8][1] * 0.038051;
    conv_output[7][0] += input[8][2] * 0.042449;
    conv_output[7][0] += input[9][0] * -0.084779;
    conv_output[7][0] += input[9][1] * 0.206606;
    conv_output[7][0] += input[9][2] * -0.146001;
    conv_output[7][0] = fmaxf(0, conv_output[7][0]);
    conv_output[7][1] = -0.019604;
    conv_output[7][1] += input[7][1] * 0.088207;
    conv_output[7][1] += input[7][2] * 0.061727;
    conv_output[7][1] += input[7][3] * -0.114732;
    conv_output[7][1] += input[8][1] * -0.083850;
    conv_output[7][1] += input[8][2] * 0.038051;
    conv_output[7][1] += input[8][3] * 0.042449;
    conv_output[7][1] += input[9][1] * -0.084779;
    conv_output[7][1] += input[9][2] * 0.206606;
    conv_output[7][1] += input[9][3] * -0.146001;
    conv_output[7][1] = fmaxf(0, conv_output[7][1]);
    conv_output[7][2] = -0.019604;
    conv_output[7][2] += input[7][2] * 0.088207;
    conv_output[7][2] += input[7][3] * 0.061727;
    conv_output[7][2] += input[7][4] * -0.114732;
    conv_output[7][2] += input[8][2] * -0.083850;
    conv_output[7][2] += input[8][3] * 0.038051;
    conv_output[7][2] += input[8][4] * 0.042449;
    conv_output[7][2] += input[9][2] * -0.084779;
    conv_output[7][2] += input[9][3] * 0.206606;
    conv_output[7][2] += input[9][4] * -0.146001;
    conv_output[7][2] = fmaxf(0, conv_output[7][2]);
    conv_output[7][3] = -0.019604;
    conv_output[7][3] += input[7][3] * 0.088207;
    conv_output[7][3] += input[7][4] * 0.061727;
    conv_output[7][3] += input[7][5] * -0.114732;
    conv_output[7][3] += input[8][3] * -0.083850;
    conv_output[7][3] += input[8][4] * 0.038051;
    conv_output[7][3] += input[8][5] * 0.042449;
    conv_output[7][3] += input[9][3] * -0.084779;
    conv_output[7][3] += input[9][4] * 0.206606;
    conv_output[7][3] += input[9][5] * -0.146001;
    conv_output[7][3] = fmaxf(0, conv_output[7][3]);
    conv_output[7][4] = -0.019604;
    conv_output[7][4] += input[7][4] * 0.088207;
    conv_output[7][4] += input[7][5] * 0.061727;
    conv_output[7][4] += input[7][6] * -0.114732;
    conv_output[7][4] += input[8][4] * -0.083850;
    conv_output[7][4] += input[8][5] * 0.038051;
    conv_output[7][4] += input[8][6] * 0.042449;
    conv_output[7][4] += input[9][4] * -0.084779;
    conv_output[7][4] += input[9][5] * 0.206606;
    conv_output[7][4] += input[9][6] * -0.146001;
    conv_output[7][4] = fmaxf(0, conv_output[7][4]);
    conv_output[7][5] = -0.019604;
    conv_output[7][5] += input[7][5] * 0.088207;
    conv_output[7][5] += input[7][6] * 0.061727;
    conv_output[7][5] += input[7][7] * -0.114732;
    conv_output[7][5] += input[8][5] * -0.083850;
    conv_output[7][5] += input[8][6] * 0.038051;
    conv_output[7][5] += input[8][7] * 0.042449;
    conv_output[7][5] += input[9][5] * -0.084779;
    conv_output[7][5] += input[9][6] * 0.206606;
    conv_output[7][5] += input[9][7] * -0.146001;
    conv_output[7][5] = fmaxf(0, conv_output[7][5]);
    conv_output[7][6] = -0.019604;
    conv_output[7][6] += input[7][6] * 0.088207;
    conv_output[7][6] += input[7][7] * 0.061727;
    conv_output[7][6] += input[7][8] * -0.114732;
    conv_output[7][6] += input[8][6] * -0.083850;
    conv_output[7][6] += input[8][7] * 0.038051;
    conv_output[7][6] += input[8][8] * 0.042449;
    conv_output[7][6] += input[9][6] * -0.084779;
    conv_output[7][6] += input[9][7] * 0.206606;
    conv_output[7][6] += input[9][8] * -0.146001;
    conv_output[7][6] = fmaxf(0, conv_output[7][6]);
    conv_output[7][7] = -0.019604;
    conv_output[7][7] += input[7][7] * 0.088207;
    conv_output[7][7] += input[7][8] * 0.061727;
    conv_output[7][7] += input[7][9] * -0.114732;
    conv_output[7][7] += input[8][7] * -0.083850;
    conv_output[7][7] += input[8][8] * 0.038051;
    conv_output[7][7] += input[8][9] * 0.042449;
    conv_output[7][7] += input[9][7] * -0.084779;
    conv_output[7][7] += input[9][8] * 0.206606;
    conv_output[7][7] += input[9][9] * -0.146001;
    conv_output[7][7] = fmaxf(0, conv_output[7][7]);
    conv_output[7][8] = -0.019604;
    conv_output[7][8] += input[7][8] * 0.088207;
    conv_output[7][8] += input[7][9] * 0.061727;
    conv_output[7][8] += input[7][10] * -0.114732;
    conv_output[7][8] += input[8][8] * -0.083850;
    conv_output[7][8] += input[8][9] * 0.038051;
    conv_output[7][8] += input[8][10] * 0.042449;
    conv_output[7][8] += input[9][8] * -0.084779;
    conv_output[7][8] += input[9][9] * 0.206606;
    conv_output[7][8] += input[9][10] * -0.146001;
    conv_output[7][8] = fmaxf(0, conv_output[7][8]);
    conv_output[7][9] = -0.019604;
    conv_output[7][9] += input[7][9] * 0.088207;
    conv_output[7][9] += input[7][10] * 0.061727;
    conv_output[7][9] += input[7][11] * -0.114732;
    conv_output[7][9] += input[8][9] * -0.083850;
    conv_output[7][9] += input[8][10] * 0.038051;
    conv_output[7][9] += input[8][11] * 0.042449;
    conv_output[7][9] += input[9][9] * -0.084779;
    conv_output[7][9] += input[9][10] * 0.206606;
    conv_output[7][9] += input[9][11] * -0.146001;
    conv_output[7][9] = fmaxf(0, conv_output[7][9]);
    conv_output[7][10] = -0.019604;
    conv_output[7][10] += input[7][10] * 0.088207;
    conv_output[7][10] += input[7][11] * 0.061727;
    conv_output[7][10] += input[7][12] * -0.114732;
    conv_output[7][10] += input[8][10] * -0.083850;
    conv_output[7][10] += input[8][11] * 0.038051;
    conv_output[7][10] += input[8][12] * 0.042449;
    conv_output[7][10] += input[9][10] * -0.084779;
    conv_output[7][10] += input[9][11] * 0.206606;
    conv_output[7][10] += input[9][12] * -0.146001;
    conv_output[7][10] = fmaxf(0, conv_output[7][10]);
    conv_output[7][11] = -0.019604;
    conv_output[7][11] += input[7][11] * 0.088207;
    conv_output[7][11] += input[7][12] * 0.061727;
    conv_output[7][11] += input[7][13] * -0.114732;
    conv_output[7][11] += input[8][11] * -0.083850;
    conv_output[7][11] += input[8][12] * 0.038051;
    conv_output[7][11] += input[8][13] * 0.042449;
    conv_output[7][11] += input[9][11] * -0.084779;
    conv_output[7][11] += input[9][12] * 0.206606;
    conv_output[7][11] += input[9][13] * -0.146001;
    conv_output[7][11] = fmaxf(0, conv_output[7][11]);
    conv_output[7][12] = -0.019604;
    conv_output[7][12] += input[7][12] * 0.088207;
    conv_output[7][12] += input[7][13] * 0.061727;
    conv_output[7][12] += input[7][14] * -0.114732;
    conv_output[7][12] += input[8][12] * -0.083850;
    conv_output[7][12] += input[8][13] * 0.038051;
    conv_output[7][12] += input[8][14] * 0.042449;
    conv_output[7][12] += input[9][12] * -0.084779;
    conv_output[7][12] += input[9][13] * 0.206606;
    conv_output[7][12] += input[9][14] * -0.146001;
    conv_output[7][12] = fmaxf(0, conv_output[7][12]);
    conv_output[7][13] = -0.019604;
    conv_output[7][13] += input[7][13] * 0.088207;
    conv_output[7][13] += input[7][14] * 0.061727;
    conv_output[7][13] += input[7][15] * -0.114732;
    conv_output[7][13] += input[8][13] * -0.083850;
    conv_output[7][13] += input[8][14] * 0.038051;
    conv_output[7][13] += input[8][15] * 0.042449;
    conv_output[7][13] += input[9][13] * -0.084779;
    conv_output[7][13] += input[9][14] * 0.206606;
    conv_output[7][13] += input[9][15] * -0.146001;
    conv_output[7][13] = fmaxf(0, conv_output[7][13]);
    conv_output[7][14] = -0.019604;
    conv_output[7][14] += input[7][14] * 0.088207;
    conv_output[7][14] += input[7][15] * 0.061727;
    conv_output[7][14] += input[7][16] * -0.114732;
    conv_output[7][14] += input[8][14] * -0.083850;
    conv_output[7][14] += input[8][15] * 0.038051;
    conv_output[7][14] += input[8][16] * 0.042449;
    conv_output[7][14] += input[9][14] * -0.084779;
    conv_output[7][14] += input[9][15] * 0.206606;
    conv_output[7][14] += input[9][16] * -0.146001;
    conv_output[7][14] = fmaxf(0, conv_output[7][14]);
    conv_output[7][15] = -0.019604;
    conv_output[7][15] += input[7][15] * 0.088207;
    conv_output[7][15] += input[7][16] * 0.061727;
    conv_output[7][15] += input[7][17] * -0.114732;
    conv_output[7][15] += input[8][15] * -0.083850;
    conv_output[7][15] += input[8][16] * 0.038051;
    conv_output[7][15] += input[8][17] * 0.042449;
    conv_output[7][15] += input[9][15] * -0.084779;
    conv_output[7][15] += input[9][16] * 0.206606;
    conv_output[7][15] += input[9][17] * -0.146001;
    conv_output[7][15] = fmaxf(0, conv_output[7][15]);
    conv_output[7][16] = -0.019604;
    conv_output[7][16] += input[7][16] * 0.088207;
    conv_output[7][16] += input[7][17] * 0.061727;
    conv_output[7][16] += input[7][18] * -0.114732;
    conv_output[7][16] += input[8][16] * -0.083850;
    conv_output[7][16] += input[8][17] * 0.038051;
    conv_output[7][16] += input[8][18] * 0.042449;
    conv_output[7][16] += input[9][16] * -0.084779;
    conv_output[7][16] += input[9][17] * 0.206606;
    conv_output[7][16] += input[9][18] * -0.146001;
    conv_output[7][16] = fmaxf(0, conv_output[7][16]);
    conv_output[7][17] = -0.019604;
    conv_output[7][17] += input[7][17] * 0.088207;
    conv_output[7][17] += input[7][18] * 0.061727;
    conv_output[7][17] += input[7][19] * -0.114732;
    conv_output[7][17] += input[8][17] * -0.083850;
    conv_output[7][17] += input[8][18] * 0.038051;
    conv_output[7][17] += input[8][19] * 0.042449;
    conv_output[7][17] += input[9][17] * -0.084779;
    conv_output[7][17] += input[9][18] * 0.206606;
    conv_output[7][17] += input[9][19] * -0.146001;
    conv_output[7][17] = fmaxf(0, conv_output[7][17]);
    conv_output[7][18] = -0.019604;
    conv_output[7][18] += input[7][18] * 0.088207;
    conv_output[7][18] += input[7][19] * 0.061727;
    conv_output[7][18] += input[7][20] * -0.114732;
    conv_output[7][18] += input[8][18] * -0.083850;
    conv_output[7][18] += input[8][19] * 0.038051;
    conv_output[7][18] += input[8][20] * 0.042449;
    conv_output[7][18] += input[9][18] * -0.084779;
    conv_output[7][18] += input[9][19] * 0.206606;
    conv_output[7][18] += input[9][20] * -0.146001;
    conv_output[7][18] = fmaxf(0, conv_output[7][18]);
    conv_output[7][19] = -0.019604;
    conv_output[7][19] += input[7][19] * 0.088207;
    conv_output[7][19] += input[7][20] * 0.061727;
    conv_output[7][19] += input[7][21] * -0.114732;
    conv_output[7][19] += input[8][19] * -0.083850;
    conv_output[7][19] += input[8][20] * 0.038051;
    conv_output[7][19] += input[8][21] * 0.042449;
    conv_output[7][19] += input[9][19] * -0.084779;
    conv_output[7][19] += input[9][20] * 0.206606;
    conv_output[7][19] += input[9][21] * -0.146001;
    conv_output[7][19] = fmaxf(0, conv_output[7][19]);
    conv_output[7][20] = -0.019604;
    conv_output[7][20] += input[7][20] * 0.088207;
    conv_output[7][20] += input[7][21] * 0.061727;
    conv_output[7][20] += input[7][22] * -0.114732;
    conv_output[7][20] += input[8][20] * -0.083850;
    conv_output[7][20] += input[8][21] * 0.038051;
    conv_output[7][20] += input[8][22] * 0.042449;
    conv_output[7][20] += input[9][20] * -0.084779;
    conv_output[7][20] += input[9][21] * 0.206606;
    conv_output[7][20] += input[9][22] * -0.146001;
    conv_output[7][20] = fmaxf(0, conv_output[7][20]);
    conv_output[7][21] = -0.019604;
    conv_output[7][21] += input[7][21] * 0.088207;
    conv_output[7][21] += input[7][22] * 0.061727;
    conv_output[7][21] += input[7][23] * -0.114732;
    conv_output[7][21] += input[8][21] * -0.083850;
    conv_output[7][21] += input[8][22] * 0.038051;
    conv_output[7][21] += input[8][23] * 0.042449;
    conv_output[7][21] += input[9][21] * -0.084779;
    conv_output[7][21] += input[9][22] * 0.206606;
    conv_output[7][21] += input[9][23] * -0.146001;
    conv_output[7][21] = fmaxf(0, conv_output[7][21]);
    conv_output[7][22] = -0.019604;
    conv_output[7][22] += input[7][22] * 0.088207;
    conv_output[7][22] += input[7][23] * 0.061727;
    conv_output[7][22] += input[7][24] * -0.114732;
    conv_output[7][22] += input[8][22] * -0.083850;
    conv_output[7][22] += input[8][23] * 0.038051;
    conv_output[7][22] += input[8][24] * 0.042449;
    conv_output[7][22] += input[9][22] * -0.084779;
    conv_output[7][22] += input[9][23] * 0.206606;
    conv_output[7][22] += input[9][24] * -0.146001;
    conv_output[7][22] = fmaxf(0, conv_output[7][22]);
    conv_output[7][23] = -0.019604;
    conv_output[7][23] += input[7][23] * 0.088207;
    conv_output[7][23] += input[7][24] * 0.061727;
    conv_output[7][23] += input[7][25] * -0.114732;
    conv_output[7][23] += input[8][23] * -0.083850;
    conv_output[7][23] += input[8][24] * 0.038051;
    conv_output[7][23] += input[8][25] * 0.042449;
    conv_output[7][23] += input[9][23] * -0.084779;
    conv_output[7][23] += input[9][24] * 0.206606;
    conv_output[7][23] += input[9][25] * -0.146001;
    conv_output[7][23] = fmaxf(0, conv_output[7][23]);
    conv_output[7][24] = -0.019604;
    conv_output[7][24] += input[7][24] * 0.088207;
    conv_output[7][24] += input[7][25] * 0.061727;
    conv_output[7][24] += input[7][26] * -0.114732;
    conv_output[7][24] += input[8][24] * -0.083850;
    conv_output[7][24] += input[8][25] * 0.038051;
    conv_output[7][24] += input[8][26] * 0.042449;
    conv_output[7][24] += input[9][24] * -0.084779;
    conv_output[7][24] += input[9][25] * 0.206606;
    conv_output[7][24] += input[9][26] * -0.146001;
    conv_output[7][24] = fmaxf(0, conv_output[7][24]);
    conv_output[7][25] = -0.019604;
    conv_output[7][25] += input[7][25] * 0.088207;
    conv_output[7][25] += input[7][26] * 0.061727;
    conv_output[7][25] += input[7][27] * -0.114732;
    conv_output[7][25] += input[8][25] * -0.083850;
    conv_output[7][25] += input[8][26] * 0.038051;
    conv_output[7][25] += input[8][27] * 0.042449;
    conv_output[7][25] += input[9][25] * -0.084779;
    conv_output[7][25] += input[9][26] * 0.206606;
    conv_output[7][25] += input[9][27] * -0.146001;
    conv_output[7][25] = fmaxf(0, conv_output[7][25]);
    conv_output[8][0] = -0.019604;
    conv_output[8][0] += input[8][0] * 0.088207;
    conv_output[8][0] += input[8][1] * 0.061727;
    conv_output[8][0] += input[8][2] * -0.114732;
    conv_output[8][0] += input[9][0] * -0.083850;
    conv_output[8][0] += input[9][1] * 0.038051;
    conv_output[8][0] += input[9][2] * 0.042449;
    conv_output[8][0] += input[10][0] * -0.084779;
    conv_output[8][0] += input[10][1] * 0.206606;
    conv_output[8][0] += input[10][2] * -0.146001;
    conv_output[8][0] = fmaxf(0, conv_output[8][0]);
    conv_output[8][1] = -0.019604;
    conv_output[8][1] += input[8][1] * 0.088207;
    conv_output[8][1] += input[8][2] * 0.061727;
    conv_output[8][1] += input[8][3] * -0.114732;
    conv_output[8][1] += input[9][1] * -0.083850;
    conv_output[8][1] += input[9][2] * 0.038051;
    conv_output[8][1] += input[9][3] * 0.042449;
    conv_output[8][1] += input[10][1] * -0.084779;
    conv_output[8][1] += input[10][2] * 0.206606;
    conv_output[8][1] += input[10][3] * -0.146001;
    conv_output[8][1] = fmaxf(0, conv_output[8][1]);
    conv_output[8][2] = -0.019604;
    conv_output[8][2] += input[8][2] * 0.088207;
    conv_output[8][2] += input[8][3] * 0.061727;
    conv_output[8][2] += input[8][4] * -0.114732;
    conv_output[8][2] += input[9][2] * -0.083850;
    conv_output[8][2] += input[9][3] * 0.038051;
    conv_output[8][2] += input[9][4] * 0.042449;
    conv_output[8][2] += input[10][2] * -0.084779;
    conv_output[8][2] += input[10][3] * 0.206606;
    conv_output[8][2] += input[10][4] * -0.146001;
    conv_output[8][2] = fmaxf(0, conv_output[8][2]);
    conv_output[8][3] = -0.019604;
    conv_output[8][3] += input[8][3] * 0.088207;
    conv_output[8][3] += input[8][4] * 0.061727;
    conv_output[8][3] += input[8][5] * -0.114732;
    conv_output[8][3] += input[9][3] * -0.083850;
    conv_output[8][3] += input[9][4] * 0.038051;
    conv_output[8][3] += input[9][5] * 0.042449;
    conv_output[8][3] += input[10][3] * -0.084779;
    conv_output[8][3] += input[10][4] * 0.206606;
    conv_output[8][3] += input[10][5] * -0.146001;
    conv_output[8][3] = fmaxf(0, conv_output[8][3]);
    conv_output[8][4] = -0.019604;
    conv_output[8][4] += input[8][4] * 0.088207;
    conv_output[8][4] += input[8][5] * 0.061727;
    conv_output[8][4] += input[8][6] * -0.114732;
    conv_output[8][4] += input[9][4] * -0.083850;
    conv_output[8][4] += input[9][5] * 0.038051;
    conv_output[8][4] += input[9][6] * 0.042449;
    conv_output[8][4] += input[10][4] * -0.084779;
    conv_output[8][4] += input[10][5] * 0.206606;
    conv_output[8][4] += input[10][6] * -0.146001;
    conv_output[8][4] = fmaxf(0, conv_output[8][4]);
    conv_output[8][5] = -0.019604;
    conv_output[8][5] += input[8][5] * 0.088207;
    conv_output[8][5] += input[8][6] * 0.061727;
    conv_output[8][5] += input[8][7] * -0.114732;
    conv_output[8][5] += input[9][5] * -0.083850;
    conv_output[8][5] += input[9][6] * 0.038051;
    conv_output[8][5] += input[9][7] * 0.042449;
    conv_output[8][5] += input[10][5] * -0.084779;
    conv_output[8][5] += input[10][6] * 0.206606;
    conv_output[8][5] += input[10][7] * -0.146001;
    conv_output[8][5] = fmaxf(0, conv_output[8][5]);
    conv_output[8][6] = -0.019604;
    conv_output[8][6] += input[8][6] * 0.088207;
    conv_output[8][6] += input[8][7] * 0.061727;
    conv_output[8][6] += input[8][8] * -0.114732;
    conv_output[8][6] += input[9][6] * -0.083850;
    conv_output[8][6] += input[9][7] * 0.038051;
    conv_output[8][6] += input[9][8] * 0.042449;
    conv_output[8][6] += input[10][6] * -0.084779;
    conv_output[8][6] += input[10][7] * 0.206606;
    conv_output[8][6] += input[10][8] * -0.146001;
    conv_output[8][6] = fmaxf(0, conv_output[8][6]);
    conv_output[8][7] = -0.019604;
    conv_output[8][7] += input[8][7] * 0.088207;
    conv_output[8][7] += input[8][8] * 0.061727;
    conv_output[8][7] += input[8][9] * -0.114732;
    conv_output[8][7] += input[9][7] * -0.083850;
    conv_output[8][7] += input[9][8] * 0.038051;
    conv_output[8][7] += input[9][9] * 0.042449;
    conv_output[8][7] += input[10][7] * -0.084779;
    conv_output[8][7] += input[10][8] * 0.206606;
    conv_output[8][7] += input[10][9] * -0.146001;
    conv_output[8][7] = fmaxf(0, conv_output[8][7]);
    conv_output[8][8] = -0.019604;
    conv_output[8][8] += input[8][8] * 0.088207;
    conv_output[8][8] += input[8][9] * 0.061727;
    conv_output[8][8] += input[8][10] * -0.114732;
    conv_output[8][8] += input[9][8] * -0.083850;
    conv_output[8][8] += input[9][9] * 0.038051;
    conv_output[8][8] += input[9][10] * 0.042449;
    conv_output[8][8] += input[10][8] * -0.084779;
    conv_output[8][8] += input[10][9] * 0.206606;
    conv_output[8][8] += input[10][10] * -0.146001;
    conv_output[8][8] = fmaxf(0, conv_output[8][8]);
    conv_output[8][9] = -0.019604;
    conv_output[8][9] += input[8][9] * 0.088207;
    conv_output[8][9] += input[8][10] * 0.061727;
    conv_output[8][9] += input[8][11] * -0.114732;
    conv_output[8][9] += input[9][9] * -0.083850;
    conv_output[8][9] += input[9][10] * 0.038051;
    conv_output[8][9] += input[9][11] * 0.042449;
    conv_output[8][9] += input[10][9] * -0.084779;
    conv_output[8][9] += input[10][10] * 0.206606;
    conv_output[8][9] += input[10][11] * -0.146001;
    conv_output[8][9] = fmaxf(0, conv_output[8][9]);
    conv_output[8][10] = -0.019604;
    conv_output[8][10] += input[8][10] * 0.088207;
    conv_output[8][10] += input[8][11] * 0.061727;
    conv_output[8][10] += input[8][12] * -0.114732;
    conv_output[8][10] += input[9][10] * -0.083850;
    conv_output[8][10] += input[9][11] * 0.038051;
    conv_output[8][10] += input[9][12] * 0.042449;
    conv_output[8][10] += input[10][10] * -0.084779;
    conv_output[8][10] += input[10][11] * 0.206606;
    conv_output[8][10] += input[10][12] * -0.146001;
    conv_output[8][10] = fmaxf(0, conv_output[8][10]);
    conv_output[8][11] = -0.019604;
    conv_output[8][11] += input[8][11] * 0.088207;
    conv_output[8][11] += input[8][12] * 0.061727;
    conv_output[8][11] += input[8][13] * -0.114732;
    conv_output[8][11] += input[9][11] * -0.083850;
    conv_output[8][11] += input[9][12] * 0.038051;
    conv_output[8][11] += input[9][13] * 0.042449;
    conv_output[8][11] += input[10][11] * -0.084779;
    conv_output[8][11] += input[10][12] * 0.206606;
    conv_output[8][11] += input[10][13] * -0.146001;
    conv_output[8][11] = fmaxf(0, conv_output[8][11]);
    conv_output[8][12] = -0.019604;
    conv_output[8][12] += input[8][12] * 0.088207;
    conv_output[8][12] += input[8][13] * 0.061727;
    conv_output[8][12] += input[8][14] * -0.114732;
    conv_output[8][12] += input[9][12] * -0.083850;
    conv_output[8][12] += input[9][13] * 0.038051;
    conv_output[8][12] += input[9][14] * 0.042449;
    conv_output[8][12] += input[10][12] * -0.084779;
    conv_output[8][12] += input[10][13] * 0.206606;
    conv_output[8][12] += input[10][14] * -0.146001;
    conv_output[8][12] = fmaxf(0, conv_output[8][12]);
    conv_output[8][13] = -0.019604;
    conv_output[8][13] += input[8][13] * 0.088207;
    conv_output[8][13] += input[8][14] * 0.061727;
    conv_output[8][13] += input[8][15] * -0.114732;
    conv_output[8][13] += input[9][13] * -0.083850;
    conv_output[8][13] += input[9][14] * 0.038051;
    conv_output[8][13] += input[9][15] * 0.042449;
    conv_output[8][13] += input[10][13] * -0.084779;
    conv_output[8][13] += input[10][14] * 0.206606;
    conv_output[8][13] += input[10][15] * -0.146001;
    conv_output[8][13] = fmaxf(0, conv_output[8][13]);
    conv_output[8][14] = -0.019604;
    conv_output[8][14] += input[8][14] * 0.088207;
    conv_output[8][14] += input[8][15] * 0.061727;
    conv_output[8][14] += input[8][16] * -0.114732;
    conv_output[8][14] += input[9][14] * -0.083850;
    conv_output[8][14] += input[9][15] * 0.038051;
    conv_output[8][14] += input[9][16] * 0.042449;
    conv_output[8][14] += input[10][14] * -0.084779;
    conv_output[8][14] += input[10][15] * 0.206606;
    conv_output[8][14] += input[10][16] * -0.146001;
    conv_output[8][14] = fmaxf(0, conv_output[8][14]);
    conv_output[8][15] = -0.019604;
    conv_output[8][15] += input[8][15] * 0.088207;
    conv_output[8][15] += input[8][16] * 0.061727;
    conv_output[8][15] += input[8][17] * -0.114732;
    conv_output[8][15] += input[9][15] * -0.083850;
    conv_output[8][15] += input[9][16] * 0.038051;
    conv_output[8][15] += input[9][17] * 0.042449;
    conv_output[8][15] += input[10][15] * -0.084779;
    conv_output[8][15] += input[10][16] * 0.206606;
    conv_output[8][15] += input[10][17] * -0.146001;
    conv_output[8][15] = fmaxf(0, conv_output[8][15]);
    conv_output[8][16] = -0.019604;
    conv_output[8][16] += input[8][16] * 0.088207;
    conv_output[8][16] += input[8][17] * 0.061727;
    conv_output[8][16] += input[8][18] * -0.114732;
    conv_output[8][16] += input[9][16] * -0.083850;
    conv_output[8][16] += input[9][17] * 0.038051;
    conv_output[8][16] += input[9][18] * 0.042449;
    conv_output[8][16] += input[10][16] * -0.084779;
    conv_output[8][16] += input[10][17] * 0.206606;
    conv_output[8][16] += input[10][18] * -0.146001;
    conv_output[8][16] = fmaxf(0, conv_output[8][16]);
    conv_output[8][17] = -0.019604;
    conv_output[8][17] += input[8][17] * 0.088207;
    conv_output[8][17] += input[8][18] * 0.061727;
    conv_output[8][17] += input[8][19] * -0.114732;
    conv_output[8][17] += input[9][17] * -0.083850;
    conv_output[8][17] += input[9][18] * 0.038051;
    conv_output[8][17] += input[9][19] * 0.042449;
    conv_output[8][17] += input[10][17] * -0.084779;
    conv_output[8][17] += input[10][18] * 0.206606;
    conv_output[8][17] += input[10][19] * -0.146001;
    conv_output[8][17] = fmaxf(0, conv_output[8][17]);
    conv_output[8][18] = -0.019604;
    conv_output[8][18] += input[8][18] * 0.088207;
    conv_output[8][18] += input[8][19] * 0.061727;
    conv_output[8][18] += input[8][20] * -0.114732;
    conv_output[8][18] += input[9][18] * -0.083850;
    conv_output[8][18] += input[9][19] * 0.038051;
    conv_output[8][18] += input[9][20] * 0.042449;
    conv_output[8][18] += input[10][18] * -0.084779;
    conv_output[8][18] += input[10][19] * 0.206606;
    conv_output[8][18] += input[10][20] * -0.146001;
    conv_output[8][18] = fmaxf(0, conv_output[8][18]);
    conv_output[8][19] = -0.019604;
    conv_output[8][19] += input[8][19] * 0.088207;
    conv_output[8][19] += input[8][20] * 0.061727;
    conv_output[8][19] += input[8][21] * -0.114732;
    conv_output[8][19] += input[9][19] * -0.083850;
    conv_output[8][19] += input[9][20] * 0.038051;
    conv_output[8][19] += input[9][21] * 0.042449;
    conv_output[8][19] += input[10][19] * -0.084779;
    conv_output[8][19] += input[10][20] * 0.206606;
    conv_output[8][19] += input[10][21] * -0.146001;
    conv_output[8][19] = fmaxf(0, conv_output[8][19]);
    conv_output[8][20] = -0.019604;
    conv_output[8][20] += input[8][20] * 0.088207;
    conv_output[8][20] += input[8][21] * 0.061727;
    conv_output[8][20] += input[8][22] * -0.114732;
    conv_output[8][20] += input[9][20] * -0.083850;
    conv_output[8][20] += input[9][21] * 0.038051;
    conv_output[8][20] += input[9][22] * 0.042449;
    conv_output[8][20] += input[10][20] * -0.084779;
    conv_output[8][20] += input[10][21] * 0.206606;
    conv_output[8][20] += input[10][22] * -0.146001;
    conv_output[8][20] = fmaxf(0, conv_output[8][20]);
    conv_output[8][21] = -0.019604;
    conv_output[8][21] += input[8][21] * 0.088207;
    conv_output[8][21] += input[8][22] * 0.061727;
    conv_output[8][21] += input[8][23] * -0.114732;
    conv_output[8][21] += input[9][21] * -0.083850;
    conv_output[8][21] += input[9][22] * 0.038051;
    conv_output[8][21] += input[9][23] * 0.042449;
    conv_output[8][21] += input[10][21] * -0.084779;
    conv_output[8][21] += input[10][22] * 0.206606;
    conv_output[8][21] += input[10][23] * -0.146001;
    conv_output[8][21] = fmaxf(0, conv_output[8][21]);
    conv_output[8][22] = -0.019604;
    conv_output[8][22] += input[8][22] * 0.088207;
    conv_output[8][22] += input[8][23] * 0.061727;
    conv_output[8][22] += input[8][24] * -0.114732;
    conv_output[8][22] += input[9][22] * -0.083850;
    conv_output[8][22] += input[9][23] * 0.038051;
    conv_output[8][22] += input[9][24] * 0.042449;
    conv_output[8][22] += input[10][22] * -0.084779;
    conv_output[8][22] += input[10][23] * 0.206606;
    conv_output[8][22] += input[10][24] * -0.146001;
    conv_output[8][22] = fmaxf(0, conv_output[8][22]);
    conv_output[8][23] = -0.019604;
    conv_output[8][23] += input[8][23] * 0.088207;
    conv_output[8][23] += input[8][24] * 0.061727;
    conv_output[8][23] += input[8][25] * -0.114732;
    conv_output[8][23] += input[9][23] * -0.083850;
    conv_output[8][23] += input[9][24] * 0.038051;
    conv_output[8][23] += input[9][25] * 0.042449;
    conv_output[8][23] += input[10][23] * -0.084779;
    conv_output[8][23] += input[10][24] * 0.206606;
    conv_output[8][23] += input[10][25] * -0.146001;
    conv_output[8][23] = fmaxf(0, conv_output[8][23]);
    conv_output[8][24] = -0.019604;
    conv_output[8][24] += input[8][24] * 0.088207;
    conv_output[8][24] += input[8][25] * 0.061727;
    conv_output[8][24] += input[8][26] * -0.114732;
    conv_output[8][24] += input[9][24] * -0.083850;
    conv_output[8][24] += input[9][25] * 0.038051;
    conv_output[8][24] += input[9][26] * 0.042449;
    conv_output[8][24] += input[10][24] * -0.084779;
    conv_output[8][24] += input[10][25] * 0.206606;
    conv_output[8][24] += input[10][26] * -0.146001;
    conv_output[8][24] = fmaxf(0, conv_output[8][24]);
    conv_output[8][25] = -0.019604;
    conv_output[8][25] += input[8][25] * 0.088207;
    conv_output[8][25] += input[8][26] * 0.061727;
    conv_output[8][25] += input[8][27] * -0.114732;
    conv_output[8][25] += input[9][25] * -0.083850;
    conv_output[8][25] += input[9][26] * 0.038051;
    conv_output[8][25] += input[9][27] * 0.042449;
    conv_output[8][25] += input[10][25] * -0.084779;
    conv_output[8][25] += input[10][26] * 0.206606;
    conv_output[8][25] += input[10][27] * -0.146001;
    conv_output[8][25] = fmaxf(0, conv_output[8][25]);
    conv_output[9][0] = -0.019604;
    conv_output[9][0] += input[9][0] * 0.088207;
    conv_output[9][0] += input[9][1] * 0.061727;
    conv_output[9][0] += input[9][2] * -0.114732;
    conv_output[9][0] += input[10][0] * -0.083850;
    conv_output[9][0] += input[10][1] * 0.038051;
    conv_output[9][0] += input[10][2] * 0.042449;
    conv_output[9][0] += input[11][0] * -0.084779;
    conv_output[9][0] += input[11][1] * 0.206606;
    conv_output[9][0] += input[11][2] * -0.146001;
    conv_output[9][0] = fmaxf(0, conv_output[9][0]);
    conv_output[9][1] = -0.019604;
    conv_output[9][1] += input[9][1] * 0.088207;
    conv_output[9][1] += input[9][2] * 0.061727;
    conv_output[9][1] += input[9][3] * -0.114732;
    conv_output[9][1] += input[10][1] * -0.083850;
    conv_output[9][1] += input[10][2] * 0.038051;
    conv_output[9][1] += input[10][3] * 0.042449;
    conv_output[9][1] += input[11][1] * -0.084779;
    conv_output[9][1] += input[11][2] * 0.206606;
    conv_output[9][1] += input[11][3] * -0.146001;
    conv_output[9][1] = fmaxf(0, conv_output[9][1]);
    conv_output[9][2] = -0.019604;
    conv_output[9][2] += input[9][2] * 0.088207;
    conv_output[9][2] += input[9][3] * 0.061727;
    conv_output[9][2] += input[9][4] * -0.114732;
    conv_output[9][2] += input[10][2] * -0.083850;
    conv_output[9][2] += input[10][3] * 0.038051;
    conv_output[9][2] += input[10][4] * 0.042449;
    conv_output[9][2] += input[11][2] * -0.084779;
    conv_output[9][2] += input[11][3] * 0.206606;
    conv_output[9][2] += input[11][4] * -0.146001;
    conv_output[9][2] = fmaxf(0, conv_output[9][2]);
    conv_output[9][3] = -0.019604;
    conv_output[9][3] += input[9][3] * 0.088207;
    conv_output[9][3] += input[9][4] * 0.061727;
    conv_output[9][3] += input[9][5] * -0.114732;
    conv_output[9][3] += input[10][3] * -0.083850;
    conv_output[9][3] += input[10][4] * 0.038051;
    conv_output[9][3] += input[10][5] * 0.042449;
    conv_output[9][3] += input[11][3] * -0.084779;
    conv_output[9][3] += input[11][4] * 0.206606;
    conv_output[9][3] += input[11][5] * -0.146001;
    conv_output[9][3] = fmaxf(0, conv_output[9][3]);
    conv_output[9][4] = -0.019604;
    conv_output[9][4] += input[9][4] * 0.088207;
    conv_output[9][4] += input[9][5] * 0.061727;
    conv_output[9][4] += input[9][6] * -0.114732;
    conv_output[9][4] += input[10][4] * -0.083850;
    conv_output[9][4] += input[10][5] * 0.038051;
    conv_output[9][4] += input[10][6] * 0.042449;
    conv_output[9][4] += input[11][4] * -0.084779;
    conv_output[9][4] += input[11][5] * 0.206606;
    conv_output[9][4] += input[11][6] * -0.146001;
    conv_output[9][4] = fmaxf(0, conv_output[9][4]);
    conv_output[9][5] = -0.019604;
    conv_output[9][5] += input[9][5] * 0.088207;
    conv_output[9][5] += input[9][6] * 0.061727;
    conv_output[9][5] += input[9][7] * -0.114732;
    conv_output[9][5] += input[10][5] * -0.083850;
    conv_output[9][5] += input[10][6] * 0.038051;
    conv_output[9][5] += input[10][7] * 0.042449;
    conv_output[9][5] += input[11][5] * -0.084779;
    conv_output[9][5] += input[11][6] * 0.206606;
    conv_output[9][5] += input[11][7] * -0.146001;
    conv_output[9][5] = fmaxf(0, conv_output[9][5]);
    conv_output[9][6] = -0.019604;
    conv_output[9][6] += input[9][6] * 0.088207;
    conv_output[9][6] += input[9][7] * 0.061727;
    conv_output[9][6] += input[9][8] * -0.114732;
    conv_output[9][6] += input[10][6] * -0.083850;
    conv_output[9][6] += input[10][7] * 0.038051;
    conv_output[9][6] += input[10][8] * 0.042449;
    conv_output[9][6] += input[11][6] * -0.084779;
    conv_output[9][6] += input[11][7] * 0.206606;
    conv_output[9][6] += input[11][8] * -0.146001;
    conv_output[9][6] = fmaxf(0, conv_output[9][6]);
    conv_output[9][7] = -0.019604;
    conv_output[9][7] += input[9][7] * 0.088207;
    conv_output[9][7] += input[9][8] * 0.061727;
    conv_output[9][7] += input[9][9] * -0.114732;
    conv_output[9][7] += input[10][7] * -0.083850;
    conv_output[9][7] += input[10][8] * 0.038051;
    conv_output[9][7] += input[10][9] * 0.042449;
    conv_output[9][7] += input[11][7] * -0.084779;
    conv_output[9][7] += input[11][8] * 0.206606;
    conv_output[9][7] += input[11][9] * -0.146001;
    conv_output[9][7] = fmaxf(0, conv_output[9][7]);
    conv_output[9][8] = -0.019604;
    conv_output[9][8] += input[9][8] * 0.088207;
    conv_output[9][8] += input[9][9] * 0.061727;
    conv_output[9][8] += input[9][10] * -0.114732;
    conv_output[9][8] += input[10][8] * -0.083850;
    conv_output[9][8] += input[10][9] * 0.038051;
    conv_output[9][8] += input[10][10] * 0.042449;
    conv_output[9][8] += input[11][8] * -0.084779;
    conv_output[9][8] += input[11][9] * 0.206606;
    conv_output[9][8] += input[11][10] * -0.146001;
    conv_output[9][8] = fmaxf(0, conv_output[9][8]);
    conv_output[9][9] = -0.019604;
    conv_output[9][9] += input[9][9] * 0.088207;
    conv_output[9][9] += input[9][10] * 0.061727;
    conv_output[9][9] += input[9][11] * -0.114732;
    conv_output[9][9] += input[10][9] * -0.083850;
    conv_output[9][9] += input[10][10] * 0.038051;
    conv_output[9][9] += input[10][11] * 0.042449;
    conv_output[9][9] += input[11][9] * -0.084779;
    conv_output[9][9] += input[11][10] * 0.206606;
    conv_output[9][9] += input[11][11] * -0.146001;
    conv_output[9][9] = fmaxf(0, conv_output[9][9]);
    conv_output[9][10] = -0.019604;
    conv_output[9][10] += input[9][10] * 0.088207;
    conv_output[9][10] += input[9][11] * 0.061727;
    conv_output[9][10] += input[9][12] * -0.114732;
    conv_output[9][10] += input[10][10] * -0.083850;
    conv_output[9][10] += input[10][11] * 0.038051;
    conv_output[9][10] += input[10][12] * 0.042449;
    conv_output[9][10] += input[11][10] * -0.084779;
    conv_output[9][10] += input[11][11] * 0.206606;
    conv_output[9][10] += input[11][12] * -0.146001;
    conv_output[9][10] = fmaxf(0, conv_output[9][10]);
    conv_output[9][11] = -0.019604;
    conv_output[9][11] += input[9][11] * 0.088207;
    conv_output[9][11] += input[9][12] * 0.061727;
    conv_output[9][11] += input[9][13] * -0.114732;
    conv_output[9][11] += input[10][11] * -0.083850;
    conv_output[9][11] += input[10][12] * 0.038051;
    conv_output[9][11] += input[10][13] * 0.042449;
    conv_output[9][11] += input[11][11] * -0.084779;
    conv_output[9][11] += input[11][12] * 0.206606;
    conv_output[9][11] += input[11][13] * -0.146001;
    conv_output[9][11] = fmaxf(0, conv_output[9][11]);
    conv_output[9][12] = -0.019604;
    conv_output[9][12] += input[9][12] * 0.088207;
    conv_output[9][12] += input[9][13] * 0.061727;
    conv_output[9][12] += input[9][14] * -0.114732;
    conv_output[9][12] += input[10][12] * -0.083850;
    conv_output[9][12] += input[10][13] * 0.038051;
    conv_output[9][12] += input[10][14] * 0.042449;
    conv_output[9][12] += input[11][12] * -0.084779;
    conv_output[9][12] += input[11][13] * 0.206606;
    conv_output[9][12] += input[11][14] * -0.146001;
    conv_output[9][12] = fmaxf(0, conv_output[9][12]);
    conv_output[9][13] = -0.019604;
    conv_output[9][13] += input[9][13] * 0.088207;
    conv_output[9][13] += input[9][14] * 0.061727;
    conv_output[9][13] += input[9][15] * -0.114732;
    conv_output[9][13] += input[10][13] * -0.083850;
    conv_output[9][13] += input[10][14] * 0.038051;
    conv_output[9][13] += input[10][15] * 0.042449;
    conv_output[9][13] += input[11][13] * -0.084779;
    conv_output[9][13] += input[11][14] * 0.206606;
    conv_output[9][13] += input[11][15] * -0.146001;
    conv_output[9][13] = fmaxf(0, conv_output[9][13]);
    conv_output[9][14] = -0.019604;
    conv_output[9][14] += input[9][14] * 0.088207;
    conv_output[9][14] += input[9][15] * 0.061727;
    conv_output[9][14] += input[9][16] * -0.114732;
    conv_output[9][14] += input[10][14] * -0.083850;
    conv_output[9][14] += input[10][15] * 0.038051;
    conv_output[9][14] += input[10][16] * 0.042449;
    conv_output[9][14] += input[11][14] * -0.084779;
    conv_output[9][14] += input[11][15] * 0.206606;
    conv_output[9][14] += input[11][16] * -0.146001;
    conv_output[9][14] = fmaxf(0, conv_output[9][14]);
    conv_output[9][15] = -0.019604;
    conv_output[9][15] += input[9][15] * 0.088207;
    conv_output[9][15] += input[9][16] * 0.061727;
    conv_output[9][15] += input[9][17] * -0.114732;
    conv_output[9][15] += input[10][15] * -0.083850;
    conv_output[9][15] += input[10][16] * 0.038051;
    conv_output[9][15] += input[10][17] * 0.042449;
    conv_output[9][15] += input[11][15] * -0.084779;
    conv_output[9][15] += input[11][16] * 0.206606;
    conv_output[9][15] += input[11][17] * -0.146001;
    conv_output[9][15] = fmaxf(0, conv_output[9][15]);
    conv_output[9][16] = -0.019604;
    conv_output[9][16] += input[9][16] * 0.088207;
    conv_output[9][16] += input[9][17] * 0.061727;
    conv_output[9][16] += input[9][18] * -0.114732;
    conv_output[9][16] += input[10][16] * -0.083850;
    conv_output[9][16] += input[10][17] * 0.038051;
    conv_output[9][16] += input[10][18] * 0.042449;
    conv_output[9][16] += input[11][16] * -0.084779;
    conv_output[9][16] += input[11][17] * 0.206606;
    conv_output[9][16] += input[11][18] * -0.146001;
    conv_output[9][16] = fmaxf(0, conv_output[9][16]);
    conv_output[9][17] = -0.019604;
    conv_output[9][17] += input[9][17] * 0.088207;
    conv_output[9][17] += input[9][18] * 0.061727;
    conv_output[9][17] += input[9][19] * -0.114732;
    conv_output[9][17] += input[10][17] * -0.083850;
    conv_output[9][17] += input[10][18] * 0.038051;
    conv_output[9][17] += input[10][19] * 0.042449;
    conv_output[9][17] += input[11][17] * -0.084779;
    conv_output[9][17] += input[11][18] * 0.206606;
    conv_output[9][17] += input[11][19] * -0.146001;
    conv_output[9][17] = fmaxf(0, conv_output[9][17]);
    conv_output[9][18] = -0.019604;
    conv_output[9][18] += input[9][18] * 0.088207;
    conv_output[9][18] += input[9][19] * 0.061727;
    conv_output[9][18] += input[9][20] * -0.114732;
    conv_output[9][18] += input[10][18] * -0.083850;
    conv_output[9][18] += input[10][19] * 0.038051;
    conv_output[9][18] += input[10][20] * 0.042449;
    conv_output[9][18] += input[11][18] * -0.084779;
    conv_output[9][18] += input[11][19] * 0.206606;
    conv_output[9][18] += input[11][20] * -0.146001;
    conv_output[9][18] = fmaxf(0, conv_output[9][18]);
    conv_output[9][19] = -0.019604;
    conv_output[9][19] += input[9][19] * 0.088207;
    conv_output[9][19] += input[9][20] * 0.061727;
    conv_output[9][19] += input[9][21] * -0.114732;
    conv_output[9][19] += input[10][19] * -0.083850;
    conv_output[9][19] += input[10][20] * 0.038051;
    conv_output[9][19] += input[10][21] * 0.042449;
    conv_output[9][19] += input[11][19] * -0.084779;
    conv_output[9][19] += input[11][20] * 0.206606;
    conv_output[9][19] += input[11][21] * -0.146001;
    conv_output[9][19] = fmaxf(0, conv_output[9][19]);
    conv_output[9][20] = -0.019604;
    conv_output[9][20] += input[9][20] * 0.088207;
    conv_output[9][20] += input[9][21] * 0.061727;
    conv_output[9][20] += input[9][22] * -0.114732;
    conv_output[9][20] += input[10][20] * -0.083850;
    conv_output[9][20] += input[10][21] * 0.038051;
    conv_output[9][20] += input[10][22] * 0.042449;
    conv_output[9][20] += input[11][20] * -0.084779;
    conv_output[9][20] += input[11][21] * 0.206606;
    conv_output[9][20] += input[11][22] * -0.146001;
    conv_output[9][20] = fmaxf(0, conv_output[9][20]);
    conv_output[9][21] = -0.019604;
    conv_output[9][21] += input[9][21] * 0.088207;
    conv_output[9][21] += input[9][22] * 0.061727;
    conv_output[9][21] += input[9][23] * -0.114732;
    conv_output[9][21] += input[10][21] * -0.083850;
    conv_output[9][21] += input[10][22] * 0.038051;
    conv_output[9][21] += input[10][23] * 0.042449;
    conv_output[9][21] += input[11][21] * -0.084779;
    conv_output[9][21] += input[11][22] * 0.206606;
    conv_output[9][21] += input[11][23] * -0.146001;
    conv_output[9][21] = fmaxf(0, conv_output[9][21]);
    conv_output[9][22] = -0.019604;
    conv_output[9][22] += input[9][22] * 0.088207;
    conv_output[9][22] += input[9][23] * 0.061727;
    conv_output[9][22] += input[9][24] * -0.114732;
    conv_output[9][22] += input[10][22] * -0.083850;
    conv_output[9][22] += input[10][23] * 0.038051;
    conv_output[9][22] += input[10][24] * 0.042449;
    conv_output[9][22] += input[11][22] * -0.084779;
    conv_output[9][22] += input[11][23] * 0.206606;
    conv_output[9][22] += input[11][24] * -0.146001;
    conv_output[9][22] = fmaxf(0, conv_output[9][22]);
    conv_output[9][23] = -0.019604;
    conv_output[9][23] += input[9][23] * 0.088207;
    conv_output[9][23] += input[9][24] * 0.061727;
    conv_output[9][23] += input[9][25] * -0.114732;
    conv_output[9][23] += input[10][23] * -0.083850;
    conv_output[9][23] += input[10][24] * 0.038051;
    conv_output[9][23] += input[10][25] * 0.042449;
    conv_output[9][23] += input[11][23] * -0.084779;
    conv_output[9][23] += input[11][24] * 0.206606;
    conv_output[9][23] += input[11][25] * -0.146001;
    conv_output[9][23] = fmaxf(0, conv_output[9][23]);
    conv_output[9][24] = -0.019604;
    conv_output[9][24] += input[9][24] * 0.088207;
    conv_output[9][24] += input[9][25] * 0.061727;
    conv_output[9][24] += input[9][26] * -0.114732;
    conv_output[9][24] += input[10][24] * -0.083850;
    conv_output[9][24] += input[10][25] * 0.038051;
    conv_output[9][24] += input[10][26] * 0.042449;
    conv_output[9][24] += input[11][24] * -0.084779;
    conv_output[9][24] += input[11][25] * 0.206606;
    conv_output[9][24] += input[11][26] * -0.146001;
    conv_output[9][24] = fmaxf(0, conv_output[9][24]);
    conv_output[9][25] = -0.019604;
    conv_output[9][25] += input[9][25] * 0.088207;
    conv_output[9][25] += input[9][26] * 0.061727;
    conv_output[9][25] += input[9][27] * -0.114732;
    conv_output[9][25] += input[10][25] * -0.083850;
    conv_output[9][25] += input[10][26] * 0.038051;
    conv_output[9][25] += input[10][27] * 0.042449;
    conv_output[9][25] += input[11][25] * -0.084779;
    conv_output[9][25] += input[11][26] * 0.206606;
    conv_output[9][25] += input[11][27] * -0.146001;
    conv_output[9][25] = fmaxf(0, conv_output[9][25]);
    conv_output[10][0] = -0.019604;
    conv_output[10][0] += input[10][0] * 0.088207;
    conv_output[10][0] += input[10][1] * 0.061727;
    conv_output[10][0] += input[10][2] * -0.114732;
    conv_output[10][0] += input[11][0] * -0.083850;
    conv_output[10][0] += input[11][1] * 0.038051;
    conv_output[10][0] += input[11][2] * 0.042449;
    conv_output[10][0] += input[12][0] * -0.084779;
    conv_output[10][0] += input[12][1] * 0.206606;
    conv_output[10][0] += input[12][2] * -0.146001;
    conv_output[10][0] = fmaxf(0, conv_output[10][0]);
    conv_output[10][1] = -0.019604;
    conv_output[10][1] += input[10][1] * 0.088207;
    conv_output[10][1] += input[10][2] * 0.061727;
    conv_output[10][1] += input[10][3] * -0.114732;
    conv_output[10][1] += input[11][1] * -0.083850;
    conv_output[10][1] += input[11][2] * 0.038051;
    conv_output[10][1] += input[11][3] * 0.042449;
    conv_output[10][1] += input[12][1] * -0.084779;
    conv_output[10][1] += input[12][2] * 0.206606;
    conv_output[10][1] += input[12][3] * -0.146001;
    conv_output[10][1] = fmaxf(0, conv_output[10][1]);
    conv_output[10][2] = -0.019604;
    conv_output[10][2] += input[10][2] * 0.088207;
    conv_output[10][2] += input[10][3] * 0.061727;
    conv_output[10][2] += input[10][4] * -0.114732;
    conv_output[10][2] += input[11][2] * -0.083850;
    conv_output[10][2] += input[11][3] * 0.038051;
    conv_output[10][2] += input[11][4] * 0.042449;
    conv_output[10][2] += input[12][2] * -0.084779;
    conv_output[10][2] += input[12][3] * 0.206606;
    conv_output[10][2] += input[12][4] * -0.146001;
    conv_output[10][2] = fmaxf(0, conv_output[10][2]);
    conv_output[10][3] = -0.019604;
    conv_output[10][3] += input[10][3] * 0.088207;
    conv_output[10][3] += input[10][4] * 0.061727;
    conv_output[10][3] += input[10][5] * -0.114732;
    conv_output[10][3] += input[11][3] * -0.083850;
    conv_output[10][3] += input[11][4] * 0.038051;
    conv_output[10][3] += input[11][5] * 0.042449;
    conv_output[10][3] += input[12][3] * -0.084779;
    conv_output[10][3] += input[12][4] * 0.206606;
    conv_output[10][3] += input[12][5] * -0.146001;
    conv_output[10][3] = fmaxf(0, conv_output[10][3]);
    conv_output[10][4] = -0.019604;
    conv_output[10][4] += input[10][4] * 0.088207;
    conv_output[10][4] += input[10][5] * 0.061727;
    conv_output[10][4] += input[10][6] * -0.114732;
    conv_output[10][4] += input[11][4] * -0.083850;
    conv_output[10][4] += input[11][5] * 0.038051;
    conv_output[10][4] += input[11][6] * 0.042449;
    conv_output[10][4] += input[12][4] * -0.084779;
    conv_output[10][4] += input[12][5] * 0.206606;
    conv_output[10][4] += input[12][6] * -0.146001;
    conv_output[10][4] = fmaxf(0, conv_output[10][4]);
    conv_output[10][5] = -0.019604;
    conv_output[10][5] += input[10][5] * 0.088207;
    conv_output[10][5] += input[10][6] * 0.061727;
    conv_output[10][5] += input[10][7] * -0.114732;
    conv_output[10][5] += input[11][5] * -0.083850;
    conv_output[10][5] += input[11][6] * 0.038051;
    conv_output[10][5] += input[11][7] * 0.042449;
    conv_output[10][5] += input[12][5] * -0.084779;
    conv_output[10][5] += input[12][6] * 0.206606;
    conv_output[10][5] += input[12][7] * -0.146001;
    conv_output[10][5] = fmaxf(0, conv_output[10][5]);
    conv_output[10][6] = -0.019604;
    conv_output[10][6] += input[10][6] * 0.088207;
    conv_output[10][6] += input[10][7] * 0.061727;
    conv_output[10][6] += input[10][8] * -0.114732;
    conv_output[10][6] += input[11][6] * -0.083850;
    conv_output[10][6] += input[11][7] * 0.038051;
    conv_output[10][6] += input[11][8] * 0.042449;
    conv_output[10][6] += input[12][6] * -0.084779;
    conv_output[10][6] += input[12][7] * 0.206606;
    conv_output[10][6] += input[12][8] * -0.146001;
    conv_output[10][6] = fmaxf(0, conv_output[10][6]);
    conv_output[10][7] = -0.019604;
    conv_output[10][7] += input[10][7] * 0.088207;
    conv_output[10][7] += input[10][8] * 0.061727;
    conv_output[10][7] += input[10][9] * -0.114732;
    conv_output[10][7] += input[11][7] * -0.083850;
    conv_output[10][7] += input[11][8] * 0.038051;
    conv_output[10][7] += input[11][9] * 0.042449;
    conv_output[10][7] += input[12][7] * -0.084779;
    conv_output[10][7] += input[12][8] * 0.206606;
    conv_output[10][7] += input[12][9] * -0.146001;
    conv_output[10][7] = fmaxf(0, conv_output[10][7]);
    conv_output[10][8] = -0.019604;
    conv_output[10][8] += input[10][8] * 0.088207;
    conv_output[10][8] += input[10][9] * 0.061727;
    conv_output[10][8] += input[10][10] * -0.114732;
    conv_output[10][8] += input[11][8] * -0.083850;
    conv_output[10][8] += input[11][9] * 0.038051;
    conv_output[10][8] += input[11][10] * 0.042449;
    conv_output[10][8] += input[12][8] * -0.084779;
    conv_output[10][8] += input[12][9] * 0.206606;
    conv_output[10][8] += input[12][10] * -0.146001;
    conv_output[10][8] = fmaxf(0, conv_output[10][8]);
    conv_output[10][9] = -0.019604;
    conv_output[10][9] += input[10][9] * 0.088207;
    conv_output[10][9] += input[10][10] * 0.061727;
    conv_output[10][9] += input[10][11] * -0.114732;
    conv_output[10][9] += input[11][9] * -0.083850;
    conv_output[10][9] += input[11][10] * 0.038051;
    conv_output[10][9] += input[11][11] * 0.042449;
    conv_output[10][9] += input[12][9] * -0.084779;
    conv_output[10][9] += input[12][10] * 0.206606;
    conv_output[10][9] += input[12][11] * -0.146001;
    conv_output[10][9] = fmaxf(0, conv_output[10][9]);
    conv_output[10][10] = -0.019604;
    conv_output[10][10] += input[10][10] * 0.088207;
    conv_output[10][10] += input[10][11] * 0.061727;
    conv_output[10][10] += input[10][12] * -0.114732;
    conv_output[10][10] += input[11][10] * -0.083850;
    conv_output[10][10] += input[11][11] * 0.038051;
    conv_output[10][10] += input[11][12] * 0.042449;
    conv_output[10][10] += input[12][10] * -0.084779;
    conv_output[10][10] += input[12][11] * 0.206606;
    conv_output[10][10] += input[12][12] * -0.146001;
    conv_output[10][10] = fmaxf(0, conv_output[10][10]);
    conv_output[10][11] = -0.019604;
    conv_output[10][11] += input[10][11] * 0.088207;
    conv_output[10][11] += input[10][12] * 0.061727;
    conv_output[10][11] += input[10][13] * -0.114732;
    conv_output[10][11] += input[11][11] * -0.083850;
    conv_output[10][11] += input[11][12] * 0.038051;
    conv_output[10][11] += input[11][13] * 0.042449;
    conv_output[10][11] += input[12][11] * -0.084779;
    conv_output[10][11] += input[12][12] * 0.206606;
    conv_output[10][11] += input[12][13] * -0.146001;
    conv_output[10][11] = fmaxf(0, conv_output[10][11]);
    conv_output[10][12] = -0.019604;
    conv_output[10][12] += input[10][12] * 0.088207;
    conv_output[10][12] += input[10][13] * 0.061727;
    conv_output[10][12] += input[10][14] * -0.114732;
    conv_output[10][12] += input[11][12] * -0.083850;
    conv_output[10][12] += input[11][13] * 0.038051;
    conv_output[10][12] += input[11][14] * 0.042449;
    conv_output[10][12] += input[12][12] * -0.084779;
    conv_output[10][12] += input[12][13] * 0.206606;
    conv_output[10][12] += input[12][14] * -0.146001;
    conv_output[10][12] = fmaxf(0, conv_output[10][12]);
    conv_output[10][13] = -0.019604;
    conv_output[10][13] += input[10][13] * 0.088207;
    conv_output[10][13] += input[10][14] * 0.061727;
    conv_output[10][13] += input[10][15] * -0.114732;
    conv_output[10][13] += input[11][13] * -0.083850;
    conv_output[10][13] += input[11][14] * 0.038051;
    conv_output[10][13] += input[11][15] * 0.042449;
    conv_output[10][13] += input[12][13] * -0.084779;
    conv_output[10][13] += input[12][14] * 0.206606;
    conv_output[10][13] += input[12][15] * -0.146001;
    conv_output[10][13] = fmaxf(0, conv_output[10][13]);
    conv_output[10][14] = -0.019604;
    conv_output[10][14] += input[10][14] * 0.088207;
    conv_output[10][14] += input[10][15] * 0.061727;
    conv_output[10][14] += input[10][16] * -0.114732;
    conv_output[10][14] += input[11][14] * -0.083850;
    conv_output[10][14] += input[11][15] * 0.038051;
    conv_output[10][14] += input[11][16] * 0.042449;
    conv_output[10][14] += input[12][14] * -0.084779;
    conv_output[10][14] += input[12][15] * 0.206606;
    conv_output[10][14] += input[12][16] * -0.146001;
    conv_output[10][14] = fmaxf(0, conv_output[10][14]);
    conv_output[10][15] = -0.019604;
    conv_output[10][15] += input[10][15] * 0.088207;
    conv_output[10][15] += input[10][16] * 0.061727;
    conv_output[10][15] += input[10][17] * -0.114732;
    conv_output[10][15] += input[11][15] * -0.083850;
    conv_output[10][15] += input[11][16] * 0.038051;
    conv_output[10][15] += input[11][17] * 0.042449;
    conv_output[10][15] += input[12][15] * -0.084779;
    conv_output[10][15] += input[12][16] * 0.206606;
    conv_output[10][15] += input[12][17] * -0.146001;
    conv_output[10][15] = fmaxf(0, conv_output[10][15]);
    conv_output[10][16] = -0.019604;
    conv_output[10][16] += input[10][16] * 0.088207;
    conv_output[10][16] += input[10][17] * 0.061727;
    conv_output[10][16] += input[10][18] * -0.114732;
    conv_output[10][16] += input[11][16] * -0.083850;
    conv_output[10][16] += input[11][17] * 0.038051;
    conv_output[10][16] += input[11][18] * 0.042449;
    conv_output[10][16] += input[12][16] * -0.084779;
    conv_output[10][16] += input[12][17] * 0.206606;
    conv_output[10][16] += input[12][18] * -0.146001;
    conv_output[10][16] = fmaxf(0, conv_output[10][16]);
    conv_output[10][17] = -0.019604;
    conv_output[10][17] += input[10][17] * 0.088207;
    conv_output[10][17] += input[10][18] * 0.061727;
    conv_output[10][17] += input[10][19] * -0.114732;
    conv_output[10][17] += input[11][17] * -0.083850;
    conv_output[10][17] += input[11][18] * 0.038051;
    conv_output[10][17] += input[11][19] * 0.042449;
    conv_output[10][17] += input[12][17] * -0.084779;
    conv_output[10][17] += input[12][18] * 0.206606;
    conv_output[10][17] += input[12][19] * -0.146001;
    conv_output[10][17] = fmaxf(0, conv_output[10][17]);
    conv_output[10][18] = -0.019604;
    conv_output[10][18] += input[10][18] * 0.088207;
    conv_output[10][18] += input[10][19] * 0.061727;
    conv_output[10][18] += input[10][20] * -0.114732;
    conv_output[10][18] += input[11][18] * -0.083850;
    conv_output[10][18] += input[11][19] * 0.038051;
    conv_output[10][18] += input[11][20] * 0.042449;
    conv_output[10][18] += input[12][18] * -0.084779;
    conv_output[10][18] += input[12][19] * 0.206606;
    conv_output[10][18] += input[12][20] * -0.146001;
    conv_output[10][18] = fmaxf(0, conv_output[10][18]);
    conv_output[10][19] = -0.019604;
    conv_output[10][19] += input[10][19] * 0.088207;
    conv_output[10][19] += input[10][20] * 0.061727;
    conv_output[10][19] += input[10][21] * -0.114732;
    conv_output[10][19] += input[11][19] * -0.083850;
    conv_output[10][19] += input[11][20] * 0.038051;
    conv_output[10][19] += input[11][21] * 0.042449;
    conv_output[10][19] += input[12][19] * -0.084779;
    conv_output[10][19] += input[12][20] * 0.206606;
    conv_output[10][19] += input[12][21] * -0.146001;
    conv_output[10][19] = fmaxf(0, conv_output[10][19]);
    conv_output[10][20] = -0.019604;
    conv_output[10][20] += input[10][20] * 0.088207;
    conv_output[10][20] += input[10][21] * 0.061727;
    conv_output[10][20] += input[10][22] * -0.114732;
    conv_output[10][20] += input[11][20] * -0.083850;
    conv_output[10][20] += input[11][21] * 0.038051;
    conv_output[10][20] += input[11][22] * 0.042449;
    conv_output[10][20] += input[12][20] * -0.084779;
    conv_output[10][20] += input[12][21] * 0.206606;
    conv_output[10][20] += input[12][22] * -0.146001;
    conv_output[10][20] = fmaxf(0, conv_output[10][20]);
    conv_output[10][21] = -0.019604;
    conv_output[10][21] += input[10][21] * 0.088207;
    conv_output[10][21] += input[10][22] * 0.061727;
    conv_output[10][21] += input[10][23] * -0.114732;
    conv_output[10][21] += input[11][21] * -0.083850;
    conv_output[10][21] += input[11][22] * 0.038051;
    conv_output[10][21] += input[11][23] * 0.042449;
    conv_output[10][21] += input[12][21] * -0.084779;
    conv_output[10][21] += input[12][22] * 0.206606;
    conv_output[10][21] += input[12][23] * -0.146001;
    conv_output[10][21] = fmaxf(0, conv_output[10][21]);
    conv_output[10][22] = -0.019604;
    conv_output[10][22] += input[10][22] * 0.088207;
    conv_output[10][22] += input[10][23] * 0.061727;
    conv_output[10][22] += input[10][24] * -0.114732;
    conv_output[10][22] += input[11][22] * -0.083850;
    conv_output[10][22] += input[11][23] * 0.038051;
    conv_output[10][22] += input[11][24] * 0.042449;
    conv_output[10][22] += input[12][22] * -0.084779;
    conv_output[10][22] += input[12][23] * 0.206606;
    conv_output[10][22] += input[12][24] * -0.146001;
    conv_output[10][22] = fmaxf(0, conv_output[10][22]);
    conv_output[10][23] = -0.019604;
    conv_output[10][23] += input[10][23] * 0.088207;
    conv_output[10][23] += input[10][24] * 0.061727;
    conv_output[10][23] += input[10][25] * -0.114732;
    conv_output[10][23] += input[11][23] * -0.083850;
    conv_output[10][23] += input[11][24] * 0.038051;
    conv_output[10][23] += input[11][25] * 0.042449;
    conv_output[10][23] += input[12][23] * -0.084779;
    conv_output[10][23] += input[12][24] * 0.206606;
    conv_output[10][23] += input[12][25] * -0.146001;
    conv_output[10][23] = fmaxf(0, conv_output[10][23]);
    conv_output[10][24] = -0.019604;
    conv_output[10][24] += input[10][24] * 0.088207;
    conv_output[10][24] += input[10][25] * 0.061727;
    conv_output[10][24] += input[10][26] * -0.114732;
    conv_output[10][24] += input[11][24] * -0.083850;
    conv_output[10][24] += input[11][25] * 0.038051;
    conv_output[10][24] += input[11][26] * 0.042449;
    conv_output[10][24] += input[12][24] * -0.084779;
    conv_output[10][24] += input[12][25] * 0.206606;
    conv_output[10][24] += input[12][26] * -0.146001;
    conv_output[10][24] = fmaxf(0, conv_output[10][24]);
    conv_output[10][25] = -0.019604;
    conv_output[10][25] += input[10][25] * 0.088207;
    conv_output[10][25] += input[10][26] * 0.061727;
    conv_output[10][25] += input[10][27] * -0.114732;
    conv_output[10][25] += input[11][25] * -0.083850;
    conv_output[10][25] += input[11][26] * 0.038051;
    conv_output[10][25] += input[11][27] * 0.042449;
    conv_output[10][25] += input[12][25] * -0.084779;
    conv_output[10][25] += input[12][26] * 0.206606;
    conv_output[10][25] += input[12][27] * -0.146001;
    conv_output[10][25] = fmaxf(0, conv_output[10][25]);
    conv_output[11][0] = -0.019604;
    conv_output[11][0] += input[11][0] * 0.088207;
    conv_output[11][0] += input[11][1] * 0.061727;
    conv_output[11][0] += input[11][2] * -0.114732;
    conv_output[11][0] += input[12][0] * -0.083850;
    conv_output[11][0] += input[12][1] * 0.038051;
    conv_output[11][0] += input[12][2] * 0.042449;
    conv_output[11][0] += input[13][0] * -0.084779;
    conv_output[11][0] += input[13][1] * 0.206606;
    conv_output[11][0] += input[13][2] * -0.146001;
    conv_output[11][0] = fmaxf(0, conv_output[11][0]);
    conv_output[11][1] = -0.019604;
    conv_output[11][1] += input[11][1] * 0.088207;
    conv_output[11][1] += input[11][2] * 0.061727;
    conv_output[11][1] += input[11][3] * -0.114732;
    conv_output[11][1] += input[12][1] * -0.083850;
    conv_output[11][1] += input[12][2] * 0.038051;
    conv_output[11][1] += input[12][3] * 0.042449;
    conv_output[11][1] += input[13][1] * -0.084779;
    conv_output[11][1] += input[13][2] * 0.206606;
    conv_output[11][1] += input[13][3] * -0.146001;
    conv_output[11][1] = fmaxf(0, conv_output[11][1]);
    conv_output[11][2] = -0.019604;
    conv_output[11][2] += input[11][2] * 0.088207;
    conv_output[11][2] += input[11][3] * 0.061727;
    conv_output[11][2] += input[11][4] * -0.114732;
    conv_output[11][2] += input[12][2] * -0.083850;
    conv_output[11][2] += input[12][3] * 0.038051;
    conv_output[11][2] += input[12][4] * 0.042449;
    conv_output[11][2] += input[13][2] * -0.084779;
    conv_output[11][2] += input[13][3] * 0.206606;
    conv_output[11][2] += input[13][4] * -0.146001;
    conv_output[11][2] = fmaxf(0, conv_output[11][2]);
    conv_output[11][3] = -0.019604;
    conv_output[11][3] += input[11][3] * 0.088207;
    conv_output[11][3] += input[11][4] * 0.061727;
    conv_output[11][3] += input[11][5] * -0.114732;
    conv_output[11][3] += input[12][3] * -0.083850;
    conv_output[11][3] += input[12][4] * 0.038051;
    conv_output[11][3] += input[12][5] * 0.042449;
    conv_output[11][3] += input[13][3] * -0.084779;
    conv_output[11][3] += input[13][4] * 0.206606;
    conv_output[11][3] += input[13][5] * -0.146001;
    conv_output[11][3] = fmaxf(0, conv_output[11][3]);
    conv_output[11][4] = -0.019604;
    conv_output[11][4] += input[11][4] * 0.088207;
    conv_output[11][4] += input[11][5] * 0.061727;
    conv_output[11][4] += input[11][6] * -0.114732;
    conv_output[11][4] += input[12][4] * -0.083850;
    conv_output[11][4] += input[12][5] * 0.038051;
    conv_output[11][4] += input[12][6] * 0.042449;
    conv_output[11][4] += input[13][4] * -0.084779;
    conv_output[11][4] += input[13][5] * 0.206606;
    conv_output[11][4] += input[13][6] * -0.146001;
    conv_output[11][4] = fmaxf(0, conv_output[11][4]);
    conv_output[11][5] = -0.019604;
    conv_output[11][5] += input[11][5] * 0.088207;
    conv_output[11][5] += input[11][6] * 0.061727;
    conv_output[11][5] += input[11][7] * -0.114732;
    conv_output[11][5] += input[12][5] * -0.083850;
    conv_output[11][5] += input[12][6] * 0.038051;
    conv_output[11][5] += input[12][7] * 0.042449;
    conv_output[11][5] += input[13][5] * -0.084779;
    conv_output[11][5] += input[13][6] * 0.206606;
    conv_output[11][5] += input[13][7] * -0.146001;
    conv_output[11][5] = fmaxf(0, conv_output[11][5]);
    conv_output[11][6] = -0.019604;
    conv_output[11][6] += input[11][6] * 0.088207;
    conv_output[11][6] += input[11][7] * 0.061727;
    conv_output[11][6] += input[11][8] * -0.114732;
    conv_output[11][6] += input[12][6] * -0.083850;
    conv_output[11][6] += input[12][7] * 0.038051;
    conv_output[11][6] += input[12][8] * 0.042449;
    conv_output[11][6] += input[13][6] * -0.084779;
    conv_output[11][6] += input[13][7] * 0.206606;
    conv_output[11][6] += input[13][8] * -0.146001;
    conv_output[11][6] = fmaxf(0, conv_output[11][6]);
    conv_output[11][7] = -0.019604;
    conv_output[11][7] += input[11][7] * 0.088207;
    conv_output[11][7] += input[11][8] * 0.061727;
    conv_output[11][7] += input[11][9] * -0.114732;
    conv_output[11][7] += input[12][7] * -0.083850;
    conv_output[11][7] += input[12][8] * 0.038051;
    conv_output[11][7] += input[12][9] * 0.042449;
    conv_output[11][7] += input[13][7] * -0.084779;
    conv_output[11][7] += input[13][8] * 0.206606;
    conv_output[11][7] += input[13][9] * -0.146001;
    conv_output[11][7] = fmaxf(0, conv_output[11][7]);
    conv_output[11][8] = -0.019604;
    conv_output[11][8] += input[11][8] * 0.088207;
    conv_output[11][8] += input[11][9] * 0.061727;
    conv_output[11][8] += input[11][10] * -0.114732;
    conv_output[11][8] += input[12][8] * -0.083850;
    conv_output[11][8] += input[12][9] * 0.038051;
    conv_output[11][8] += input[12][10] * 0.042449;
    conv_output[11][8] += input[13][8] * -0.084779;
    conv_output[11][8] += input[13][9] * 0.206606;
    conv_output[11][8] += input[13][10] * -0.146001;
    conv_output[11][8] = fmaxf(0, conv_output[11][8]);
    conv_output[11][9] = -0.019604;
    conv_output[11][9] += input[11][9] * 0.088207;
    conv_output[11][9] += input[11][10] * 0.061727;
    conv_output[11][9] += input[11][11] * -0.114732;
    conv_output[11][9] += input[12][9] * -0.083850;
    conv_output[11][9] += input[12][10] * 0.038051;
    conv_output[11][9] += input[12][11] * 0.042449;
    conv_output[11][9] += input[13][9] * -0.084779;
    conv_output[11][9] += input[13][10] * 0.206606;
    conv_output[11][9] += input[13][11] * -0.146001;
    conv_output[11][9] = fmaxf(0, conv_output[11][9]);
    conv_output[11][10] = -0.019604;
    conv_output[11][10] += input[11][10] * 0.088207;
    conv_output[11][10] += input[11][11] * 0.061727;
    conv_output[11][10] += input[11][12] * -0.114732;
    conv_output[11][10] += input[12][10] * -0.083850;
    conv_output[11][10] += input[12][11] * 0.038051;
    conv_output[11][10] += input[12][12] * 0.042449;
    conv_output[11][10] += input[13][10] * -0.084779;
    conv_output[11][10] += input[13][11] * 0.206606;
    conv_output[11][10] += input[13][12] * -0.146001;
    conv_output[11][10] = fmaxf(0, conv_output[11][10]);
    conv_output[11][11] = -0.019604;
    conv_output[11][11] += input[11][11] * 0.088207;
    conv_output[11][11] += input[11][12] * 0.061727;
    conv_output[11][11] += input[11][13] * -0.114732;
    conv_output[11][11] += input[12][11] * -0.083850;
    conv_output[11][11] += input[12][12] * 0.038051;
    conv_output[11][11] += input[12][13] * 0.042449;
    conv_output[11][11] += input[13][11] * -0.084779;
    conv_output[11][11] += input[13][12] * 0.206606;
    conv_output[11][11] += input[13][13] * -0.146001;
    conv_output[11][11] = fmaxf(0, conv_output[11][11]);
    conv_output[11][12] = -0.019604;
    conv_output[11][12] += input[11][12] * 0.088207;
    conv_output[11][12] += input[11][13] * 0.061727;
    conv_output[11][12] += input[11][14] * -0.114732;
    conv_output[11][12] += input[12][12] * -0.083850;
    conv_output[11][12] += input[12][13] * 0.038051;
    conv_output[11][12] += input[12][14] * 0.042449;
    conv_output[11][12] += input[13][12] * -0.084779;
    conv_output[11][12] += input[13][13] * 0.206606;
    conv_output[11][12] += input[13][14] * -0.146001;
    conv_output[11][12] = fmaxf(0, conv_output[11][12]);
    conv_output[11][13] = -0.019604;
    conv_output[11][13] += input[11][13] * 0.088207;
    conv_output[11][13] += input[11][14] * 0.061727;
    conv_output[11][13] += input[11][15] * -0.114732;
    conv_output[11][13] += input[12][13] * -0.083850;
    conv_output[11][13] += input[12][14] * 0.038051;
    conv_output[11][13] += input[12][15] * 0.042449;
    conv_output[11][13] += input[13][13] * -0.084779;
    conv_output[11][13] += input[13][14] * 0.206606;
    conv_output[11][13] += input[13][15] * -0.146001;
    conv_output[11][13] = fmaxf(0, conv_output[11][13]);
    conv_output[11][14] = -0.019604;
    conv_output[11][14] += input[11][14] * 0.088207;
    conv_output[11][14] += input[11][15] * 0.061727;
    conv_output[11][14] += input[11][16] * -0.114732;
    conv_output[11][14] += input[12][14] * -0.083850;
    conv_output[11][14] += input[12][15] * 0.038051;
    conv_output[11][14] += input[12][16] * 0.042449;
    conv_output[11][14] += input[13][14] * -0.084779;
    conv_output[11][14] += input[13][15] * 0.206606;
    conv_output[11][14] += input[13][16] * -0.146001;
    conv_output[11][14] = fmaxf(0, conv_output[11][14]);
    conv_output[11][15] = -0.019604;
    conv_output[11][15] += input[11][15] * 0.088207;
    conv_output[11][15] += input[11][16] * 0.061727;
    conv_output[11][15] += input[11][17] * -0.114732;
    conv_output[11][15] += input[12][15] * -0.083850;
    conv_output[11][15] += input[12][16] * 0.038051;
    conv_output[11][15] += input[12][17] * 0.042449;
    conv_output[11][15] += input[13][15] * -0.084779;
    conv_output[11][15] += input[13][16] * 0.206606;
    conv_output[11][15] += input[13][17] * -0.146001;
    conv_output[11][15] = fmaxf(0, conv_output[11][15]);
    conv_output[11][16] = -0.019604;
    conv_output[11][16] += input[11][16] * 0.088207;
    conv_output[11][16] += input[11][17] * 0.061727;
    conv_output[11][16] += input[11][18] * -0.114732;
    conv_output[11][16] += input[12][16] * -0.083850;
    conv_output[11][16] += input[12][17] * 0.038051;
    conv_output[11][16] += input[12][18] * 0.042449;
    conv_output[11][16] += input[13][16] * -0.084779;
    conv_output[11][16] += input[13][17] * 0.206606;
    conv_output[11][16] += input[13][18] * -0.146001;
    conv_output[11][16] = fmaxf(0, conv_output[11][16]);
    conv_output[11][17] = -0.019604;
    conv_output[11][17] += input[11][17] * 0.088207;
    conv_output[11][17] += input[11][18] * 0.061727;
    conv_output[11][17] += input[11][19] * -0.114732;
    conv_output[11][17] += input[12][17] * -0.083850;
    conv_output[11][17] += input[12][18] * 0.038051;
    conv_output[11][17] += input[12][19] * 0.042449;
    conv_output[11][17] += input[13][17] * -0.084779;
    conv_output[11][17] += input[13][18] * 0.206606;
    conv_output[11][17] += input[13][19] * -0.146001;
    conv_output[11][17] = fmaxf(0, conv_output[11][17]);
    conv_output[11][18] = -0.019604;
    conv_output[11][18] += input[11][18] * 0.088207;
    conv_output[11][18] += input[11][19] * 0.061727;
    conv_output[11][18] += input[11][20] * -0.114732;
    conv_output[11][18] += input[12][18] * -0.083850;
    conv_output[11][18] += input[12][19] * 0.038051;
    conv_output[11][18] += input[12][20] * 0.042449;
    conv_output[11][18] += input[13][18] * -0.084779;
    conv_output[11][18] += input[13][19] * 0.206606;
    conv_output[11][18] += input[13][20] * -0.146001;
    conv_output[11][18] = fmaxf(0, conv_output[11][18]);
    conv_output[11][19] = -0.019604;
    conv_output[11][19] += input[11][19] * 0.088207;
    conv_output[11][19] += input[11][20] * 0.061727;
    conv_output[11][19] += input[11][21] * -0.114732;
    conv_output[11][19] += input[12][19] * -0.083850;
    conv_output[11][19] += input[12][20] * 0.038051;
    conv_output[11][19] += input[12][21] * 0.042449;
    conv_output[11][19] += input[13][19] * -0.084779;
    conv_output[11][19] += input[13][20] * 0.206606;
    conv_output[11][19] += input[13][21] * -0.146001;
    conv_output[11][19] = fmaxf(0, conv_output[11][19]);
    conv_output[11][20] = -0.019604;
    conv_output[11][20] += input[11][20] * 0.088207;
    conv_output[11][20] += input[11][21] * 0.061727;
    conv_output[11][20] += input[11][22] * -0.114732;
    conv_output[11][20] += input[12][20] * -0.083850;
    conv_output[11][20] += input[12][21] * 0.038051;
    conv_output[11][20] += input[12][22] * 0.042449;
    conv_output[11][20] += input[13][20] * -0.084779;
    conv_output[11][20] += input[13][21] * 0.206606;
    conv_output[11][20] += input[13][22] * -0.146001;
    conv_output[11][20] = fmaxf(0, conv_output[11][20]);
    conv_output[11][21] = -0.019604;
    conv_output[11][21] += input[11][21] * 0.088207;
    conv_output[11][21] += input[11][22] * 0.061727;
    conv_output[11][21] += input[11][23] * -0.114732;
    conv_output[11][21] += input[12][21] * -0.083850;
    conv_output[11][21] += input[12][22] * 0.038051;
    conv_output[11][21] += input[12][23] * 0.042449;
    conv_output[11][21] += input[13][21] * -0.084779;
    conv_output[11][21] += input[13][22] * 0.206606;
    conv_output[11][21] += input[13][23] * -0.146001;
    conv_output[11][21] = fmaxf(0, conv_output[11][21]);
    conv_output[11][22] = -0.019604;
    conv_output[11][22] += input[11][22] * 0.088207;
    conv_output[11][22] += input[11][23] * 0.061727;
    conv_output[11][22] += input[11][24] * -0.114732;
    conv_output[11][22] += input[12][22] * -0.083850;
    conv_output[11][22] += input[12][23] * 0.038051;
    conv_output[11][22] += input[12][24] * 0.042449;
    conv_output[11][22] += input[13][22] * -0.084779;
    conv_output[11][22] += input[13][23] * 0.206606;
    conv_output[11][22] += input[13][24] * -0.146001;
    conv_output[11][22] = fmaxf(0, conv_output[11][22]);
    conv_output[11][23] = -0.019604;
    conv_output[11][23] += input[11][23] * 0.088207;
    conv_output[11][23] += input[11][24] * 0.061727;
    conv_output[11][23] += input[11][25] * -0.114732;
    conv_output[11][23] += input[12][23] * -0.083850;
    conv_output[11][23] += input[12][24] * 0.038051;
    conv_output[11][23] += input[12][25] * 0.042449;
    conv_output[11][23] += input[13][23] * -0.084779;
    conv_output[11][23] += input[13][24] * 0.206606;
    conv_output[11][23] += input[13][25] * -0.146001;
    conv_output[11][23] = fmaxf(0, conv_output[11][23]);
    conv_output[11][24] = -0.019604;
    conv_output[11][24] += input[11][24] * 0.088207;
    conv_output[11][24] += input[11][25] * 0.061727;
    conv_output[11][24] += input[11][26] * -0.114732;
    conv_output[11][24] += input[12][24] * -0.083850;
    conv_output[11][24] += input[12][25] * 0.038051;
    conv_output[11][24] += input[12][26] * 0.042449;
    conv_output[11][24] += input[13][24] * -0.084779;
    conv_output[11][24] += input[13][25] * 0.206606;
    conv_output[11][24] += input[13][26] * -0.146001;
    conv_output[11][24] = fmaxf(0, conv_output[11][24]);
    conv_output[11][25] = -0.019604;
    conv_output[11][25] += input[11][25] * 0.088207;
    conv_output[11][25] += input[11][26] * 0.061727;
    conv_output[11][25] += input[11][27] * -0.114732;
    conv_output[11][25] += input[12][25] * -0.083850;
    conv_output[11][25] += input[12][26] * 0.038051;
    conv_output[11][25] += input[12][27] * 0.042449;
    conv_output[11][25] += input[13][25] * -0.084779;
    conv_output[11][25] += input[13][26] * 0.206606;
    conv_output[11][25] += input[13][27] * -0.146001;
    conv_output[11][25] = fmaxf(0, conv_output[11][25]);
    conv_output[12][0] = -0.019604;
    conv_output[12][0] += input[12][0] * 0.088207;
    conv_output[12][0] += input[12][1] * 0.061727;
    conv_output[12][0] += input[12][2] * -0.114732;
    conv_output[12][0] += input[13][0] * -0.083850;
    conv_output[12][0] += input[13][1] * 0.038051;
    conv_output[12][0] += input[13][2] * 0.042449;
    conv_output[12][0] += input[14][0] * -0.084779;
    conv_output[12][0] += input[14][1] * 0.206606;
    conv_output[12][0] += input[14][2] * -0.146001;
    conv_output[12][0] = fmaxf(0, conv_output[12][0]);
    conv_output[12][1] = -0.019604;
    conv_output[12][1] += input[12][1] * 0.088207;
    conv_output[12][1] += input[12][2] * 0.061727;
    conv_output[12][1] += input[12][3] * -0.114732;
    conv_output[12][1] += input[13][1] * -0.083850;
    conv_output[12][1] += input[13][2] * 0.038051;
    conv_output[12][1] += input[13][3] * 0.042449;
    conv_output[12][1] += input[14][1] * -0.084779;
    conv_output[12][1] += input[14][2] * 0.206606;
    conv_output[12][1] += input[14][3] * -0.146001;
    conv_output[12][1] = fmaxf(0, conv_output[12][1]);
    conv_output[12][2] = -0.019604;
    conv_output[12][2] += input[12][2] * 0.088207;
    conv_output[12][2] += input[12][3] * 0.061727;
    conv_output[12][2] += input[12][4] * -0.114732;
    conv_output[12][2] += input[13][2] * -0.083850;
    conv_output[12][2] += input[13][3] * 0.038051;
    conv_output[12][2] += input[13][4] * 0.042449;
    conv_output[12][2] += input[14][2] * -0.084779;
    conv_output[12][2] += input[14][3] * 0.206606;
    conv_output[12][2] += input[14][4] * -0.146001;
    conv_output[12][2] = fmaxf(0, conv_output[12][2]);
    conv_output[12][3] = -0.019604;
    conv_output[12][3] += input[12][3] * 0.088207;
    conv_output[12][3] += input[12][4] * 0.061727;
    conv_output[12][3] += input[12][5] * -0.114732;
    conv_output[12][3] += input[13][3] * -0.083850;
    conv_output[12][3] += input[13][4] * 0.038051;
    conv_output[12][3] += input[13][5] * 0.042449;
    conv_output[12][3] += input[14][3] * -0.084779;
    conv_output[12][3] += input[14][4] * 0.206606;
    conv_output[12][3] += input[14][5] * -0.146001;
    conv_output[12][3] = fmaxf(0, conv_output[12][3]);
    conv_output[12][4] = -0.019604;
    conv_output[12][4] += input[12][4] * 0.088207;
    conv_output[12][4] += input[12][5] * 0.061727;
    conv_output[12][4] += input[12][6] * -0.114732;
    conv_output[12][4] += input[13][4] * -0.083850;
    conv_output[12][4] += input[13][5] * 0.038051;
    conv_output[12][4] += input[13][6] * 0.042449;
    conv_output[12][4] += input[14][4] * -0.084779;
    conv_output[12][4] += input[14][5] * 0.206606;
    conv_output[12][4] += input[14][6] * -0.146001;
    conv_output[12][4] = fmaxf(0, conv_output[12][4]);
    conv_output[12][5] = -0.019604;
    conv_output[12][5] += input[12][5] * 0.088207;
    conv_output[12][5] += input[12][6] * 0.061727;
    conv_output[12][5] += input[12][7] * -0.114732;
    conv_output[12][5] += input[13][5] * -0.083850;
    conv_output[12][5] += input[13][6] * 0.038051;
    conv_output[12][5] += input[13][7] * 0.042449;
    conv_output[12][5] += input[14][5] * -0.084779;
    conv_output[12][5] += input[14][6] * 0.206606;
    conv_output[12][5] += input[14][7] * -0.146001;
    conv_output[12][5] = fmaxf(0, conv_output[12][5]);
    conv_output[12][6] = -0.019604;
    conv_output[12][6] += input[12][6] * 0.088207;
    conv_output[12][6] += input[12][7] * 0.061727;
    conv_output[12][6] += input[12][8] * -0.114732;
    conv_output[12][6] += input[13][6] * -0.083850;
    conv_output[12][6] += input[13][7] * 0.038051;
    conv_output[12][6] += input[13][8] * 0.042449;
    conv_output[12][6] += input[14][6] * -0.084779;
    conv_output[12][6] += input[14][7] * 0.206606;
    conv_output[12][6] += input[14][8] * -0.146001;
    conv_output[12][6] = fmaxf(0, conv_output[12][6]);
    conv_output[12][7] = -0.019604;
    conv_output[12][7] += input[12][7] * 0.088207;
    conv_output[12][7] += input[12][8] * 0.061727;
    conv_output[12][7] += input[12][9] * -0.114732;
    conv_output[12][7] += input[13][7] * -0.083850;
    conv_output[12][7] += input[13][8] * 0.038051;
    conv_output[12][7] += input[13][9] * 0.042449;
    conv_output[12][7] += input[14][7] * -0.084779;
    conv_output[12][7] += input[14][8] * 0.206606;
    conv_output[12][7] += input[14][9] * -0.146001;
    conv_output[12][7] = fmaxf(0, conv_output[12][7]);
    conv_output[12][8] = -0.019604;
    conv_output[12][8] += input[12][8] * 0.088207;
    conv_output[12][8] += input[12][9] * 0.061727;
    conv_output[12][8] += input[12][10] * -0.114732;
    conv_output[12][8] += input[13][8] * -0.083850;
    conv_output[12][8] += input[13][9] * 0.038051;
    conv_output[12][8] += input[13][10] * 0.042449;
    conv_output[12][8] += input[14][8] * -0.084779;
    conv_output[12][8] += input[14][9] * 0.206606;
    conv_output[12][8] += input[14][10] * -0.146001;
    conv_output[12][8] = fmaxf(0, conv_output[12][8]);
    conv_output[12][9] = -0.019604;
    conv_output[12][9] += input[12][9] * 0.088207;
    conv_output[12][9] += input[12][10] * 0.061727;
    conv_output[12][9] += input[12][11] * -0.114732;
    conv_output[12][9] += input[13][9] * -0.083850;
    conv_output[12][9] += input[13][10] * 0.038051;
    conv_output[12][9] += input[13][11] * 0.042449;
    conv_output[12][9] += input[14][9] * -0.084779;
    conv_output[12][9] += input[14][10] * 0.206606;
    conv_output[12][9] += input[14][11] * -0.146001;
    conv_output[12][9] = fmaxf(0, conv_output[12][9]);
    conv_output[12][10] = -0.019604;
    conv_output[12][10] += input[12][10] * 0.088207;
    conv_output[12][10] += input[12][11] * 0.061727;
    conv_output[12][10] += input[12][12] * -0.114732;
    conv_output[12][10] += input[13][10] * -0.083850;
    conv_output[12][10] += input[13][11] * 0.038051;
    conv_output[12][10] += input[13][12] * 0.042449;
    conv_output[12][10] += input[14][10] * -0.084779;
    conv_output[12][10] += input[14][11] * 0.206606;
    conv_output[12][10] += input[14][12] * -0.146001;
    conv_output[12][10] = fmaxf(0, conv_output[12][10]);
    conv_output[12][11] = -0.019604;
    conv_output[12][11] += input[12][11] * 0.088207;
    conv_output[12][11] += input[12][12] * 0.061727;
    conv_output[12][11] += input[12][13] * -0.114732;
    conv_output[12][11] += input[13][11] * -0.083850;
    conv_output[12][11] += input[13][12] * 0.038051;
    conv_output[12][11] += input[13][13] * 0.042449;
    conv_output[12][11] += input[14][11] * -0.084779;
    conv_output[12][11] += input[14][12] * 0.206606;
    conv_output[12][11] += input[14][13] * -0.146001;
    conv_output[12][11] = fmaxf(0, conv_output[12][11]);
    conv_output[12][12] = -0.019604;
    conv_output[12][12] += input[12][12] * 0.088207;
    conv_output[12][12] += input[12][13] * 0.061727;
    conv_output[12][12] += input[12][14] * -0.114732;
    conv_output[12][12] += input[13][12] * -0.083850;
    conv_output[12][12] += input[13][13] * 0.038051;
    conv_output[12][12] += input[13][14] * 0.042449;
    conv_output[12][12] += input[14][12] * -0.084779;
    conv_output[12][12] += input[14][13] * 0.206606;
    conv_output[12][12] += input[14][14] * -0.146001;
    conv_output[12][12] = fmaxf(0, conv_output[12][12]);
    conv_output[12][13] = -0.019604;
    conv_output[12][13] += input[12][13] * 0.088207;
    conv_output[12][13] += input[12][14] * 0.061727;
    conv_output[12][13] += input[12][15] * -0.114732;
    conv_output[12][13] += input[13][13] * -0.083850;
    conv_output[12][13] += input[13][14] * 0.038051;
    conv_output[12][13] += input[13][15] * 0.042449;
    conv_output[12][13] += input[14][13] * -0.084779;
    conv_output[12][13] += input[14][14] * 0.206606;
    conv_output[12][13] += input[14][15] * -0.146001;
    conv_output[12][13] = fmaxf(0, conv_output[12][13]);
    conv_output[12][14] = -0.019604;
    conv_output[12][14] += input[12][14] * 0.088207;
    conv_output[12][14] += input[12][15] * 0.061727;
    conv_output[12][14] += input[12][16] * -0.114732;
    conv_output[12][14] += input[13][14] * -0.083850;
    conv_output[12][14] += input[13][15] * 0.038051;
    conv_output[12][14] += input[13][16] * 0.042449;
    conv_output[12][14] += input[14][14] * -0.084779;
    conv_output[12][14] += input[14][15] * 0.206606;
    conv_output[12][14] += input[14][16] * -0.146001;
    conv_output[12][14] = fmaxf(0, conv_output[12][14]);
    conv_output[12][15] = -0.019604;
    conv_output[12][15] += input[12][15] * 0.088207;
    conv_output[12][15] += input[12][16] * 0.061727;
    conv_output[12][15] += input[12][17] * -0.114732;
    conv_output[12][15] += input[13][15] * -0.083850;
    conv_output[12][15] += input[13][16] * 0.038051;
    conv_output[12][15] += input[13][17] * 0.042449;
    conv_output[12][15] += input[14][15] * -0.084779;
    conv_output[12][15] += input[14][16] * 0.206606;
    conv_output[12][15] += input[14][17] * -0.146001;
    conv_output[12][15] = fmaxf(0, conv_output[12][15]);
    conv_output[12][16] = -0.019604;
    conv_output[12][16] += input[12][16] * 0.088207;
    conv_output[12][16] += input[12][17] * 0.061727;
    conv_output[12][16] += input[12][18] * -0.114732;
    conv_output[12][16] += input[13][16] * -0.083850;
    conv_output[12][16] += input[13][17] * 0.038051;
    conv_output[12][16] += input[13][18] * 0.042449;
    conv_output[12][16] += input[14][16] * -0.084779;
    conv_output[12][16] += input[14][17] * 0.206606;
    conv_output[12][16] += input[14][18] * -0.146001;
    conv_output[12][16] = fmaxf(0, conv_output[12][16]);
    conv_output[12][17] = -0.019604;
    conv_output[12][17] += input[12][17] * 0.088207;
    conv_output[12][17] += input[12][18] * 0.061727;
    conv_output[12][17] += input[12][19] * -0.114732;
    conv_output[12][17] += input[13][17] * -0.083850;
    conv_output[12][17] += input[13][18] * 0.038051;
    conv_output[12][17] += input[13][19] * 0.042449;
    conv_output[12][17] += input[14][17] * -0.084779;
    conv_output[12][17] += input[14][18] * 0.206606;
    conv_output[12][17] += input[14][19] * -0.146001;
    conv_output[12][17] = fmaxf(0, conv_output[12][17]);
    conv_output[12][18] = -0.019604;
    conv_output[12][18] += input[12][18] * 0.088207;
    conv_output[12][18] += input[12][19] * 0.061727;
    conv_output[12][18] += input[12][20] * -0.114732;
    conv_output[12][18] += input[13][18] * -0.083850;
    conv_output[12][18] += input[13][19] * 0.038051;
    conv_output[12][18] += input[13][20] * 0.042449;
    conv_output[12][18] += input[14][18] * -0.084779;
    conv_output[12][18] += input[14][19] * 0.206606;
    conv_output[12][18] += input[14][20] * -0.146001;
    conv_output[12][18] = fmaxf(0, conv_output[12][18]);
    conv_output[12][19] = -0.019604;
    conv_output[12][19] += input[12][19] * 0.088207;
    conv_output[12][19] += input[12][20] * 0.061727;
    conv_output[12][19] += input[12][21] * -0.114732;
    conv_output[12][19] += input[13][19] * -0.083850;
    conv_output[12][19] += input[13][20] * 0.038051;
    conv_output[12][19] += input[13][21] * 0.042449;
    conv_output[12][19] += input[14][19] * -0.084779;
    conv_output[12][19] += input[14][20] * 0.206606;
    conv_output[12][19] += input[14][21] * -0.146001;
    conv_output[12][19] = fmaxf(0, conv_output[12][19]);
    conv_output[12][20] = -0.019604;
    conv_output[12][20] += input[12][20] * 0.088207;
    conv_output[12][20] += input[12][21] * 0.061727;
    conv_output[12][20] += input[12][22] * -0.114732;
    conv_output[12][20] += input[13][20] * -0.083850;
    conv_output[12][20] += input[13][21] * 0.038051;
    conv_output[12][20] += input[13][22] * 0.042449;
    conv_output[12][20] += input[14][20] * -0.084779;
    conv_output[12][20] += input[14][21] * 0.206606;
    conv_output[12][20] += input[14][22] * -0.146001;
    conv_output[12][20] = fmaxf(0, conv_output[12][20]);
    conv_output[12][21] = -0.019604;
    conv_output[12][21] += input[12][21] * 0.088207;
    conv_output[12][21] += input[12][22] * 0.061727;
    conv_output[12][21] += input[12][23] * -0.114732;
    conv_output[12][21] += input[13][21] * -0.083850;
    conv_output[12][21] += input[13][22] * 0.038051;
    conv_output[12][21] += input[13][23] * 0.042449;
    conv_output[12][21] += input[14][21] * -0.084779;
    conv_output[12][21] += input[14][22] * 0.206606;
    conv_output[12][21] += input[14][23] * -0.146001;
    conv_output[12][21] = fmaxf(0, conv_output[12][21]);
    conv_output[12][22] = -0.019604;
    conv_output[12][22] += input[12][22] * 0.088207;
    conv_output[12][22] += input[12][23] * 0.061727;
    conv_output[12][22] += input[12][24] * -0.114732;
    conv_output[12][22] += input[13][22] * -0.083850;
    conv_output[12][22] += input[13][23] * 0.038051;
    conv_output[12][22] += input[13][24] * 0.042449;
    conv_output[12][22] += input[14][22] * -0.084779;
    conv_output[12][22] += input[14][23] * 0.206606;
    conv_output[12][22] += input[14][24] * -0.146001;
    conv_output[12][22] = fmaxf(0, conv_output[12][22]);
    conv_output[12][23] = -0.019604;
    conv_output[12][23] += input[12][23] * 0.088207;
    conv_output[12][23] += input[12][24] * 0.061727;
    conv_output[12][23] += input[12][25] * -0.114732;
    conv_output[12][23] += input[13][23] * -0.083850;
    conv_output[12][23] += input[13][24] * 0.038051;
    conv_output[12][23] += input[13][25] * 0.042449;
    conv_output[12][23] += input[14][23] * -0.084779;
    conv_output[12][23] += input[14][24] * 0.206606;
    conv_output[12][23] += input[14][25] * -0.146001;
    conv_output[12][23] = fmaxf(0, conv_output[12][23]);
    conv_output[12][24] = -0.019604;
    conv_output[12][24] += input[12][24] * 0.088207;
    conv_output[12][24] += input[12][25] * 0.061727;
    conv_output[12][24] += input[12][26] * -0.114732;
    conv_output[12][24] += input[13][24] * -0.083850;
    conv_output[12][24] += input[13][25] * 0.038051;
    conv_output[12][24] += input[13][26] * 0.042449;
    conv_output[12][24] += input[14][24] * -0.084779;
    conv_output[12][24] += input[14][25] * 0.206606;
    conv_output[12][24] += input[14][26] * -0.146001;
    conv_output[12][24] = fmaxf(0, conv_output[12][24]);
    conv_output[12][25] = -0.019604;
    conv_output[12][25] += input[12][25] * 0.088207;
    conv_output[12][25] += input[12][26] * 0.061727;
    conv_output[12][25] += input[12][27] * -0.114732;
    conv_output[12][25] += input[13][25] * -0.083850;
    conv_output[12][25] += input[13][26] * 0.038051;
    conv_output[12][25] += input[13][27] * 0.042449;
    conv_output[12][25] += input[14][25] * -0.084779;
    conv_output[12][25] += input[14][26] * 0.206606;
    conv_output[12][25] += input[14][27] * -0.146001;
    conv_output[12][25] = fmaxf(0, conv_output[12][25]);
    conv_output[13][0] = -0.019604;
    conv_output[13][0] += input[13][0] * 0.088207;
    conv_output[13][0] += input[13][1] * 0.061727;
    conv_output[13][0] += input[13][2] * -0.114732;
    conv_output[13][0] += input[14][0] * -0.083850;
    conv_output[13][0] += input[14][1] * 0.038051;
    conv_output[13][0] += input[14][2] * 0.042449;
    conv_output[13][0] += input[15][0] * -0.084779;
    conv_output[13][0] += input[15][1] * 0.206606;
    conv_output[13][0] += input[15][2] * -0.146001;
    conv_output[13][0] = fmaxf(0, conv_output[13][0]);
    conv_output[13][1] = -0.019604;
    conv_output[13][1] += input[13][1] * 0.088207;
    conv_output[13][1] += input[13][2] * 0.061727;
    conv_output[13][1] += input[13][3] * -0.114732;
    conv_output[13][1] += input[14][1] * -0.083850;
    conv_output[13][1] += input[14][2] * 0.038051;
    conv_output[13][1] += input[14][3] * 0.042449;
    conv_output[13][1] += input[15][1] * -0.084779;
    conv_output[13][1] += input[15][2] * 0.206606;
    conv_output[13][1] += input[15][3] * -0.146001;
    conv_output[13][1] = fmaxf(0, conv_output[13][1]);
    conv_output[13][2] = -0.019604;
    conv_output[13][2] += input[13][2] * 0.088207;
    conv_output[13][2] += input[13][3] * 0.061727;
    conv_output[13][2] += input[13][4] * -0.114732;
    conv_output[13][2] += input[14][2] * -0.083850;
    conv_output[13][2] += input[14][3] * 0.038051;
    conv_output[13][2] += input[14][4] * 0.042449;
    conv_output[13][2] += input[15][2] * -0.084779;
    conv_output[13][2] += input[15][3] * 0.206606;
    conv_output[13][2] += input[15][4] * -0.146001;
    conv_output[13][2] = fmaxf(0, conv_output[13][2]);
    conv_output[13][3] = -0.019604;
    conv_output[13][3] += input[13][3] * 0.088207;
    conv_output[13][3] += input[13][4] * 0.061727;
    conv_output[13][3] += input[13][5] * -0.114732;
    conv_output[13][3] += input[14][3] * -0.083850;
    conv_output[13][3] += input[14][4] * 0.038051;
    conv_output[13][3] += input[14][5] * 0.042449;
    conv_output[13][3] += input[15][3] * -0.084779;
    conv_output[13][3] += input[15][4] * 0.206606;
    conv_output[13][3] += input[15][5] * -0.146001;
    conv_output[13][3] = fmaxf(0, conv_output[13][3]);
    conv_output[13][4] = -0.019604;
    conv_output[13][4] += input[13][4] * 0.088207;
    conv_output[13][4] += input[13][5] * 0.061727;
    conv_output[13][4] += input[13][6] * -0.114732;
    conv_output[13][4] += input[14][4] * -0.083850;
    conv_output[13][4] += input[14][5] * 0.038051;
    conv_output[13][4] += input[14][6] * 0.042449;
    conv_output[13][4] += input[15][4] * -0.084779;
    conv_output[13][4] += input[15][5] * 0.206606;
    conv_output[13][4] += input[15][6] * -0.146001;
    conv_output[13][4] = fmaxf(0, conv_output[13][4]);
    conv_output[13][5] = -0.019604;
    conv_output[13][5] += input[13][5] * 0.088207;
    conv_output[13][5] += input[13][6] * 0.061727;
    conv_output[13][5] += input[13][7] * -0.114732;
    conv_output[13][5] += input[14][5] * -0.083850;
    conv_output[13][5] += input[14][6] * 0.038051;
    conv_output[13][5] += input[14][7] * 0.042449;
    conv_output[13][5] += input[15][5] * -0.084779;
    conv_output[13][5] += input[15][6] * 0.206606;
    conv_output[13][5] += input[15][7] * -0.146001;
    conv_output[13][5] = fmaxf(0, conv_output[13][5]);
    conv_output[13][6] = -0.019604;
    conv_output[13][6] += input[13][6] * 0.088207;
    conv_output[13][6] += input[13][7] * 0.061727;
    conv_output[13][6] += input[13][8] * -0.114732;
    conv_output[13][6] += input[14][6] * -0.083850;
    conv_output[13][6] += input[14][7] * 0.038051;
    conv_output[13][6] += input[14][8] * 0.042449;
    conv_output[13][6] += input[15][6] * -0.084779;
    conv_output[13][6] += input[15][7] * 0.206606;
    conv_output[13][6] += input[15][8] * -0.146001;
    conv_output[13][6] = fmaxf(0, conv_output[13][6]);
    conv_output[13][7] = -0.019604;
    conv_output[13][7] += input[13][7] * 0.088207;
    conv_output[13][7] += input[13][8] * 0.061727;
    conv_output[13][7] += input[13][9] * -0.114732;
    conv_output[13][7] += input[14][7] * -0.083850;
    conv_output[13][7] += input[14][8] * 0.038051;
    conv_output[13][7] += input[14][9] * 0.042449;
    conv_output[13][7] += input[15][7] * -0.084779;
    conv_output[13][7] += input[15][8] * 0.206606;
    conv_output[13][7] += input[15][9] * -0.146001;
    conv_output[13][7] = fmaxf(0, conv_output[13][7]);
    conv_output[13][8] = -0.019604;
    conv_output[13][8] += input[13][8] * 0.088207;
    conv_output[13][8] += input[13][9] * 0.061727;
    conv_output[13][8] += input[13][10] * -0.114732;
    conv_output[13][8] += input[14][8] * -0.083850;
    conv_output[13][8] += input[14][9] * 0.038051;
    conv_output[13][8] += input[14][10] * 0.042449;
    conv_output[13][8] += input[15][8] * -0.084779;
    conv_output[13][8] += input[15][9] * 0.206606;
    conv_output[13][8] += input[15][10] * -0.146001;
    conv_output[13][8] = fmaxf(0, conv_output[13][8]);
    conv_output[13][9] = -0.019604;
    conv_output[13][9] += input[13][9] * 0.088207;
    conv_output[13][9] += input[13][10] * 0.061727;
    conv_output[13][9] += input[13][11] * -0.114732;
    conv_output[13][9] += input[14][9] * -0.083850;
    conv_output[13][9] += input[14][10] * 0.038051;
    conv_output[13][9] += input[14][11] * 0.042449;
    conv_output[13][9] += input[15][9] * -0.084779;
    conv_output[13][9] += input[15][10] * 0.206606;
    conv_output[13][9] += input[15][11] * -0.146001;
    conv_output[13][9] = fmaxf(0, conv_output[13][9]);
    conv_output[13][10] = -0.019604;
    conv_output[13][10] += input[13][10] * 0.088207;
    conv_output[13][10] += input[13][11] * 0.061727;
    conv_output[13][10] += input[13][12] * -0.114732;
    conv_output[13][10] += input[14][10] * -0.083850;
    conv_output[13][10] += input[14][11] * 0.038051;
    conv_output[13][10] += input[14][12] * 0.042449;
    conv_output[13][10] += input[15][10] * -0.084779;
    conv_output[13][10] += input[15][11] * 0.206606;
    conv_output[13][10] += input[15][12] * -0.146001;
    conv_output[13][10] = fmaxf(0, conv_output[13][10]);
    conv_output[13][11] = -0.019604;
    conv_output[13][11] += input[13][11] * 0.088207;
    conv_output[13][11] += input[13][12] * 0.061727;
    conv_output[13][11] += input[13][13] * -0.114732;
    conv_output[13][11] += input[14][11] * -0.083850;
    conv_output[13][11] += input[14][12] * 0.038051;
    conv_output[13][11] += input[14][13] * 0.042449;
    conv_output[13][11] += input[15][11] * -0.084779;
    conv_output[13][11] += input[15][12] * 0.206606;
    conv_output[13][11] += input[15][13] * -0.146001;
    conv_output[13][11] = fmaxf(0, conv_output[13][11]);
    conv_output[13][12] = -0.019604;
    conv_output[13][12] += input[13][12] * 0.088207;
    conv_output[13][12] += input[13][13] * 0.061727;
    conv_output[13][12] += input[13][14] * -0.114732;
    conv_output[13][12] += input[14][12] * -0.083850;
    conv_output[13][12] += input[14][13] * 0.038051;
    conv_output[13][12] += input[14][14] * 0.042449;
    conv_output[13][12] += input[15][12] * -0.084779;
    conv_output[13][12] += input[15][13] * 0.206606;
    conv_output[13][12] += input[15][14] * -0.146001;
    conv_output[13][12] = fmaxf(0, conv_output[13][12]);
    conv_output[13][13] = -0.019604;
    conv_output[13][13] += input[13][13] * 0.088207;
    conv_output[13][13] += input[13][14] * 0.061727;
    conv_output[13][13] += input[13][15] * -0.114732;
    conv_output[13][13] += input[14][13] * -0.083850;
    conv_output[13][13] += input[14][14] * 0.038051;
    conv_output[13][13] += input[14][15] * 0.042449;
    conv_output[13][13] += input[15][13] * -0.084779;
    conv_output[13][13] += input[15][14] * 0.206606;
    conv_output[13][13] += input[15][15] * -0.146001;
    conv_output[13][13] = fmaxf(0, conv_output[13][13]);
    conv_output[13][14] = -0.019604;
    conv_output[13][14] += input[13][14] * 0.088207;
    conv_output[13][14] += input[13][15] * 0.061727;
    conv_output[13][14] += input[13][16] * -0.114732;
    conv_output[13][14] += input[14][14] * -0.083850;
    conv_output[13][14] += input[14][15] * 0.038051;
    conv_output[13][14] += input[14][16] * 0.042449;
    conv_output[13][14] += input[15][14] * -0.084779;
    conv_output[13][14] += input[15][15] * 0.206606;
    conv_output[13][14] += input[15][16] * -0.146001;
    conv_output[13][14] = fmaxf(0, conv_output[13][14]);
    conv_output[13][15] = -0.019604;
    conv_output[13][15] += input[13][15] * 0.088207;
    conv_output[13][15] += input[13][16] * 0.061727;
    conv_output[13][15] += input[13][17] * -0.114732;
    conv_output[13][15] += input[14][15] * -0.083850;
    conv_output[13][15] += input[14][16] * 0.038051;
    conv_output[13][15] += input[14][17] * 0.042449;
    conv_output[13][15] += input[15][15] * -0.084779;
    conv_output[13][15] += input[15][16] * 0.206606;
    conv_output[13][15] += input[15][17] * -0.146001;
    conv_output[13][15] = fmaxf(0, conv_output[13][15]);
    conv_output[13][16] = -0.019604;
    conv_output[13][16] += input[13][16] * 0.088207;
    conv_output[13][16] += input[13][17] * 0.061727;
    conv_output[13][16] += input[13][18] * -0.114732;
    conv_output[13][16] += input[14][16] * -0.083850;
    conv_output[13][16] += input[14][17] * 0.038051;
    conv_output[13][16] += input[14][18] * 0.042449;
    conv_output[13][16] += input[15][16] * -0.084779;
    conv_output[13][16] += input[15][17] * 0.206606;
    conv_output[13][16] += input[15][18] * -0.146001;
    conv_output[13][16] = fmaxf(0, conv_output[13][16]);
    conv_output[13][17] = -0.019604;
    conv_output[13][17] += input[13][17] * 0.088207;
    conv_output[13][17] += input[13][18] * 0.061727;
    conv_output[13][17] += input[13][19] * -0.114732;
    conv_output[13][17] += input[14][17] * -0.083850;
    conv_output[13][17] += input[14][18] * 0.038051;
    conv_output[13][17] += input[14][19] * 0.042449;
    conv_output[13][17] += input[15][17] * -0.084779;
    conv_output[13][17] += input[15][18] * 0.206606;
    conv_output[13][17] += input[15][19] * -0.146001;
    conv_output[13][17] = fmaxf(0, conv_output[13][17]);
    conv_output[13][18] = -0.019604;
    conv_output[13][18] += input[13][18] * 0.088207;
    conv_output[13][18] += input[13][19] * 0.061727;
    conv_output[13][18] += input[13][20] * -0.114732;
    conv_output[13][18] += input[14][18] * -0.083850;
    conv_output[13][18] += input[14][19] * 0.038051;
    conv_output[13][18] += input[14][20] * 0.042449;
    conv_output[13][18] += input[15][18] * -0.084779;
    conv_output[13][18] += input[15][19] * 0.206606;
    conv_output[13][18] += input[15][20] * -0.146001;
    conv_output[13][18] = fmaxf(0, conv_output[13][18]);
    conv_output[13][19] = -0.019604;
    conv_output[13][19] += input[13][19] * 0.088207;
    conv_output[13][19] += input[13][20] * 0.061727;
    conv_output[13][19] += input[13][21] * -0.114732;
    conv_output[13][19] += input[14][19] * -0.083850;
    conv_output[13][19] += input[14][20] * 0.038051;
    conv_output[13][19] += input[14][21] * 0.042449;
    conv_output[13][19] += input[15][19] * -0.084779;
    conv_output[13][19] += input[15][20] * 0.206606;
    conv_output[13][19] += input[15][21] * -0.146001;
    conv_output[13][19] = fmaxf(0, conv_output[13][19]);
    conv_output[13][20] = -0.019604;
    conv_output[13][20] += input[13][20] * 0.088207;
    conv_output[13][20] += input[13][21] * 0.061727;
    conv_output[13][20] += input[13][22] * -0.114732;
    conv_output[13][20] += input[14][20] * -0.083850;
    conv_output[13][20] += input[14][21] * 0.038051;
    conv_output[13][20] += input[14][22] * 0.042449;
    conv_output[13][20] += input[15][20] * -0.084779;
    conv_output[13][20] += input[15][21] * 0.206606;
    conv_output[13][20] += input[15][22] * -0.146001;
    conv_output[13][20] = fmaxf(0, conv_output[13][20]);
    conv_output[13][21] = -0.019604;
    conv_output[13][21] += input[13][21] * 0.088207;
    conv_output[13][21] += input[13][22] * 0.061727;
    conv_output[13][21] += input[13][23] * -0.114732;
    conv_output[13][21] += input[14][21] * -0.083850;
    conv_output[13][21] += input[14][22] * 0.038051;
    conv_output[13][21] += input[14][23] * 0.042449;
    conv_output[13][21] += input[15][21] * -0.084779;
    conv_output[13][21] += input[15][22] * 0.206606;
    conv_output[13][21] += input[15][23] * -0.146001;
    conv_output[13][21] = fmaxf(0, conv_output[13][21]);
    conv_output[13][22] = -0.019604;
    conv_output[13][22] += input[13][22] * 0.088207;
    conv_output[13][22] += input[13][23] * 0.061727;
    conv_output[13][22] += input[13][24] * -0.114732;
    conv_output[13][22] += input[14][22] * -0.083850;
    conv_output[13][22] += input[14][23] * 0.038051;
    conv_output[13][22] += input[14][24] * 0.042449;
    conv_output[13][22] += input[15][22] * -0.084779;
    conv_output[13][22] += input[15][23] * 0.206606;
    conv_output[13][22] += input[15][24] * -0.146001;
    conv_output[13][22] = fmaxf(0, conv_output[13][22]);
    conv_output[13][23] = -0.019604;
    conv_output[13][23] += input[13][23] * 0.088207;
    conv_output[13][23] += input[13][24] * 0.061727;
    conv_output[13][23] += input[13][25] * -0.114732;
    conv_output[13][23] += input[14][23] * -0.083850;
    conv_output[13][23] += input[14][24] * 0.038051;
    conv_output[13][23] += input[14][25] * 0.042449;
    conv_output[13][23] += input[15][23] * -0.084779;
    conv_output[13][23] += input[15][24] * 0.206606;
    conv_output[13][23] += input[15][25] * -0.146001;
    conv_output[13][23] = fmaxf(0, conv_output[13][23]);
    conv_output[13][24] = -0.019604;
    conv_output[13][24] += input[13][24] * 0.088207;
    conv_output[13][24] += input[13][25] * 0.061727;
    conv_output[13][24] += input[13][26] * -0.114732;
    conv_output[13][24] += input[14][24] * -0.083850;
    conv_output[13][24] += input[14][25] * 0.038051;
    conv_output[13][24] += input[14][26] * 0.042449;
    conv_output[13][24] += input[15][24] * -0.084779;
    conv_output[13][24] += input[15][25] * 0.206606;
    conv_output[13][24] += input[15][26] * -0.146001;
    conv_output[13][24] = fmaxf(0, conv_output[13][24]);
    conv_output[13][25] = -0.019604;
    conv_output[13][25] += input[13][25] * 0.088207;
    conv_output[13][25] += input[13][26] * 0.061727;
    conv_output[13][25] += input[13][27] * -0.114732;
    conv_output[13][25] += input[14][25] * -0.083850;
    conv_output[13][25] += input[14][26] * 0.038051;
    conv_output[13][25] += input[14][27] * 0.042449;
    conv_output[13][25] += input[15][25] * -0.084779;
    conv_output[13][25] += input[15][26] * 0.206606;
    conv_output[13][25] += input[15][27] * -0.146001;
    conv_output[13][25] = fmaxf(0, conv_output[13][25]);
    conv_output[14][0] = -0.019604;
    conv_output[14][0] += input[14][0] * 0.088207;
    conv_output[14][0] += input[14][1] * 0.061727;
    conv_output[14][0] += input[14][2] * -0.114732;
    conv_output[14][0] += input[15][0] * -0.083850;
    conv_output[14][0] += input[15][1] * 0.038051;
    conv_output[14][0] += input[15][2] * 0.042449;
    conv_output[14][0] += input[16][0] * -0.084779;
    conv_output[14][0] += input[16][1] * 0.206606;
    conv_output[14][0] += input[16][2] * -0.146001;
    conv_output[14][0] = fmaxf(0, conv_output[14][0]);
    conv_output[14][1] = -0.019604;
    conv_output[14][1] += input[14][1] * 0.088207;
    conv_output[14][1] += input[14][2] * 0.061727;
    conv_output[14][1] += input[14][3] * -0.114732;
    conv_output[14][1] += input[15][1] * -0.083850;
    conv_output[14][1] += input[15][2] * 0.038051;
    conv_output[14][1] += input[15][3] * 0.042449;
    conv_output[14][1] += input[16][1] * -0.084779;
    conv_output[14][1] += input[16][2] * 0.206606;
    conv_output[14][1] += input[16][3] * -0.146001;
    conv_output[14][1] = fmaxf(0, conv_output[14][1]);
    conv_output[14][2] = -0.019604;
    conv_output[14][2] += input[14][2] * 0.088207;
    conv_output[14][2] += input[14][3] * 0.061727;
    conv_output[14][2] += input[14][4] * -0.114732;
    conv_output[14][2] += input[15][2] * -0.083850;
    conv_output[14][2] += input[15][3] * 0.038051;
    conv_output[14][2] += input[15][4] * 0.042449;
    conv_output[14][2] += input[16][2] * -0.084779;
    conv_output[14][2] += input[16][3] * 0.206606;
    conv_output[14][2] += input[16][4] * -0.146001;
    conv_output[14][2] = fmaxf(0, conv_output[14][2]);
    conv_output[14][3] = -0.019604;
    conv_output[14][3] += input[14][3] * 0.088207;
    conv_output[14][3] += input[14][4] * 0.061727;
    conv_output[14][3] += input[14][5] * -0.114732;
    conv_output[14][3] += input[15][3] * -0.083850;
    conv_output[14][3] += input[15][4] * 0.038051;
    conv_output[14][3] += input[15][5] * 0.042449;
    conv_output[14][3] += input[16][3] * -0.084779;
    conv_output[14][3] += input[16][4] * 0.206606;
    conv_output[14][3] += input[16][5] * -0.146001;
    conv_output[14][3] = fmaxf(0, conv_output[14][3]);
    conv_output[14][4] = -0.019604;
    conv_output[14][4] += input[14][4] * 0.088207;
    conv_output[14][4] += input[14][5] * 0.061727;
    conv_output[14][4] += input[14][6] * -0.114732;
    conv_output[14][4] += input[15][4] * -0.083850;
    conv_output[14][4] += input[15][5] * 0.038051;
    conv_output[14][4] += input[15][6] * 0.042449;
    conv_output[14][4] += input[16][4] * -0.084779;
    conv_output[14][4] += input[16][5] * 0.206606;
    conv_output[14][4] += input[16][6] * -0.146001;
    conv_output[14][4] = fmaxf(0, conv_output[14][4]);
    conv_output[14][5] = -0.019604;
    conv_output[14][5] += input[14][5] * 0.088207;
    conv_output[14][5] += input[14][6] * 0.061727;
    conv_output[14][5] += input[14][7] * -0.114732;
    conv_output[14][5] += input[15][5] * -0.083850;
    conv_output[14][5] += input[15][6] * 0.038051;
    conv_output[14][5] += input[15][7] * 0.042449;
    conv_output[14][5] += input[16][5] * -0.084779;
    conv_output[14][5] += input[16][6] * 0.206606;
    conv_output[14][5] += input[16][7] * -0.146001;
    conv_output[14][5] = fmaxf(0, conv_output[14][5]);
    conv_output[14][6] = -0.019604;
    conv_output[14][6] += input[14][6] * 0.088207;
    conv_output[14][6] += input[14][7] * 0.061727;
    conv_output[14][6] += input[14][8] * -0.114732;
    conv_output[14][6] += input[15][6] * -0.083850;
    conv_output[14][6] += input[15][7] * 0.038051;
    conv_output[14][6] += input[15][8] * 0.042449;
    conv_output[14][6] += input[16][6] * -0.084779;
    conv_output[14][6] += input[16][7] * 0.206606;
    conv_output[14][6] += input[16][8] * -0.146001;
    conv_output[14][6] = fmaxf(0, conv_output[14][6]);
    conv_output[14][7] = -0.019604;
    conv_output[14][7] += input[14][7] * 0.088207;
    conv_output[14][7] += input[14][8] * 0.061727;
    conv_output[14][7] += input[14][9] * -0.114732;
    conv_output[14][7] += input[15][7] * -0.083850;
    conv_output[14][7] += input[15][8] * 0.038051;
    conv_output[14][7] += input[15][9] * 0.042449;
    conv_output[14][7] += input[16][7] * -0.084779;
    conv_output[14][7] += input[16][8] * 0.206606;
    conv_output[14][7] += input[16][9] * -0.146001;
    conv_output[14][7] = fmaxf(0, conv_output[14][7]);
    conv_output[14][8] = -0.019604;
    conv_output[14][8] += input[14][8] * 0.088207;
    conv_output[14][8] += input[14][9] * 0.061727;
    conv_output[14][8] += input[14][10] * -0.114732;
    conv_output[14][8] += input[15][8] * -0.083850;
    conv_output[14][8] += input[15][9] * 0.038051;
    conv_output[14][8] += input[15][10] * 0.042449;
    conv_output[14][8] += input[16][8] * -0.084779;
    conv_output[14][8] += input[16][9] * 0.206606;
    conv_output[14][8] += input[16][10] * -0.146001;
    conv_output[14][8] = fmaxf(0, conv_output[14][8]);
    conv_output[14][9] = -0.019604;
    conv_output[14][9] += input[14][9] * 0.088207;
    conv_output[14][9] += input[14][10] * 0.061727;
    conv_output[14][9] += input[14][11] * -0.114732;
    conv_output[14][9] += input[15][9] * -0.083850;
    conv_output[14][9] += input[15][10] * 0.038051;
    conv_output[14][9] += input[15][11] * 0.042449;
    conv_output[14][9] += input[16][9] * -0.084779;
    conv_output[14][9] += input[16][10] * 0.206606;
    conv_output[14][9] += input[16][11] * -0.146001;
    conv_output[14][9] = fmaxf(0, conv_output[14][9]);
    conv_output[14][10] = -0.019604;
    conv_output[14][10] += input[14][10] * 0.088207;
    conv_output[14][10] += input[14][11] * 0.061727;
    conv_output[14][10] += input[14][12] * -0.114732;
    conv_output[14][10] += input[15][10] * -0.083850;
    conv_output[14][10] += input[15][11] * 0.038051;
    conv_output[14][10] += input[15][12] * 0.042449;
    conv_output[14][10] += input[16][10] * -0.084779;
    conv_output[14][10] += input[16][11] * 0.206606;
    conv_output[14][10] += input[16][12] * -0.146001;
    conv_output[14][10] = fmaxf(0, conv_output[14][10]);
    conv_output[14][11] = -0.019604;
    conv_output[14][11] += input[14][11] * 0.088207;
    conv_output[14][11] += input[14][12] * 0.061727;
    conv_output[14][11] += input[14][13] * -0.114732;
    conv_output[14][11] += input[15][11] * -0.083850;
    conv_output[14][11] += input[15][12] * 0.038051;
    conv_output[14][11] += input[15][13] * 0.042449;
    conv_output[14][11] += input[16][11] * -0.084779;
    conv_output[14][11] += input[16][12] * 0.206606;
    conv_output[14][11] += input[16][13] * -0.146001;
    conv_output[14][11] = fmaxf(0, conv_output[14][11]);
    conv_output[14][12] = -0.019604;
    conv_output[14][12] += input[14][12] * 0.088207;
    conv_output[14][12] += input[14][13] * 0.061727;
    conv_output[14][12] += input[14][14] * -0.114732;
    conv_output[14][12] += input[15][12] * -0.083850;
    conv_output[14][12] += input[15][13] * 0.038051;
    conv_output[14][12] += input[15][14] * 0.042449;
    conv_output[14][12] += input[16][12] * -0.084779;
    conv_output[14][12] += input[16][13] * 0.206606;
    conv_output[14][12] += input[16][14] * -0.146001;
    conv_output[14][12] = fmaxf(0, conv_output[14][12]);
    conv_output[14][13] = -0.019604;
    conv_output[14][13] += input[14][13] * 0.088207;
    conv_output[14][13] += input[14][14] * 0.061727;
    conv_output[14][13] += input[14][15] * -0.114732;
    conv_output[14][13] += input[15][13] * -0.083850;
    conv_output[14][13] += input[15][14] * 0.038051;
    conv_output[14][13] += input[15][15] * 0.042449;
    conv_output[14][13] += input[16][13] * -0.084779;
    conv_output[14][13] += input[16][14] * 0.206606;
    conv_output[14][13] += input[16][15] * -0.146001;
    conv_output[14][13] = fmaxf(0, conv_output[14][13]);
    conv_output[14][14] = -0.019604;
    conv_output[14][14] += input[14][14] * 0.088207;
    conv_output[14][14] += input[14][15] * 0.061727;
    conv_output[14][14] += input[14][16] * -0.114732;
    conv_output[14][14] += input[15][14] * -0.083850;
    conv_output[14][14] += input[15][15] * 0.038051;
    conv_output[14][14] += input[15][16] * 0.042449;
    conv_output[14][14] += input[16][14] * -0.084779;
    conv_output[14][14] += input[16][15] * 0.206606;
    conv_output[14][14] += input[16][16] * -0.146001;
    conv_output[14][14] = fmaxf(0, conv_output[14][14]);
    conv_output[14][15] = -0.019604;
    conv_output[14][15] += input[14][15] * 0.088207;
    conv_output[14][15] += input[14][16] * 0.061727;
    conv_output[14][15] += input[14][17] * -0.114732;
    conv_output[14][15] += input[15][15] * -0.083850;
    conv_output[14][15] += input[15][16] * 0.038051;
    conv_output[14][15] += input[15][17] * 0.042449;
    conv_output[14][15] += input[16][15] * -0.084779;
    conv_output[14][15] += input[16][16] * 0.206606;
    conv_output[14][15] += input[16][17] * -0.146001;
    conv_output[14][15] = fmaxf(0, conv_output[14][15]);
    conv_output[14][16] = -0.019604;
    conv_output[14][16] += input[14][16] * 0.088207;
    conv_output[14][16] += input[14][17] * 0.061727;
    conv_output[14][16] += input[14][18] * -0.114732;
    conv_output[14][16] += input[15][16] * -0.083850;
    conv_output[14][16] += input[15][17] * 0.038051;
    conv_output[14][16] += input[15][18] * 0.042449;
    conv_output[14][16] += input[16][16] * -0.084779;
    conv_output[14][16] += input[16][17] * 0.206606;
    conv_output[14][16] += input[16][18] * -0.146001;
    conv_output[14][16] = fmaxf(0, conv_output[14][16]);
    conv_output[14][17] = -0.019604;
    conv_output[14][17] += input[14][17] * 0.088207;
    conv_output[14][17] += input[14][18] * 0.061727;
    conv_output[14][17] += input[14][19] * -0.114732;
    conv_output[14][17] += input[15][17] * -0.083850;
    conv_output[14][17] += input[15][18] * 0.038051;
    conv_output[14][17] += input[15][19] * 0.042449;
    conv_output[14][17] += input[16][17] * -0.084779;
    conv_output[14][17] += input[16][18] * 0.206606;
    conv_output[14][17] += input[16][19] * -0.146001;
    conv_output[14][17] = fmaxf(0, conv_output[14][17]);
    conv_output[14][18] = -0.019604;
    conv_output[14][18] += input[14][18] * 0.088207;
    conv_output[14][18] += input[14][19] * 0.061727;
    conv_output[14][18] += input[14][20] * -0.114732;
    conv_output[14][18] += input[15][18] * -0.083850;
    conv_output[14][18] += input[15][19] * 0.038051;
    conv_output[14][18] += input[15][20] * 0.042449;
    conv_output[14][18] += input[16][18] * -0.084779;
    conv_output[14][18] += input[16][19] * 0.206606;
    conv_output[14][18] += input[16][20] * -0.146001;
    conv_output[14][18] = fmaxf(0, conv_output[14][18]);
    conv_output[14][19] = -0.019604;
    conv_output[14][19] += input[14][19] * 0.088207;
    conv_output[14][19] += input[14][20] * 0.061727;
    conv_output[14][19] += input[14][21] * -0.114732;
    conv_output[14][19] += input[15][19] * -0.083850;
    conv_output[14][19] += input[15][20] * 0.038051;
    conv_output[14][19] += input[15][21] * 0.042449;
    conv_output[14][19] += input[16][19] * -0.084779;
    conv_output[14][19] += input[16][20] * 0.206606;
    conv_output[14][19] += input[16][21] * -0.146001;
    conv_output[14][19] = fmaxf(0, conv_output[14][19]);
    conv_output[14][20] = -0.019604;
    conv_output[14][20] += input[14][20] * 0.088207;
    conv_output[14][20] += input[14][21] * 0.061727;
    conv_output[14][20] += input[14][22] * -0.114732;
    conv_output[14][20] += input[15][20] * -0.083850;
    conv_output[14][20] += input[15][21] * 0.038051;
    conv_output[14][20] += input[15][22] * 0.042449;
    conv_output[14][20] += input[16][20] * -0.084779;
    conv_output[14][20] += input[16][21] * 0.206606;
    conv_output[14][20] += input[16][22] * -0.146001;
    conv_output[14][20] = fmaxf(0, conv_output[14][20]);
    conv_output[14][21] = -0.019604;
    conv_output[14][21] += input[14][21] * 0.088207;
    conv_output[14][21] += input[14][22] * 0.061727;
    conv_output[14][21] += input[14][23] * -0.114732;
    conv_output[14][21] += input[15][21] * -0.083850;
    conv_output[14][21] += input[15][22] * 0.038051;
    conv_output[14][21] += input[15][23] * 0.042449;
    conv_output[14][21] += input[16][21] * -0.084779;
    conv_output[14][21] += input[16][22] * 0.206606;
    conv_output[14][21] += input[16][23] * -0.146001;
    conv_output[14][21] = fmaxf(0, conv_output[14][21]);
    conv_output[14][22] = -0.019604;
    conv_output[14][22] += input[14][22] * 0.088207;
    conv_output[14][22] += input[14][23] * 0.061727;
    conv_output[14][22] += input[14][24] * -0.114732;
    conv_output[14][22] += input[15][22] * -0.083850;
    conv_output[14][22] += input[15][23] * 0.038051;
    conv_output[14][22] += input[15][24] * 0.042449;
    conv_output[14][22] += input[16][22] * -0.084779;
    conv_output[14][22] += input[16][23] * 0.206606;
    conv_output[14][22] += input[16][24] * -0.146001;
    conv_output[14][22] = fmaxf(0, conv_output[14][22]);
    conv_output[14][23] = -0.019604;
    conv_output[14][23] += input[14][23] * 0.088207;
    conv_output[14][23] += input[14][24] * 0.061727;
    conv_output[14][23] += input[14][25] * -0.114732;
    conv_output[14][23] += input[15][23] * -0.083850;
    conv_output[14][23] += input[15][24] * 0.038051;
    conv_output[14][23] += input[15][25] * 0.042449;
    conv_output[14][23] += input[16][23] * -0.084779;
    conv_output[14][23] += input[16][24] * 0.206606;
    conv_output[14][23] += input[16][25] * -0.146001;
    conv_output[14][23] = fmaxf(0, conv_output[14][23]);
    conv_output[14][24] = -0.019604;
    conv_output[14][24] += input[14][24] * 0.088207;
    conv_output[14][24] += input[14][25] * 0.061727;
    conv_output[14][24] += input[14][26] * -0.114732;
    conv_output[14][24] += input[15][24] * -0.083850;
    conv_output[14][24] += input[15][25] * 0.038051;
    conv_output[14][24] += input[15][26] * 0.042449;
    conv_output[14][24] += input[16][24] * -0.084779;
    conv_output[14][24] += input[16][25] * 0.206606;
    conv_output[14][24] += input[16][26] * -0.146001;
    conv_output[14][24] = fmaxf(0, conv_output[14][24]);
    conv_output[14][25] = -0.019604;
    conv_output[14][25] += input[14][25] * 0.088207;
    conv_output[14][25] += input[14][26] * 0.061727;
    conv_output[14][25] += input[14][27] * -0.114732;
    conv_output[14][25] += input[15][25] * -0.083850;
    conv_output[14][25] += input[15][26] * 0.038051;
    conv_output[14][25] += input[15][27] * 0.042449;
    conv_output[14][25] += input[16][25] * -0.084779;
    conv_output[14][25] += input[16][26] * 0.206606;
    conv_output[14][25] += input[16][27] * -0.146001;
    conv_output[14][25] = fmaxf(0, conv_output[14][25]);
    conv_output[15][0] = -0.019604;
    conv_output[15][0] += input[15][0] * 0.088207;
    conv_output[15][0] += input[15][1] * 0.061727;
    conv_output[15][0] += input[15][2] * -0.114732;
    conv_output[15][0] += input[16][0] * -0.083850;
    conv_output[15][0] += input[16][1] * 0.038051;
    conv_output[15][0] += input[16][2] * 0.042449;
    conv_output[15][0] += input[17][0] * -0.084779;
    conv_output[15][0] += input[17][1] * 0.206606;
    conv_output[15][0] += input[17][2] * -0.146001;
    conv_output[15][0] = fmaxf(0, conv_output[15][0]);
    conv_output[15][1] = -0.019604;
    conv_output[15][1] += input[15][1] * 0.088207;
    conv_output[15][1] += input[15][2] * 0.061727;
    conv_output[15][1] += input[15][3] * -0.114732;
    conv_output[15][1] += input[16][1] * -0.083850;
    conv_output[15][1] += input[16][2] * 0.038051;
    conv_output[15][1] += input[16][3] * 0.042449;
    conv_output[15][1] += input[17][1] * -0.084779;
    conv_output[15][1] += input[17][2] * 0.206606;
    conv_output[15][1] += input[17][3] * -0.146001;
    conv_output[15][1] = fmaxf(0, conv_output[15][1]);
    conv_output[15][2] = -0.019604;
    conv_output[15][2] += input[15][2] * 0.088207;
    conv_output[15][2] += input[15][3] * 0.061727;
    conv_output[15][2] += input[15][4] * -0.114732;
    conv_output[15][2] += input[16][2] * -0.083850;
    conv_output[15][2] += input[16][3] * 0.038051;
    conv_output[15][2] += input[16][4] * 0.042449;
    conv_output[15][2] += input[17][2] * -0.084779;
    conv_output[15][2] += input[17][3] * 0.206606;
    conv_output[15][2] += input[17][4] * -0.146001;
    conv_output[15][2] = fmaxf(0, conv_output[15][2]);
    conv_output[15][3] = -0.019604;
    conv_output[15][3] += input[15][3] * 0.088207;
    conv_output[15][3] += input[15][4] * 0.061727;
    conv_output[15][3] += input[15][5] * -0.114732;
    conv_output[15][3] += input[16][3] * -0.083850;
    conv_output[15][3] += input[16][4] * 0.038051;
    conv_output[15][3] += input[16][5] * 0.042449;
    conv_output[15][3] += input[17][3] * -0.084779;
    conv_output[15][3] += input[17][4] * 0.206606;
    conv_output[15][3] += input[17][5] * -0.146001;
    conv_output[15][3] = fmaxf(0, conv_output[15][3]);
    conv_output[15][4] = -0.019604;
    conv_output[15][4] += input[15][4] * 0.088207;
    conv_output[15][4] += input[15][5] * 0.061727;
    conv_output[15][4] += input[15][6] * -0.114732;
    conv_output[15][4] += input[16][4] * -0.083850;
    conv_output[15][4] += input[16][5] * 0.038051;
    conv_output[15][4] += input[16][6] * 0.042449;
    conv_output[15][4] += input[17][4] * -0.084779;
    conv_output[15][4] += input[17][5] * 0.206606;
    conv_output[15][4] += input[17][6] * -0.146001;
    conv_output[15][4] = fmaxf(0, conv_output[15][4]);
    conv_output[15][5] = -0.019604;
    conv_output[15][5] += input[15][5] * 0.088207;
    conv_output[15][5] += input[15][6] * 0.061727;
    conv_output[15][5] += input[15][7] * -0.114732;
    conv_output[15][5] += input[16][5] * -0.083850;
    conv_output[15][5] += input[16][6] * 0.038051;
    conv_output[15][5] += input[16][7] * 0.042449;
    conv_output[15][5] += input[17][5] * -0.084779;
    conv_output[15][5] += input[17][6] * 0.206606;
    conv_output[15][5] += input[17][7] * -0.146001;
    conv_output[15][5] = fmaxf(0, conv_output[15][5]);
    conv_output[15][6] = -0.019604;
    conv_output[15][6] += input[15][6] * 0.088207;
    conv_output[15][6] += input[15][7] * 0.061727;
    conv_output[15][6] += input[15][8] * -0.114732;
    conv_output[15][6] += input[16][6] * -0.083850;
    conv_output[15][6] += input[16][7] * 0.038051;
    conv_output[15][6] += input[16][8] * 0.042449;
    conv_output[15][6] += input[17][6] * -0.084779;
    conv_output[15][6] += input[17][7] * 0.206606;
    conv_output[15][6] += input[17][8] * -0.146001;
    conv_output[15][6] = fmaxf(0, conv_output[15][6]);
    conv_output[15][7] = -0.019604;
    conv_output[15][7] += input[15][7] * 0.088207;
    conv_output[15][7] += input[15][8] * 0.061727;
    conv_output[15][7] += input[15][9] * -0.114732;
    conv_output[15][7] += input[16][7] * -0.083850;
    conv_output[15][7] += input[16][8] * 0.038051;
    conv_output[15][7] += input[16][9] * 0.042449;
    conv_output[15][7] += input[17][7] * -0.084779;
    conv_output[15][7] += input[17][8] * 0.206606;
    conv_output[15][7] += input[17][9] * -0.146001;
    conv_output[15][7] = fmaxf(0, conv_output[15][7]);
    conv_output[15][8] = -0.019604;
    conv_output[15][8] += input[15][8] * 0.088207;
    conv_output[15][8] += input[15][9] * 0.061727;
    conv_output[15][8] += input[15][10] * -0.114732;
    conv_output[15][8] += input[16][8] * -0.083850;
    conv_output[15][8] += input[16][9] * 0.038051;
    conv_output[15][8] += input[16][10] * 0.042449;
    conv_output[15][8] += input[17][8] * -0.084779;
    conv_output[15][8] += input[17][9] * 0.206606;
    conv_output[15][8] += input[17][10] * -0.146001;
    conv_output[15][8] = fmaxf(0, conv_output[15][8]);
    conv_output[15][9] = -0.019604;
    conv_output[15][9] += input[15][9] * 0.088207;
    conv_output[15][9] += input[15][10] * 0.061727;
    conv_output[15][9] += input[15][11] * -0.114732;
    conv_output[15][9] += input[16][9] * -0.083850;
    conv_output[15][9] += input[16][10] * 0.038051;
    conv_output[15][9] += input[16][11] * 0.042449;
    conv_output[15][9] += input[17][9] * -0.084779;
    conv_output[15][9] += input[17][10] * 0.206606;
    conv_output[15][9] += input[17][11] * -0.146001;
    conv_output[15][9] = fmaxf(0, conv_output[15][9]);
    conv_output[15][10] = -0.019604;
    conv_output[15][10] += input[15][10] * 0.088207;
    conv_output[15][10] += input[15][11] * 0.061727;
    conv_output[15][10] += input[15][12] * -0.114732;
    conv_output[15][10] += input[16][10] * -0.083850;
    conv_output[15][10] += input[16][11] * 0.038051;
    conv_output[15][10] += input[16][12] * 0.042449;
    conv_output[15][10] += input[17][10] * -0.084779;
    conv_output[15][10] += input[17][11] * 0.206606;
    conv_output[15][10] += input[17][12] * -0.146001;
    conv_output[15][10] = fmaxf(0, conv_output[15][10]);
    conv_output[15][11] = -0.019604;
    conv_output[15][11] += input[15][11] * 0.088207;
    conv_output[15][11] += input[15][12] * 0.061727;
    conv_output[15][11] += input[15][13] * -0.114732;
    conv_output[15][11] += input[16][11] * -0.083850;
    conv_output[15][11] += input[16][12] * 0.038051;
    conv_output[15][11] += input[16][13] * 0.042449;
    conv_output[15][11] += input[17][11] * -0.084779;
    conv_output[15][11] += input[17][12] * 0.206606;
    conv_output[15][11] += input[17][13] * -0.146001;
    conv_output[15][11] = fmaxf(0, conv_output[15][11]);
    conv_output[15][12] = -0.019604;
    conv_output[15][12] += input[15][12] * 0.088207;
    conv_output[15][12] += input[15][13] * 0.061727;
    conv_output[15][12] += input[15][14] * -0.114732;
    conv_output[15][12] += input[16][12] * -0.083850;
    conv_output[15][12] += input[16][13] * 0.038051;
    conv_output[15][12] += input[16][14] * 0.042449;
    conv_output[15][12] += input[17][12] * -0.084779;
    conv_output[15][12] += input[17][13] * 0.206606;
    conv_output[15][12] += input[17][14] * -0.146001;
    conv_output[15][12] = fmaxf(0, conv_output[15][12]);
    conv_output[15][13] = -0.019604;
    conv_output[15][13] += input[15][13] * 0.088207;
    conv_output[15][13] += input[15][14] * 0.061727;
    conv_output[15][13] += input[15][15] * -0.114732;
    conv_output[15][13] += input[16][13] * -0.083850;
    conv_output[15][13] += input[16][14] * 0.038051;
    conv_output[15][13] += input[16][15] * 0.042449;
    conv_output[15][13] += input[17][13] * -0.084779;
    conv_output[15][13] += input[17][14] * 0.206606;
    conv_output[15][13] += input[17][15] * -0.146001;
    conv_output[15][13] = fmaxf(0, conv_output[15][13]);
    conv_output[15][14] = -0.019604;
    conv_output[15][14] += input[15][14] * 0.088207;
    conv_output[15][14] += input[15][15] * 0.061727;
    conv_output[15][14] += input[15][16] * -0.114732;
    conv_output[15][14] += input[16][14] * -0.083850;
    conv_output[15][14] += input[16][15] * 0.038051;
    conv_output[15][14] += input[16][16] * 0.042449;
    conv_output[15][14] += input[17][14] * -0.084779;
    conv_output[15][14] += input[17][15] * 0.206606;
    conv_output[15][14] += input[17][16] * -0.146001;
    conv_output[15][14] = fmaxf(0, conv_output[15][14]);
    conv_output[15][15] = -0.019604;
    conv_output[15][15] += input[15][15] * 0.088207;
    conv_output[15][15] += input[15][16] * 0.061727;
    conv_output[15][15] += input[15][17] * -0.114732;
    conv_output[15][15] += input[16][15] * -0.083850;
    conv_output[15][15] += input[16][16] * 0.038051;
    conv_output[15][15] += input[16][17] * 0.042449;
    conv_output[15][15] += input[17][15] * -0.084779;
    conv_output[15][15] += input[17][16] * 0.206606;
    conv_output[15][15] += input[17][17] * -0.146001;
    conv_output[15][15] = fmaxf(0, conv_output[15][15]);
    conv_output[15][16] = -0.019604;
    conv_output[15][16] += input[15][16] * 0.088207;
    conv_output[15][16] += input[15][17] * 0.061727;
    conv_output[15][16] += input[15][18] * -0.114732;
    conv_output[15][16] += input[16][16] * -0.083850;
    conv_output[15][16] += input[16][17] * 0.038051;
    conv_output[15][16] += input[16][18] * 0.042449;
    conv_output[15][16] += input[17][16] * -0.084779;
    conv_output[15][16] += input[17][17] * 0.206606;
    conv_output[15][16] += input[17][18] * -0.146001;
    conv_output[15][16] = fmaxf(0, conv_output[15][16]);
    conv_output[15][17] = -0.019604;
    conv_output[15][17] += input[15][17] * 0.088207;
    conv_output[15][17] += input[15][18] * 0.061727;
    conv_output[15][17] += input[15][19] * -0.114732;
    conv_output[15][17] += input[16][17] * -0.083850;
    conv_output[15][17] += input[16][18] * 0.038051;
    conv_output[15][17] += input[16][19] * 0.042449;
    conv_output[15][17] += input[17][17] * -0.084779;
    conv_output[15][17] += input[17][18] * 0.206606;
    conv_output[15][17] += input[17][19] * -0.146001;
    conv_output[15][17] = fmaxf(0, conv_output[15][17]);
    conv_output[15][18] = -0.019604;
    conv_output[15][18] += input[15][18] * 0.088207;
    conv_output[15][18] += input[15][19] * 0.061727;
    conv_output[15][18] += input[15][20] * -0.114732;
    conv_output[15][18] += input[16][18] * -0.083850;
    conv_output[15][18] += input[16][19] * 0.038051;
    conv_output[15][18] += input[16][20] * 0.042449;
    conv_output[15][18] += input[17][18] * -0.084779;
    conv_output[15][18] += input[17][19] * 0.206606;
    conv_output[15][18] += input[17][20] * -0.146001;
    conv_output[15][18] = fmaxf(0, conv_output[15][18]);
    conv_output[15][19] = -0.019604;
    conv_output[15][19] += input[15][19] * 0.088207;
    conv_output[15][19] += input[15][20] * 0.061727;
    conv_output[15][19] += input[15][21] * -0.114732;
    conv_output[15][19] += input[16][19] * -0.083850;
    conv_output[15][19] += input[16][20] * 0.038051;
    conv_output[15][19] += input[16][21] * 0.042449;
    conv_output[15][19] += input[17][19] * -0.084779;
    conv_output[15][19] += input[17][20] * 0.206606;
    conv_output[15][19] += input[17][21] * -0.146001;
    conv_output[15][19] = fmaxf(0, conv_output[15][19]);
    conv_output[15][20] = -0.019604;
    conv_output[15][20] += input[15][20] * 0.088207;
    conv_output[15][20] += input[15][21] * 0.061727;
    conv_output[15][20] += input[15][22] * -0.114732;
    conv_output[15][20] += input[16][20] * -0.083850;
    conv_output[15][20] += input[16][21] * 0.038051;
    conv_output[15][20] += input[16][22] * 0.042449;
    conv_output[15][20] += input[17][20] * -0.084779;
    conv_output[15][20] += input[17][21] * 0.206606;
    conv_output[15][20] += input[17][22] * -0.146001;
    conv_output[15][20] = fmaxf(0, conv_output[15][20]);
    conv_output[15][21] = -0.019604;
    conv_output[15][21] += input[15][21] * 0.088207;
    conv_output[15][21] += input[15][22] * 0.061727;
    conv_output[15][21] += input[15][23] * -0.114732;
    conv_output[15][21] += input[16][21] * -0.083850;
    conv_output[15][21] += input[16][22] * 0.038051;
    conv_output[15][21] += input[16][23] * 0.042449;
    conv_output[15][21] += input[17][21] * -0.084779;
    conv_output[15][21] += input[17][22] * 0.206606;
    conv_output[15][21] += input[17][23] * -0.146001;
    conv_output[15][21] = fmaxf(0, conv_output[15][21]);
    conv_output[15][22] = -0.019604;
    conv_output[15][22] += input[15][22] * 0.088207;
    conv_output[15][22] += input[15][23] * 0.061727;
    conv_output[15][22] += input[15][24] * -0.114732;
    conv_output[15][22] += input[16][22] * -0.083850;
    conv_output[15][22] += input[16][23] * 0.038051;
    conv_output[15][22] += input[16][24] * 0.042449;
    conv_output[15][22] += input[17][22] * -0.084779;
    conv_output[15][22] += input[17][23] * 0.206606;
    conv_output[15][22] += input[17][24] * -0.146001;
    conv_output[15][22] = fmaxf(0, conv_output[15][22]);
    conv_output[15][23] = -0.019604;
    conv_output[15][23] += input[15][23] * 0.088207;
    conv_output[15][23] += input[15][24] * 0.061727;
    conv_output[15][23] += input[15][25] * -0.114732;
    conv_output[15][23] += input[16][23] * -0.083850;
    conv_output[15][23] += input[16][24] * 0.038051;
    conv_output[15][23] += input[16][25] * 0.042449;
    conv_output[15][23] += input[17][23] * -0.084779;
    conv_output[15][23] += input[17][24] * 0.206606;
    conv_output[15][23] += input[17][25] * -0.146001;
    conv_output[15][23] = fmaxf(0, conv_output[15][23]);
    conv_output[15][24] = -0.019604;
    conv_output[15][24] += input[15][24] * 0.088207;
    conv_output[15][24] += input[15][25] * 0.061727;
    conv_output[15][24] += input[15][26] * -0.114732;
    conv_output[15][24] += input[16][24] * -0.083850;
    conv_output[15][24] += input[16][25] * 0.038051;
    conv_output[15][24] += input[16][26] * 0.042449;
    conv_output[15][24] += input[17][24] * -0.084779;
    conv_output[15][24] += input[17][25] * 0.206606;
    conv_output[15][24] += input[17][26] * -0.146001;
    conv_output[15][24] = fmaxf(0, conv_output[15][24]);
    conv_output[15][25] = -0.019604;
    conv_output[15][25] += input[15][25] * 0.088207;
    conv_output[15][25] += input[15][26] * 0.061727;
    conv_output[15][25] += input[15][27] * -0.114732;
    conv_output[15][25] += input[16][25] * -0.083850;
    conv_output[15][25] += input[16][26] * 0.038051;
    conv_output[15][25] += input[16][27] * 0.042449;
    conv_output[15][25] += input[17][25] * -0.084779;
    conv_output[15][25] += input[17][26] * 0.206606;
    conv_output[15][25] += input[17][27] * -0.146001;
    conv_output[15][25] = fmaxf(0, conv_output[15][25]);
    conv_output[16][0] = -0.019604;
    conv_output[16][0] += input[16][0] * 0.088207;
    conv_output[16][0] += input[16][1] * 0.061727;
    conv_output[16][0] += input[16][2] * -0.114732;
    conv_output[16][0] += input[17][0] * -0.083850;
    conv_output[16][0] += input[17][1] * 0.038051;
    conv_output[16][0] += input[17][2] * 0.042449;
    conv_output[16][0] += input[18][0] * -0.084779;
    conv_output[16][0] += input[18][1] * 0.206606;
    conv_output[16][0] += input[18][2] * -0.146001;
    conv_output[16][0] = fmaxf(0, conv_output[16][0]);
    conv_output[16][1] = -0.019604;
    conv_output[16][1] += input[16][1] * 0.088207;
    conv_output[16][1] += input[16][2] * 0.061727;
    conv_output[16][1] += input[16][3] * -0.114732;
    conv_output[16][1] += input[17][1] * -0.083850;
    conv_output[16][1] += input[17][2] * 0.038051;
    conv_output[16][1] += input[17][3] * 0.042449;
    conv_output[16][1] += input[18][1] * -0.084779;
    conv_output[16][1] += input[18][2] * 0.206606;
    conv_output[16][1] += input[18][3] * -0.146001;
    conv_output[16][1] = fmaxf(0, conv_output[16][1]);
    conv_output[16][2] = -0.019604;
    conv_output[16][2] += input[16][2] * 0.088207;
    conv_output[16][2] += input[16][3] * 0.061727;
    conv_output[16][2] += input[16][4] * -0.114732;
    conv_output[16][2] += input[17][2] * -0.083850;
    conv_output[16][2] += input[17][3] * 0.038051;
    conv_output[16][2] += input[17][4] * 0.042449;
    conv_output[16][2] += input[18][2] * -0.084779;
    conv_output[16][2] += input[18][3] * 0.206606;
    conv_output[16][2] += input[18][4] * -0.146001;
    conv_output[16][2] = fmaxf(0, conv_output[16][2]);
    conv_output[16][3] = -0.019604;
    conv_output[16][3] += input[16][3] * 0.088207;
    conv_output[16][3] += input[16][4] * 0.061727;
    conv_output[16][3] += input[16][5] * -0.114732;
    conv_output[16][3] += input[17][3] * -0.083850;
    conv_output[16][3] += input[17][4] * 0.038051;
    conv_output[16][3] += input[17][5] * 0.042449;
    conv_output[16][3] += input[18][3] * -0.084779;
    conv_output[16][3] += input[18][4] * 0.206606;
    conv_output[16][3] += input[18][5] * -0.146001;
    conv_output[16][3] = fmaxf(0, conv_output[16][3]);
    conv_output[16][4] = -0.019604;
    conv_output[16][4] += input[16][4] * 0.088207;
    conv_output[16][4] += input[16][5] * 0.061727;
    conv_output[16][4] += input[16][6] * -0.114732;
    conv_output[16][4] += input[17][4] * -0.083850;
    conv_output[16][4] += input[17][5] * 0.038051;
    conv_output[16][4] += input[17][6] * 0.042449;
    conv_output[16][4] += input[18][4] * -0.084779;
    conv_output[16][4] += input[18][5] * 0.206606;
    conv_output[16][4] += input[18][6] * -0.146001;
    conv_output[16][4] = fmaxf(0, conv_output[16][4]);
    conv_output[16][5] = -0.019604;
    conv_output[16][5] += input[16][5] * 0.088207;
    conv_output[16][5] += input[16][6] * 0.061727;
    conv_output[16][5] += input[16][7] * -0.114732;
    conv_output[16][5] += input[17][5] * -0.083850;
    conv_output[16][5] += input[17][6] * 0.038051;
    conv_output[16][5] += input[17][7] * 0.042449;
    conv_output[16][5] += input[18][5] * -0.084779;
    conv_output[16][5] += input[18][6] * 0.206606;
    conv_output[16][5] += input[18][7] * -0.146001;
    conv_output[16][5] = fmaxf(0, conv_output[16][5]);
    conv_output[16][6] = -0.019604;
    conv_output[16][6] += input[16][6] * 0.088207;
    conv_output[16][6] += input[16][7] * 0.061727;
    conv_output[16][6] += input[16][8] * -0.114732;
    conv_output[16][6] += input[17][6] * -0.083850;
    conv_output[16][6] += input[17][7] * 0.038051;
    conv_output[16][6] += input[17][8] * 0.042449;
    conv_output[16][6] += input[18][6] * -0.084779;
    conv_output[16][6] += input[18][7] * 0.206606;
    conv_output[16][6] += input[18][8] * -0.146001;
    conv_output[16][6] = fmaxf(0, conv_output[16][6]);
    conv_output[16][7] = -0.019604;
    conv_output[16][7] += input[16][7] * 0.088207;
    conv_output[16][7] += input[16][8] * 0.061727;
    conv_output[16][7] += input[16][9] * -0.114732;
    conv_output[16][7] += input[17][7] * -0.083850;
    conv_output[16][7] += input[17][8] * 0.038051;
    conv_output[16][7] += input[17][9] * 0.042449;
    conv_output[16][7] += input[18][7] * -0.084779;
    conv_output[16][7] += input[18][8] * 0.206606;
    conv_output[16][7] += input[18][9] * -0.146001;
    conv_output[16][7] = fmaxf(0, conv_output[16][7]);
    conv_output[16][8] = -0.019604;
    conv_output[16][8] += input[16][8] * 0.088207;
    conv_output[16][8] += input[16][9] * 0.061727;
    conv_output[16][8] += input[16][10] * -0.114732;
    conv_output[16][8] += input[17][8] * -0.083850;
    conv_output[16][8] += input[17][9] * 0.038051;
    conv_output[16][8] += input[17][10] * 0.042449;
    conv_output[16][8] += input[18][8] * -0.084779;
    conv_output[16][8] += input[18][9] * 0.206606;
    conv_output[16][8] += input[18][10] * -0.146001;
    conv_output[16][8] = fmaxf(0, conv_output[16][8]);
    conv_output[16][9] = -0.019604;
    conv_output[16][9] += input[16][9] * 0.088207;
    conv_output[16][9] += input[16][10] * 0.061727;
    conv_output[16][9] += input[16][11] * -0.114732;
    conv_output[16][9] += input[17][9] * -0.083850;
    conv_output[16][9] += input[17][10] * 0.038051;
    conv_output[16][9] += input[17][11] * 0.042449;
    conv_output[16][9] += input[18][9] * -0.084779;
    conv_output[16][9] += input[18][10] * 0.206606;
    conv_output[16][9] += input[18][11] * -0.146001;
    conv_output[16][9] = fmaxf(0, conv_output[16][9]);
    conv_output[16][10] = -0.019604;
    conv_output[16][10] += input[16][10] * 0.088207;
    conv_output[16][10] += input[16][11] * 0.061727;
    conv_output[16][10] += input[16][12] * -0.114732;
    conv_output[16][10] += input[17][10] * -0.083850;
    conv_output[16][10] += input[17][11] * 0.038051;
    conv_output[16][10] += input[17][12] * 0.042449;
    conv_output[16][10] += input[18][10] * -0.084779;
    conv_output[16][10] += input[18][11] * 0.206606;
    conv_output[16][10] += input[18][12] * -0.146001;
    conv_output[16][10] = fmaxf(0, conv_output[16][10]);
    conv_output[16][11] = -0.019604;
    conv_output[16][11] += input[16][11] * 0.088207;
    conv_output[16][11] += input[16][12] * 0.061727;
    conv_output[16][11] += input[16][13] * -0.114732;
    conv_output[16][11] += input[17][11] * -0.083850;
    conv_output[16][11] += input[17][12] * 0.038051;
    conv_output[16][11] += input[17][13] * 0.042449;
    conv_output[16][11] += input[18][11] * -0.084779;
    conv_output[16][11] += input[18][12] * 0.206606;
    conv_output[16][11] += input[18][13] * -0.146001;
    conv_output[16][11] = fmaxf(0, conv_output[16][11]);
    conv_output[16][12] = -0.019604;
    conv_output[16][12] += input[16][12] * 0.088207;
    conv_output[16][12] += input[16][13] * 0.061727;
    conv_output[16][12] += input[16][14] * -0.114732;
    conv_output[16][12] += input[17][12] * -0.083850;
    conv_output[16][12] += input[17][13] * 0.038051;
    conv_output[16][12] += input[17][14] * 0.042449;
    conv_output[16][12] += input[18][12] * -0.084779;
    conv_output[16][12] += input[18][13] * 0.206606;
    conv_output[16][12] += input[18][14] * -0.146001;
    conv_output[16][12] = fmaxf(0, conv_output[16][12]);
    conv_output[16][13] = -0.019604;
    conv_output[16][13] += input[16][13] * 0.088207;
    conv_output[16][13] += input[16][14] * 0.061727;
    conv_output[16][13] += input[16][15] * -0.114732;
    conv_output[16][13] += input[17][13] * -0.083850;
    conv_output[16][13] += input[17][14] * 0.038051;
    conv_output[16][13] += input[17][15] * 0.042449;
    conv_output[16][13] += input[18][13] * -0.084779;
    conv_output[16][13] += input[18][14] * 0.206606;
    conv_output[16][13] += input[18][15] * -0.146001;
    conv_output[16][13] = fmaxf(0, conv_output[16][13]);
    conv_output[16][14] = -0.019604;
    conv_output[16][14] += input[16][14] * 0.088207;
    conv_output[16][14] += input[16][15] * 0.061727;
    conv_output[16][14] += input[16][16] * -0.114732;
    conv_output[16][14] += input[17][14] * -0.083850;
    conv_output[16][14] += input[17][15] * 0.038051;
    conv_output[16][14] += input[17][16] * 0.042449;
    conv_output[16][14] += input[18][14] * -0.084779;
    conv_output[16][14] += input[18][15] * 0.206606;
    conv_output[16][14] += input[18][16] * -0.146001;
    conv_output[16][14] = fmaxf(0, conv_output[16][14]);
    conv_output[16][15] = -0.019604;
    conv_output[16][15] += input[16][15] * 0.088207;
    conv_output[16][15] += input[16][16] * 0.061727;
    conv_output[16][15] += input[16][17] * -0.114732;
    conv_output[16][15] += input[17][15] * -0.083850;
    conv_output[16][15] += input[17][16] * 0.038051;
    conv_output[16][15] += input[17][17] * 0.042449;
    conv_output[16][15] += input[18][15] * -0.084779;
    conv_output[16][15] += input[18][16] * 0.206606;
    conv_output[16][15] += input[18][17] * -0.146001;
    conv_output[16][15] = fmaxf(0, conv_output[16][15]);
    conv_output[16][16] = -0.019604;
    conv_output[16][16] += input[16][16] * 0.088207;
    conv_output[16][16] += input[16][17] * 0.061727;
    conv_output[16][16] += input[16][18] * -0.114732;
    conv_output[16][16] += input[17][16] * -0.083850;
    conv_output[16][16] += input[17][17] * 0.038051;
    conv_output[16][16] += input[17][18] * 0.042449;
    conv_output[16][16] += input[18][16] * -0.084779;
    conv_output[16][16] += input[18][17] * 0.206606;
    conv_output[16][16] += input[18][18] * -0.146001;
    conv_output[16][16] = fmaxf(0, conv_output[16][16]);
    conv_output[16][17] = -0.019604;
    conv_output[16][17] += input[16][17] * 0.088207;
    conv_output[16][17] += input[16][18] * 0.061727;
    conv_output[16][17] += input[16][19] * -0.114732;
    conv_output[16][17] += input[17][17] * -0.083850;
    conv_output[16][17] += input[17][18] * 0.038051;
    conv_output[16][17] += input[17][19] * 0.042449;
    conv_output[16][17] += input[18][17] * -0.084779;
    conv_output[16][17] += input[18][18] * 0.206606;
    conv_output[16][17] += input[18][19] * -0.146001;
    conv_output[16][17] = fmaxf(0, conv_output[16][17]);
    conv_output[16][18] = -0.019604;
    conv_output[16][18] += input[16][18] * 0.088207;
    conv_output[16][18] += input[16][19] * 0.061727;
    conv_output[16][18] += input[16][20] * -0.114732;
    conv_output[16][18] += input[17][18] * -0.083850;
    conv_output[16][18] += input[17][19] * 0.038051;
    conv_output[16][18] += input[17][20] * 0.042449;
    conv_output[16][18] += input[18][18] * -0.084779;
    conv_output[16][18] += input[18][19] * 0.206606;
    conv_output[16][18] += input[18][20] * -0.146001;
    conv_output[16][18] = fmaxf(0, conv_output[16][18]);
    conv_output[16][19] = -0.019604;
    conv_output[16][19] += input[16][19] * 0.088207;
    conv_output[16][19] += input[16][20] * 0.061727;
    conv_output[16][19] += input[16][21] * -0.114732;
    conv_output[16][19] += input[17][19] * -0.083850;
    conv_output[16][19] += input[17][20] * 0.038051;
    conv_output[16][19] += input[17][21] * 0.042449;
    conv_output[16][19] += input[18][19] * -0.084779;
    conv_output[16][19] += input[18][20] * 0.206606;
    conv_output[16][19] += input[18][21] * -0.146001;
    conv_output[16][19] = fmaxf(0, conv_output[16][19]);
    conv_output[16][20] = -0.019604;
    conv_output[16][20] += input[16][20] * 0.088207;
    conv_output[16][20] += input[16][21] * 0.061727;
    conv_output[16][20] += input[16][22] * -0.114732;
    conv_output[16][20] += input[17][20] * -0.083850;
    conv_output[16][20] += input[17][21] * 0.038051;
    conv_output[16][20] += input[17][22] * 0.042449;
    conv_output[16][20] += input[18][20] * -0.084779;
    conv_output[16][20] += input[18][21] * 0.206606;
    conv_output[16][20] += input[18][22] * -0.146001;
    conv_output[16][20] = fmaxf(0, conv_output[16][20]);
    conv_output[16][21] = -0.019604;
    conv_output[16][21] += input[16][21] * 0.088207;
    conv_output[16][21] += input[16][22] * 0.061727;
    conv_output[16][21] += input[16][23] * -0.114732;
    conv_output[16][21] += input[17][21] * -0.083850;
    conv_output[16][21] += input[17][22] * 0.038051;
    conv_output[16][21] += input[17][23] * 0.042449;
    conv_output[16][21] += input[18][21] * -0.084779;
    conv_output[16][21] += input[18][22] * 0.206606;
    conv_output[16][21] += input[18][23] * -0.146001;
    conv_output[16][21] = fmaxf(0, conv_output[16][21]);
    conv_output[16][22] = -0.019604;
    conv_output[16][22] += input[16][22] * 0.088207;
    conv_output[16][22] += input[16][23] * 0.061727;
    conv_output[16][22] += input[16][24] * -0.114732;
    conv_output[16][22] += input[17][22] * -0.083850;
    conv_output[16][22] += input[17][23] * 0.038051;
    conv_output[16][22] += input[17][24] * 0.042449;
    conv_output[16][22] += input[18][22] * -0.084779;
    conv_output[16][22] += input[18][23] * 0.206606;
    conv_output[16][22] += input[18][24] * -0.146001;
    conv_output[16][22] = fmaxf(0, conv_output[16][22]);
    conv_output[16][23] = -0.019604;
    conv_output[16][23] += input[16][23] * 0.088207;
    conv_output[16][23] += input[16][24] * 0.061727;
    conv_output[16][23] += input[16][25] * -0.114732;
    conv_output[16][23] += input[17][23] * -0.083850;
    conv_output[16][23] += input[17][24] * 0.038051;
    conv_output[16][23] += input[17][25] * 0.042449;
    conv_output[16][23] += input[18][23] * -0.084779;
    conv_output[16][23] += input[18][24] * 0.206606;
    conv_output[16][23] += input[18][25] * -0.146001;
    conv_output[16][23] = fmaxf(0, conv_output[16][23]);
    conv_output[16][24] = -0.019604;
    conv_output[16][24] += input[16][24] * 0.088207;
    conv_output[16][24] += input[16][25] * 0.061727;
    conv_output[16][24] += input[16][26] * -0.114732;
    conv_output[16][24] += input[17][24] * -0.083850;
    conv_output[16][24] += input[17][25] * 0.038051;
    conv_output[16][24] += input[17][26] * 0.042449;
    conv_output[16][24] += input[18][24] * -0.084779;
    conv_output[16][24] += input[18][25] * 0.206606;
    conv_output[16][24] += input[18][26] * -0.146001;
    conv_output[16][24] = fmaxf(0, conv_output[16][24]);
    conv_output[16][25] = -0.019604;
    conv_output[16][25] += input[16][25] * 0.088207;
    conv_output[16][25] += input[16][26] * 0.061727;
    conv_output[16][25] += input[16][27] * -0.114732;
    conv_output[16][25] += input[17][25] * -0.083850;
    conv_output[16][25] += input[17][26] * 0.038051;
    conv_output[16][25] += input[17][27] * 0.042449;
    conv_output[16][25] += input[18][25] * -0.084779;
    conv_output[16][25] += input[18][26] * 0.206606;
    conv_output[16][25] += input[18][27] * -0.146001;
    conv_output[16][25] = fmaxf(0, conv_output[16][25]);
    conv_output[17][0] = -0.019604;
    conv_output[17][0] += input[17][0] * 0.088207;
    conv_output[17][0] += input[17][1] * 0.061727;
    conv_output[17][0] += input[17][2] * -0.114732;
    conv_output[17][0] += input[18][0] * -0.083850;
    conv_output[17][0] += input[18][1] * 0.038051;
    conv_output[17][0] += input[18][2] * 0.042449;
    conv_output[17][0] += input[19][0] * -0.084779;
    conv_output[17][0] += input[19][1] * 0.206606;
    conv_output[17][0] += input[19][2] * -0.146001;
    conv_output[17][0] = fmaxf(0, conv_output[17][0]);
    conv_output[17][1] = -0.019604;
    conv_output[17][1] += input[17][1] * 0.088207;
    conv_output[17][1] += input[17][2] * 0.061727;
    conv_output[17][1] += input[17][3] * -0.114732;
    conv_output[17][1] += input[18][1] * -0.083850;
    conv_output[17][1] += input[18][2] * 0.038051;
    conv_output[17][1] += input[18][3] * 0.042449;
    conv_output[17][1] += input[19][1] * -0.084779;
    conv_output[17][1] += input[19][2] * 0.206606;
    conv_output[17][1] += input[19][3] * -0.146001;
    conv_output[17][1] = fmaxf(0, conv_output[17][1]);
    conv_output[17][2] = -0.019604;
    conv_output[17][2] += input[17][2] * 0.088207;
    conv_output[17][2] += input[17][3] * 0.061727;
    conv_output[17][2] += input[17][4] * -0.114732;
    conv_output[17][2] += input[18][2] * -0.083850;
    conv_output[17][2] += input[18][3] * 0.038051;
    conv_output[17][2] += input[18][4] * 0.042449;
    conv_output[17][2] += input[19][2] * -0.084779;
    conv_output[17][2] += input[19][3] * 0.206606;
    conv_output[17][2] += input[19][4] * -0.146001;
    conv_output[17][2] = fmaxf(0, conv_output[17][2]);
    conv_output[17][3] = -0.019604;
    conv_output[17][3] += input[17][3] * 0.088207;
    conv_output[17][3] += input[17][4] * 0.061727;
    conv_output[17][3] += input[17][5] * -0.114732;
    conv_output[17][3] += input[18][3] * -0.083850;
    conv_output[17][3] += input[18][4] * 0.038051;
    conv_output[17][3] += input[18][5] * 0.042449;
    conv_output[17][3] += input[19][3] * -0.084779;
    conv_output[17][3] += input[19][4] * 0.206606;
    conv_output[17][3] += input[19][5] * -0.146001;
    conv_output[17][3] = fmaxf(0, conv_output[17][3]);
    conv_output[17][4] = -0.019604;
    conv_output[17][4] += input[17][4] * 0.088207;
    conv_output[17][4] += input[17][5] * 0.061727;
    conv_output[17][4] += input[17][6] * -0.114732;
    conv_output[17][4] += input[18][4] * -0.083850;
    conv_output[17][4] += input[18][5] * 0.038051;
    conv_output[17][4] += input[18][6] * 0.042449;
    conv_output[17][4] += input[19][4] * -0.084779;
    conv_output[17][4] += input[19][5] * 0.206606;
    conv_output[17][4] += input[19][6] * -0.146001;
    conv_output[17][4] = fmaxf(0, conv_output[17][4]);
    conv_output[17][5] = -0.019604;
    conv_output[17][5] += input[17][5] * 0.088207;
    conv_output[17][5] += input[17][6] * 0.061727;
    conv_output[17][5] += input[17][7] * -0.114732;
    conv_output[17][5] += input[18][5] * -0.083850;
    conv_output[17][5] += input[18][6] * 0.038051;
    conv_output[17][5] += input[18][7] * 0.042449;
    conv_output[17][5] += input[19][5] * -0.084779;
    conv_output[17][5] += input[19][6] * 0.206606;
    conv_output[17][5] += input[19][7] * -0.146001;
    conv_output[17][5] = fmaxf(0, conv_output[17][5]);
    conv_output[17][6] = -0.019604;
    conv_output[17][6] += input[17][6] * 0.088207;
    conv_output[17][6] += input[17][7] * 0.061727;
    conv_output[17][6] += input[17][8] * -0.114732;
    conv_output[17][6] += input[18][6] * -0.083850;
    conv_output[17][6] += input[18][7] * 0.038051;
    conv_output[17][6] += input[18][8] * 0.042449;
    conv_output[17][6] += input[19][6] * -0.084779;
    conv_output[17][6] += input[19][7] * 0.206606;
    conv_output[17][6] += input[19][8] * -0.146001;
    conv_output[17][6] = fmaxf(0, conv_output[17][6]);
    conv_output[17][7] = -0.019604;
    conv_output[17][7] += input[17][7] * 0.088207;
    conv_output[17][7] += input[17][8] * 0.061727;
    conv_output[17][7] += input[17][9] * -0.114732;
    conv_output[17][7] += input[18][7] * -0.083850;
    conv_output[17][7] += input[18][8] * 0.038051;
    conv_output[17][7] += input[18][9] * 0.042449;
    conv_output[17][7] += input[19][7] * -0.084779;
    conv_output[17][7] += input[19][8] * 0.206606;
    conv_output[17][7] += input[19][9] * -0.146001;
    conv_output[17][7] = fmaxf(0, conv_output[17][7]);
    conv_output[17][8] = -0.019604;
    conv_output[17][8] += input[17][8] * 0.088207;
    conv_output[17][8] += input[17][9] * 0.061727;
    conv_output[17][8] += input[17][10] * -0.114732;
    conv_output[17][8] += input[18][8] * -0.083850;
    conv_output[17][8] += input[18][9] * 0.038051;
    conv_output[17][8] += input[18][10] * 0.042449;
    conv_output[17][8] += input[19][8] * -0.084779;
    conv_output[17][8] += input[19][9] * 0.206606;
    conv_output[17][8] += input[19][10] * -0.146001;
    conv_output[17][8] = fmaxf(0, conv_output[17][8]);
    conv_output[17][9] = -0.019604;
    conv_output[17][9] += input[17][9] * 0.088207;
    conv_output[17][9] += input[17][10] * 0.061727;
    conv_output[17][9] += input[17][11] * -0.114732;
    conv_output[17][9] += input[18][9] * -0.083850;
    conv_output[17][9] += input[18][10] * 0.038051;
    conv_output[17][9] += input[18][11] * 0.042449;
    conv_output[17][9] += input[19][9] * -0.084779;
    conv_output[17][9] += input[19][10] * 0.206606;
    conv_output[17][9] += input[19][11] * -0.146001;
    conv_output[17][9] = fmaxf(0, conv_output[17][9]);
    conv_output[17][10] = -0.019604;
    conv_output[17][10] += input[17][10] * 0.088207;
    conv_output[17][10] += input[17][11] * 0.061727;
    conv_output[17][10] += input[17][12] * -0.114732;
    conv_output[17][10] += input[18][10] * -0.083850;
    conv_output[17][10] += input[18][11] * 0.038051;
    conv_output[17][10] += input[18][12] * 0.042449;
    conv_output[17][10] += input[19][10] * -0.084779;
    conv_output[17][10] += input[19][11] * 0.206606;
    conv_output[17][10] += input[19][12] * -0.146001;
    conv_output[17][10] = fmaxf(0, conv_output[17][10]);
    conv_output[17][11] = -0.019604;
    conv_output[17][11] += input[17][11] * 0.088207;
    conv_output[17][11] += input[17][12] * 0.061727;
    conv_output[17][11] += input[17][13] * -0.114732;
    conv_output[17][11] += input[18][11] * -0.083850;
    conv_output[17][11] += input[18][12] * 0.038051;
    conv_output[17][11] += input[18][13] * 0.042449;
    conv_output[17][11] += input[19][11] * -0.084779;
    conv_output[17][11] += input[19][12] * 0.206606;
    conv_output[17][11] += input[19][13] * -0.146001;
    conv_output[17][11] = fmaxf(0, conv_output[17][11]);
    conv_output[17][12] = -0.019604;
    conv_output[17][12] += input[17][12] * 0.088207;
    conv_output[17][12] += input[17][13] * 0.061727;
    conv_output[17][12] += input[17][14] * -0.114732;
    conv_output[17][12] += input[18][12] * -0.083850;
    conv_output[17][12] += input[18][13] * 0.038051;
    conv_output[17][12] += input[18][14] * 0.042449;
    conv_output[17][12] += input[19][12] * -0.084779;
    conv_output[17][12] += input[19][13] * 0.206606;
    conv_output[17][12] += input[19][14] * -0.146001;
    conv_output[17][12] = fmaxf(0, conv_output[17][12]);
    conv_output[17][13] = -0.019604;
    conv_output[17][13] += input[17][13] * 0.088207;
    conv_output[17][13] += input[17][14] * 0.061727;
    conv_output[17][13] += input[17][15] * -0.114732;
    conv_output[17][13] += input[18][13] * -0.083850;
    conv_output[17][13] += input[18][14] * 0.038051;
    conv_output[17][13] += input[18][15] * 0.042449;
    conv_output[17][13] += input[19][13] * -0.084779;
    conv_output[17][13] += input[19][14] * 0.206606;
    conv_output[17][13] += input[19][15] * -0.146001;
    conv_output[17][13] = fmaxf(0, conv_output[17][13]);
    conv_output[17][14] = -0.019604;
    conv_output[17][14] += input[17][14] * 0.088207;
    conv_output[17][14] += input[17][15] * 0.061727;
    conv_output[17][14] += input[17][16] * -0.114732;
    conv_output[17][14] += input[18][14] * -0.083850;
    conv_output[17][14] += input[18][15] * 0.038051;
    conv_output[17][14] += input[18][16] * 0.042449;
    conv_output[17][14] += input[19][14] * -0.084779;
    conv_output[17][14] += input[19][15] * 0.206606;
    conv_output[17][14] += input[19][16] * -0.146001;
    conv_output[17][14] = fmaxf(0, conv_output[17][14]);
    conv_output[17][15] = -0.019604;
    conv_output[17][15] += input[17][15] * 0.088207;
    conv_output[17][15] += input[17][16] * 0.061727;
    conv_output[17][15] += input[17][17] * -0.114732;
    conv_output[17][15] += input[18][15] * -0.083850;
    conv_output[17][15] += input[18][16] * 0.038051;
    conv_output[17][15] += input[18][17] * 0.042449;
    conv_output[17][15] += input[19][15] * -0.084779;
    conv_output[17][15] += input[19][16] * 0.206606;
    conv_output[17][15] += input[19][17] * -0.146001;
    conv_output[17][15] = fmaxf(0, conv_output[17][15]);
    conv_output[17][16] = -0.019604;
    conv_output[17][16] += input[17][16] * 0.088207;
    conv_output[17][16] += input[17][17] * 0.061727;
    conv_output[17][16] += input[17][18] * -0.114732;
    conv_output[17][16] += input[18][16] * -0.083850;
    conv_output[17][16] += input[18][17] * 0.038051;
    conv_output[17][16] += input[18][18] * 0.042449;
    conv_output[17][16] += input[19][16] * -0.084779;
    conv_output[17][16] += input[19][17] * 0.206606;
    conv_output[17][16] += input[19][18] * -0.146001;
    conv_output[17][16] = fmaxf(0, conv_output[17][16]);
    conv_output[17][17] = -0.019604;
    conv_output[17][17] += input[17][17] * 0.088207;
    conv_output[17][17] += input[17][18] * 0.061727;
    conv_output[17][17] += input[17][19] * -0.114732;
    conv_output[17][17] += input[18][17] * -0.083850;
    conv_output[17][17] += input[18][18] * 0.038051;
    conv_output[17][17] += input[18][19] * 0.042449;
    conv_output[17][17] += input[19][17] * -0.084779;
    conv_output[17][17] += input[19][18] * 0.206606;
    conv_output[17][17] += input[19][19] * -0.146001;
    conv_output[17][17] = fmaxf(0, conv_output[17][17]);
    conv_output[17][18] = -0.019604;
    conv_output[17][18] += input[17][18] * 0.088207;
    conv_output[17][18] += input[17][19] * 0.061727;
    conv_output[17][18] += input[17][20] * -0.114732;
    conv_output[17][18] += input[18][18] * -0.083850;
    conv_output[17][18] += input[18][19] * 0.038051;
    conv_output[17][18] += input[18][20] * 0.042449;
    conv_output[17][18] += input[19][18] * -0.084779;
    conv_output[17][18] += input[19][19] * 0.206606;
    conv_output[17][18] += input[19][20] * -0.146001;
    conv_output[17][18] = fmaxf(0, conv_output[17][18]);
    conv_output[17][19] = -0.019604;
    conv_output[17][19] += input[17][19] * 0.088207;
    conv_output[17][19] += input[17][20] * 0.061727;
    conv_output[17][19] += input[17][21] * -0.114732;
    conv_output[17][19] += input[18][19] * -0.083850;
    conv_output[17][19] += input[18][20] * 0.038051;
    conv_output[17][19] += input[18][21] * 0.042449;
    conv_output[17][19] += input[19][19] * -0.084779;
    conv_output[17][19] += input[19][20] * 0.206606;
    conv_output[17][19] += input[19][21] * -0.146001;
    conv_output[17][19] = fmaxf(0, conv_output[17][19]);
    conv_output[17][20] = -0.019604;
    conv_output[17][20] += input[17][20] * 0.088207;
    conv_output[17][20] += input[17][21] * 0.061727;
    conv_output[17][20] += input[17][22] * -0.114732;
    conv_output[17][20] += input[18][20] * -0.083850;
    conv_output[17][20] += input[18][21] * 0.038051;
    conv_output[17][20] += input[18][22] * 0.042449;
    conv_output[17][20] += input[19][20] * -0.084779;
    conv_output[17][20] += input[19][21] * 0.206606;
    conv_output[17][20] += input[19][22] * -0.146001;
    conv_output[17][20] = fmaxf(0, conv_output[17][20]);
    conv_output[17][21] = -0.019604;
    conv_output[17][21] += input[17][21] * 0.088207;
    conv_output[17][21] += input[17][22] * 0.061727;
    conv_output[17][21] += input[17][23] * -0.114732;
    conv_output[17][21] += input[18][21] * -0.083850;
    conv_output[17][21] += input[18][22] * 0.038051;
    conv_output[17][21] += input[18][23] * 0.042449;
    conv_output[17][21] += input[19][21] * -0.084779;
    conv_output[17][21] += input[19][22] * 0.206606;
    conv_output[17][21] += input[19][23] * -0.146001;
    conv_output[17][21] = fmaxf(0, conv_output[17][21]);
    conv_output[17][22] = -0.019604;
    conv_output[17][22] += input[17][22] * 0.088207;
    conv_output[17][22] += input[17][23] * 0.061727;
    conv_output[17][22] += input[17][24] * -0.114732;
    conv_output[17][22] += input[18][22] * -0.083850;
    conv_output[17][22] += input[18][23] * 0.038051;
    conv_output[17][22] += input[18][24] * 0.042449;
    conv_output[17][22] += input[19][22] * -0.084779;
    conv_output[17][22] += input[19][23] * 0.206606;
    conv_output[17][22] += input[19][24] * -0.146001;
    conv_output[17][22] = fmaxf(0, conv_output[17][22]);
    conv_output[17][23] = -0.019604;
    conv_output[17][23] += input[17][23] * 0.088207;
    conv_output[17][23] += input[17][24] * 0.061727;
    conv_output[17][23] += input[17][25] * -0.114732;
    conv_output[17][23] += input[18][23] * -0.083850;
    conv_output[17][23] += input[18][24] * 0.038051;
    conv_output[17][23] += input[18][25] * 0.042449;
    conv_output[17][23] += input[19][23] * -0.084779;
    conv_output[17][23] += input[19][24] * 0.206606;
    conv_output[17][23] += input[19][25] * -0.146001;
    conv_output[17][23] = fmaxf(0, conv_output[17][23]);
    conv_output[17][24] = -0.019604;
    conv_output[17][24] += input[17][24] * 0.088207;
    conv_output[17][24] += input[17][25] * 0.061727;
    conv_output[17][24] += input[17][26] * -0.114732;
    conv_output[17][24] += input[18][24] * -0.083850;
    conv_output[17][24] += input[18][25] * 0.038051;
    conv_output[17][24] += input[18][26] * 0.042449;
    conv_output[17][24] += input[19][24] * -0.084779;
    conv_output[17][24] += input[19][25] * 0.206606;
    conv_output[17][24] += input[19][26] * -0.146001;
    conv_output[17][24] = fmaxf(0, conv_output[17][24]);
    conv_output[17][25] = -0.019604;
    conv_output[17][25] += input[17][25] * 0.088207;
    conv_output[17][25] += input[17][26] * 0.061727;
    conv_output[17][25] += input[17][27] * -0.114732;
    conv_output[17][25] += input[18][25] * -0.083850;
    conv_output[17][25] += input[18][26] * 0.038051;
    conv_output[17][25] += input[18][27] * 0.042449;
    conv_output[17][25] += input[19][25] * -0.084779;
    conv_output[17][25] += input[19][26] * 0.206606;
    conv_output[17][25] += input[19][27] * -0.146001;
    conv_output[17][25] = fmaxf(0, conv_output[17][25]);
    conv_output[18][0] = -0.019604;
    conv_output[18][0] += input[18][0] * 0.088207;
    conv_output[18][0] += input[18][1] * 0.061727;
    conv_output[18][0] += input[18][2] * -0.114732;
    conv_output[18][0] += input[19][0] * -0.083850;
    conv_output[18][0] += input[19][1] * 0.038051;
    conv_output[18][0] += input[19][2] * 0.042449;
    conv_output[18][0] += input[20][0] * -0.084779;
    conv_output[18][0] += input[20][1] * 0.206606;
    conv_output[18][0] += input[20][2] * -0.146001;
    conv_output[18][0] = fmaxf(0, conv_output[18][0]);
    conv_output[18][1] = -0.019604;
    conv_output[18][1] += input[18][1] * 0.088207;
    conv_output[18][1] += input[18][2] * 0.061727;
    conv_output[18][1] += input[18][3] * -0.114732;
    conv_output[18][1] += input[19][1] * -0.083850;
    conv_output[18][1] += input[19][2] * 0.038051;
    conv_output[18][1] += input[19][3] * 0.042449;
    conv_output[18][1] += input[20][1] * -0.084779;
    conv_output[18][1] += input[20][2] * 0.206606;
    conv_output[18][1] += input[20][3] * -0.146001;
    conv_output[18][1] = fmaxf(0, conv_output[18][1]);
    conv_output[18][2] = -0.019604;
    conv_output[18][2] += input[18][2] * 0.088207;
    conv_output[18][2] += input[18][3] * 0.061727;
    conv_output[18][2] += input[18][4] * -0.114732;
    conv_output[18][2] += input[19][2] * -0.083850;
    conv_output[18][2] += input[19][3] * 0.038051;
    conv_output[18][2] += input[19][4] * 0.042449;
    conv_output[18][2] += input[20][2] * -0.084779;
    conv_output[18][2] += input[20][3] * 0.206606;
    conv_output[18][2] += input[20][4] * -0.146001;
    conv_output[18][2] = fmaxf(0, conv_output[18][2]);
    conv_output[18][3] = -0.019604;
    conv_output[18][3] += input[18][3] * 0.088207;
    conv_output[18][3] += input[18][4] * 0.061727;
    conv_output[18][3] += input[18][5] * -0.114732;
    conv_output[18][3] += input[19][3] * -0.083850;
    conv_output[18][3] += input[19][4] * 0.038051;
    conv_output[18][3] += input[19][5] * 0.042449;
    conv_output[18][3] += input[20][3] * -0.084779;
    conv_output[18][3] += input[20][4] * 0.206606;
    conv_output[18][3] += input[20][5] * -0.146001;
    conv_output[18][3] = fmaxf(0, conv_output[18][3]);
    conv_output[18][4] = -0.019604;
    conv_output[18][4] += input[18][4] * 0.088207;
    conv_output[18][4] += input[18][5] * 0.061727;
    conv_output[18][4] += input[18][6] * -0.114732;
    conv_output[18][4] += input[19][4] * -0.083850;
    conv_output[18][4] += input[19][5] * 0.038051;
    conv_output[18][4] += input[19][6] * 0.042449;
    conv_output[18][4] += input[20][4] * -0.084779;
    conv_output[18][4] += input[20][5] * 0.206606;
    conv_output[18][4] += input[20][6] * -0.146001;
    conv_output[18][4] = fmaxf(0, conv_output[18][4]);
    conv_output[18][5] = -0.019604;
    conv_output[18][5] += input[18][5] * 0.088207;
    conv_output[18][5] += input[18][6] * 0.061727;
    conv_output[18][5] += input[18][7] * -0.114732;
    conv_output[18][5] += input[19][5] * -0.083850;
    conv_output[18][5] += input[19][6] * 0.038051;
    conv_output[18][5] += input[19][7] * 0.042449;
    conv_output[18][5] += input[20][5] * -0.084779;
    conv_output[18][5] += input[20][6] * 0.206606;
    conv_output[18][5] += input[20][7] * -0.146001;
    conv_output[18][5] = fmaxf(0, conv_output[18][5]);
    conv_output[18][6] = -0.019604;
    conv_output[18][6] += input[18][6] * 0.088207;
    conv_output[18][6] += input[18][7] * 0.061727;
    conv_output[18][6] += input[18][8] * -0.114732;
    conv_output[18][6] += input[19][6] * -0.083850;
    conv_output[18][6] += input[19][7] * 0.038051;
    conv_output[18][6] += input[19][8] * 0.042449;
    conv_output[18][6] += input[20][6] * -0.084779;
    conv_output[18][6] += input[20][7] * 0.206606;
    conv_output[18][6] += input[20][8] * -0.146001;
    conv_output[18][6] = fmaxf(0, conv_output[18][6]);
    conv_output[18][7] = -0.019604;
    conv_output[18][7] += input[18][7] * 0.088207;
    conv_output[18][7] += input[18][8] * 0.061727;
    conv_output[18][7] += input[18][9] * -0.114732;
    conv_output[18][7] += input[19][7] * -0.083850;
    conv_output[18][7] += input[19][8] * 0.038051;
    conv_output[18][7] += input[19][9] * 0.042449;
    conv_output[18][7] += input[20][7] * -0.084779;
    conv_output[18][7] += input[20][8] * 0.206606;
    conv_output[18][7] += input[20][9] * -0.146001;
    conv_output[18][7] = fmaxf(0, conv_output[18][7]);
    conv_output[18][8] = -0.019604;
    conv_output[18][8] += input[18][8] * 0.088207;
    conv_output[18][8] += input[18][9] * 0.061727;
    conv_output[18][8] += input[18][10] * -0.114732;
    conv_output[18][8] += input[19][8] * -0.083850;
    conv_output[18][8] += input[19][9] * 0.038051;
    conv_output[18][8] += input[19][10] * 0.042449;
    conv_output[18][8] += input[20][8] * -0.084779;
    conv_output[18][8] += input[20][9] * 0.206606;
    conv_output[18][8] += input[20][10] * -0.146001;
    conv_output[18][8] = fmaxf(0, conv_output[18][8]);
    conv_output[18][9] = -0.019604;
    conv_output[18][9] += input[18][9] * 0.088207;
    conv_output[18][9] += input[18][10] * 0.061727;
    conv_output[18][9] += input[18][11] * -0.114732;
    conv_output[18][9] += input[19][9] * -0.083850;
    conv_output[18][9] += input[19][10] * 0.038051;
    conv_output[18][9] += input[19][11] * 0.042449;
    conv_output[18][9] += input[20][9] * -0.084779;
    conv_output[18][9] += input[20][10] * 0.206606;
    conv_output[18][9] += input[20][11] * -0.146001;
    conv_output[18][9] = fmaxf(0, conv_output[18][9]);
    conv_output[18][10] = -0.019604;
    conv_output[18][10] += input[18][10] * 0.088207;
    conv_output[18][10] += input[18][11] * 0.061727;
    conv_output[18][10] += input[18][12] * -0.114732;
    conv_output[18][10] += input[19][10] * -0.083850;
    conv_output[18][10] += input[19][11] * 0.038051;
    conv_output[18][10] += input[19][12] * 0.042449;
    conv_output[18][10] += input[20][10] * -0.084779;
    conv_output[18][10] += input[20][11] * 0.206606;
    conv_output[18][10] += input[20][12] * -0.146001;
    conv_output[18][10] = fmaxf(0, conv_output[18][10]);
    conv_output[18][11] = -0.019604;
    conv_output[18][11] += input[18][11] * 0.088207;
    conv_output[18][11] += input[18][12] * 0.061727;
    conv_output[18][11] += input[18][13] * -0.114732;
    conv_output[18][11] += input[19][11] * -0.083850;
    conv_output[18][11] += input[19][12] * 0.038051;
    conv_output[18][11] += input[19][13] * 0.042449;
    conv_output[18][11] += input[20][11] * -0.084779;
    conv_output[18][11] += input[20][12] * 0.206606;
    conv_output[18][11] += input[20][13] * -0.146001;
    conv_output[18][11] = fmaxf(0, conv_output[18][11]);
    conv_output[18][12] = -0.019604;
    conv_output[18][12] += input[18][12] * 0.088207;
    conv_output[18][12] += input[18][13] * 0.061727;
    conv_output[18][12] += input[18][14] * -0.114732;
    conv_output[18][12] += input[19][12] * -0.083850;
    conv_output[18][12] += input[19][13] * 0.038051;
    conv_output[18][12] += input[19][14] * 0.042449;
    conv_output[18][12] += input[20][12] * -0.084779;
    conv_output[18][12] += input[20][13] * 0.206606;
    conv_output[18][12] += input[20][14] * -0.146001;
    conv_output[18][12] = fmaxf(0, conv_output[18][12]);
    conv_output[18][13] = -0.019604;
    conv_output[18][13] += input[18][13] * 0.088207;
    conv_output[18][13] += input[18][14] * 0.061727;
    conv_output[18][13] += input[18][15] * -0.114732;
    conv_output[18][13] += input[19][13] * -0.083850;
    conv_output[18][13] += input[19][14] * 0.038051;
    conv_output[18][13] += input[19][15] * 0.042449;
    conv_output[18][13] += input[20][13] * -0.084779;
    conv_output[18][13] += input[20][14] * 0.206606;
    conv_output[18][13] += input[20][15] * -0.146001;
    conv_output[18][13] = fmaxf(0, conv_output[18][13]);
    conv_output[18][14] = -0.019604;
    conv_output[18][14] += input[18][14] * 0.088207;
    conv_output[18][14] += input[18][15] * 0.061727;
    conv_output[18][14] += input[18][16] * -0.114732;
    conv_output[18][14] += input[19][14] * -0.083850;
    conv_output[18][14] += input[19][15] * 0.038051;
    conv_output[18][14] += input[19][16] * 0.042449;
    conv_output[18][14] += input[20][14] * -0.084779;
    conv_output[18][14] += input[20][15] * 0.206606;
    conv_output[18][14] += input[20][16] * -0.146001;
    conv_output[18][14] = fmaxf(0, conv_output[18][14]);
    conv_output[18][15] = -0.019604;
    conv_output[18][15] += input[18][15] * 0.088207;
    conv_output[18][15] += input[18][16] * 0.061727;
    conv_output[18][15] += input[18][17] * -0.114732;
    conv_output[18][15] += input[19][15] * -0.083850;
    conv_output[18][15] += input[19][16] * 0.038051;
    conv_output[18][15] += input[19][17] * 0.042449;
    conv_output[18][15] += input[20][15] * -0.084779;
    conv_output[18][15] += input[20][16] * 0.206606;
    conv_output[18][15] += input[20][17] * -0.146001;
    conv_output[18][15] = fmaxf(0, conv_output[18][15]);
    conv_output[18][16] = -0.019604;
    conv_output[18][16] += input[18][16] * 0.088207;
    conv_output[18][16] += input[18][17] * 0.061727;
    conv_output[18][16] += input[18][18] * -0.114732;
    conv_output[18][16] += input[19][16] * -0.083850;
    conv_output[18][16] += input[19][17] * 0.038051;
    conv_output[18][16] += input[19][18] * 0.042449;
    conv_output[18][16] += input[20][16] * -0.084779;
    conv_output[18][16] += input[20][17] * 0.206606;
    conv_output[18][16] += input[20][18] * -0.146001;
    conv_output[18][16] = fmaxf(0, conv_output[18][16]);
    conv_output[18][17] = -0.019604;
    conv_output[18][17] += input[18][17] * 0.088207;
    conv_output[18][17] += input[18][18] * 0.061727;
    conv_output[18][17] += input[18][19] * -0.114732;
    conv_output[18][17] += input[19][17] * -0.083850;
    conv_output[18][17] += input[19][18] * 0.038051;
    conv_output[18][17] += input[19][19] * 0.042449;
    conv_output[18][17] += input[20][17] * -0.084779;
    conv_output[18][17] += input[20][18] * 0.206606;
    conv_output[18][17] += input[20][19] * -0.146001;
    conv_output[18][17] = fmaxf(0, conv_output[18][17]);
    conv_output[18][18] = -0.019604;
    conv_output[18][18] += input[18][18] * 0.088207;
    conv_output[18][18] += input[18][19] * 0.061727;
    conv_output[18][18] += input[18][20] * -0.114732;
    conv_output[18][18] += input[19][18] * -0.083850;
    conv_output[18][18] += input[19][19] * 0.038051;
    conv_output[18][18] += input[19][20] * 0.042449;
    conv_output[18][18] += input[20][18] * -0.084779;
    conv_output[18][18] += input[20][19] * 0.206606;
    conv_output[18][18] += input[20][20] * -0.146001;
    conv_output[18][18] = fmaxf(0, conv_output[18][18]);
    conv_output[18][19] = -0.019604;
    conv_output[18][19] += input[18][19] * 0.088207;
    conv_output[18][19] += input[18][20] * 0.061727;
    conv_output[18][19] += input[18][21] * -0.114732;
    conv_output[18][19] += input[19][19] * -0.083850;
    conv_output[18][19] += input[19][20] * 0.038051;
    conv_output[18][19] += input[19][21] * 0.042449;
    conv_output[18][19] += input[20][19] * -0.084779;
    conv_output[18][19] += input[20][20] * 0.206606;
    conv_output[18][19] += input[20][21] * -0.146001;
    conv_output[18][19] = fmaxf(0, conv_output[18][19]);
    conv_output[18][20] = -0.019604;
    conv_output[18][20] += input[18][20] * 0.088207;
    conv_output[18][20] += input[18][21] * 0.061727;
    conv_output[18][20] += input[18][22] * -0.114732;
    conv_output[18][20] += input[19][20] * -0.083850;
    conv_output[18][20] += input[19][21] * 0.038051;
    conv_output[18][20] += input[19][22] * 0.042449;
    conv_output[18][20] += input[20][20] * -0.084779;
    conv_output[18][20] += input[20][21] * 0.206606;
    conv_output[18][20] += input[20][22] * -0.146001;
    conv_output[18][20] = fmaxf(0, conv_output[18][20]);
    conv_output[18][21] = -0.019604;
    conv_output[18][21] += input[18][21] * 0.088207;
    conv_output[18][21] += input[18][22] * 0.061727;
    conv_output[18][21] += input[18][23] * -0.114732;
    conv_output[18][21] += input[19][21] * -0.083850;
    conv_output[18][21] += input[19][22] * 0.038051;
    conv_output[18][21] += input[19][23] * 0.042449;
    conv_output[18][21] += input[20][21] * -0.084779;
    conv_output[18][21] += input[20][22] * 0.206606;
    conv_output[18][21] += input[20][23] * -0.146001;
    conv_output[18][21] = fmaxf(0, conv_output[18][21]);
    conv_output[18][22] = -0.019604;
    conv_output[18][22] += input[18][22] * 0.088207;
    conv_output[18][22] += input[18][23] * 0.061727;
    conv_output[18][22] += input[18][24] * -0.114732;
    conv_output[18][22] += input[19][22] * -0.083850;
    conv_output[18][22] += input[19][23] * 0.038051;
    conv_output[18][22] += input[19][24] * 0.042449;
    conv_output[18][22] += input[20][22] * -0.084779;
    conv_output[18][22] += input[20][23] * 0.206606;
    conv_output[18][22] += input[20][24] * -0.146001;
    conv_output[18][22] = fmaxf(0, conv_output[18][22]);
    conv_output[18][23] = -0.019604;
    conv_output[18][23] += input[18][23] * 0.088207;
    conv_output[18][23] += input[18][24] * 0.061727;
    conv_output[18][23] += input[18][25] * -0.114732;
    conv_output[18][23] += input[19][23] * -0.083850;
    conv_output[18][23] += input[19][24] * 0.038051;
    conv_output[18][23] += input[19][25] * 0.042449;
    conv_output[18][23] += input[20][23] * -0.084779;
    conv_output[18][23] += input[20][24] * 0.206606;
    conv_output[18][23] += input[20][25] * -0.146001;
    conv_output[18][23] = fmaxf(0, conv_output[18][23]);
    conv_output[18][24] = -0.019604;
    conv_output[18][24] += input[18][24] * 0.088207;
    conv_output[18][24] += input[18][25] * 0.061727;
    conv_output[18][24] += input[18][26] * -0.114732;
    conv_output[18][24] += input[19][24] * -0.083850;
    conv_output[18][24] += input[19][25] * 0.038051;
    conv_output[18][24] += input[19][26] * 0.042449;
    conv_output[18][24] += input[20][24] * -0.084779;
    conv_output[18][24] += input[20][25] * 0.206606;
    conv_output[18][24] += input[20][26] * -0.146001;
    conv_output[18][24] = fmaxf(0, conv_output[18][24]);
    conv_output[18][25] = -0.019604;
    conv_output[18][25] += input[18][25] * 0.088207;
    conv_output[18][25] += input[18][26] * 0.061727;
    conv_output[18][25] += input[18][27] * -0.114732;
    conv_output[18][25] += input[19][25] * -0.083850;
    conv_output[18][25] += input[19][26] * 0.038051;
    conv_output[18][25] += input[19][27] * 0.042449;
    conv_output[18][25] += input[20][25] * -0.084779;
    conv_output[18][25] += input[20][26] * 0.206606;
    conv_output[18][25] += input[20][27] * -0.146001;
    conv_output[18][25] = fmaxf(0, conv_output[18][25]);
    conv_output[19][0] = -0.019604;
    conv_output[19][0] += input[19][0] * 0.088207;
    conv_output[19][0] += input[19][1] * 0.061727;
    conv_output[19][0] += input[19][2] * -0.114732;
    conv_output[19][0] += input[20][0] * -0.083850;
    conv_output[19][0] += input[20][1] * 0.038051;
    conv_output[19][0] += input[20][2] * 0.042449;
    conv_output[19][0] += input[21][0] * -0.084779;
    conv_output[19][0] += input[21][1] * 0.206606;
    conv_output[19][0] += input[21][2] * -0.146001;
    conv_output[19][0] = fmaxf(0, conv_output[19][0]);
    conv_output[19][1] = -0.019604;
    conv_output[19][1] += input[19][1] * 0.088207;
    conv_output[19][1] += input[19][2] * 0.061727;
    conv_output[19][1] += input[19][3] * -0.114732;
    conv_output[19][1] += input[20][1] * -0.083850;
    conv_output[19][1] += input[20][2] * 0.038051;
    conv_output[19][1] += input[20][3] * 0.042449;
    conv_output[19][1] += input[21][1] * -0.084779;
    conv_output[19][1] += input[21][2] * 0.206606;
    conv_output[19][1] += input[21][3] * -0.146001;
    conv_output[19][1] = fmaxf(0, conv_output[19][1]);
    conv_output[19][2] = -0.019604;
    conv_output[19][2] += input[19][2] * 0.088207;
    conv_output[19][2] += input[19][3] * 0.061727;
    conv_output[19][2] += input[19][4] * -0.114732;
    conv_output[19][2] += input[20][2] * -0.083850;
    conv_output[19][2] += input[20][3] * 0.038051;
    conv_output[19][2] += input[20][4] * 0.042449;
    conv_output[19][2] += input[21][2] * -0.084779;
    conv_output[19][2] += input[21][3] * 0.206606;
    conv_output[19][2] += input[21][4] * -0.146001;
    conv_output[19][2] = fmaxf(0, conv_output[19][2]);
    conv_output[19][3] = -0.019604;
    conv_output[19][3] += input[19][3] * 0.088207;
    conv_output[19][3] += input[19][4] * 0.061727;
    conv_output[19][3] += input[19][5] * -0.114732;
    conv_output[19][3] += input[20][3] * -0.083850;
    conv_output[19][3] += input[20][4] * 0.038051;
    conv_output[19][3] += input[20][5] * 0.042449;
    conv_output[19][3] += input[21][3] * -0.084779;
    conv_output[19][3] += input[21][4] * 0.206606;
    conv_output[19][3] += input[21][5] * -0.146001;
    conv_output[19][3] = fmaxf(0, conv_output[19][3]);
    conv_output[19][4] = -0.019604;
    conv_output[19][4] += input[19][4] * 0.088207;
    conv_output[19][4] += input[19][5] * 0.061727;
    conv_output[19][4] += input[19][6] * -0.114732;
    conv_output[19][4] += input[20][4] * -0.083850;
    conv_output[19][4] += input[20][5] * 0.038051;
    conv_output[19][4] += input[20][6] * 0.042449;
    conv_output[19][4] += input[21][4] * -0.084779;
    conv_output[19][4] += input[21][5] * 0.206606;
    conv_output[19][4] += input[21][6] * -0.146001;
    conv_output[19][4] = fmaxf(0, conv_output[19][4]);
    conv_output[19][5] = -0.019604;
    conv_output[19][5] += input[19][5] * 0.088207;
    conv_output[19][5] += input[19][6] * 0.061727;
    conv_output[19][5] += input[19][7] * -0.114732;
    conv_output[19][5] += input[20][5] * -0.083850;
    conv_output[19][5] += input[20][6] * 0.038051;
    conv_output[19][5] += input[20][7] * 0.042449;
    conv_output[19][5] += input[21][5] * -0.084779;
    conv_output[19][5] += input[21][6] * 0.206606;
    conv_output[19][5] += input[21][7] * -0.146001;
    conv_output[19][5] = fmaxf(0, conv_output[19][5]);
    conv_output[19][6] = -0.019604;
    conv_output[19][6] += input[19][6] * 0.088207;
    conv_output[19][6] += input[19][7] * 0.061727;
    conv_output[19][6] += input[19][8] * -0.114732;
    conv_output[19][6] += input[20][6] * -0.083850;
    conv_output[19][6] += input[20][7] * 0.038051;
    conv_output[19][6] += input[20][8] * 0.042449;
    conv_output[19][6] += input[21][6] * -0.084779;
    conv_output[19][6] += input[21][7] * 0.206606;
    conv_output[19][6] += input[21][8] * -0.146001;
    conv_output[19][6] = fmaxf(0, conv_output[19][6]);
    conv_output[19][7] = -0.019604;
    conv_output[19][7] += input[19][7] * 0.088207;
    conv_output[19][7] += input[19][8] * 0.061727;
    conv_output[19][7] += input[19][9] * -0.114732;
    conv_output[19][7] += input[20][7] * -0.083850;
    conv_output[19][7] += input[20][8] * 0.038051;
    conv_output[19][7] += input[20][9] * 0.042449;
    conv_output[19][7] += input[21][7] * -0.084779;
    conv_output[19][7] += input[21][8] * 0.206606;
    conv_output[19][7] += input[21][9] * -0.146001;
    conv_output[19][7] = fmaxf(0, conv_output[19][7]);
    conv_output[19][8] = -0.019604;
    conv_output[19][8] += input[19][8] * 0.088207;
    conv_output[19][8] += input[19][9] * 0.061727;
    conv_output[19][8] += input[19][10] * -0.114732;
    conv_output[19][8] += input[20][8] * -0.083850;
    conv_output[19][8] += input[20][9] * 0.038051;
    conv_output[19][8] += input[20][10] * 0.042449;
    conv_output[19][8] += input[21][8] * -0.084779;
    conv_output[19][8] += input[21][9] * 0.206606;
    conv_output[19][8] += input[21][10] * -0.146001;
    conv_output[19][8] = fmaxf(0, conv_output[19][8]);
    conv_output[19][9] = -0.019604;
    conv_output[19][9] += input[19][9] * 0.088207;
    conv_output[19][9] += input[19][10] * 0.061727;
    conv_output[19][9] += input[19][11] * -0.114732;
    conv_output[19][9] += input[20][9] * -0.083850;
    conv_output[19][9] += input[20][10] * 0.038051;
    conv_output[19][9] += input[20][11] * 0.042449;
    conv_output[19][9] += input[21][9] * -0.084779;
    conv_output[19][9] += input[21][10] * 0.206606;
    conv_output[19][9] += input[21][11] * -0.146001;
    conv_output[19][9] = fmaxf(0, conv_output[19][9]);
    conv_output[19][10] = -0.019604;
    conv_output[19][10] += input[19][10] * 0.088207;
    conv_output[19][10] += input[19][11] * 0.061727;
    conv_output[19][10] += input[19][12] * -0.114732;
    conv_output[19][10] += input[20][10] * -0.083850;
    conv_output[19][10] += input[20][11] * 0.038051;
    conv_output[19][10] += input[20][12] * 0.042449;
    conv_output[19][10] += input[21][10] * -0.084779;
    conv_output[19][10] += input[21][11] * 0.206606;
    conv_output[19][10] += input[21][12] * -0.146001;
    conv_output[19][10] = fmaxf(0, conv_output[19][10]);
    conv_output[19][11] = -0.019604;
    conv_output[19][11] += input[19][11] * 0.088207;
    conv_output[19][11] += input[19][12] * 0.061727;
    conv_output[19][11] += input[19][13] * -0.114732;
    conv_output[19][11] += input[20][11] * -0.083850;
    conv_output[19][11] += input[20][12] * 0.038051;
    conv_output[19][11] += input[20][13] * 0.042449;
    conv_output[19][11] += input[21][11] * -0.084779;
    conv_output[19][11] += input[21][12] * 0.206606;
    conv_output[19][11] += input[21][13] * -0.146001;
    conv_output[19][11] = fmaxf(0, conv_output[19][11]);
    conv_output[19][12] = -0.019604;
    conv_output[19][12] += input[19][12] * 0.088207;
    conv_output[19][12] += input[19][13] * 0.061727;
    conv_output[19][12] += input[19][14] * -0.114732;
    conv_output[19][12] += input[20][12] * -0.083850;
    conv_output[19][12] += input[20][13] * 0.038051;
    conv_output[19][12] += input[20][14] * 0.042449;
    conv_output[19][12] += input[21][12] * -0.084779;
    conv_output[19][12] += input[21][13] * 0.206606;
    conv_output[19][12] += input[21][14] * -0.146001;
    conv_output[19][12] = fmaxf(0, conv_output[19][12]);
    conv_output[19][13] = -0.019604;
    conv_output[19][13] += input[19][13] * 0.088207;
    conv_output[19][13] += input[19][14] * 0.061727;
    conv_output[19][13] += input[19][15] * -0.114732;
    conv_output[19][13] += input[20][13] * -0.083850;
    conv_output[19][13] += input[20][14] * 0.038051;
    conv_output[19][13] += input[20][15] * 0.042449;
    conv_output[19][13] += input[21][13] * -0.084779;
    conv_output[19][13] += input[21][14] * 0.206606;
    conv_output[19][13] += input[21][15] * -0.146001;
    conv_output[19][13] = fmaxf(0, conv_output[19][13]);
    conv_output[19][14] = -0.019604;
    conv_output[19][14] += input[19][14] * 0.088207;
    conv_output[19][14] += input[19][15] * 0.061727;
    conv_output[19][14] += input[19][16] * -0.114732;
    conv_output[19][14] += input[20][14] * -0.083850;
    conv_output[19][14] += input[20][15] * 0.038051;
    conv_output[19][14] += input[20][16] * 0.042449;
    conv_output[19][14] += input[21][14] * -0.084779;
    conv_output[19][14] += input[21][15] * 0.206606;
    conv_output[19][14] += input[21][16] * -0.146001;
    conv_output[19][14] = fmaxf(0, conv_output[19][14]);
    conv_output[19][15] = -0.019604;
    conv_output[19][15] += input[19][15] * 0.088207;
    conv_output[19][15] += input[19][16] * 0.061727;
    conv_output[19][15] += input[19][17] * -0.114732;
    conv_output[19][15] += input[20][15] * -0.083850;
    conv_output[19][15] += input[20][16] * 0.038051;
    conv_output[19][15] += input[20][17] * 0.042449;
    conv_output[19][15] += input[21][15] * -0.084779;
    conv_output[19][15] += input[21][16] * 0.206606;
    conv_output[19][15] += input[21][17] * -0.146001;
    conv_output[19][15] = fmaxf(0, conv_output[19][15]);
    conv_output[19][16] = -0.019604;
    conv_output[19][16] += input[19][16] * 0.088207;
    conv_output[19][16] += input[19][17] * 0.061727;
    conv_output[19][16] += input[19][18] * -0.114732;
    conv_output[19][16] += input[20][16] * -0.083850;
    conv_output[19][16] += input[20][17] * 0.038051;
    conv_output[19][16] += input[20][18] * 0.042449;
    conv_output[19][16] += input[21][16] * -0.084779;
    conv_output[19][16] += input[21][17] * 0.206606;
    conv_output[19][16] += input[21][18] * -0.146001;
    conv_output[19][16] = fmaxf(0, conv_output[19][16]);
    conv_output[19][17] = -0.019604;
    conv_output[19][17] += input[19][17] * 0.088207;
    conv_output[19][17] += input[19][18] * 0.061727;
    conv_output[19][17] += input[19][19] * -0.114732;
    conv_output[19][17] += input[20][17] * -0.083850;
    conv_output[19][17] += input[20][18] * 0.038051;
    conv_output[19][17] += input[20][19] * 0.042449;
    conv_output[19][17] += input[21][17] * -0.084779;
    conv_output[19][17] += input[21][18] * 0.206606;
    conv_output[19][17] += input[21][19] * -0.146001;
    conv_output[19][17] = fmaxf(0, conv_output[19][17]);
    conv_output[19][18] = -0.019604;
    conv_output[19][18] += input[19][18] * 0.088207;
    conv_output[19][18] += input[19][19] * 0.061727;
    conv_output[19][18] += input[19][20] * -0.114732;
    conv_output[19][18] += input[20][18] * -0.083850;
    conv_output[19][18] += input[20][19] * 0.038051;
    conv_output[19][18] += input[20][20] * 0.042449;
    conv_output[19][18] += input[21][18] * -0.084779;
    conv_output[19][18] += input[21][19] * 0.206606;
    conv_output[19][18] += input[21][20] * -0.146001;
    conv_output[19][18] = fmaxf(0, conv_output[19][18]);
    conv_output[19][19] = -0.019604;
    conv_output[19][19] += input[19][19] * 0.088207;
    conv_output[19][19] += input[19][20] * 0.061727;
    conv_output[19][19] += input[19][21] * -0.114732;
    conv_output[19][19] += input[20][19] * -0.083850;
    conv_output[19][19] += input[20][20] * 0.038051;
    conv_output[19][19] += input[20][21] * 0.042449;
    conv_output[19][19] += input[21][19] * -0.084779;
    conv_output[19][19] += input[21][20] * 0.206606;
    conv_output[19][19] += input[21][21] * -0.146001;
    conv_output[19][19] = fmaxf(0, conv_output[19][19]);
    conv_output[19][20] = -0.019604;
    conv_output[19][20] += input[19][20] * 0.088207;
    conv_output[19][20] += input[19][21] * 0.061727;
    conv_output[19][20] += input[19][22] * -0.114732;
    conv_output[19][20] += input[20][20] * -0.083850;
    conv_output[19][20] += input[20][21] * 0.038051;
    conv_output[19][20] += input[20][22] * 0.042449;
    conv_output[19][20] += input[21][20] * -0.084779;
    conv_output[19][20] += input[21][21] * 0.206606;
    conv_output[19][20] += input[21][22] * -0.146001;
    conv_output[19][20] = fmaxf(0, conv_output[19][20]);
    conv_output[19][21] = -0.019604;
    conv_output[19][21] += input[19][21] * 0.088207;
    conv_output[19][21] += input[19][22] * 0.061727;
    conv_output[19][21] += input[19][23] * -0.114732;
    conv_output[19][21] += input[20][21] * -0.083850;
    conv_output[19][21] += input[20][22] * 0.038051;
    conv_output[19][21] += input[20][23] * 0.042449;
    conv_output[19][21] += input[21][21] * -0.084779;
    conv_output[19][21] += input[21][22] * 0.206606;
    conv_output[19][21] += input[21][23] * -0.146001;
    conv_output[19][21] = fmaxf(0, conv_output[19][21]);
    conv_output[19][22] = -0.019604;
    conv_output[19][22] += input[19][22] * 0.088207;
    conv_output[19][22] += input[19][23] * 0.061727;
    conv_output[19][22] += input[19][24] * -0.114732;
    conv_output[19][22] += input[20][22] * -0.083850;
    conv_output[19][22] += input[20][23] * 0.038051;
    conv_output[19][22] += input[20][24] * 0.042449;
    conv_output[19][22] += input[21][22] * -0.084779;
    conv_output[19][22] += input[21][23] * 0.206606;
    conv_output[19][22] += input[21][24] * -0.146001;
    conv_output[19][22] = fmaxf(0, conv_output[19][22]);
    conv_output[19][23] = -0.019604;
    conv_output[19][23] += input[19][23] * 0.088207;
    conv_output[19][23] += input[19][24] * 0.061727;
    conv_output[19][23] += input[19][25] * -0.114732;
    conv_output[19][23] += input[20][23] * -0.083850;
    conv_output[19][23] += input[20][24] * 0.038051;
    conv_output[19][23] += input[20][25] * 0.042449;
    conv_output[19][23] += input[21][23] * -0.084779;
    conv_output[19][23] += input[21][24] * 0.206606;
    conv_output[19][23] += input[21][25] * -0.146001;
    conv_output[19][23] = fmaxf(0, conv_output[19][23]);
    conv_output[19][24] = -0.019604;
    conv_output[19][24] += input[19][24] * 0.088207;
    conv_output[19][24] += input[19][25] * 0.061727;
    conv_output[19][24] += input[19][26] * -0.114732;
    conv_output[19][24] += input[20][24] * -0.083850;
    conv_output[19][24] += input[20][25] * 0.038051;
    conv_output[19][24] += input[20][26] * 0.042449;
    conv_output[19][24] += input[21][24] * -0.084779;
    conv_output[19][24] += input[21][25] * 0.206606;
    conv_output[19][24] += input[21][26] * -0.146001;
    conv_output[19][24] = fmaxf(0, conv_output[19][24]);
    conv_output[19][25] = -0.019604;
    conv_output[19][25] += input[19][25] * 0.088207;
    conv_output[19][25] += input[19][26] * 0.061727;
    conv_output[19][25] += input[19][27] * -0.114732;
    conv_output[19][25] += input[20][25] * -0.083850;
    conv_output[19][25] += input[20][26] * 0.038051;
    conv_output[19][25] += input[20][27] * 0.042449;
    conv_output[19][25] += input[21][25] * -0.084779;
    conv_output[19][25] += input[21][26] * 0.206606;
    conv_output[19][25] += input[21][27] * -0.146001;
    conv_output[19][25] = fmaxf(0, conv_output[19][25]);
    conv_output[20][0] = -0.019604;
    conv_output[20][0] += input[20][0] * 0.088207;
    conv_output[20][0] += input[20][1] * 0.061727;
    conv_output[20][0] += input[20][2] * -0.114732;
    conv_output[20][0] += input[21][0] * -0.083850;
    conv_output[20][0] += input[21][1] * 0.038051;
    conv_output[20][0] += input[21][2] * 0.042449;
    conv_output[20][0] += input[22][0] * -0.084779;
    conv_output[20][0] += input[22][1] * 0.206606;
    conv_output[20][0] += input[22][2] * -0.146001;
    conv_output[20][0] = fmaxf(0, conv_output[20][0]);
    conv_output[20][1] = -0.019604;
    conv_output[20][1] += input[20][1] * 0.088207;
    conv_output[20][1] += input[20][2] * 0.061727;
    conv_output[20][1] += input[20][3] * -0.114732;
    conv_output[20][1] += input[21][1] * -0.083850;
    conv_output[20][1] += input[21][2] * 0.038051;
    conv_output[20][1] += input[21][3] * 0.042449;
    conv_output[20][1] += input[22][1] * -0.084779;
    conv_output[20][1] += input[22][2] * 0.206606;
    conv_output[20][1] += input[22][3] * -0.146001;
    conv_output[20][1] = fmaxf(0, conv_output[20][1]);
    conv_output[20][2] = -0.019604;
    conv_output[20][2] += input[20][2] * 0.088207;
    conv_output[20][2] += input[20][3] * 0.061727;
    conv_output[20][2] += input[20][4] * -0.114732;
    conv_output[20][2] += input[21][2] * -0.083850;
    conv_output[20][2] += input[21][3] * 0.038051;
    conv_output[20][2] += input[21][4] * 0.042449;
    conv_output[20][2] += input[22][2] * -0.084779;
    conv_output[20][2] += input[22][3] * 0.206606;
    conv_output[20][2] += input[22][4] * -0.146001;
    conv_output[20][2] = fmaxf(0, conv_output[20][2]);
    conv_output[20][3] = -0.019604;
    conv_output[20][3] += input[20][3] * 0.088207;
    conv_output[20][3] += input[20][4] * 0.061727;
    conv_output[20][3] += input[20][5] * -0.114732;
    conv_output[20][3] += input[21][3] * -0.083850;
    conv_output[20][3] += input[21][4] * 0.038051;
    conv_output[20][3] += input[21][5] * 0.042449;
    conv_output[20][3] += input[22][3] * -0.084779;
    conv_output[20][3] += input[22][4] * 0.206606;
    conv_output[20][3] += input[22][5] * -0.146001;
    conv_output[20][3] = fmaxf(0, conv_output[20][3]);
    conv_output[20][4] = -0.019604;
    conv_output[20][4] += input[20][4] * 0.088207;
    conv_output[20][4] += input[20][5] * 0.061727;
    conv_output[20][4] += input[20][6] * -0.114732;
    conv_output[20][4] += input[21][4] * -0.083850;
    conv_output[20][4] += input[21][5] * 0.038051;
    conv_output[20][4] += input[21][6] * 0.042449;
    conv_output[20][4] += input[22][4] * -0.084779;
    conv_output[20][4] += input[22][5] * 0.206606;
    conv_output[20][4] += input[22][6] * -0.146001;
    conv_output[20][4] = fmaxf(0, conv_output[20][4]);
    conv_output[20][5] = -0.019604;
    conv_output[20][5] += input[20][5] * 0.088207;
    conv_output[20][5] += input[20][6] * 0.061727;
    conv_output[20][5] += input[20][7] * -0.114732;
    conv_output[20][5] += input[21][5] * -0.083850;
    conv_output[20][5] += input[21][6] * 0.038051;
    conv_output[20][5] += input[21][7] * 0.042449;
    conv_output[20][5] += input[22][5] * -0.084779;
    conv_output[20][5] += input[22][6] * 0.206606;
    conv_output[20][5] += input[22][7] * -0.146001;
    conv_output[20][5] = fmaxf(0, conv_output[20][5]);
    conv_output[20][6] = -0.019604;
    conv_output[20][6] += input[20][6] * 0.088207;
    conv_output[20][6] += input[20][7] * 0.061727;
    conv_output[20][6] += input[20][8] * -0.114732;
    conv_output[20][6] += input[21][6] * -0.083850;
    conv_output[20][6] += input[21][7] * 0.038051;
    conv_output[20][6] += input[21][8] * 0.042449;
    conv_output[20][6] += input[22][6] * -0.084779;
    conv_output[20][6] += input[22][7] * 0.206606;
    conv_output[20][6] += input[22][8] * -0.146001;
    conv_output[20][6] = fmaxf(0, conv_output[20][6]);
    conv_output[20][7] = -0.019604;
    conv_output[20][7] += input[20][7] * 0.088207;
    conv_output[20][7] += input[20][8] * 0.061727;
    conv_output[20][7] += input[20][9] * -0.114732;
    conv_output[20][7] += input[21][7] * -0.083850;
    conv_output[20][7] += input[21][8] * 0.038051;
    conv_output[20][7] += input[21][9] * 0.042449;
    conv_output[20][7] += input[22][7] * -0.084779;
    conv_output[20][7] += input[22][8] * 0.206606;
    conv_output[20][7] += input[22][9] * -0.146001;
    conv_output[20][7] = fmaxf(0, conv_output[20][7]);
    conv_output[20][8] = -0.019604;
    conv_output[20][8] += input[20][8] * 0.088207;
    conv_output[20][8] += input[20][9] * 0.061727;
    conv_output[20][8] += input[20][10] * -0.114732;
    conv_output[20][8] += input[21][8] * -0.083850;
    conv_output[20][8] += input[21][9] * 0.038051;
    conv_output[20][8] += input[21][10] * 0.042449;
    conv_output[20][8] += input[22][8] * -0.084779;
    conv_output[20][8] += input[22][9] * 0.206606;
    conv_output[20][8] += input[22][10] * -0.146001;
    conv_output[20][8] = fmaxf(0, conv_output[20][8]);
    conv_output[20][9] = -0.019604;
    conv_output[20][9] += input[20][9] * 0.088207;
    conv_output[20][9] += input[20][10] * 0.061727;
    conv_output[20][9] += input[20][11] * -0.114732;
    conv_output[20][9] += input[21][9] * -0.083850;
    conv_output[20][9] += input[21][10] * 0.038051;
    conv_output[20][9] += input[21][11] * 0.042449;
    conv_output[20][9] += input[22][9] * -0.084779;
    conv_output[20][9] += input[22][10] * 0.206606;
    conv_output[20][9] += input[22][11] * -0.146001;
    conv_output[20][9] = fmaxf(0, conv_output[20][9]);
    conv_output[20][10] = -0.019604;
    conv_output[20][10] += input[20][10] * 0.088207;
    conv_output[20][10] += input[20][11] * 0.061727;
    conv_output[20][10] += input[20][12] * -0.114732;
    conv_output[20][10] += input[21][10] * -0.083850;
    conv_output[20][10] += input[21][11] * 0.038051;
    conv_output[20][10] += input[21][12] * 0.042449;
    conv_output[20][10] += input[22][10] * -0.084779;
    conv_output[20][10] += input[22][11] * 0.206606;
    conv_output[20][10] += input[22][12] * -0.146001;
    conv_output[20][10] = fmaxf(0, conv_output[20][10]);
    conv_output[20][11] = -0.019604;
    conv_output[20][11] += input[20][11] * 0.088207;
    conv_output[20][11] += input[20][12] * 0.061727;
    conv_output[20][11] += input[20][13] * -0.114732;
    conv_output[20][11] += input[21][11] * -0.083850;
    conv_output[20][11] += input[21][12] * 0.038051;
    conv_output[20][11] += input[21][13] * 0.042449;
    conv_output[20][11] += input[22][11] * -0.084779;
    conv_output[20][11] += input[22][12] * 0.206606;
    conv_output[20][11] += input[22][13] * -0.146001;
    conv_output[20][11] = fmaxf(0, conv_output[20][11]);
    conv_output[20][12] = -0.019604;
    conv_output[20][12] += input[20][12] * 0.088207;
    conv_output[20][12] += input[20][13] * 0.061727;
    conv_output[20][12] += input[20][14] * -0.114732;
    conv_output[20][12] += input[21][12] * -0.083850;
    conv_output[20][12] += input[21][13] * 0.038051;
    conv_output[20][12] += input[21][14] * 0.042449;
    conv_output[20][12] += input[22][12] * -0.084779;
    conv_output[20][12] += input[22][13] * 0.206606;
    conv_output[20][12] += input[22][14] * -0.146001;
    conv_output[20][12] = fmaxf(0, conv_output[20][12]);
    conv_output[20][13] = -0.019604;
    conv_output[20][13] += input[20][13] * 0.088207;
    conv_output[20][13] += input[20][14] * 0.061727;
    conv_output[20][13] += input[20][15] * -0.114732;
    conv_output[20][13] += input[21][13] * -0.083850;
    conv_output[20][13] += input[21][14] * 0.038051;
    conv_output[20][13] += input[21][15] * 0.042449;
    conv_output[20][13] += input[22][13] * -0.084779;
    conv_output[20][13] += input[22][14] * 0.206606;
    conv_output[20][13] += input[22][15] * -0.146001;
    conv_output[20][13] = fmaxf(0, conv_output[20][13]);
    conv_output[20][14] = -0.019604;
    conv_output[20][14] += input[20][14] * 0.088207;
    conv_output[20][14] += input[20][15] * 0.061727;
    conv_output[20][14] += input[20][16] * -0.114732;
    conv_output[20][14] += input[21][14] * -0.083850;
    conv_output[20][14] += input[21][15] * 0.038051;
    conv_output[20][14] += input[21][16] * 0.042449;
    conv_output[20][14] += input[22][14] * -0.084779;
    conv_output[20][14] += input[22][15] * 0.206606;
    conv_output[20][14] += input[22][16] * -0.146001;
    conv_output[20][14] = fmaxf(0, conv_output[20][14]);
    conv_output[20][15] = -0.019604;
    conv_output[20][15] += input[20][15] * 0.088207;
    conv_output[20][15] += input[20][16] * 0.061727;
    conv_output[20][15] += input[20][17] * -0.114732;
    conv_output[20][15] += input[21][15] * -0.083850;
    conv_output[20][15] += input[21][16] * 0.038051;
    conv_output[20][15] += input[21][17] * 0.042449;
    conv_output[20][15] += input[22][15] * -0.084779;
    conv_output[20][15] += input[22][16] * 0.206606;
    conv_output[20][15] += input[22][17] * -0.146001;
    conv_output[20][15] = fmaxf(0, conv_output[20][15]);
    conv_output[20][16] = -0.019604;
    conv_output[20][16] += input[20][16] * 0.088207;
    conv_output[20][16] += input[20][17] * 0.061727;
    conv_output[20][16] += input[20][18] * -0.114732;
    conv_output[20][16] += input[21][16] * -0.083850;
    conv_output[20][16] += input[21][17] * 0.038051;
    conv_output[20][16] += input[21][18] * 0.042449;
    conv_output[20][16] += input[22][16] * -0.084779;
    conv_output[20][16] += input[22][17] * 0.206606;
    conv_output[20][16] += input[22][18] * -0.146001;
    conv_output[20][16] = fmaxf(0, conv_output[20][16]);
    conv_output[20][17] = -0.019604;
    conv_output[20][17] += input[20][17] * 0.088207;
    conv_output[20][17] += input[20][18] * 0.061727;
    conv_output[20][17] += input[20][19] * -0.114732;
    conv_output[20][17] += input[21][17] * -0.083850;
    conv_output[20][17] += input[21][18] * 0.038051;
    conv_output[20][17] += input[21][19] * 0.042449;
    conv_output[20][17] += input[22][17] * -0.084779;
    conv_output[20][17] += input[22][18] * 0.206606;
    conv_output[20][17] += input[22][19] * -0.146001;
    conv_output[20][17] = fmaxf(0, conv_output[20][17]);
    conv_output[20][18] = -0.019604;
    conv_output[20][18] += input[20][18] * 0.088207;
    conv_output[20][18] += input[20][19] * 0.061727;
    conv_output[20][18] += input[20][20] * -0.114732;
    conv_output[20][18] += input[21][18] * -0.083850;
    conv_output[20][18] += input[21][19] * 0.038051;
    conv_output[20][18] += input[21][20] * 0.042449;
    conv_output[20][18] += input[22][18] * -0.084779;
    conv_output[20][18] += input[22][19] * 0.206606;
    conv_output[20][18] += input[22][20] * -0.146001;
    conv_output[20][18] = fmaxf(0, conv_output[20][18]);
    conv_output[20][19] = -0.019604;
    conv_output[20][19] += input[20][19] * 0.088207;
    conv_output[20][19] += input[20][20] * 0.061727;
    conv_output[20][19] += input[20][21] * -0.114732;
    conv_output[20][19] += input[21][19] * -0.083850;
    conv_output[20][19] += input[21][20] * 0.038051;
    conv_output[20][19] += input[21][21] * 0.042449;
    conv_output[20][19] += input[22][19] * -0.084779;
    conv_output[20][19] += input[22][20] * 0.206606;
    conv_output[20][19] += input[22][21] * -0.146001;
    conv_output[20][19] = fmaxf(0, conv_output[20][19]);
    conv_output[20][20] = -0.019604;
    conv_output[20][20] += input[20][20] * 0.088207;
    conv_output[20][20] += input[20][21] * 0.061727;
    conv_output[20][20] += input[20][22] * -0.114732;
    conv_output[20][20] += input[21][20] * -0.083850;
    conv_output[20][20] += input[21][21] * 0.038051;
    conv_output[20][20] += input[21][22] * 0.042449;
    conv_output[20][20] += input[22][20] * -0.084779;
    conv_output[20][20] += input[22][21] * 0.206606;
    conv_output[20][20] += input[22][22] * -0.146001;
    conv_output[20][20] = fmaxf(0, conv_output[20][20]);
    conv_output[20][21] = -0.019604;
    conv_output[20][21] += input[20][21] * 0.088207;
    conv_output[20][21] += input[20][22] * 0.061727;
    conv_output[20][21] += input[20][23] * -0.114732;
    conv_output[20][21] += input[21][21] * -0.083850;
    conv_output[20][21] += input[21][22] * 0.038051;
    conv_output[20][21] += input[21][23] * 0.042449;
    conv_output[20][21] += input[22][21] * -0.084779;
    conv_output[20][21] += input[22][22] * 0.206606;
    conv_output[20][21] += input[22][23] * -0.146001;
    conv_output[20][21] = fmaxf(0, conv_output[20][21]);
    conv_output[20][22] = -0.019604;
    conv_output[20][22] += input[20][22] * 0.088207;
    conv_output[20][22] += input[20][23] * 0.061727;
    conv_output[20][22] += input[20][24] * -0.114732;
    conv_output[20][22] += input[21][22] * -0.083850;
    conv_output[20][22] += input[21][23] * 0.038051;
    conv_output[20][22] += input[21][24] * 0.042449;
    conv_output[20][22] += input[22][22] * -0.084779;
    conv_output[20][22] += input[22][23] * 0.206606;
    conv_output[20][22] += input[22][24] * -0.146001;
    conv_output[20][22] = fmaxf(0, conv_output[20][22]);
    conv_output[20][23] = -0.019604;
    conv_output[20][23] += input[20][23] * 0.088207;
    conv_output[20][23] += input[20][24] * 0.061727;
    conv_output[20][23] += input[20][25] * -0.114732;
    conv_output[20][23] += input[21][23] * -0.083850;
    conv_output[20][23] += input[21][24] * 0.038051;
    conv_output[20][23] += input[21][25] * 0.042449;
    conv_output[20][23] += input[22][23] * -0.084779;
    conv_output[20][23] += input[22][24] * 0.206606;
    conv_output[20][23] += input[22][25] * -0.146001;
    conv_output[20][23] = fmaxf(0, conv_output[20][23]);
    conv_output[20][24] = -0.019604;
    conv_output[20][24] += input[20][24] * 0.088207;
    conv_output[20][24] += input[20][25] * 0.061727;
    conv_output[20][24] += input[20][26] * -0.114732;
    conv_output[20][24] += input[21][24] * -0.083850;
    conv_output[20][24] += input[21][25] * 0.038051;
    conv_output[20][24] += input[21][26] * 0.042449;
    conv_output[20][24] += input[22][24] * -0.084779;
    conv_output[20][24] += input[22][25] * 0.206606;
    conv_output[20][24] += input[22][26] * -0.146001;
    conv_output[20][24] = fmaxf(0, conv_output[20][24]);
    conv_output[20][25] = -0.019604;
    conv_output[20][25] += input[20][25] * 0.088207;
    conv_output[20][25] += input[20][26] * 0.061727;
    conv_output[20][25] += input[20][27] * -0.114732;
    conv_output[20][25] += input[21][25] * -0.083850;
    conv_output[20][25] += input[21][26] * 0.038051;
    conv_output[20][25] += input[21][27] * 0.042449;
    conv_output[20][25] += input[22][25] * -0.084779;
    conv_output[20][25] += input[22][26] * 0.206606;
    conv_output[20][25] += input[22][27] * -0.146001;
    conv_output[20][25] = fmaxf(0, conv_output[20][25]);
    conv_output[21][0] = -0.019604;
    conv_output[21][0] += input[21][0] * 0.088207;
    conv_output[21][0] += input[21][1] * 0.061727;
    conv_output[21][0] += input[21][2] * -0.114732;
    conv_output[21][0] += input[22][0] * -0.083850;
    conv_output[21][0] += input[22][1] * 0.038051;
    conv_output[21][0] += input[22][2] * 0.042449;
    conv_output[21][0] += input[23][0] * -0.084779;
    conv_output[21][0] += input[23][1] * 0.206606;
    conv_output[21][0] += input[23][2] * -0.146001;
    conv_output[21][0] = fmaxf(0, conv_output[21][0]);
    conv_output[21][1] = -0.019604;
    conv_output[21][1] += input[21][1] * 0.088207;
    conv_output[21][1] += input[21][2] * 0.061727;
    conv_output[21][1] += input[21][3] * -0.114732;
    conv_output[21][1] += input[22][1] * -0.083850;
    conv_output[21][1] += input[22][2] * 0.038051;
    conv_output[21][1] += input[22][3] * 0.042449;
    conv_output[21][1] += input[23][1] * -0.084779;
    conv_output[21][1] += input[23][2] * 0.206606;
    conv_output[21][1] += input[23][3] * -0.146001;
    conv_output[21][1] = fmaxf(0, conv_output[21][1]);
    conv_output[21][2] = -0.019604;
    conv_output[21][2] += input[21][2] * 0.088207;
    conv_output[21][2] += input[21][3] * 0.061727;
    conv_output[21][2] += input[21][4] * -0.114732;
    conv_output[21][2] += input[22][2] * -0.083850;
    conv_output[21][2] += input[22][3] * 0.038051;
    conv_output[21][2] += input[22][4] * 0.042449;
    conv_output[21][2] += input[23][2] * -0.084779;
    conv_output[21][2] += input[23][3] * 0.206606;
    conv_output[21][2] += input[23][4] * -0.146001;
    conv_output[21][2] = fmaxf(0, conv_output[21][2]);
    conv_output[21][3] = -0.019604;
    conv_output[21][3] += input[21][3] * 0.088207;
    conv_output[21][3] += input[21][4] * 0.061727;
    conv_output[21][3] += input[21][5] * -0.114732;
    conv_output[21][3] += input[22][3] * -0.083850;
    conv_output[21][3] += input[22][4] * 0.038051;
    conv_output[21][3] += input[22][5] * 0.042449;
    conv_output[21][3] += input[23][3] * -0.084779;
    conv_output[21][3] += input[23][4] * 0.206606;
    conv_output[21][3] += input[23][5] * -0.146001;
    conv_output[21][3] = fmaxf(0, conv_output[21][3]);
    conv_output[21][4] = -0.019604;
    conv_output[21][4] += input[21][4] * 0.088207;
    conv_output[21][4] += input[21][5] * 0.061727;
    conv_output[21][4] += input[21][6] * -0.114732;
    conv_output[21][4] += input[22][4] * -0.083850;
    conv_output[21][4] += input[22][5] * 0.038051;
    conv_output[21][4] += input[22][6] * 0.042449;
    conv_output[21][4] += input[23][4] * -0.084779;
    conv_output[21][4] += input[23][5] * 0.206606;
    conv_output[21][4] += input[23][6] * -0.146001;
    conv_output[21][4] = fmaxf(0, conv_output[21][4]);
    conv_output[21][5] = -0.019604;
    conv_output[21][5] += input[21][5] * 0.088207;
    conv_output[21][5] += input[21][6] * 0.061727;
    conv_output[21][5] += input[21][7] * -0.114732;
    conv_output[21][5] += input[22][5] * -0.083850;
    conv_output[21][5] += input[22][6] * 0.038051;
    conv_output[21][5] += input[22][7] * 0.042449;
    conv_output[21][5] += input[23][5] * -0.084779;
    conv_output[21][5] += input[23][6] * 0.206606;
    conv_output[21][5] += input[23][7] * -0.146001;
    conv_output[21][5] = fmaxf(0, conv_output[21][5]);
    conv_output[21][6] = -0.019604;
    conv_output[21][6] += input[21][6] * 0.088207;
    conv_output[21][6] += input[21][7] * 0.061727;
    conv_output[21][6] += input[21][8] * -0.114732;
    conv_output[21][6] += input[22][6] * -0.083850;
    conv_output[21][6] += input[22][7] * 0.038051;
    conv_output[21][6] += input[22][8] * 0.042449;
    conv_output[21][6] += input[23][6] * -0.084779;
    conv_output[21][6] += input[23][7] * 0.206606;
    conv_output[21][6] += input[23][8] * -0.146001;
    conv_output[21][6] = fmaxf(0, conv_output[21][6]);
    conv_output[21][7] = -0.019604;
    conv_output[21][7] += input[21][7] * 0.088207;
    conv_output[21][7] += input[21][8] * 0.061727;
    conv_output[21][7] += input[21][9] * -0.114732;
    conv_output[21][7] += input[22][7] * -0.083850;
    conv_output[21][7] += input[22][8] * 0.038051;
    conv_output[21][7] += input[22][9] * 0.042449;
    conv_output[21][7] += input[23][7] * -0.084779;
    conv_output[21][7] += input[23][8] * 0.206606;
    conv_output[21][7] += input[23][9] * -0.146001;
    conv_output[21][7] = fmaxf(0, conv_output[21][7]);
    conv_output[21][8] = -0.019604;
    conv_output[21][8] += input[21][8] * 0.088207;
    conv_output[21][8] += input[21][9] * 0.061727;
    conv_output[21][8] += input[21][10] * -0.114732;
    conv_output[21][8] += input[22][8] * -0.083850;
    conv_output[21][8] += input[22][9] * 0.038051;
    conv_output[21][8] += input[22][10] * 0.042449;
    conv_output[21][8] += input[23][8] * -0.084779;
    conv_output[21][8] += input[23][9] * 0.206606;
    conv_output[21][8] += input[23][10] * -0.146001;
    conv_output[21][8] = fmaxf(0, conv_output[21][8]);
    conv_output[21][9] = -0.019604;
    conv_output[21][9] += input[21][9] * 0.088207;
    conv_output[21][9] += input[21][10] * 0.061727;
    conv_output[21][9] += input[21][11] * -0.114732;
    conv_output[21][9] += input[22][9] * -0.083850;
    conv_output[21][9] += input[22][10] * 0.038051;
    conv_output[21][9] += input[22][11] * 0.042449;
    conv_output[21][9] += input[23][9] * -0.084779;
    conv_output[21][9] += input[23][10] * 0.206606;
    conv_output[21][9] += input[23][11] * -0.146001;
    conv_output[21][9] = fmaxf(0, conv_output[21][9]);
    conv_output[21][10] = -0.019604;
    conv_output[21][10] += input[21][10] * 0.088207;
    conv_output[21][10] += input[21][11] * 0.061727;
    conv_output[21][10] += input[21][12] * -0.114732;
    conv_output[21][10] += input[22][10] * -0.083850;
    conv_output[21][10] += input[22][11] * 0.038051;
    conv_output[21][10] += input[22][12] * 0.042449;
    conv_output[21][10] += input[23][10] * -0.084779;
    conv_output[21][10] += input[23][11] * 0.206606;
    conv_output[21][10] += input[23][12] * -0.146001;
    conv_output[21][10] = fmaxf(0, conv_output[21][10]);
    conv_output[21][11] = -0.019604;
    conv_output[21][11] += input[21][11] * 0.088207;
    conv_output[21][11] += input[21][12] * 0.061727;
    conv_output[21][11] += input[21][13] * -0.114732;
    conv_output[21][11] += input[22][11] * -0.083850;
    conv_output[21][11] += input[22][12] * 0.038051;
    conv_output[21][11] += input[22][13] * 0.042449;
    conv_output[21][11] += input[23][11] * -0.084779;
    conv_output[21][11] += input[23][12] * 0.206606;
    conv_output[21][11] += input[23][13] * -0.146001;
    conv_output[21][11] = fmaxf(0, conv_output[21][11]);
    conv_output[21][12] = -0.019604;
    conv_output[21][12] += input[21][12] * 0.088207;
    conv_output[21][12] += input[21][13] * 0.061727;
    conv_output[21][12] += input[21][14] * -0.114732;
    conv_output[21][12] += input[22][12] * -0.083850;
    conv_output[21][12] += input[22][13] * 0.038051;
    conv_output[21][12] += input[22][14] * 0.042449;
    conv_output[21][12] += input[23][12] * -0.084779;
    conv_output[21][12] += input[23][13] * 0.206606;
    conv_output[21][12] += input[23][14] * -0.146001;
    conv_output[21][12] = fmaxf(0, conv_output[21][12]);
    conv_output[21][13] = -0.019604;
    conv_output[21][13] += input[21][13] * 0.088207;
    conv_output[21][13] += input[21][14] * 0.061727;
    conv_output[21][13] += input[21][15] * -0.114732;
    conv_output[21][13] += input[22][13] * -0.083850;
    conv_output[21][13] += input[22][14] * 0.038051;
    conv_output[21][13] += input[22][15] * 0.042449;
    conv_output[21][13] += input[23][13] * -0.084779;
    conv_output[21][13] += input[23][14] * 0.206606;
    conv_output[21][13] += input[23][15] * -0.146001;
    conv_output[21][13] = fmaxf(0, conv_output[21][13]);
    conv_output[21][14] = -0.019604;
    conv_output[21][14] += input[21][14] * 0.088207;
    conv_output[21][14] += input[21][15] * 0.061727;
    conv_output[21][14] += input[21][16] * -0.114732;
    conv_output[21][14] += input[22][14] * -0.083850;
    conv_output[21][14] += input[22][15] * 0.038051;
    conv_output[21][14] += input[22][16] * 0.042449;
    conv_output[21][14] += input[23][14] * -0.084779;
    conv_output[21][14] += input[23][15] * 0.206606;
    conv_output[21][14] += input[23][16] * -0.146001;
    conv_output[21][14] = fmaxf(0, conv_output[21][14]);
    conv_output[21][15] = -0.019604;
    conv_output[21][15] += input[21][15] * 0.088207;
    conv_output[21][15] += input[21][16] * 0.061727;
    conv_output[21][15] += input[21][17] * -0.114732;
    conv_output[21][15] += input[22][15] * -0.083850;
    conv_output[21][15] += input[22][16] * 0.038051;
    conv_output[21][15] += input[22][17] * 0.042449;
    conv_output[21][15] += input[23][15] * -0.084779;
    conv_output[21][15] += input[23][16] * 0.206606;
    conv_output[21][15] += input[23][17] * -0.146001;
    conv_output[21][15] = fmaxf(0, conv_output[21][15]);
    conv_output[21][16] = -0.019604;
    conv_output[21][16] += input[21][16] * 0.088207;
    conv_output[21][16] += input[21][17] * 0.061727;
    conv_output[21][16] += input[21][18] * -0.114732;
    conv_output[21][16] += input[22][16] * -0.083850;
    conv_output[21][16] += input[22][17] * 0.038051;
    conv_output[21][16] += input[22][18] * 0.042449;
    conv_output[21][16] += input[23][16] * -0.084779;
    conv_output[21][16] += input[23][17] * 0.206606;
    conv_output[21][16] += input[23][18] * -0.146001;
    conv_output[21][16] = fmaxf(0, conv_output[21][16]);
    conv_output[21][17] = -0.019604;
    conv_output[21][17] += input[21][17] * 0.088207;
    conv_output[21][17] += input[21][18] * 0.061727;
    conv_output[21][17] += input[21][19] * -0.114732;
    conv_output[21][17] += input[22][17] * -0.083850;
    conv_output[21][17] += input[22][18] * 0.038051;
    conv_output[21][17] += input[22][19] * 0.042449;
    conv_output[21][17] += input[23][17] * -0.084779;
    conv_output[21][17] += input[23][18] * 0.206606;
    conv_output[21][17] += input[23][19] * -0.146001;
    conv_output[21][17] = fmaxf(0, conv_output[21][17]);
    conv_output[21][18] = -0.019604;
    conv_output[21][18] += input[21][18] * 0.088207;
    conv_output[21][18] += input[21][19] * 0.061727;
    conv_output[21][18] += input[21][20] * -0.114732;
    conv_output[21][18] += input[22][18] * -0.083850;
    conv_output[21][18] += input[22][19] * 0.038051;
    conv_output[21][18] += input[22][20] * 0.042449;
    conv_output[21][18] += input[23][18] * -0.084779;
    conv_output[21][18] += input[23][19] * 0.206606;
    conv_output[21][18] += input[23][20] * -0.146001;
    conv_output[21][18] = fmaxf(0, conv_output[21][18]);
    conv_output[21][19] = -0.019604;
    conv_output[21][19] += input[21][19] * 0.088207;
    conv_output[21][19] += input[21][20] * 0.061727;
    conv_output[21][19] += input[21][21] * -0.114732;
    conv_output[21][19] += input[22][19] * -0.083850;
    conv_output[21][19] += input[22][20] * 0.038051;
    conv_output[21][19] += input[22][21] * 0.042449;
    conv_output[21][19] += input[23][19] * -0.084779;
    conv_output[21][19] += input[23][20] * 0.206606;
    conv_output[21][19] += input[23][21] * -0.146001;
    conv_output[21][19] = fmaxf(0, conv_output[21][19]);
    conv_output[21][20] = -0.019604;
    conv_output[21][20] += input[21][20] * 0.088207;
    conv_output[21][20] += input[21][21] * 0.061727;
    conv_output[21][20] += input[21][22] * -0.114732;
    conv_output[21][20] += input[22][20] * -0.083850;
    conv_output[21][20] += input[22][21] * 0.038051;
    conv_output[21][20] += input[22][22] * 0.042449;
    conv_output[21][20] += input[23][20] * -0.084779;
    conv_output[21][20] += input[23][21] * 0.206606;
    conv_output[21][20] += input[23][22] * -0.146001;
    conv_output[21][20] = fmaxf(0, conv_output[21][20]);
    conv_output[21][21] = -0.019604;
    conv_output[21][21] += input[21][21] * 0.088207;
    conv_output[21][21] += input[21][22] * 0.061727;
    conv_output[21][21] += input[21][23] * -0.114732;
    conv_output[21][21] += input[22][21] * -0.083850;
    conv_output[21][21] += input[22][22] * 0.038051;
    conv_output[21][21] += input[22][23] * 0.042449;
    conv_output[21][21] += input[23][21] * -0.084779;
    conv_output[21][21] += input[23][22] * 0.206606;
    conv_output[21][21] += input[23][23] * -0.146001;
    conv_output[21][21] = fmaxf(0, conv_output[21][21]);
    conv_output[21][22] = -0.019604;
    conv_output[21][22] += input[21][22] * 0.088207;
    conv_output[21][22] += input[21][23] * 0.061727;
    conv_output[21][22] += input[21][24] * -0.114732;
    conv_output[21][22] += input[22][22] * -0.083850;
    conv_output[21][22] += input[22][23] * 0.038051;
    conv_output[21][22] += input[22][24] * 0.042449;
    conv_output[21][22] += input[23][22] * -0.084779;
    conv_output[21][22] += input[23][23] * 0.206606;
    conv_output[21][22] += input[23][24] * -0.146001;
    conv_output[21][22] = fmaxf(0, conv_output[21][22]);
    conv_output[21][23] = -0.019604;
    conv_output[21][23] += input[21][23] * 0.088207;
    conv_output[21][23] += input[21][24] * 0.061727;
    conv_output[21][23] += input[21][25] * -0.114732;
    conv_output[21][23] += input[22][23] * -0.083850;
    conv_output[21][23] += input[22][24] * 0.038051;
    conv_output[21][23] += input[22][25] * 0.042449;
    conv_output[21][23] += input[23][23] * -0.084779;
    conv_output[21][23] += input[23][24] * 0.206606;
    conv_output[21][23] += input[23][25] * -0.146001;
    conv_output[21][23] = fmaxf(0, conv_output[21][23]);
    conv_output[21][24] = -0.019604;
    conv_output[21][24] += input[21][24] * 0.088207;
    conv_output[21][24] += input[21][25] * 0.061727;
    conv_output[21][24] += input[21][26] * -0.114732;
    conv_output[21][24] += input[22][24] * -0.083850;
    conv_output[21][24] += input[22][25] * 0.038051;
    conv_output[21][24] += input[22][26] * 0.042449;
    conv_output[21][24] += input[23][24] * -0.084779;
    conv_output[21][24] += input[23][25] * 0.206606;
    conv_output[21][24] += input[23][26] * -0.146001;
    conv_output[21][24] = fmaxf(0, conv_output[21][24]);
    conv_output[21][25] = -0.019604;
    conv_output[21][25] += input[21][25] * 0.088207;
    conv_output[21][25] += input[21][26] * 0.061727;
    conv_output[21][25] += input[21][27] * -0.114732;
    conv_output[21][25] += input[22][25] * -0.083850;
    conv_output[21][25] += input[22][26] * 0.038051;
    conv_output[21][25] += input[22][27] * 0.042449;
    conv_output[21][25] += input[23][25] * -0.084779;
    conv_output[21][25] += input[23][26] * 0.206606;
    conv_output[21][25] += input[23][27] * -0.146001;
    conv_output[21][25] = fmaxf(0, conv_output[21][25]);
    conv_output[22][0] = -0.019604;
    conv_output[22][0] += input[22][0] * 0.088207;
    conv_output[22][0] += input[22][1] * 0.061727;
    conv_output[22][0] += input[22][2] * -0.114732;
    conv_output[22][0] += input[23][0] * -0.083850;
    conv_output[22][0] += input[23][1] * 0.038051;
    conv_output[22][0] += input[23][2] * 0.042449;
    conv_output[22][0] += input[24][0] * -0.084779;
    conv_output[22][0] += input[24][1] * 0.206606;
    conv_output[22][0] += input[24][2] * -0.146001;
    conv_output[22][0] = fmaxf(0, conv_output[22][0]);
    conv_output[22][1] = -0.019604;
    conv_output[22][1] += input[22][1] * 0.088207;
    conv_output[22][1] += input[22][2] * 0.061727;
    conv_output[22][1] += input[22][3] * -0.114732;
    conv_output[22][1] += input[23][1] * -0.083850;
    conv_output[22][1] += input[23][2] * 0.038051;
    conv_output[22][1] += input[23][3] * 0.042449;
    conv_output[22][1] += input[24][1] * -0.084779;
    conv_output[22][1] += input[24][2] * 0.206606;
    conv_output[22][1] += input[24][3] * -0.146001;
    conv_output[22][1] = fmaxf(0, conv_output[22][1]);
    conv_output[22][2] = -0.019604;
    conv_output[22][2] += input[22][2] * 0.088207;
    conv_output[22][2] += input[22][3] * 0.061727;
    conv_output[22][2] += input[22][4] * -0.114732;
    conv_output[22][2] += input[23][2] * -0.083850;
    conv_output[22][2] += input[23][3] * 0.038051;
    conv_output[22][2] += input[23][4] * 0.042449;
    conv_output[22][2] += input[24][2] * -0.084779;
    conv_output[22][2] += input[24][3] * 0.206606;
    conv_output[22][2] += input[24][4] * -0.146001;
    conv_output[22][2] = fmaxf(0, conv_output[22][2]);
    conv_output[22][3] = -0.019604;
    conv_output[22][3] += input[22][3] * 0.088207;
    conv_output[22][3] += input[22][4] * 0.061727;
    conv_output[22][3] += input[22][5] * -0.114732;
    conv_output[22][3] += input[23][3] * -0.083850;
    conv_output[22][3] += input[23][4] * 0.038051;
    conv_output[22][3] += input[23][5] * 0.042449;
    conv_output[22][3] += input[24][3] * -0.084779;
    conv_output[22][3] += input[24][4] * 0.206606;
    conv_output[22][3] += input[24][5] * -0.146001;
    conv_output[22][3] = fmaxf(0, conv_output[22][3]);
    conv_output[22][4] = -0.019604;
    conv_output[22][4] += input[22][4] * 0.088207;
    conv_output[22][4] += input[22][5] * 0.061727;
    conv_output[22][4] += input[22][6] * -0.114732;
    conv_output[22][4] += input[23][4] * -0.083850;
    conv_output[22][4] += input[23][5] * 0.038051;
    conv_output[22][4] += input[23][6] * 0.042449;
    conv_output[22][4] += input[24][4] * -0.084779;
    conv_output[22][4] += input[24][5] * 0.206606;
    conv_output[22][4] += input[24][6] * -0.146001;
    conv_output[22][4] = fmaxf(0, conv_output[22][4]);
    conv_output[22][5] = -0.019604;
    conv_output[22][5] += input[22][5] * 0.088207;
    conv_output[22][5] += input[22][6] * 0.061727;
    conv_output[22][5] += input[22][7] * -0.114732;
    conv_output[22][5] += input[23][5] * -0.083850;
    conv_output[22][5] += input[23][6] * 0.038051;
    conv_output[22][5] += input[23][7] * 0.042449;
    conv_output[22][5] += input[24][5] * -0.084779;
    conv_output[22][5] += input[24][6] * 0.206606;
    conv_output[22][5] += input[24][7] * -0.146001;
    conv_output[22][5] = fmaxf(0, conv_output[22][5]);
    conv_output[22][6] = -0.019604;
    conv_output[22][6] += input[22][6] * 0.088207;
    conv_output[22][6] += input[22][7] * 0.061727;
    conv_output[22][6] += input[22][8] * -0.114732;
    conv_output[22][6] += input[23][6] * -0.083850;
    conv_output[22][6] += input[23][7] * 0.038051;
    conv_output[22][6] += input[23][8] * 0.042449;
    conv_output[22][6] += input[24][6] * -0.084779;
    conv_output[22][6] += input[24][7] * 0.206606;
    conv_output[22][6] += input[24][8] * -0.146001;
    conv_output[22][6] = fmaxf(0, conv_output[22][6]);
    conv_output[22][7] = -0.019604;
    conv_output[22][7] += input[22][7] * 0.088207;
    conv_output[22][7] += input[22][8] * 0.061727;
    conv_output[22][7] += input[22][9] * -0.114732;
    conv_output[22][7] += input[23][7] * -0.083850;
    conv_output[22][7] += input[23][8] * 0.038051;
    conv_output[22][7] += input[23][9] * 0.042449;
    conv_output[22][7] += input[24][7] * -0.084779;
    conv_output[22][7] += input[24][8] * 0.206606;
    conv_output[22][7] += input[24][9] * -0.146001;
    conv_output[22][7] = fmaxf(0, conv_output[22][7]);
    conv_output[22][8] = -0.019604;
    conv_output[22][8] += input[22][8] * 0.088207;
    conv_output[22][8] += input[22][9] * 0.061727;
    conv_output[22][8] += input[22][10] * -0.114732;
    conv_output[22][8] += input[23][8] * -0.083850;
    conv_output[22][8] += input[23][9] * 0.038051;
    conv_output[22][8] += input[23][10] * 0.042449;
    conv_output[22][8] += input[24][8] * -0.084779;
    conv_output[22][8] += input[24][9] * 0.206606;
    conv_output[22][8] += input[24][10] * -0.146001;
    conv_output[22][8] = fmaxf(0, conv_output[22][8]);
    conv_output[22][9] = -0.019604;
    conv_output[22][9] += input[22][9] * 0.088207;
    conv_output[22][9] += input[22][10] * 0.061727;
    conv_output[22][9] += input[22][11] * -0.114732;
    conv_output[22][9] += input[23][9] * -0.083850;
    conv_output[22][9] += input[23][10] * 0.038051;
    conv_output[22][9] += input[23][11] * 0.042449;
    conv_output[22][9] += input[24][9] * -0.084779;
    conv_output[22][9] += input[24][10] * 0.206606;
    conv_output[22][9] += input[24][11] * -0.146001;
    conv_output[22][9] = fmaxf(0, conv_output[22][9]);
    conv_output[22][10] = -0.019604;
    conv_output[22][10] += input[22][10] * 0.088207;
    conv_output[22][10] += input[22][11] * 0.061727;
    conv_output[22][10] += input[22][12] * -0.114732;
    conv_output[22][10] += input[23][10] * -0.083850;
    conv_output[22][10] += input[23][11] * 0.038051;
    conv_output[22][10] += input[23][12] * 0.042449;
    conv_output[22][10] += input[24][10] * -0.084779;
    conv_output[22][10] += input[24][11] * 0.206606;
    conv_output[22][10] += input[24][12] * -0.146001;
    conv_output[22][10] = fmaxf(0, conv_output[22][10]);
    conv_output[22][11] = -0.019604;
    conv_output[22][11] += input[22][11] * 0.088207;
    conv_output[22][11] += input[22][12] * 0.061727;
    conv_output[22][11] += input[22][13] * -0.114732;
    conv_output[22][11] += input[23][11] * -0.083850;
    conv_output[22][11] += input[23][12] * 0.038051;
    conv_output[22][11] += input[23][13] * 0.042449;
    conv_output[22][11] += input[24][11] * -0.084779;
    conv_output[22][11] += input[24][12] * 0.206606;
    conv_output[22][11] += input[24][13] * -0.146001;
    conv_output[22][11] = fmaxf(0, conv_output[22][11]);
    conv_output[22][12] = -0.019604;
    conv_output[22][12] += input[22][12] * 0.088207;
    conv_output[22][12] += input[22][13] * 0.061727;
    conv_output[22][12] += input[22][14] * -0.114732;
    conv_output[22][12] += input[23][12] * -0.083850;
    conv_output[22][12] += input[23][13] * 0.038051;
    conv_output[22][12] += input[23][14] * 0.042449;
    conv_output[22][12] += input[24][12] * -0.084779;
    conv_output[22][12] += input[24][13] * 0.206606;
    conv_output[22][12] += input[24][14] * -0.146001;
    conv_output[22][12] = fmaxf(0, conv_output[22][12]);
    conv_output[22][13] = -0.019604;
    conv_output[22][13] += input[22][13] * 0.088207;
    conv_output[22][13] += input[22][14] * 0.061727;
    conv_output[22][13] += input[22][15] * -0.114732;
    conv_output[22][13] += input[23][13] * -0.083850;
    conv_output[22][13] += input[23][14] * 0.038051;
    conv_output[22][13] += input[23][15] * 0.042449;
    conv_output[22][13] += input[24][13] * -0.084779;
    conv_output[22][13] += input[24][14] * 0.206606;
    conv_output[22][13] += input[24][15] * -0.146001;
    conv_output[22][13] = fmaxf(0, conv_output[22][13]);
    conv_output[22][14] = -0.019604;
    conv_output[22][14] += input[22][14] * 0.088207;
    conv_output[22][14] += input[22][15] * 0.061727;
    conv_output[22][14] += input[22][16] * -0.114732;
    conv_output[22][14] += input[23][14] * -0.083850;
    conv_output[22][14] += input[23][15] * 0.038051;
    conv_output[22][14] += input[23][16] * 0.042449;
    conv_output[22][14] += input[24][14] * -0.084779;
    conv_output[22][14] += input[24][15] * 0.206606;
    conv_output[22][14] += input[24][16] * -0.146001;
    conv_output[22][14] = fmaxf(0, conv_output[22][14]);
    conv_output[22][15] = -0.019604;
    conv_output[22][15] += input[22][15] * 0.088207;
    conv_output[22][15] += input[22][16] * 0.061727;
    conv_output[22][15] += input[22][17] * -0.114732;
    conv_output[22][15] += input[23][15] * -0.083850;
    conv_output[22][15] += input[23][16] * 0.038051;
    conv_output[22][15] += input[23][17] * 0.042449;
    conv_output[22][15] += input[24][15] * -0.084779;
    conv_output[22][15] += input[24][16] * 0.206606;
    conv_output[22][15] += input[24][17] * -0.146001;
    conv_output[22][15] = fmaxf(0, conv_output[22][15]);
    conv_output[22][16] = -0.019604;
    conv_output[22][16] += input[22][16] * 0.088207;
    conv_output[22][16] += input[22][17] * 0.061727;
    conv_output[22][16] += input[22][18] * -0.114732;
    conv_output[22][16] += input[23][16] * -0.083850;
    conv_output[22][16] += input[23][17] * 0.038051;
    conv_output[22][16] += input[23][18] * 0.042449;
    conv_output[22][16] += input[24][16] * -0.084779;
    conv_output[22][16] += input[24][17] * 0.206606;
    conv_output[22][16] += input[24][18] * -0.146001;
    conv_output[22][16] = fmaxf(0, conv_output[22][16]);
    conv_output[22][17] = -0.019604;
    conv_output[22][17] += input[22][17] * 0.088207;
    conv_output[22][17] += input[22][18] * 0.061727;
    conv_output[22][17] += input[22][19] * -0.114732;
    conv_output[22][17] += input[23][17] * -0.083850;
    conv_output[22][17] += input[23][18] * 0.038051;
    conv_output[22][17] += input[23][19] * 0.042449;
    conv_output[22][17] += input[24][17] * -0.084779;
    conv_output[22][17] += input[24][18] * 0.206606;
    conv_output[22][17] += input[24][19] * -0.146001;
    conv_output[22][17] = fmaxf(0, conv_output[22][17]);
    conv_output[22][18] = -0.019604;
    conv_output[22][18] += input[22][18] * 0.088207;
    conv_output[22][18] += input[22][19] * 0.061727;
    conv_output[22][18] += input[22][20] * -0.114732;
    conv_output[22][18] += input[23][18] * -0.083850;
    conv_output[22][18] += input[23][19] * 0.038051;
    conv_output[22][18] += input[23][20] * 0.042449;
    conv_output[22][18] += input[24][18] * -0.084779;
    conv_output[22][18] += input[24][19] * 0.206606;
    conv_output[22][18] += input[24][20] * -0.146001;
    conv_output[22][18] = fmaxf(0, conv_output[22][18]);
    conv_output[22][19] = -0.019604;
    conv_output[22][19] += input[22][19] * 0.088207;
    conv_output[22][19] += input[22][20] * 0.061727;
    conv_output[22][19] += input[22][21] * -0.114732;
    conv_output[22][19] += input[23][19] * -0.083850;
    conv_output[22][19] += input[23][20] * 0.038051;
    conv_output[22][19] += input[23][21] * 0.042449;
    conv_output[22][19] += input[24][19] * -0.084779;
    conv_output[22][19] += input[24][20] * 0.206606;
    conv_output[22][19] += input[24][21] * -0.146001;
    conv_output[22][19] = fmaxf(0, conv_output[22][19]);
    conv_output[22][20] = -0.019604;
    conv_output[22][20] += input[22][20] * 0.088207;
    conv_output[22][20] += input[22][21] * 0.061727;
    conv_output[22][20] += input[22][22] * -0.114732;
    conv_output[22][20] += input[23][20] * -0.083850;
    conv_output[22][20] += input[23][21] * 0.038051;
    conv_output[22][20] += input[23][22] * 0.042449;
    conv_output[22][20] += input[24][20] * -0.084779;
    conv_output[22][20] += input[24][21] * 0.206606;
    conv_output[22][20] += input[24][22] * -0.146001;
    conv_output[22][20] = fmaxf(0, conv_output[22][20]);
    conv_output[22][21] = -0.019604;
    conv_output[22][21] += input[22][21] * 0.088207;
    conv_output[22][21] += input[22][22] * 0.061727;
    conv_output[22][21] += input[22][23] * -0.114732;
    conv_output[22][21] += input[23][21] * -0.083850;
    conv_output[22][21] += input[23][22] * 0.038051;
    conv_output[22][21] += input[23][23] * 0.042449;
    conv_output[22][21] += input[24][21] * -0.084779;
    conv_output[22][21] += input[24][22] * 0.206606;
    conv_output[22][21] += input[24][23] * -0.146001;
    conv_output[22][21] = fmaxf(0, conv_output[22][21]);
    conv_output[22][22] = -0.019604;
    conv_output[22][22] += input[22][22] * 0.088207;
    conv_output[22][22] += input[22][23] * 0.061727;
    conv_output[22][22] += input[22][24] * -0.114732;
    conv_output[22][22] += input[23][22] * -0.083850;
    conv_output[22][22] += input[23][23] * 0.038051;
    conv_output[22][22] += input[23][24] * 0.042449;
    conv_output[22][22] += input[24][22] * -0.084779;
    conv_output[22][22] += input[24][23] * 0.206606;
    conv_output[22][22] += input[24][24] * -0.146001;
    conv_output[22][22] = fmaxf(0, conv_output[22][22]);
    conv_output[22][23] = -0.019604;
    conv_output[22][23] += input[22][23] * 0.088207;
    conv_output[22][23] += input[22][24] * 0.061727;
    conv_output[22][23] += input[22][25] * -0.114732;
    conv_output[22][23] += input[23][23] * -0.083850;
    conv_output[22][23] += input[23][24] * 0.038051;
    conv_output[22][23] += input[23][25] * 0.042449;
    conv_output[22][23] += input[24][23] * -0.084779;
    conv_output[22][23] += input[24][24] * 0.206606;
    conv_output[22][23] += input[24][25] * -0.146001;
    conv_output[22][23] = fmaxf(0, conv_output[22][23]);
    conv_output[22][24] = -0.019604;
    conv_output[22][24] += input[22][24] * 0.088207;
    conv_output[22][24] += input[22][25] * 0.061727;
    conv_output[22][24] += input[22][26] * -0.114732;
    conv_output[22][24] += input[23][24] * -0.083850;
    conv_output[22][24] += input[23][25] * 0.038051;
    conv_output[22][24] += input[23][26] * 0.042449;
    conv_output[22][24] += input[24][24] * -0.084779;
    conv_output[22][24] += input[24][25] * 0.206606;
    conv_output[22][24] += input[24][26] * -0.146001;
    conv_output[22][24] = fmaxf(0, conv_output[22][24]);
    conv_output[22][25] = -0.019604;
    conv_output[22][25] += input[22][25] * 0.088207;
    conv_output[22][25] += input[22][26] * 0.061727;
    conv_output[22][25] += input[22][27] * -0.114732;
    conv_output[22][25] += input[23][25] * -0.083850;
    conv_output[22][25] += input[23][26] * 0.038051;
    conv_output[22][25] += input[23][27] * 0.042449;
    conv_output[22][25] += input[24][25] * -0.084779;
    conv_output[22][25] += input[24][26] * 0.206606;
    conv_output[22][25] += input[24][27] * -0.146001;
    conv_output[22][25] = fmaxf(0, conv_output[22][25]);
    conv_output[23][0] = -0.019604;
    conv_output[23][0] += input[23][0] * 0.088207;
    conv_output[23][0] += input[23][1] * 0.061727;
    conv_output[23][0] += input[23][2] * -0.114732;
    conv_output[23][0] += input[24][0] * -0.083850;
    conv_output[23][0] += input[24][1] * 0.038051;
    conv_output[23][0] += input[24][2] * 0.042449;
    conv_output[23][0] += input[25][0] * -0.084779;
    conv_output[23][0] += input[25][1] * 0.206606;
    conv_output[23][0] += input[25][2] * -0.146001;
    conv_output[23][0] = fmaxf(0, conv_output[23][0]);
    conv_output[23][1] = -0.019604;
    conv_output[23][1] += input[23][1] * 0.088207;
    conv_output[23][1] += input[23][2] * 0.061727;
    conv_output[23][1] += input[23][3] * -0.114732;
    conv_output[23][1] += input[24][1] * -0.083850;
    conv_output[23][1] += input[24][2] * 0.038051;
    conv_output[23][1] += input[24][3] * 0.042449;
    conv_output[23][1] += input[25][1] * -0.084779;
    conv_output[23][1] += input[25][2] * 0.206606;
    conv_output[23][1] += input[25][3] * -0.146001;
    conv_output[23][1] = fmaxf(0, conv_output[23][1]);
    conv_output[23][2] = -0.019604;
    conv_output[23][2] += input[23][2] * 0.088207;
    conv_output[23][2] += input[23][3] * 0.061727;
    conv_output[23][2] += input[23][4] * -0.114732;
    conv_output[23][2] += input[24][2] * -0.083850;
    conv_output[23][2] += input[24][3] * 0.038051;
    conv_output[23][2] += input[24][4] * 0.042449;
    conv_output[23][2] += input[25][2] * -0.084779;
    conv_output[23][2] += input[25][3] * 0.206606;
    conv_output[23][2] += input[25][4] * -0.146001;
    conv_output[23][2] = fmaxf(0, conv_output[23][2]);
    conv_output[23][3] = -0.019604;
    conv_output[23][3] += input[23][3] * 0.088207;
    conv_output[23][3] += input[23][4] * 0.061727;
    conv_output[23][3] += input[23][5] * -0.114732;
    conv_output[23][3] += input[24][3] * -0.083850;
    conv_output[23][3] += input[24][4] * 0.038051;
    conv_output[23][3] += input[24][5] * 0.042449;
    conv_output[23][3] += input[25][3] * -0.084779;
    conv_output[23][3] += input[25][4] * 0.206606;
    conv_output[23][3] += input[25][5] * -0.146001;
    conv_output[23][3] = fmaxf(0, conv_output[23][3]);
    conv_output[23][4] = -0.019604;
    conv_output[23][4] += input[23][4] * 0.088207;
    conv_output[23][4] += input[23][5] * 0.061727;
    conv_output[23][4] += input[23][6] * -0.114732;
    conv_output[23][4] += input[24][4] * -0.083850;
    conv_output[23][4] += input[24][5] * 0.038051;
    conv_output[23][4] += input[24][6] * 0.042449;
    conv_output[23][4] += input[25][4] * -0.084779;
    conv_output[23][4] += input[25][5] * 0.206606;
    conv_output[23][4] += input[25][6] * -0.146001;
    conv_output[23][4] = fmaxf(0, conv_output[23][4]);
    conv_output[23][5] = -0.019604;
    conv_output[23][5] += input[23][5] * 0.088207;
    conv_output[23][5] += input[23][6] * 0.061727;
    conv_output[23][5] += input[23][7] * -0.114732;
    conv_output[23][5] += input[24][5] * -0.083850;
    conv_output[23][5] += input[24][6] * 0.038051;
    conv_output[23][5] += input[24][7] * 0.042449;
    conv_output[23][5] += input[25][5] * -0.084779;
    conv_output[23][5] += input[25][6] * 0.206606;
    conv_output[23][5] += input[25][7] * -0.146001;
    conv_output[23][5] = fmaxf(0, conv_output[23][5]);
    conv_output[23][6] = -0.019604;
    conv_output[23][6] += input[23][6] * 0.088207;
    conv_output[23][6] += input[23][7] * 0.061727;
    conv_output[23][6] += input[23][8] * -0.114732;
    conv_output[23][6] += input[24][6] * -0.083850;
    conv_output[23][6] += input[24][7] * 0.038051;
    conv_output[23][6] += input[24][8] * 0.042449;
    conv_output[23][6] += input[25][6] * -0.084779;
    conv_output[23][6] += input[25][7] * 0.206606;
    conv_output[23][6] += input[25][8] * -0.146001;
    conv_output[23][6] = fmaxf(0, conv_output[23][6]);
    conv_output[23][7] = -0.019604;
    conv_output[23][7] += input[23][7] * 0.088207;
    conv_output[23][7] += input[23][8] * 0.061727;
    conv_output[23][7] += input[23][9] * -0.114732;
    conv_output[23][7] += input[24][7] * -0.083850;
    conv_output[23][7] += input[24][8] * 0.038051;
    conv_output[23][7] += input[24][9] * 0.042449;
    conv_output[23][7] += input[25][7] * -0.084779;
    conv_output[23][7] += input[25][8] * 0.206606;
    conv_output[23][7] += input[25][9] * -0.146001;
    conv_output[23][7] = fmaxf(0, conv_output[23][7]);
    conv_output[23][8] = -0.019604;
    conv_output[23][8] += input[23][8] * 0.088207;
    conv_output[23][8] += input[23][9] * 0.061727;
    conv_output[23][8] += input[23][10] * -0.114732;
    conv_output[23][8] += input[24][8] * -0.083850;
    conv_output[23][8] += input[24][9] * 0.038051;
    conv_output[23][8] += input[24][10] * 0.042449;
    conv_output[23][8] += input[25][8] * -0.084779;
    conv_output[23][8] += input[25][9] * 0.206606;
    conv_output[23][8] += input[25][10] * -0.146001;
    conv_output[23][8] = fmaxf(0, conv_output[23][8]);
    conv_output[23][9] = -0.019604;
    conv_output[23][9] += input[23][9] * 0.088207;
    conv_output[23][9] += input[23][10] * 0.061727;
    conv_output[23][9] += input[23][11] * -0.114732;
    conv_output[23][9] += input[24][9] * -0.083850;
    conv_output[23][9] += input[24][10] * 0.038051;
    conv_output[23][9] += input[24][11] * 0.042449;
    conv_output[23][9] += input[25][9] * -0.084779;
    conv_output[23][9] += input[25][10] * 0.206606;
    conv_output[23][9] += input[25][11] * -0.146001;
    conv_output[23][9] = fmaxf(0, conv_output[23][9]);
    conv_output[23][10] = -0.019604;
    conv_output[23][10] += input[23][10] * 0.088207;
    conv_output[23][10] += input[23][11] * 0.061727;
    conv_output[23][10] += input[23][12] * -0.114732;
    conv_output[23][10] += input[24][10] * -0.083850;
    conv_output[23][10] += input[24][11] * 0.038051;
    conv_output[23][10] += input[24][12] * 0.042449;
    conv_output[23][10] += input[25][10] * -0.084779;
    conv_output[23][10] += input[25][11] * 0.206606;
    conv_output[23][10] += input[25][12] * -0.146001;
    conv_output[23][10] = fmaxf(0, conv_output[23][10]);
    conv_output[23][11] = -0.019604;
    conv_output[23][11] += input[23][11] * 0.088207;
    conv_output[23][11] += input[23][12] * 0.061727;
    conv_output[23][11] += input[23][13] * -0.114732;
    conv_output[23][11] += input[24][11] * -0.083850;
    conv_output[23][11] += input[24][12] * 0.038051;
    conv_output[23][11] += input[24][13] * 0.042449;
    conv_output[23][11] += input[25][11] * -0.084779;
    conv_output[23][11] += input[25][12] * 0.206606;
    conv_output[23][11] += input[25][13] * -0.146001;
    conv_output[23][11] = fmaxf(0, conv_output[23][11]);
    conv_output[23][12] = -0.019604;
    conv_output[23][12] += input[23][12] * 0.088207;
    conv_output[23][12] += input[23][13] * 0.061727;
    conv_output[23][12] += input[23][14] * -0.114732;
    conv_output[23][12] += input[24][12] * -0.083850;
    conv_output[23][12] += input[24][13] * 0.038051;
    conv_output[23][12] += input[24][14] * 0.042449;
    conv_output[23][12] += input[25][12] * -0.084779;
    conv_output[23][12] += input[25][13] * 0.206606;
    conv_output[23][12] += input[25][14] * -0.146001;
    conv_output[23][12] = fmaxf(0, conv_output[23][12]);
    conv_output[23][13] = -0.019604;
    conv_output[23][13] += input[23][13] * 0.088207;
    conv_output[23][13] += input[23][14] * 0.061727;
    conv_output[23][13] += input[23][15] * -0.114732;
    conv_output[23][13] += input[24][13] * -0.083850;
    conv_output[23][13] += input[24][14] * 0.038051;
    conv_output[23][13] += input[24][15] * 0.042449;
    conv_output[23][13] += input[25][13] * -0.084779;
    conv_output[23][13] += input[25][14] * 0.206606;
    conv_output[23][13] += input[25][15] * -0.146001;
    conv_output[23][13] = fmaxf(0, conv_output[23][13]);
    conv_output[23][14] = -0.019604;
    conv_output[23][14] += input[23][14] * 0.088207;
    conv_output[23][14] += input[23][15] * 0.061727;
    conv_output[23][14] += input[23][16] * -0.114732;
    conv_output[23][14] += input[24][14] * -0.083850;
    conv_output[23][14] += input[24][15] * 0.038051;
    conv_output[23][14] += input[24][16] * 0.042449;
    conv_output[23][14] += input[25][14] * -0.084779;
    conv_output[23][14] += input[25][15] * 0.206606;
    conv_output[23][14] += input[25][16] * -0.146001;
    conv_output[23][14] = fmaxf(0, conv_output[23][14]);
    conv_output[23][15] = -0.019604;
    conv_output[23][15] += input[23][15] * 0.088207;
    conv_output[23][15] += input[23][16] * 0.061727;
    conv_output[23][15] += input[23][17] * -0.114732;
    conv_output[23][15] += input[24][15] * -0.083850;
    conv_output[23][15] += input[24][16] * 0.038051;
    conv_output[23][15] += input[24][17] * 0.042449;
    conv_output[23][15] += input[25][15] * -0.084779;
    conv_output[23][15] += input[25][16] * 0.206606;
    conv_output[23][15] += input[25][17] * -0.146001;
    conv_output[23][15] = fmaxf(0, conv_output[23][15]);
    conv_output[23][16] = -0.019604;
    conv_output[23][16] += input[23][16] * 0.088207;
    conv_output[23][16] += input[23][17] * 0.061727;
    conv_output[23][16] += input[23][18] * -0.114732;
    conv_output[23][16] += input[24][16] * -0.083850;
    conv_output[23][16] += input[24][17] * 0.038051;
    conv_output[23][16] += input[24][18] * 0.042449;
    conv_output[23][16] += input[25][16] * -0.084779;
    conv_output[23][16] += input[25][17] * 0.206606;
    conv_output[23][16] += input[25][18] * -0.146001;
    conv_output[23][16] = fmaxf(0, conv_output[23][16]);
    conv_output[23][17] = -0.019604;
    conv_output[23][17] += input[23][17] * 0.088207;
    conv_output[23][17] += input[23][18] * 0.061727;
    conv_output[23][17] += input[23][19] * -0.114732;
    conv_output[23][17] += input[24][17] * -0.083850;
    conv_output[23][17] += input[24][18] * 0.038051;
    conv_output[23][17] += input[24][19] * 0.042449;
    conv_output[23][17] += input[25][17] * -0.084779;
    conv_output[23][17] += input[25][18] * 0.206606;
    conv_output[23][17] += input[25][19] * -0.146001;
    conv_output[23][17] = fmaxf(0, conv_output[23][17]);
    conv_output[23][18] = -0.019604;
    conv_output[23][18] += input[23][18] * 0.088207;
    conv_output[23][18] += input[23][19] * 0.061727;
    conv_output[23][18] += input[23][20] * -0.114732;
    conv_output[23][18] += input[24][18] * -0.083850;
    conv_output[23][18] += input[24][19] * 0.038051;
    conv_output[23][18] += input[24][20] * 0.042449;
    conv_output[23][18] += input[25][18] * -0.084779;
    conv_output[23][18] += input[25][19] * 0.206606;
    conv_output[23][18] += input[25][20] * -0.146001;
    conv_output[23][18] = fmaxf(0, conv_output[23][18]);
    conv_output[23][19] = -0.019604;
    conv_output[23][19] += input[23][19] * 0.088207;
    conv_output[23][19] += input[23][20] * 0.061727;
    conv_output[23][19] += input[23][21] * -0.114732;
    conv_output[23][19] += input[24][19] * -0.083850;
    conv_output[23][19] += input[24][20] * 0.038051;
    conv_output[23][19] += input[24][21] * 0.042449;
    conv_output[23][19] += input[25][19] * -0.084779;
    conv_output[23][19] += input[25][20] * 0.206606;
    conv_output[23][19] += input[25][21] * -0.146001;
    conv_output[23][19] = fmaxf(0, conv_output[23][19]);
    conv_output[23][20] = -0.019604;
    conv_output[23][20] += input[23][20] * 0.088207;
    conv_output[23][20] += input[23][21] * 0.061727;
    conv_output[23][20] += input[23][22] * -0.114732;
    conv_output[23][20] += input[24][20] * -0.083850;
    conv_output[23][20] += input[24][21] * 0.038051;
    conv_output[23][20] += input[24][22] * 0.042449;
    conv_output[23][20] += input[25][20] * -0.084779;
    conv_output[23][20] += input[25][21] * 0.206606;
    conv_output[23][20] += input[25][22] * -0.146001;
    conv_output[23][20] = fmaxf(0, conv_output[23][20]);
    conv_output[23][21] = -0.019604;
    conv_output[23][21] += input[23][21] * 0.088207;
    conv_output[23][21] += input[23][22] * 0.061727;
    conv_output[23][21] += input[23][23] * -0.114732;
    conv_output[23][21] += input[24][21] * -0.083850;
    conv_output[23][21] += input[24][22] * 0.038051;
    conv_output[23][21] += input[24][23] * 0.042449;
    conv_output[23][21] += input[25][21] * -0.084779;
    conv_output[23][21] += input[25][22] * 0.206606;
    conv_output[23][21] += input[25][23] * -0.146001;
    conv_output[23][21] = fmaxf(0, conv_output[23][21]);
    conv_output[23][22] = -0.019604;
    conv_output[23][22] += input[23][22] * 0.088207;
    conv_output[23][22] += input[23][23] * 0.061727;
    conv_output[23][22] += input[23][24] * -0.114732;
    conv_output[23][22] += input[24][22] * -0.083850;
    conv_output[23][22] += input[24][23] * 0.038051;
    conv_output[23][22] += input[24][24] * 0.042449;
    conv_output[23][22] += input[25][22] * -0.084779;
    conv_output[23][22] += input[25][23] * 0.206606;
    conv_output[23][22] += input[25][24] * -0.146001;
    conv_output[23][22] = fmaxf(0, conv_output[23][22]);
    conv_output[23][23] = -0.019604;
    conv_output[23][23] += input[23][23] * 0.088207;
    conv_output[23][23] += input[23][24] * 0.061727;
    conv_output[23][23] += input[23][25] * -0.114732;
    conv_output[23][23] += input[24][23] * -0.083850;
    conv_output[23][23] += input[24][24] * 0.038051;
    conv_output[23][23] += input[24][25] * 0.042449;
    conv_output[23][23] += input[25][23] * -0.084779;
    conv_output[23][23] += input[25][24] * 0.206606;
    conv_output[23][23] += input[25][25] * -0.146001;
    conv_output[23][23] = fmaxf(0, conv_output[23][23]);
    conv_output[23][24] = -0.019604;
    conv_output[23][24] += input[23][24] * 0.088207;
    conv_output[23][24] += input[23][25] * 0.061727;
    conv_output[23][24] += input[23][26] * -0.114732;
    conv_output[23][24] += input[24][24] * -0.083850;
    conv_output[23][24] += input[24][25] * 0.038051;
    conv_output[23][24] += input[24][26] * 0.042449;
    conv_output[23][24] += input[25][24] * -0.084779;
    conv_output[23][24] += input[25][25] * 0.206606;
    conv_output[23][24] += input[25][26] * -0.146001;
    conv_output[23][24] = fmaxf(0, conv_output[23][24]);
    conv_output[23][25] = -0.019604;
    conv_output[23][25] += input[23][25] * 0.088207;
    conv_output[23][25] += input[23][26] * 0.061727;
    conv_output[23][25] += input[23][27] * -0.114732;
    conv_output[23][25] += input[24][25] * -0.083850;
    conv_output[23][25] += input[24][26] * 0.038051;
    conv_output[23][25] += input[24][27] * 0.042449;
    conv_output[23][25] += input[25][25] * -0.084779;
    conv_output[23][25] += input[25][26] * 0.206606;
    conv_output[23][25] += input[25][27] * -0.146001;
    conv_output[23][25] = fmaxf(0, conv_output[23][25]);
    conv_output[24][0] = -0.019604;
    conv_output[24][0] += input[24][0] * 0.088207;
    conv_output[24][0] += input[24][1] * 0.061727;
    conv_output[24][0] += input[24][2] * -0.114732;
    conv_output[24][0] += input[25][0] * -0.083850;
    conv_output[24][0] += input[25][1] * 0.038051;
    conv_output[24][0] += input[25][2] * 0.042449;
    conv_output[24][0] += input[26][0] * -0.084779;
    conv_output[24][0] += input[26][1] * 0.206606;
    conv_output[24][0] += input[26][2] * -0.146001;
    conv_output[24][0] = fmaxf(0, conv_output[24][0]);
    conv_output[24][1] = -0.019604;
    conv_output[24][1] += input[24][1] * 0.088207;
    conv_output[24][1] += input[24][2] * 0.061727;
    conv_output[24][1] += input[24][3] * -0.114732;
    conv_output[24][1] += input[25][1] * -0.083850;
    conv_output[24][1] += input[25][2] * 0.038051;
    conv_output[24][1] += input[25][3] * 0.042449;
    conv_output[24][1] += input[26][1] * -0.084779;
    conv_output[24][1] += input[26][2] * 0.206606;
    conv_output[24][1] += input[26][3] * -0.146001;
    conv_output[24][1] = fmaxf(0, conv_output[24][1]);
    conv_output[24][2] = -0.019604;
    conv_output[24][2] += input[24][2] * 0.088207;
    conv_output[24][2] += input[24][3] * 0.061727;
    conv_output[24][2] += input[24][4] * -0.114732;
    conv_output[24][2] += input[25][2] * -0.083850;
    conv_output[24][2] += input[25][3] * 0.038051;
    conv_output[24][2] += input[25][4] * 0.042449;
    conv_output[24][2] += input[26][2] * -0.084779;
    conv_output[24][2] += input[26][3] * 0.206606;
    conv_output[24][2] += input[26][4] * -0.146001;
    conv_output[24][2] = fmaxf(0, conv_output[24][2]);
    conv_output[24][3] = -0.019604;
    conv_output[24][3] += input[24][3] * 0.088207;
    conv_output[24][3] += input[24][4] * 0.061727;
    conv_output[24][3] += input[24][5] * -0.114732;
    conv_output[24][3] += input[25][3] * -0.083850;
    conv_output[24][3] += input[25][4] * 0.038051;
    conv_output[24][3] += input[25][5] * 0.042449;
    conv_output[24][3] += input[26][3] * -0.084779;
    conv_output[24][3] += input[26][4] * 0.206606;
    conv_output[24][3] += input[26][5] * -0.146001;
    conv_output[24][3] = fmaxf(0, conv_output[24][3]);
    conv_output[24][4] = -0.019604;
    conv_output[24][4] += input[24][4] * 0.088207;
    conv_output[24][4] += input[24][5] * 0.061727;
    conv_output[24][4] += input[24][6] * -0.114732;
    conv_output[24][4] += input[25][4] * -0.083850;
    conv_output[24][4] += input[25][5] * 0.038051;
    conv_output[24][4] += input[25][6] * 0.042449;
    conv_output[24][4] += input[26][4] * -0.084779;
    conv_output[24][4] += input[26][5] * 0.206606;
    conv_output[24][4] += input[26][6] * -0.146001;
    conv_output[24][4] = fmaxf(0, conv_output[24][4]);
    conv_output[24][5] = -0.019604;
    conv_output[24][5] += input[24][5] * 0.088207;
    conv_output[24][5] += input[24][6] * 0.061727;
    conv_output[24][5] += input[24][7] * -0.114732;
    conv_output[24][5] += input[25][5] * -0.083850;
    conv_output[24][5] += input[25][6] * 0.038051;
    conv_output[24][5] += input[25][7] * 0.042449;
    conv_output[24][5] += input[26][5] * -0.084779;
    conv_output[24][5] += input[26][6] * 0.206606;
    conv_output[24][5] += input[26][7] * -0.146001;
    conv_output[24][5] = fmaxf(0, conv_output[24][5]);
    conv_output[24][6] = -0.019604;
    conv_output[24][6] += input[24][6] * 0.088207;
    conv_output[24][6] += input[24][7] * 0.061727;
    conv_output[24][6] += input[24][8] * -0.114732;
    conv_output[24][6] += input[25][6] * -0.083850;
    conv_output[24][6] += input[25][7] * 0.038051;
    conv_output[24][6] += input[25][8] * 0.042449;
    conv_output[24][6] += input[26][6] * -0.084779;
    conv_output[24][6] += input[26][7] * 0.206606;
    conv_output[24][6] += input[26][8] * -0.146001;
    conv_output[24][6] = fmaxf(0, conv_output[24][6]);
    conv_output[24][7] = -0.019604;
    conv_output[24][7] += input[24][7] * 0.088207;
    conv_output[24][7] += input[24][8] * 0.061727;
    conv_output[24][7] += input[24][9] * -0.114732;
    conv_output[24][7] += input[25][7] * -0.083850;
    conv_output[24][7] += input[25][8] * 0.038051;
    conv_output[24][7] += input[25][9] * 0.042449;
    conv_output[24][7] += input[26][7] * -0.084779;
    conv_output[24][7] += input[26][8] * 0.206606;
    conv_output[24][7] += input[26][9] * -0.146001;
    conv_output[24][7] = fmaxf(0, conv_output[24][7]);
    conv_output[24][8] = -0.019604;
    conv_output[24][8] += input[24][8] * 0.088207;
    conv_output[24][8] += input[24][9] * 0.061727;
    conv_output[24][8] += input[24][10] * -0.114732;
    conv_output[24][8] += input[25][8] * -0.083850;
    conv_output[24][8] += input[25][9] * 0.038051;
    conv_output[24][8] += input[25][10] * 0.042449;
    conv_output[24][8] += input[26][8] * -0.084779;
    conv_output[24][8] += input[26][9] * 0.206606;
    conv_output[24][8] += input[26][10] * -0.146001;
    conv_output[24][8] = fmaxf(0, conv_output[24][8]);
    conv_output[24][9] = -0.019604;
    conv_output[24][9] += input[24][9] * 0.088207;
    conv_output[24][9] += input[24][10] * 0.061727;
    conv_output[24][9] += input[24][11] * -0.114732;
    conv_output[24][9] += input[25][9] * -0.083850;
    conv_output[24][9] += input[25][10] * 0.038051;
    conv_output[24][9] += input[25][11] * 0.042449;
    conv_output[24][9] += input[26][9] * -0.084779;
    conv_output[24][9] += input[26][10] * 0.206606;
    conv_output[24][9] += input[26][11] * -0.146001;
    conv_output[24][9] = fmaxf(0, conv_output[24][9]);
    conv_output[24][10] = -0.019604;
    conv_output[24][10] += input[24][10] * 0.088207;
    conv_output[24][10] += input[24][11] * 0.061727;
    conv_output[24][10] += input[24][12] * -0.114732;
    conv_output[24][10] += input[25][10] * -0.083850;
    conv_output[24][10] += input[25][11] * 0.038051;
    conv_output[24][10] += input[25][12] * 0.042449;
    conv_output[24][10] += input[26][10] * -0.084779;
    conv_output[24][10] += input[26][11] * 0.206606;
    conv_output[24][10] += input[26][12] * -0.146001;
    conv_output[24][10] = fmaxf(0, conv_output[24][10]);
    conv_output[24][11] = -0.019604;
    conv_output[24][11] += input[24][11] * 0.088207;
    conv_output[24][11] += input[24][12] * 0.061727;
    conv_output[24][11] += input[24][13] * -0.114732;
    conv_output[24][11] += input[25][11] * -0.083850;
    conv_output[24][11] += input[25][12] * 0.038051;
    conv_output[24][11] += input[25][13] * 0.042449;
    conv_output[24][11] += input[26][11] * -0.084779;
    conv_output[24][11] += input[26][12] * 0.206606;
    conv_output[24][11] += input[26][13] * -0.146001;
    conv_output[24][11] = fmaxf(0, conv_output[24][11]);
    conv_output[24][12] = -0.019604;
    conv_output[24][12] += input[24][12] * 0.088207;
    conv_output[24][12] += input[24][13] * 0.061727;
    conv_output[24][12] += input[24][14] * -0.114732;
    conv_output[24][12] += input[25][12] * -0.083850;
    conv_output[24][12] += input[25][13] * 0.038051;
    conv_output[24][12] += input[25][14] * 0.042449;
    conv_output[24][12] += input[26][12] * -0.084779;
    conv_output[24][12] += input[26][13] * 0.206606;
    conv_output[24][12] += input[26][14] * -0.146001;
    conv_output[24][12] = fmaxf(0, conv_output[24][12]);
    conv_output[24][13] = -0.019604;
    conv_output[24][13] += input[24][13] * 0.088207;
    conv_output[24][13] += input[24][14] * 0.061727;
    conv_output[24][13] += input[24][15] * -0.114732;
    conv_output[24][13] += input[25][13] * -0.083850;
    conv_output[24][13] += input[25][14] * 0.038051;
    conv_output[24][13] += input[25][15] * 0.042449;
    conv_output[24][13] += input[26][13] * -0.084779;
    conv_output[24][13] += input[26][14] * 0.206606;
    conv_output[24][13] += input[26][15] * -0.146001;
    conv_output[24][13] = fmaxf(0, conv_output[24][13]);
    conv_output[24][14] = -0.019604;
    conv_output[24][14] += input[24][14] * 0.088207;
    conv_output[24][14] += input[24][15] * 0.061727;
    conv_output[24][14] += input[24][16] * -0.114732;
    conv_output[24][14] += input[25][14] * -0.083850;
    conv_output[24][14] += input[25][15] * 0.038051;
    conv_output[24][14] += input[25][16] * 0.042449;
    conv_output[24][14] += input[26][14] * -0.084779;
    conv_output[24][14] += input[26][15] * 0.206606;
    conv_output[24][14] += input[26][16] * -0.146001;
    conv_output[24][14] = fmaxf(0, conv_output[24][14]);
    conv_output[24][15] = -0.019604;
    conv_output[24][15] += input[24][15] * 0.088207;
    conv_output[24][15] += input[24][16] * 0.061727;
    conv_output[24][15] += input[24][17] * -0.114732;
    conv_output[24][15] += input[25][15] * -0.083850;
    conv_output[24][15] += input[25][16] * 0.038051;
    conv_output[24][15] += input[25][17] * 0.042449;
    conv_output[24][15] += input[26][15] * -0.084779;
    conv_output[24][15] += input[26][16] * 0.206606;
    conv_output[24][15] += input[26][17] * -0.146001;
    conv_output[24][15] = fmaxf(0, conv_output[24][15]);
    conv_output[24][16] = -0.019604;
    conv_output[24][16] += input[24][16] * 0.088207;
    conv_output[24][16] += input[24][17] * 0.061727;
    conv_output[24][16] += input[24][18] * -0.114732;
    conv_output[24][16] += input[25][16] * -0.083850;
    conv_output[24][16] += input[25][17] * 0.038051;
    conv_output[24][16] += input[25][18] * 0.042449;
    conv_output[24][16] += input[26][16] * -0.084779;
    conv_output[24][16] += input[26][17] * 0.206606;
    conv_output[24][16] += input[26][18] * -0.146001;
    conv_output[24][16] = fmaxf(0, conv_output[24][16]);
    conv_output[24][17] = -0.019604;
    conv_output[24][17] += input[24][17] * 0.088207;
    conv_output[24][17] += input[24][18] * 0.061727;
    conv_output[24][17] += input[24][19] * -0.114732;
    conv_output[24][17] += input[25][17] * -0.083850;
    conv_output[24][17] += input[25][18] * 0.038051;
    conv_output[24][17] += input[25][19] * 0.042449;
    conv_output[24][17] += input[26][17] * -0.084779;
    conv_output[24][17] += input[26][18] * 0.206606;
    conv_output[24][17] += input[26][19] * -0.146001;
    conv_output[24][17] = fmaxf(0, conv_output[24][17]);
    conv_output[24][18] = -0.019604;
    conv_output[24][18] += input[24][18] * 0.088207;
    conv_output[24][18] += input[24][19] * 0.061727;
    conv_output[24][18] += input[24][20] * -0.114732;
    conv_output[24][18] += input[25][18] * -0.083850;
    conv_output[24][18] += input[25][19] * 0.038051;
    conv_output[24][18] += input[25][20] * 0.042449;
    conv_output[24][18] += input[26][18] * -0.084779;
    conv_output[24][18] += input[26][19] * 0.206606;
    conv_output[24][18] += input[26][20] * -0.146001;
    conv_output[24][18] = fmaxf(0, conv_output[24][18]);
    conv_output[24][19] = -0.019604;
    conv_output[24][19] += input[24][19] * 0.088207;
    conv_output[24][19] += input[24][20] * 0.061727;
    conv_output[24][19] += input[24][21] * -0.114732;
    conv_output[24][19] += input[25][19] * -0.083850;
    conv_output[24][19] += input[25][20] * 0.038051;
    conv_output[24][19] += input[25][21] * 0.042449;
    conv_output[24][19] += input[26][19] * -0.084779;
    conv_output[24][19] += input[26][20] * 0.206606;
    conv_output[24][19] += input[26][21] * -0.146001;
    conv_output[24][19] = fmaxf(0, conv_output[24][19]);
    conv_output[24][20] = -0.019604;
    conv_output[24][20] += input[24][20] * 0.088207;
    conv_output[24][20] += input[24][21] * 0.061727;
    conv_output[24][20] += input[24][22] * -0.114732;
    conv_output[24][20] += input[25][20] * -0.083850;
    conv_output[24][20] += input[25][21] * 0.038051;
    conv_output[24][20] += input[25][22] * 0.042449;
    conv_output[24][20] += input[26][20] * -0.084779;
    conv_output[24][20] += input[26][21] * 0.206606;
    conv_output[24][20] += input[26][22] * -0.146001;
    conv_output[24][20] = fmaxf(0, conv_output[24][20]);
    conv_output[24][21] = -0.019604;
    conv_output[24][21] += input[24][21] * 0.088207;
    conv_output[24][21] += input[24][22] * 0.061727;
    conv_output[24][21] += input[24][23] * -0.114732;
    conv_output[24][21] += input[25][21] * -0.083850;
    conv_output[24][21] += input[25][22] * 0.038051;
    conv_output[24][21] += input[25][23] * 0.042449;
    conv_output[24][21] += input[26][21] * -0.084779;
    conv_output[24][21] += input[26][22] * 0.206606;
    conv_output[24][21] += input[26][23] * -0.146001;
    conv_output[24][21] = fmaxf(0, conv_output[24][21]);
    conv_output[24][22] = -0.019604;
    conv_output[24][22] += input[24][22] * 0.088207;
    conv_output[24][22] += input[24][23] * 0.061727;
    conv_output[24][22] += input[24][24] * -0.114732;
    conv_output[24][22] += input[25][22] * -0.083850;
    conv_output[24][22] += input[25][23] * 0.038051;
    conv_output[24][22] += input[25][24] * 0.042449;
    conv_output[24][22] += input[26][22] * -0.084779;
    conv_output[24][22] += input[26][23] * 0.206606;
    conv_output[24][22] += input[26][24] * -0.146001;
    conv_output[24][22] = fmaxf(0, conv_output[24][22]);
    conv_output[24][23] = -0.019604;
    conv_output[24][23] += input[24][23] * 0.088207;
    conv_output[24][23] += input[24][24] * 0.061727;
    conv_output[24][23] += input[24][25] * -0.114732;
    conv_output[24][23] += input[25][23] * -0.083850;
    conv_output[24][23] += input[25][24] * 0.038051;
    conv_output[24][23] += input[25][25] * 0.042449;
    conv_output[24][23] += input[26][23] * -0.084779;
    conv_output[24][23] += input[26][24] * 0.206606;
    conv_output[24][23] += input[26][25] * -0.146001;
    conv_output[24][23] = fmaxf(0, conv_output[24][23]);
    conv_output[24][24] = -0.019604;
    conv_output[24][24] += input[24][24] * 0.088207;
    conv_output[24][24] += input[24][25] * 0.061727;
    conv_output[24][24] += input[24][26] * -0.114732;
    conv_output[24][24] += input[25][24] * -0.083850;
    conv_output[24][24] += input[25][25] * 0.038051;
    conv_output[24][24] += input[25][26] * 0.042449;
    conv_output[24][24] += input[26][24] * -0.084779;
    conv_output[24][24] += input[26][25] * 0.206606;
    conv_output[24][24] += input[26][26] * -0.146001;
    conv_output[24][24] = fmaxf(0, conv_output[24][24]);
    conv_output[24][25] = -0.019604;
    conv_output[24][25] += input[24][25] * 0.088207;
    conv_output[24][25] += input[24][26] * 0.061727;
    conv_output[24][25] += input[24][27] * -0.114732;
    conv_output[24][25] += input[25][25] * -0.083850;
    conv_output[24][25] += input[25][26] * 0.038051;
    conv_output[24][25] += input[25][27] * 0.042449;
    conv_output[24][25] += input[26][25] * -0.084779;
    conv_output[24][25] += input[26][26] * 0.206606;
    conv_output[24][25] += input[26][27] * -0.146001;
    conv_output[24][25] = fmaxf(0, conv_output[24][25]);
    conv_output[25][0] = -0.019604;
    conv_output[25][0] += input[25][0] * 0.088207;
    conv_output[25][0] += input[25][1] * 0.061727;
    conv_output[25][0] += input[25][2] * -0.114732;
    conv_output[25][0] += input[26][0] * -0.083850;
    conv_output[25][0] += input[26][1] * 0.038051;
    conv_output[25][0] += input[26][2] * 0.042449;
    conv_output[25][0] += input[27][0] * -0.084779;
    conv_output[25][0] += input[27][1] * 0.206606;
    conv_output[25][0] += input[27][2] * -0.146001;
    conv_output[25][0] = fmaxf(0, conv_output[25][0]);
    conv_output[25][1] = -0.019604;
    conv_output[25][1] += input[25][1] * 0.088207;
    conv_output[25][1] += input[25][2] * 0.061727;
    conv_output[25][1] += input[25][3] * -0.114732;
    conv_output[25][1] += input[26][1] * -0.083850;
    conv_output[25][1] += input[26][2] * 0.038051;
    conv_output[25][1] += input[26][3] * 0.042449;
    conv_output[25][1] += input[27][1] * -0.084779;
    conv_output[25][1] += input[27][2] * 0.206606;
    conv_output[25][1] += input[27][3] * -0.146001;
    conv_output[25][1] = fmaxf(0, conv_output[25][1]);
    conv_output[25][2] = -0.019604;
    conv_output[25][2] += input[25][2] * 0.088207;
    conv_output[25][2] += input[25][3] * 0.061727;
    conv_output[25][2] += input[25][4] * -0.114732;
    conv_output[25][2] += input[26][2] * -0.083850;
    conv_output[25][2] += input[26][3] * 0.038051;
    conv_output[25][2] += input[26][4] * 0.042449;
    conv_output[25][2] += input[27][2] * -0.084779;
    conv_output[25][2] += input[27][3] * 0.206606;
    conv_output[25][2] += input[27][4] * -0.146001;
    conv_output[25][2] = fmaxf(0, conv_output[25][2]);
    conv_output[25][3] = -0.019604;
    conv_output[25][3] += input[25][3] * 0.088207;
    conv_output[25][3] += input[25][4] * 0.061727;
    conv_output[25][3] += input[25][5] * -0.114732;
    conv_output[25][3] += input[26][3] * -0.083850;
    conv_output[25][3] += input[26][4] * 0.038051;
    conv_output[25][3] += input[26][5] * 0.042449;
    conv_output[25][3] += input[27][3] * -0.084779;
    conv_output[25][3] += input[27][4] * 0.206606;
    conv_output[25][3] += input[27][5] * -0.146001;
    conv_output[25][3] = fmaxf(0, conv_output[25][3]);
    conv_output[25][4] = -0.019604;
    conv_output[25][4] += input[25][4] * 0.088207;
    conv_output[25][4] += input[25][5] * 0.061727;
    conv_output[25][4] += input[25][6] * -0.114732;
    conv_output[25][4] += input[26][4] * -0.083850;
    conv_output[25][4] += input[26][5] * 0.038051;
    conv_output[25][4] += input[26][6] * 0.042449;
    conv_output[25][4] += input[27][4] * -0.084779;
    conv_output[25][4] += input[27][5] * 0.206606;
    conv_output[25][4] += input[27][6] * -0.146001;
    conv_output[25][4] = fmaxf(0, conv_output[25][4]);
    conv_output[25][5] = -0.019604;
    conv_output[25][5] += input[25][5] * 0.088207;
    conv_output[25][5] += input[25][6] * 0.061727;
    conv_output[25][5] += input[25][7] * -0.114732;
    conv_output[25][5] += input[26][5] * -0.083850;
    conv_output[25][5] += input[26][6] * 0.038051;
    conv_output[25][5] += input[26][7] * 0.042449;
    conv_output[25][5] += input[27][5] * -0.084779;
    conv_output[25][5] += input[27][6] * 0.206606;
    conv_output[25][5] += input[27][7] * -0.146001;
    conv_output[25][5] = fmaxf(0, conv_output[25][5]);
    conv_output[25][6] = -0.019604;
    conv_output[25][6] += input[25][6] * 0.088207;
    conv_output[25][6] += input[25][7] * 0.061727;
    conv_output[25][6] += input[25][8] * -0.114732;
    conv_output[25][6] += input[26][6] * -0.083850;
    conv_output[25][6] += input[26][7] * 0.038051;
    conv_output[25][6] += input[26][8] * 0.042449;
    conv_output[25][6] += input[27][6] * -0.084779;
    conv_output[25][6] += input[27][7] * 0.206606;
    conv_output[25][6] += input[27][8] * -0.146001;
    conv_output[25][6] = fmaxf(0, conv_output[25][6]);
    conv_output[25][7] = -0.019604;
    conv_output[25][7] += input[25][7] * 0.088207;
    conv_output[25][7] += input[25][8] * 0.061727;
    conv_output[25][7] += input[25][9] * -0.114732;
    conv_output[25][7] += input[26][7] * -0.083850;
    conv_output[25][7] += input[26][8] * 0.038051;
    conv_output[25][7] += input[26][9] * 0.042449;
    conv_output[25][7] += input[27][7] * -0.084779;
    conv_output[25][7] += input[27][8] * 0.206606;
    conv_output[25][7] += input[27][9] * -0.146001;
    conv_output[25][7] = fmaxf(0, conv_output[25][7]);
    conv_output[25][8] = -0.019604;
    conv_output[25][8] += input[25][8] * 0.088207;
    conv_output[25][8] += input[25][9] * 0.061727;
    conv_output[25][8] += input[25][10] * -0.114732;
    conv_output[25][8] += input[26][8] * -0.083850;
    conv_output[25][8] += input[26][9] * 0.038051;
    conv_output[25][8] += input[26][10] * 0.042449;
    conv_output[25][8] += input[27][8] * -0.084779;
    conv_output[25][8] += input[27][9] * 0.206606;
    conv_output[25][8] += input[27][10] * -0.146001;
    conv_output[25][8] = fmaxf(0, conv_output[25][8]);
    conv_output[25][9] = -0.019604;
    conv_output[25][9] += input[25][9] * 0.088207;
    conv_output[25][9] += input[25][10] * 0.061727;
    conv_output[25][9] += input[25][11] * -0.114732;
    conv_output[25][9] += input[26][9] * -0.083850;
    conv_output[25][9] += input[26][10] * 0.038051;
    conv_output[25][9] += input[26][11] * 0.042449;
    conv_output[25][9] += input[27][9] * -0.084779;
    conv_output[25][9] += input[27][10] * 0.206606;
    conv_output[25][9] += input[27][11] * -0.146001;
    conv_output[25][9] = fmaxf(0, conv_output[25][9]);
    conv_output[25][10] = -0.019604;
    conv_output[25][10] += input[25][10] * 0.088207;
    conv_output[25][10] += input[25][11] * 0.061727;
    conv_output[25][10] += input[25][12] * -0.114732;
    conv_output[25][10] += input[26][10] * -0.083850;
    conv_output[25][10] += input[26][11] * 0.038051;
    conv_output[25][10] += input[26][12] * 0.042449;
    conv_output[25][10] += input[27][10] * -0.084779;
    conv_output[25][10] += input[27][11] * 0.206606;
    conv_output[25][10] += input[27][12] * -0.146001;
    conv_output[25][10] = fmaxf(0, conv_output[25][10]);
    conv_output[25][11] = -0.019604;
    conv_output[25][11] += input[25][11] * 0.088207;
    conv_output[25][11] += input[25][12] * 0.061727;
    conv_output[25][11] += input[25][13] * -0.114732;
    conv_output[25][11] += input[26][11] * -0.083850;
    conv_output[25][11] += input[26][12] * 0.038051;
    conv_output[25][11] += input[26][13] * 0.042449;
    conv_output[25][11] += input[27][11] * -0.084779;
    conv_output[25][11] += input[27][12] * 0.206606;
    conv_output[25][11] += input[27][13] * -0.146001;
    conv_output[25][11] = fmaxf(0, conv_output[25][11]);
    conv_output[25][12] = -0.019604;
    conv_output[25][12] += input[25][12] * 0.088207;
    conv_output[25][12] += input[25][13] * 0.061727;
    conv_output[25][12] += input[25][14] * -0.114732;
    conv_output[25][12] += input[26][12] * -0.083850;
    conv_output[25][12] += input[26][13] * 0.038051;
    conv_output[25][12] += input[26][14] * 0.042449;
    conv_output[25][12] += input[27][12] * -0.084779;
    conv_output[25][12] += input[27][13] * 0.206606;
    conv_output[25][12] += input[27][14] * -0.146001;
    conv_output[25][12] = fmaxf(0, conv_output[25][12]);
    conv_output[25][13] = -0.019604;
    conv_output[25][13] += input[25][13] * 0.088207;
    conv_output[25][13] += input[25][14] * 0.061727;
    conv_output[25][13] += input[25][15] * -0.114732;
    conv_output[25][13] += input[26][13] * -0.083850;
    conv_output[25][13] += input[26][14] * 0.038051;
    conv_output[25][13] += input[26][15] * 0.042449;
    conv_output[25][13] += input[27][13] * -0.084779;
    conv_output[25][13] += input[27][14] * 0.206606;
    conv_output[25][13] += input[27][15] * -0.146001;
    conv_output[25][13] = fmaxf(0, conv_output[25][13]);
    conv_output[25][14] = -0.019604;
    conv_output[25][14] += input[25][14] * 0.088207;
    conv_output[25][14] += input[25][15] * 0.061727;
    conv_output[25][14] += input[25][16] * -0.114732;
    conv_output[25][14] += input[26][14] * -0.083850;
    conv_output[25][14] += input[26][15] * 0.038051;
    conv_output[25][14] += input[26][16] * 0.042449;
    conv_output[25][14] += input[27][14] * -0.084779;
    conv_output[25][14] += input[27][15] * 0.206606;
    conv_output[25][14] += input[27][16] * -0.146001;
    conv_output[25][14] = fmaxf(0, conv_output[25][14]);
    conv_output[25][15] = -0.019604;
    conv_output[25][15] += input[25][15] * 0.088207;
    conv_output[25][15] += input[25][16] * 0.061727;
    conv_output[25][15] += input[25][17] * -0.114732;
    conv_output[25][15] += input[26][15] * -0.083850;
    conv_output[25][15] += input[26][16] * 0.038051;
    conv_output[25][15] += input[26][17] * 0.042449;
    conv_output[25][15] += input[27][15] * -0.084779;
    conv_output[25][15] += input[27][16] * 0.206606;
    conv_output[25][15] += input[27][17] * -0.146001;
    conv_output[25][15] = fmaxf(0, conv_output[25][15]);
    conv_output[25][16] = -0.019604;
    conv_output[25][16] += input[25][16] * 0.088207;
    conv_output[25][16] += input[25][17] * 0.061727;
    conv_output[25][16] += input[25][18] * -0.114732;
    conv_output[25][16] += input[26][16] * -0.083850;
    conv_output[25][16] += input[26][17] * 0.038051;
    conv_output[25][16] += input[26][18] * 0.042449;
    conv_output[25][16] += input[27][16] * -0.084779;
    conv_output[25][16] += input[27][17] * 0.206606;
    conv_output[25][16] += input[27][18] * -0.146001;
    conv_output[25][16] = fmaxf(0, conv_output[25][16]);
    conv_output[25][17] = -0.019604;
    conv_output[25][17] += input[25][17] * 0.088207;
    conv_output[25][17] += input[25][18] * 0.061727;
    conv_output[25][17] += input[25][19] * -0.114732;
    conv_output[25][17] += input[26][17] * -0.083850;
    conv_output[25][17] += input[26][18] * 0.038051;
    conv_output[25][17] += input[26][19] * 0.042449;
    conv_output[25][17] += input[27][17] * -0.084779;
    conv_output[25][17] += input[27][18] * 0.206606;
    conv_output[25][17] += input[27][19] * -0.146001;
    conv_output[25][17] = fmaxf(0, conv_output[25][17]);
    conv_output[25][18] = -0.019604;
    conv_output[25][18] += input[25][18] * 0.088207;
    conv_output[25][18] += input[25][19] * 0.061727;
    conv_output[25][18] += input[25][20] * -0.114732;
    conv_output[25][18] += input[26][18] * -0.083850;
    conv_output[25][18] += input[26][19] * 0.038051;
    conv_output[25][18] += input[26][20] * 0.042449;
    conv_output[25][18] += input[27][18] * -0.084779;
    conv_output[25][18] += input[27][19] * 0.206606;
    conv_output[25][18] += input[27][20] * -0.146001;
    conv_output[25][18] = fmaxf(0, conv_output[25][18]);
    conv_output[25][19] = -0.019604;
    conv_output[25][19] += input[25][19] * 0.088207;
    conv_output[25][19] += input[25][20] * 0.061727;
    conv_output[25][19] += input[25][21] * -0.114732;
    conv_output[25][19] += input[26][19] * -0.083850;
    conv_output[25][19] += input[26][20] * 0.038051;
    conv_output[25][19] += input[26][21] * 0.042449;
    conv_output[25][19] += input[27][19] * -0.084779;
    conv_output[25][19] += input[27][20] * 0.206606;
    conv_output[25][19] += input[27][21] * -0.146001;
    conv_output[25][19] = fmaxf(0, conv_output[25][19]);
    conv_output[25][20] = -0.019604;
    conv_output[25][20] += input[25][20] * 0.088207;
    conv_output[25][20] += input[25][21] * 0.061727;
    conv_output[25][20] += input[25][22] * -0.114732;
    conv_output[25][20] += input[26][20] * -0.083850;
    conv_output[25][20] += input[26][21] * 0.038051;
    conv_output[25][20] += input[26][22] * 0.042449;
    conv_output[25][20] += input[27][20] * -0.084779;
    conv_output[25][20] += input[27][21] * 0.206606;
    conv_output[25][20] += input[27][22] * -0.146001;
    conv_output[25][20] = fmaxf(0, conv_output[25][20]);
    conv_output[25][21] = -0.019604;
    conv_output[25][21] += input[25][21] * 0.088207;
    conv_output[25][21] += input[25][22] * 0.061727;
    conv_output[25][21] += input[25][23] * -0.114732;
    conv_output[25][21] += input[26][21] * -0.083850;
    conv_output[25][21] += input[26][22] * 0.038051;
    conv_output[25][21] += input[26][23] * 0.042449;
    conv_output[25][21] += input[27][21] * -0.084779;
    conv_output[25][21] += input[27][22] * 0.206606;
    conv_output[25][21] += input[27][23] * -0.146001;
    conv_output[25][21] = fmaxf(0, conv_output[25][21]);
    conv_output[25][22] = -0.019604;
    conv_output[25][22] += input[25][22] * 0.088207;
    conv_output[25][22] += input[25][23] * 0.061727;
    conv_output[25][22] += input[25][24] * -0.114732;
    conv_output[25][22] += input[26][22] * -0.083850;
    conv_output[25][22] += input[26][23] * 0.038051;
    conv_output[25][22] += input[26][24] * 0.042449;
    conv_output[25][22] += input[27][22] * -0.084779;
    conv_output[25][22] += input[27][23] * 0.206606;
    conv_output[25][22] += input[27][24] * -0.146001;
    conv_output[25][22] = fmaxf(0, conv_output[25][22]);
    conv_output[25][23] = -0.019604;
    conv_output[25][23] += input[25][23] * 0.088207;
    conv_output[25][23] += input[25][24] * 0.061727;
    conv_output[25][23] += input[25][25] * -0.114732;
    conv_output[25][23] += input[26][23] * -0.083850;
    conv_output[25][23] += input[26][24] * 0.038051;
    conv_output[25][23] += input[26][25] * 0.042449;
    conv_output[25][23] += input[27][23] * -0.084779;
    conv_output[25][23] += input[27][24] * 0.206606;
    conv_output[25][23] += input[27][25] * -0.146001;
    conv_output[25][23] = fmaxf(0, conv_output[25][23]);
    conv_output[25][24] = -0.019604;
    conv_output[25][24] += input[25][24] * 0.088207;
    conv_output[25][24] += input[25][25] * 0.061727;
    conv_output[25][24] += input[25][26] * -0.114732;
    conv_output[25][24] += input[26][24] * -0.083850;
    conv_output[25][24] += input[26][25] * 0.038051;
    conv_output[25][24] += input[26][26] * 0.042449;
    conv_output[25][24] += input[27][24] * -0.084779;
    conv_output[25][24] += input[27][25] * 0.206606;
    conv_output[25][24] += input[27][26] * -0.146001;
    conv_output[25][24] = fmaxf(0, conv_output[25][24]);
    conv_output[25][25] = -0.019604;
    conv_output[25][25] += input[25][25] * 0.088207;
    conv_output[25][25] += input[25][26] * 0.061727;
    conv_output[25][25] += input[25][27] * -0.114732;
    conv_output[25][25] += input[26][25] * -0.083850;
    conv_output[25][25] += input[26][26] * 0.038051;
    conv_output[25][25] += input[26][27] * 0.042449;
    conv_output[25][25] += input[27][25] * -0.084779;
    conv_output[25][25] += input[27][26] * 0.206606;
    conv_output[25][25] += input[27][27] * -0.146001;
    conv_output[25][25] = fmaxf(0, conv_output[25][25]);


    float flatten_output[676] = {0};
    int idx = 0;
    flatten_output[idx++] = conv_output[0][0];
    flatten_output[idx++] = conv_output[0][1];
    flatten_output[idx++] = conv_output[0][2];
    flatten_output[idx++] = conv_output[0][3];
    flatten_output[idx++] = conv_output[0][4];
    flatten_output[idx++] = conv_output[0][5];
    flatten_output[idx++] = conv_output[0][6];
    flatten_output[idx++] = conv_output[0][7];
    flatten_output[idx++] = conv_output[0][8];
    flatten_output[idx++] = conv_output[0][9];
    flatten_output[idx++] = conv_output[0][10];
    flatten_output[idx++] = conv_output[0][11];
    flatten_output[idx++] = conv_output[0][12];
    flatten_output[idx++] = conv_output[0][13];
    flatten_output[idx++] = conv_output[0][14];
    flatten_output[idx++] = conv_output[0][15];
    flatten_output[idx++] = conv_output[0][16];
    flatten_output[idx++] = conv_output[0][17];
    flatten_output[idx++] = conv_output[0][18];
    flatten_output[idx++] = conv_output[0][19];
    flatten_output[idx++] = conv_output[0][20];
    flatten_output[idx++] = conv_output[0][21];
    flatten_output[idx++] = conv_output[0][22];
    flatten_output[idx++] = conv_output[0][23];
    flatten_output[idx++] = conv_output[0][24];
    flatten_output[idx++] = conv_output[0][25];
    flatten_output[idx++] = conv_output[1][0];
    flatten_output[idx++] = conv_output[1][1];
    flatten_output[idx++] = conv_output[1][2];
    flatten_output[idx++] = conv_output[1][3];
    flatten_output[idx++] = conv_output[1][4];
    flatten_output[idx++] = conv_output[1][5];
    flatten_output[idx++] = conv_output[1][6];
    flatten_output[idx++] = conv_output[1][7];
    flatten_output[idx++] = conv_output[1][8];
    flatten_output[idx++] = conv_output[1][9];
    flatten_output[idx++] = conv_output[1][10];
    flatten_output[idx++] = conv_output[1][11];
    flatten_output[idx++] = conv_output[1][12];
    flatten_output[idx++] = conv_output[1][13];
    flatten_output[idx++] = conv_output[1][14];
    flatten_output[idx++] = conv_output[1][15];
    flatten_output[idx++] = conv_output[1][16];
    flatten_output[idx++] = conv_output[1][17];
    flatten_output[idx++] = conv_output[1][18];
    flatten_output[idx++] = conv_output[1][19];
    flatten_output[idx++] = conv_output[1][20];
    flatten_output[idx++] = conv_output[1][21];
    flatten_output[idx++] = conv_output[1][22];
    flatten_output[idx++] = conv_output[1][23];
    flatten_output[idx++] = conv_output[1][24];
    flatten_output[idx++] = conv_output[1][25];
    flatten_output[idx++] = conv_output[2][0];
    flatten_output[idx++] = conv_output[2][1];
    flatten_output[idx++] = conv_output[2][2];
    flatten_output[idx++] = conv_output[2][3];
    flatten_output[idx++] = conv_output[2][4];
    flatten_output[idx++] = conv_output[2][5];
    flatten_output[idx++] = conv_output[2][6];
    flatten_output[idx++] = conv_output[2][7];
    flatten_output[idx++] = conv_output[2][8];
    flatten_output[idx++] = conv_output[2][9];
    flatten_output[idx++] = conv_output[2][10];
    flatten_output[idx++] = conv_output[2][11];
    flatten_output[idx++] = conv_output[2][12];
    flatten_output[idx++] = conv_output[2][13];
    flatten_output[idx++] = conv_output[2][14];
    flatten_output[idx++] = conv_output[2][15];
    flatten_output[idx++] = conv_output[2][16];
    flatten_output[idx++] = conv_output[2][17];
    flatten_output[idx++] = conv_output[2][18];
    flatten_output[idx++] = conv_output[2][19];
    flatten_output[idx++] = conv_output[2][20];
    flatten_output[idx++] = conv_output[2][21];
    flatten_output[idx++] = conv_output[2][22];
    flatten_output[idx++] = conv_output[2][23];
    flatten_output[idx++] = conv_output[2][24];
    flatten_output[idx++] = conv_output[2][25];
    flatten_output[idx++] = conv_output[3][0];
    flatten_output[idx++] = conv_output[3][1];
    flatten_output[idx++] = conv_output[3][2];
    flatten_output[idx++] = conv_output[3][3];
    flatten_output[idx++] = conv_output[3][4];
    flatten_output[idx++] = conv_output[3][5];
    flatten_output[idx++] = conv_output[3][6];
    flatten_output[idx++] = conv_output[3][7];
    flatten_output[idx++] = conv_output[3][8];
    flatten_output[idx++] = conv_output[3][9];
    flatten_output[idx++] = conv_output[3][10];
    flatten_output[idx++] = conv_output[3][11];
    flatten_output[idx++] = conv_output[3][12];
    flatten_output[idx++] = conv_output[3][13];
    flatten_output[idx++] = conv_output[3][14];
    flatten_output[idx++] = conv_output[3][15];
    flatten_output[idx++] = conv_output[3][16];
    flatten_output[idx++] = conv_output[3][17];
    flatten_output[idx++] = conv_output[3][18];
    flatten_output[idx++] = conv_output[3][19];
    flatten_output[idx++] = conv_output[3][20];
    flatten_output[idx++] = conv_output[3][21];
    flatten_output[idx++] = conv_output[3][22];
    flatten_output[idx++] = conv_output[3][23];
    flatten_output[idx++] = conv_output[3][24];
    flatten_output[idx++] = conv_output[3][25];
    flatten_output[idx++] = conv_output[4][0];
    flatten_output[idx++] = conv_output[4][1];
    flatten_output[idx++] = conv_output[4][2];
    flatten_output[idx++] = conv_output[4][3];
    flatten_output[idx++] = conv_output[4][4];
    flatten_output[idx++] = conv_output[4][5];
    flatten_output[idx++] = conv_output[4][6];
    flatten_output[idx++] = conv_output[4][7];
    flatten_output[idx++] = conv_output[4][8];
    flatten_output[idx++] = conv_output[4][9];
    flatten_output[idx++] = conv_output[4][10];
    flatten_output[idx++] = conv_output[4][11];
    flatten_output[idx++] = conv_output[4][12];
    flatten_output[idx++] = conv_output[4][13];
    flatten_output[idx++] = conv_output[4][14];
    flatten_output[idx++] = conv_output[4][15];
    flatten_output[idx++] = conv_output[4][16];
    flatten_output[idx++] = conv_output[4][17];
    flatten_output[idx++] = conv_output[4][18];
    flatten_output[idx++] = conv_output[4][19];
    flatten_output[idx++] = conv_output[4][20];
    flatten_output[idx++] = conv_output[4][21];
    flatten_output[idx++] = conv_output[4][22];
    flatten_output[idx++] = conv_output[4][23];
    flatten_output[idx++] = conv_output[4][24];
    flatten_output[idx++] = conv_output[4][25];
    flatten_output[idx++] = conv_output[5][0];
    flatten_output[idx++] = conv_output[5][1];
    flatten_output[idx++] = conv_output[5][2];
    flatten_output[idx++] = conv_output[5][3];
    flatten_output[idx++] = conv_output[5][4];
    flatten_output[idx++] = conv_output[5][5];
    flatten_output[idx++] = conv_output[5][6];
    flatten_output[idx++] = conv_output[5][7];
    flatten_output[idx++] = conv_output[5][8];
    flatten_output[idx++] = conv_output[5][9];
    flatten_output[idx++] = conv_output[5][10];
    flatten_output[idx++] = conv_output[5][11];
    flatten_output[idx++] = conv_output[5][12];
    flatten_output[idx++] = conv_output[5][13];
    flatten_output[idx++] = conv_output[5][14];
    flatten_output[idx++] = conv_output[5][15];
    flatten_output[idx++] = conv_output[5][16];
    flatten_output[idx++] = conv_output[5][17];
    flatten_output[idx++] = conv_output[5][18];
    flatten_output[idx++] = conv_output[5][19];
    flatten_output[idx++] = conv_output[5][20];
    flatten_output[idx++] = conv_output[5][21];
    flatten_output[idx++] = conv_output[5][22];
    flatten_output[idx++] = conv_output[5][23];
    flatten_output[idx++] = conv_output[5][24];
    flatten_output[idx++] = conv_output[5][25];
    flatten_output[idx++] = conv_output[6][0];
    flatten_output[idx++] = conv_output[6][1];
    flatten_output[idx++] = conv_output[6][2];
    flatten_output[idx++] = conv_output[6][3];
    flatten_output[idx++] = conv_output[6][4];
    flatten_output[idx++] = conv_output[6][5];
    flatten_output[idx++] = conv_output[6][6];
    flatten_output[idx++] = conv_output[6][7];
    flatten_output[idx++] = conv_output[6][8];
    flatten_output[idx++] = conv_output[6][9];
    flatten_output[idx++] = conv_output[6][10];
    flatten_output[idx++] = conv_output[6][11];
    flatten_output[idx++] = conv_output[6][12];
    flatten_output[idx++] = conv_output[6][13];
    flatten_output[idx++] = conv_output[6][14];
    flatten_output[idx++] = conv_output[6][15];
    flatten_output[idx++] = conv_output[6][16];
    flatten_output[idx++] = conv_output[6][17];
    flatten_output[idx++] = conv_output[6][18];
    flatten_output[idx++] = conv_output[6][19];
    flatten_output[idx++] = conv_output[6][20];
    flatten_output[idx++] = conv_output[6][21];
    flatten_output[idx++] = conv_output[6][22];
    flatten_output[idx++] = conv_output[6][23];
    flatten_output[idx++] = conv_output[6][24];
    flatten_output[idx++] = conv_output[6][25];
    flatten_output[idx++] = conv_output[7][0];
    flatten_output[idx++] = conv_output[7][1];
    flatten_output[idx++] = conv_output[7][2];
    flatten_output[idx++] = conv_output[7][3];
    flatten_output[idx++] = conv_output[7][4];
    flatten_output[idx++] = conv_output[7][5];
    flatten_output[idx++] = conv_output[7][6];
    flatten_output[idx++] = conv_output[7][7];
    flatten_output[idx++] = conv_output[7][8];
    flatten_output[idx++] = conv_output[7][9];
    flatten_output[idx++] = conv_output[7][10];
    flatten_output[idx++] = conv_output[7][11];
    flatten_output[idx++] = conv_output[7][12];
    flatten_output[idx++] = conv_output[7][13];
    flatten_output[idx++] = conv_output[7][14];
    flatten_output[idx++] = conv_output[7][15];
    flatten_output[idx++] = conv_output[7][16];
    flatten_output[idx++] = conv_output[7][17];
    flatten_output[idx++] = conv_output[7][18];
    flatten_output[idx++] = conv_output[7][19];
    flatten_output[idx++] = conv_output[7][20];
    flatten_output[idx++] = conv_output[7][21];
    flatten_output[idx++] = conv_output[7][22];
    flatten_output[idx++] = conv_output[7][23];
    flatten_output[idx++] = conv_output[7][24];
    flatten_output[idx++] = conv_output[7][25];
    flatten_output[idx++] = conv_output[8][0];
    flatten_output[idx++] = conv_output[8][1];
    flatten_output[idx++] = conv_output[8][2];
    flatten_output[idx++] = conv_output[8][3];
    flatten_output[idx++] = conv_output[8][4];
    flatten_output[idx++] = conv_output[8][5];
    flatten_output[idx++] = conv_output[8][6];
    flatten_output[idx++] = conv_output[8][7];
    flatten_output[idx++] = conv_output[8][8];
    flatten_output[idx++] = conv_output[8][9];
    flatten_output[idx++] = conv_output[8][10];
    flatten_output[idx++] = conv_output[8][11];
    flatten_output[idx++] = conv_output[8][12];
    flatten_output[idx++] = conv_output[8][13];
    flatten_output[idx++] = conv_output[8][14];
    flatten_output[idx++] = conv_output[8][15];
    flatten_output[idx++] = conv_output[8][16];
    flatten_output[idx++] = conv_output[8][17];
    flatten_output[idx++] = conv_output[8][18];
    flatten_output[idx++] = conv_output[8][19];
    flatten_output[idx++] = conv_output[8][20];
    flatten_output[idx++] = conv_output[8][21];
    flatten_output[idx++] = conv_output[8][22];
    flatten_output[idx++] = conv_output[8][23];
    flatten_output[idx++] = conv_output[8][24];
    flatten_output[idx++] = conv_output[8][25];
    flatten_output[idx++] = conv_output[9][0];
    flatten_output[idx++] = conv_output[9][1];
    flatten_output[idx++] = conv_output[9][2];
    flatten_output[idx++] = conv_output[9][3];
    flatten_output[idx++] = conv_output[9][4];
    flatten_output[idx++] = conv_output[9][5];
    flatten_output[idx++] = conv_output[9][6];
    flatten_output[idx++] = conv_output[9][7];
    flatten_output[idx++] = conv_output[9][8];
    flatten_output[idx++] = conv_output[9][9];
    flatten_output[idx++] = conv_output[9][10];
    flatten_output[idx++] = conv_output[9][11];
    flatten_output[idx++] = conv_output[9][12];
    flatten_output[idx++] = conv_output[9][13];
    flatten_output[idx++] = conv_output[9][14];
    flatten_output[idx++] = conv_output[9][15];
    flatten_output[idx++] = conv_output[9][16];
    flatten_output[idx++] = conv_output[9][17];
    flatten_output[idx++] = conv_output[9][18];
    flatten_output[idx++] = conv_output[9][19];
    flatten_output[idx++] = conv_output[9][20];
    flatten_output[idx++] = conv_output[9][21];
    flatten_output[idx++] = conv_output[9][22];
    flatten_output[idx++] = conv_output[9][23];
    flatten_output[idx++] = conv_output[9][24];
    flatten_output[idx++] = conv_output[9][25];
    flatten_output[idx++] = conv_output[10][0];
    flatten_output[idx++] = conv_output[10][1];
    flatten_output[idx++] = conv_output[10][2];
    flatten_output[idx++] = conv_output[10][3];
    flatten_output[idx++] = conv_output[10][4];
    flatten_output[idx++] = conv_output[10][5];
    flatten_output[idx++] = conv_output[10][6];
    flatten_output[idx++] = conv_output[10][7];
    flatten_output[idx++] = conv_output[10][8];
    flatten_output[idx++] = conv_output[10][9];
    flatten_output[idx++] = conv_output[10][10];
    flatten_output[idx++] = conv_output[10][11];
    flatten_output[idx++] = conv_output[10][12];
    flatten_output[idx++] = conv_output[10][13];
    flatten_output[idx++] = conv_output[10][14];
    flatten_output[idx++] = conv_output[10][15];
    flatten_output[idx++] = conv_output[10][16];
    flatten_output[idx++] = conv_output[10][17];
    flatten_output[idx++] = conv_output[10][18];
    flatten_output[idx++] = conv_output[10][19];
    flatten_output[idx++] = conv_output[10][20];
    flatten_output[idx++] = conv_output[10][21];
    flatten_output[idx++] = conv_output[10][22];
    flatten_output[idx++] = conv_output[10][23];
    flatten_output[idx++] = conv_output[10][24];
    flatten_output[idx++] = conv_output[10][25];
    flatten_output[idx++] = conv_output[11][0];
    flatten_output[idx++] = conv_output[11][1];
    flatten_output[idx++] = conv_output[11][2];
    flatten_output[idx++] = conv_output[11][3];
    flatten_output[idx++] = conv_output[11][4];
    flatten_output[idx++] = conv_output[11][5];
    flatten_output[idx++] = conv_output[11][6];
    flatten_output[idx++] = conv_output[11][7];
    flatten_output[idx++] = conv_output[11][8];
    flatten_output[idx++] = conv_output[11][9];
    flatten_output[idx++] = conv_output[11][10];
    flatten_output[idx++] = conv_output[11][11];
    flatten_output[idx++] = conv_output[11][12];
    flatten_output[idx++] = conv_output[11][13];
    flatten_output[idx++] = conv_output[11][14];
    flatten_output[idx++] = conv_output[11][15];
    flatten_output[idx++] = conv_output[11][16];
    flatten_output[idx++] = conv_output[11][17];
    flatten_output[idx++] = conv_output[11][18];
    flatten_output[idx++] = conv_output[11][19];
    flatten_output[idx++] = conv_output[11][20];
    flatten_output[idx++] = conv_output[11][21];
    flatten_output[idx++] = conv_output[11][22];
    flatten_output[idx++] = conv_output[11][23];
    flatten_output[idx++] = conv_output[11][24];
    flatten_output[idx++] = conv_output[11][25];
    flatten_output[idx++] = conv_output[12][0];
    flatten_output[idx++] = conv_output[12][1];
    flatten_output[idx++] = conv_output[12][2];
    flatten_output[idx++] = conv_output[12][3];
    flatten_output[idx++] = conv_output[12][4];
    flatten_output[idx++] = conv_output[12][5];
    flatten_output[idx++] = conv_output[12][6];
    flatten_output[idx++] = conv_output[12][7];
    flatten_output[idx++] = conv_output[12][8];
    flatten_output[idx++] = conv_output[12][9];
    flatten_output[idx++] = conv_output[12][10];
    flatten_output[idx++] = conv_output[12][11];
    flatten_output[idx++] = conv_output[12][12];
    flatten_output[idx++] = conv_output[12][13];
    flatten_output[idx++] = conv_output[12][14];
    flatten_output[idx++] = conv_output[12][15];
    flatten_output[idx++] = conv_output[12][16];
    flatten_output[idx++] = conv_output[12][17];
    flatten_output[idx++] = conv_output[12][18];
    flatten_output[idx++] = conv_output[12][19];
    flatten_output[idx++] = conv_output[12][20];
    flatten_output[idx++] = conv_output[12][21];
    flatten_output[idx++] = conv_output[12][22];
    flatten_output[idx++] = conv_output[12][23];
    flatten_output[idx++] = conv_output[12][24];
    flatten_output[idx++] = conv_output[12][25];
    flatten_output[idx++] = conv_output[13][0];
    flatten_output[idx++] = conv_output[13][1];
    flatten_output[idx++] = conv_output[13][2];
    flatten_output[idx++] = conv_output[13][3];
    flatten_output[idx++] = conv_output[13][4];
    flatten_output[idx++] = conv_output[13][5];
    flatten_output[idx++] = conv_output[13][6];
    flatten_output[idx++] = conv_output[13][7];
    flatten_output[idx++] = conv_output[13][8];
    flatten_output[idx++] = conv_output[13][9];
    flatten_output[idx++] = conv_output[13][10];
    flatten_output[idx++] = conv_output[13][11];
    flatten_output[idx++] = conv_output[13][12];
    flatten_output[idx++] = conv_output[13][13];
    flatten_output[idx++] = conv_output[13][14];
    flatten_output[idx++] = conv_output[13][15];
    flatten_output[idx++] = conv_output[13][16];
    flatten_output[idx++] = conv_output[13][17];
    flatten_output[idx++] = conv_output[13][18];
    flatten_output[idx++] = conv_output[13][19];
    flatten_output[idx++] = conv_output[13][20];
    flatten_output[idx++] = conv_output[13][21];
    flatten_output[idx++] = conv_output[13][22];
    flatten_output[idx++] = conv_output[13][23];
    flatten_output[idx++] = conv_output[13][24];
    flatten_output[idx++] = conv_output[13][25];
    flatten_output[idx++] = conv_output[14][0];
    flatten_output[idx++] = conv_output[14][1];
    flatten_output[idx++] = conv_output[14][2];
    flatten_output[idx++] = conv_output[14][3];
    flatten_output[idx++] = conv_output[14][4];
    flatten_output[idx++] = conv_output[14][5];
    flatten_output[idx++] = conv_output[14][6];
    flatten_output[idx++] = conv_output[14][7];
    flatten_output[idx++] = conv_output[14][8];
    flatten_output[idx++] = conv_output[14][9];
    flatten_output[idx++] = conv_output[14][10];
    flatten_output[idx++] = conv_output[14][11];
    flatten_output[idx++] = conv_output[14][12];
    flatten_output[idx++] = conv_output[14][13];
    flatten_output[idx++] = conv_output[14][14];
    flatten_output[idx++] = conv_output[14][15];
    flatten_output[idx++] = conv_output[14][16];
    flatten_output[idx++] = conv_output[14][17];
    flatten_output[idx++] = conv_output[14][18];
    flatten_output[idx++] = conv_output[14][19];
    flatten_output[idx++] = conv_output[14][20];
    flatten_output[idx++] = conv_output[14][21];
    flatten_output[idx++] = conv_output[14][22];
    flatten_output[idx++] = conv_output[14][23];
    flatten_output[idx++] = conv_output[14][24];
    flatten_output[idx++] = conv_output[14][25];
    flatten_output[idx++] = conv_output[15][0];
    flatten_output[idx++] = conv_output[15][1];
    flatten_output[idx++] = conv_output[15][2];
    flatten_output[idx++] = conv_output[15][3];
    flatten_output[idx++] = conv_output[15][4];
    flatten_output[idx++] = conv_output[15][5];
    flatten_output[idx++] = conv_output[15][6];
    flatten_output[idx++] = conv_output[15][7];
    flatten_output[idx++] = conv_output[15][8];
    flatten_output[idx++] = conv_output[15][9];
    flatten_output[idx++] = conv_output[15][10];
    flatten_output[idx++] = conv_output[15][11];
    flatten_output[idx++] = conv_output[15][12];
    flatten_output[idx++] = conv_output[15][13];
    flatten_output[idx++] = conv_output[15][14];
    flatten_output[idx++] = conv_output[15][15];
    flatten_output[idx++] = conv_output[15][16];
    flatten_output[idx++] = conv_output[15][17];
    flatten_output[idx++] = conv_output[15][18];
    flatten_output[idx++] = conv_output[15][19];
    flatten_output[idx++] = conv_output[15][20];
    flatten_output[idx++] = conv_output[15][21];
    flatten_output[idx++] = conv_output[15][22];
    flatten_output[idx++] = conv_output[15][23];
    flatten_output[idx++] = conv_output[15][24];
    flatten_output[idx++] = conv_output[15][25];
    flatten_output[idx++] = conv_output[16][0];
    flatten_output[idx++] = conv_output[16][1];
    flatten_output[idx++] = conv_output[16][2];
    flatten_output[idx++] = conv_output[16][3];
    flatten_output[idx++] = conv_output[16][4];
    flatten_output[idx++] = conv_output[16][5];
    flatten_output[idx++] = conv_output[16][6];
    flatten_output[idx++] = conv_output[16][7];
    flatten_output[idx++] = conv_output[16][8];
    flatten_output[idx++] = conv_output[16][9];
    flatten_output[idx++] = conv_output[16][10];
    flatten_output[idx++] = conv_output[16][11];
    flatten_output[idx++] = conv_output[16][12];
    flatten_output[idx++] = conv_output[16][13];
    flatten_output[idx++] = conv_output[16][14];
    flatten_output[idx++] = conv_output[16][15];
    flatten_output[idx++] = conv_output[16][16];
    flatten_output[idx++] = conv_output[16][17];
    flatten_output[idx++] = conv_output[16][18];
    flatten_output[idx++] = conv_output[16][19];
    flatten_output[idx++] = conv_output[16][20];
    flatten_output[idx++] = conv_output[16][21];
    flatten_output[idx++] = conv_output[16][22];
    flatten_output[idx++] = conv_output[16][23];
    flatten_output[idx++] = conv_output[16][24];
    flatten_output[idx++] = conv_output[16][25];
    flatten_output[idx++] = conv_output[17][0];
    flatten_output[idx++] = conv_output[17][1];
    flatten_output[idx++] = conv_output[17][2];
    flatten_output[idx++] = conv_output[17][3];
    flatten_output[idx++] = conv_output[17][4];
    flatten_output[idx++] = conv_output[17][5];
    flatten_output[idx++] = conv_output[17][6];
    flatten_output[idx++] = conv_output[17][7];
    flatten_output[idx++] = conv_output[17][8];
    flatten_output[idx++] = conv_output[17][9];
    flatten_output[idx++] = conv_output[17][10];
    flatten_output[idx++] = conv_output[17][11];
    flatten_output[idx++] = conv_output[17][12];
    flatten_output[idx++] = conv_output[17][13];
    flatten_output[idx++] = conv_output[17][14];
    flatten_output[idx++] = conv_output[17][15];
    flatten_output[idx++] = conv_output[17][16];
    flatten_output[idx++] = conv_output[17][17];
    flatten_output[idx++] = conv_output[17][18];
    flatten_output[idx++] = conv_output[17][19];
    flatten_output[idx++] = conv_output[17][20];
    flatten_output[idx++] = conv_output[17][21];
    flatten_output[idx++] = conv_output[17][22];
    flatten_output[idx++] = conv_output[17][23];
    flatten_output[idx++] = conv_output[17][24];
    flatten_output[idx++] = conv_output[17][25];
    flatten_output[idx++] = conv_output[18][0];
    flatten_output[idx++] = conv_output[18][1];
    flatten_output[idx++] = conv_output[18][2];
    flatten_output[idx++] = conv_output[18][3];
    flatten_output[idx++] = conv_output[18][4];
    flatten_output[idx++] = conv_output[18][5];
    flatten_output[idx++] = conv_output[18][6];
    flatten_output[idx++] = conv_output[18][7];
    flatten_output[idx++] = conv_output[18][8];
    flatten_output[idx++] = conv_output[18][9];
    flatten_output[idx++] = conv_output[18][10];
    flatten_output[idx++] = conv_output[18][11];
    flatten_output[idx++] = conv_output[18][12];
    flatten_output[idx++] = conv_output[18][13];
    flatten_output[idx++] = conv_output[18][14];
    flatten_output[idx++] = conv_output[18][15];
    flatten_output[idx++] = conv_output[18][16];
    flatten_output[idx++] = conv_output[18][17];
    flatten_output[idx++] = conv_output[18][18];
    flatten_output[idx++] = conv_output[18][19];
    flatten_output[idx++] = conv_output[18][20];
    flatten_output[idx++] = conv_output[18][21];
    flatten_output[idx++] = conv_output[18][22];
    flatten_output[idx++] = conv_output[18][23];
    flatten_output[idx++] = conv_output[18][24];
    flatten_output[idx++] = conv_output[18][25];
    flatten_output[idx++] = conv_output[19][0];
    flatten_output[idx++] = conv_output[19][1];
    flatten_output[idx++] = conv_output[19][2];
    flatten_output[idx++] = conv_output[19][3];
    flatten_output[idx++] = conv_output[19][4];
    flatten_output[idx++] = conv_output[19][5];
    flatten_output[idx++] = conv_output[19][6];
    flatten_output[idx++] = conv_output[19][7];
    flatten_output[idx++] = conv_output[19][8];
    flatten_output[idx++] = conv_output[19][9];
    flatten_output[idx++] = conv_output[19][10];
    flatten_output[idx++] = conv_output[19][11];
    flatten_output[idx++] = conv_output[19][12];
    flatten_output[idx++] = conv_output[19][13];
    flatten_output[idx++] = conv_output[19][14];
    flatten_output[idx++] = conv_output[19][15];
    flatten_output[idx++] = conv_output[19][16];
    flatten_output[idx++] = conv_output[19][17];
    flatten_output[idx++] = conv_output[19][18];
    flatten_output[idx++] = conv_output[19][19];
    flatten_output[idx++] = conv_output[19][20];
    flatten_output[idx++] = conv_output[19][21];
    flatten_output[idx++] = conv_output[19][22];
    flatten_output[idx++] = conv_output[19][23];
    flatten_output[idx++] = conv_output[19][24];
    flatten_output[idx++] = conv_output[19][25];
    flatten_output[idx++] = conv_output[20][0];
    flatten_output[idx++] = conv_output[20][1];
    flatten_output[idx++] = conv_output[20][2];
    flatten_output[idx++] = conv_output[20][3];
    flatten_output[idx++] = conv_output[20][4];
    flatten_output[idx++] = conv_output[20][5];
    flatten_output[idx++] = conv_output[20][6];
    flatten_output[idx++] = conv_output[20][7];
    flatten_output[idx++] = conv_output[20][8];
    flatten_output[idx++] = conv_output[20][9];
    flatten_output[idx++] = conv_output[20][10];
    flatten_output[idx++] = conv_output[20][11];
    flatten_output[idx++] = conv_output[20][12];
    flatten_output[idx++] = conv_output[20][13];
    flatten_output[idx++] = conv_output[20][14];
    flatten_output[idx++] = conv_output[20][15];
    flatten_output[idx++] = conv_output[20][16];
    flatten_output[idx++] = conv_output[20][17];
    flatten_output[idx++] = conv_output[20][18];
    flatten_output[idx++] = conv_output[20][19];
    flatten_output[idx++] = conv_output[20][20];
    flatten_output[idx++] = conv_output[20][21];
    flatten_output[idx++] = conv_output[20][22];
    flatten_output[idx++] = conv_output[20][23];
    flatten_output[idx++] = conv_output[20][24];
    flatten_output[idx++] = conv_output[20][25];
    flatten_output[idx++] = conv_output[21][0];
    flatten_output[idx++] = conv_output[21][1];
    flatten_output[idx++] = conv_output[21][2];
    flatten_output[idx++] = conv_output[21][3];
    flatten_output[idx++] = conv_output[21][4];
    flatten_output[idx++] = conv_output[21][5];
    flatten_output[idx++] = conv_output[21][6];
    flatten_output[idx++] = conv_output[21][7];
    flatten_output[idx++] = conv_output[21][8];
    flatten_output[idx++] = conv_output[21][9];
    flatten_output[idx++] = conv_output[21][10];
    flatten_output[idx++] = conv_output[21][11];
    flatten_output[idx++] = conv_output[21][12];
    flatten_output[idx++] = conv_output[21][13];
    flatten_output[idx++] = conv_output[21][14];
    flatten_output[idx++] = conv_output[21][15];
    flatten_output[idx++] = conv_output[21][16];
    flatten_output[idx++] = conv_output[21][17];
    flatten_output[idx++] = conv_output[21][18];
    flatten_output[idx++] = conv_output[21][19];
    flatten_output[idx++] = conv_output[21][20];
    flatten_output[idx++] = conv_output[21][21];
    flatten_output[idx++] = conv_output[21][22];
    flatten_output[idx++] = conv_output[21][23];
    flatten_output[idx++] = conv_output[21][24];
    flatten_output[idx++] = conv_output[21][25];
    flatten_output[idx++] = conv_output[22][0];
    flatten_output[idx++] = conv_output[22][1];
    flatten_output[idx++] = conv_output[22][2];
    flatten_output[idx++] = conv_output[22][3];
    flatten_output[idx++] = conv_output[22][4];
    flatten_output[idx++] = conv_output[22][5];
    flatten_output[idx++] = conv_output[22][6];
    flatten_output[idx++] = conv_output[22][7];
    flatten_output[idx++] = conv_output[22][8];
    flatten_output[idx++] = conv_output[22][9];
    flatten_output[idx++] = conv_output[22][10];
    flatten_output[idx++] = conv_output[22][11];
    flatten_output[idx++] = conv_output[22][12];
    flatten_output[idx++] = conv_output[22][13];
    flatten_output[idx++] = conv_output[22][14];
    flatten_output[idx++] = conv_output[22][15];
    flatten_output[idx++] = conv_output[22][16];
    flatten_output[idx++] = conv_output[22][17];
    flatten_output[idx++] = conv_output[22][18];
    flatten_output[idx++] = conv_output[22][19];
    flatten_output[idx++] = conv_output[22][20];
    flatten_output[idx++] = conv_output[22][21];
    flatten_output[idx++] = conv_output[22][22];
    flatten_output[idx++] = conv_output[22][23];
    flatten_output[idx++] = conv_output[22][24];
    flatten_output[idx++] = conv_output[22][25];
    flatten_output[idx++] = conv_output[23][0];
    flatten_output[idx++] = conv_output[23][1];
    flatten_output[idx++] = conv_output[23][2];
    flatten_output[idx++] = conv_output[23][3];
    flatten_output[idx++] = conv_output[23][4];
    flatten_output[idx++] = conv_output[23][5];
    flatten_output[idx++] = conv_output[23][6];
    flatten_output[idx++] = conv_output[23][7];
    flatten_output[idx++] = conv_output[23][8];
    flatten_output[idx++] = conv_output[23][9];
    flatten_output[idx++] = conv_output[23][10];
    flatten_output[idx++] = conv_output[23][11];
    flatten_output[idx++] = conv_output[23][12];
    flatten_output[idx++] = conv_output[23][13];
    flatten_output[idx++] = conv_output[23][14];
    flatten_output[idx++] = conv_output[23][15];
    flatten_output[idx++] = conv_output[23][16];
    flatten_output[idx++] = conv_output[23][17];
    flatten_output[idx++] = conv_output[23][18];
    flatten_output[idx++] = conv_output[23][19];
    flatten_output[idx++] = conv_output[23][20];
    flatten_output[idx++] = conv_output[23][21];
    flatten_output[idx++] = conv_output[23][22];
    flatten_output[idx++] = conv_output[23][23];
    flatten_output[idx++] = conv_output[23][24];
    flatten_output[idx++] = conv_output[23][25];
    flatten_output[idx++] = conv_output[24][0];
    flatten_output[idx++] = conv_output[24][1];
    flatten_output[idx++] = conv_output[24][2];
    flatten_output[idx++] = conv_output[24][3];
    flatten_output[idx++] = conv_output[24][4];
    flatten_output[idx++] = conv_output[24][5];
    flatten_output[idx++] = conv_output[24][6];
    flatten_output[idx++] = conv_output[24][7];
    flatten_output[idx++] = conv_output[24][8];
    flatten_output[idx++] = conv_output[24][9];
    flatten_output[idx++] = conv_output[24][10];
    flatten_output[idx++] = conv_output[24][11];
    flatten_output[idx++] = conv_output[24][12];
    flatten_output[idx++] = conv_output[24][13];
    flatten_output[idx++] = conv_output[24][14];
    flatten_output[idx++] = conv_output[24][15];
    flatten_output[idx++] = conv_output[24][16];
    flatten_output[idx++] = conv_output[24][17];
    flatten_output[idx++] = conv_output[24][18];
    flatten_output[idx++] = conv_output[24][19];
    flatten_output[idx++] = conv_output[24][20];
    flatten_output[idx++] = conv_output[24][21];
    flatten_output[idx++] = conv_output[24][22];
    flatten_output[idx++] = conv_output[24][23];
    flatten_output[idx++] = conv_output[24][24];
    flatten_output[idx++] = conv_output[24][25];
    flatten_output[idx++] = conv_output[25][0];
    flatten_output[idx++] = conv_output[25][1];
    flatten_output[idx++] = conv_output[25][2];
    flatten_output[idx++] = conv_output[25][3];
    flatten_output[idx++] = conv_output[25][4];
    flatten_output[idx++] = conv_output[25][5];
    flatten_output[idx++] = conv_output[25][6];
    flatten_output[idx++] = conv_output[25][7];
    flatten_output[idx++] = conv_output[25][8];
    flatten_output[idx++] = conv_output[25][9];
    flatten_output[idx++] = conv_output[25][10];
    flatten_output[idx++] = conv_output[25][11];
    flatten_output[idx++] = conv_output[25][12];
    flatten_output[idx++] = conv_output[25][13];
    flatten_output[idx++] = conv_output[25][14];
    flatten_output[idx++] = conv_output[25][15];
    flatten_output[idx++] = conv_output[25][16];
    flatten_output[idx++] = conv_output[25][17];
    flatten_output[idx++] = conv_output[25][18];
    flatten_output[idx++] = conv_output[25][19];
    flatten_output[idx++] = conv_output[25][20];
    flatten_output[idx++] = conv_output[25][21];
    flatten_output[idx++] = conv_output[25][22];
    flatten_output[idx++] = conv_output[25][23];
    flatten_output[idx++] = conv_output[25][24];
    flatten_output[idx++] = conv_output[25][25];


    output[0] = -0.008574;
    output[0] += flatten_output[0] * -0.014832;
    output[0] += flatten_output[1] * -0.010253;
    output[0] += flatten_output[2] * 0.035281;
    output[0] += flatten_output[3] * -0.012873;
    output[0] += flatten_output[4] * 0.000376;
    output[0] += flatten_output[5] * -0.010839;
    output[0] += flatten_output[6] * 0.000496;
    output[0] += flatten_output[7] * 0.010398;
    output[0] += flatten_output[8] * -0.021009;
    output[0] += flatten_output[9] * 0.002441;
    output[0] += flatten_output[10] * 0.003101;
    output[0] += flatten_output[11] * -0.004244;
    output[0] += flatten_output[12] * 0.007838;
    output[0] += flatten_output[13] * 0.009005;
    output[0] += flatten_output[14] * 0.003563;
    output[0] += flatten_output[15] * 0.005855;
    output[0] += flatten_output[16] * 0.055835;
    output[0] += flatten_output[17] * -0.013001;
    output[0] += flatten_output[18] * -0.007037;
    output[0] += flatten_output[19] * 0.014647;
    output[0] += flatten_output[20] * 0.003124;
    output[0] += flatten_output[21] * -0.004593;
    output[0] += flatten_output[22] * -0.021852;
    output[0] += flatten_output[23] * -0.011094;
    output[0] += flatten_output[24] * 0.003926;
    output[0] += flatten_output[25] * -0.007899;
    output[0] += flatten_output[26] * -0.012724;
    output[0] += flatten_output[27] * 0.008672;
    output[0] += flatten_output[28] * -0.011402;
    output[0] += flatten_output[29] * 0.016375;
    output[0] += flatten_output[30] * 0.011399;
    output[0] += flatten_output[31] * 0.002584;
    output[0] += flatten_output[32] * -0.013556;
    output[0] += flatten_output[33] * -0.018224;
    output[0] += flatten_output[34] * 0.038854;
    output[0] += flatten_output[35] * 0.011692;
    output[0] += flatten_output[36] * -0.003455;
    output[0] += flatten_output[37] * -0.001662;
    output[0] += flatten_output[38] * 0.006779;
    output[0] += flatten_output[39] * -0.001943;
    output[0] += flatten_output[40] * -0.007533;
    output[0] += flatten_output[41] * -0.011944;
    output[0] += flatten_output[42] * 0.017790;
    output[0] += flatten_output[43] * 0.005168;
    output[0] += flatten_output[44] * 0.006129;
    output[0] += flatten_output[45] * 0.005271;
    output[0] += flatten_output[46] * -0.004540;
    output[0] += flatten_output[47] * -0.017600;
    output[0] += flatten_output[48] * 0.038606;
    output[0] += flatten_output[49] * -0.007725;
    output[0] += flatten_output[50] * -0.012053;
    output[0] += flatten_output[51] * 0.007877;
    output[0] += flatten_output[52] * 0.003754;
    output[0] += flatten_output[53] * -0.009699;
    output[0] += flatten_output[54] * 0.002492;
    output[0] += flatten_output[55] * 0.006640;
    output[0] += flatten_output[56] * 0.015485;
    output[0] += flatten_output[57] * -0.000912;
    output[0] += flatten_output[58] * 0.007380;
    output[0] += flatten_output[59] * 0.009810;
    output[0] += flatten_output[60] * -0.002863;
    output[0] += flatten_output[61] * 0.059286;
    output[0] += flatten_output[62] * -0.009383;
    output[0] += flatten_output[63] * -0.004012;
    output[0] += flatten_output[64] * -0.020468;
    output[0] += flatten_output[65] * 0.004842;
    output[0] += flatten_output[66] * 0.032804;
    output[0] += flatten_output[67] * 0.035649;
    output[0] += flatten_output[68] * -0.003551;
    output[0] += flatten_output[69] * -0.002413;
    output[0] += flatten_output[70] * -0.015944;
    output[0] += flatten_output[71] * -0.013556;
    output[0] += flatten_output[72] * -0.020089;
    output[0] += flatten_output[73] * -0.004620;
    output[0] += flatten_output[74] * 0.018015;
    output[0] += flatten_output[75] * 0.021046;
    output[0] += flatten_output[76] * -0.017913;
    output[0] += flatten_output[77] * 0.011045;
    output[0] += flatten_output[78] * 0.006068;
    output[0] += flatten_output[79] * -0.019376;
    output[0] += flatten_output[80] * 0.053796;
    output[0] += flatten_output[81] * -0.024186;
    output[0] += flatten_output[82] * -0.025694;
    output[0] += flatten_output[83] * -0.000136;
    output[0] += flatten_output[84] * -0.003766;
    output[0] += flatten_output[85] * 0.004471;
    output[0] += flatten_output[86] * -0.013024;
    output[0] += flatten_output[87] * -0.003201;
    output[0] += flatten_output[88] * 0.007706;
    output[0] += flatten_output[89] * -0.002249;
    output[0] += flatten_output[90] * 0.011785;
    output[0] += flatten_output[91] * -0.021902;
    output[0] += flatten_output[92] * -0.016568;
    output[0] += flatten_output[93] * 0.070279;
    output[0] += flatten_output[94] * 0.018765;
    output[0] += flatten_output[95] * 0.010242;
    output[0] += flatten_output[96] * -0.020045;
    output[0] += flatten_output[97] * 0.006803;
    output[0] += flatten_output[98] * 0.030067;
    output[0] += flatten_output[99] * 0.041863;
    output[0] += flatten_output[100] * 0.003065;
    output[0] += flatten_output[101] * 0.002390;
    output[0] += flatten_output[102] * -0.025320;
    output[0] += flatten_output[103] * 0.007084;
    output[0] += flatten_output[104] * -0.009425;
    output[0] += flatten_output[105] * -0.009351;
    output[0] += flatten_output[106] * 0.011417;
    output[0] += flatten_output[107] * 0.003780;
    output[0] += flatten_output[108] * 0.009780;
    output[0] += flatten_output[109] * 0.005094;
    output[0] += flatten_output[110] * -0.017670;
    output[0] += flatten_output[111] * -0.010519;
    output[0] += flatten_output[112] * 0.067414;
    output[0] += flatten_output[113] * -0.010463;
    output[0] += flatten_output[114] * -0.015797;
    output[0] += flatten_output[115] * -0.007875;
    output[0] += flatten_output[116] * 0.008416;
    output[0] += flatten_output[117] * -0.007405;
    output[0] += flatten_output[118] * -0.007292;
    output[0] += flatten_output[119] * -0.014027;
    output[0] += flatten_output[120] * 0.010557;
    output[0] += flatten_output[121] * 0.002252;
    output[0] += flatten_output[122] * -0.000571;
    output[0] += flatten_output[123] * -0.004375;
    output[0] += flatten_output[124] * -0.013100;
    output[0] += flatten_output[125] * 0.062049;
    output[0] += flatten_output[126] * -0.010592;
    output[0] += flatten_output[127] * -0.014136;
    output[0] += flatten_output[128] * 0.005723;
    output[0] += flatten_output[129] * 0.003825;
    output[0] += flatten_output[130] * 0.030280;
    output[0] += flatten_output[131] * -0.008615;
    output[0] += flatten_output[132] * -0.041892;
    output[0] += flatten_output[133] * -0.019883;
    output[0] += flatten_output[134] * -0.018414;
    output[0] += flatten_output[135] * -0.003286;
    output[0] += flatten_output[136] * -0.041154;
    output[0] += flatten_output[137] * -0.008468;
    output[0] += flatten_output[138] * -0.023861;
    output[0] += flatten_output[139] * 0.018666;
    output[0] += flatten_output[140] * -0.002183;
    output[0] += flatten_output[141] * 0.014548;
    output[0] += flatten_output[142] * -0.008249;
    output[0] += flatten_output[143] * -0.008439;
    output[0] += flatten_output[144] * 0.038131;
    output[0] += flatten_output[145] * -0.041934;
    output[0] += flatten_output[146] * -0.010099;
    output[0] += flatten_output[147] * -0.031111;
    output[0] += flatten_output[148] * -0.024027;
    output[0] += flatten_output[149] * -0.020406;
    output[0] += flatten_output[150] * -0.012925;
    output[0] += flatten_output[151] * -0.014716;
    output[0] += flatten_output[152] * 0.016032;
    output[0] += flatten_output[153] * -0.019574;
    output[0] += flatten_output[154] * -0.002094;
    output[0] += flatten_output[155] * -0.013393;
    output[0] += flatten_output[156] * -0.020161;
    output[0] += flatten_output[157] * -0.008551;
    output[0] += flatten_output[158] * 0.009419;
    output[0] += flatten_output[159] * 0.011349;
    output[0] += flatten_output[160] * 0.011906;
    output[0] += flatten_output[161] * -0.013347;
    output[0] += flatten_output[162] * 0.050966;
    output[0] += flatten_output[163] * 0.011012;
    output[0] += flatten_output[164] * -0.032059;
    output[0] += flatten_output[165] * -0.018510;
    output[0] += flatten_output[166] * 0.001023;
    output[0] += flatten_output[167] * 0.009920;
    output[0] += flatten_output[168] * -0.024194;
    output[0] += flatten_output[169] * -0.011938;
    output[0] += flatten_output[170] * 0.002649;
    output[0] += flatten_output[171] * 0.018340;
    output[0] += flatten_output[172] * -0.011986;
    output[0] += flatten_output[173] * 0.006896;
    output[0] += flatten_output[174] * 0.009954;
    output[0] += flatten_output[175] * -0.008913;
    output[0] += flatten_output[176] * 0.051636;
    output[0] += flatten_output[177] * -0.018900;
    output[0] += flatten_output[178] * -0.008497;
    output[0] += flatten_output[179] * 0.009815;
    output[0] += flatten_output[180] * -0.007784;
    output[0] += flatten_output[181] * -0.001551;
    output[0] += flatten_output[182] * 0.003317;
    output[0] += flatten_output[183] * -0.017791;
    output[0] += flatten_output[184] * 0.008016;
    output[0] += flatten_output[185] * -0.004070;
    output[0] += flatten_output[186] * -0.002369;
    output[0] += flatten_output[187] * 0.048073;
    output[0] += flatten_output[188] * -0.032736;
    output[0] += flatten_output[189] * -0.003966;
    output[0] += flatten_output[190] * 0.018115;
    output[0] += flatten_output[191] * -0.013886;
    output[0] += flatten_output[192] * 0.053857;
    output[0] += flatten_output[193] * 0.011850;
    output[0] += flatten_output[194] * 0.044753;
    output[0] += flatten_output[195] * -0.008281;
    output[0] += flatten_output[196] * -0.023717;
    output[0] += flatten_output[197] * 0.004713;
    output[0] += flatten_output[198] * -0.000882;
    output[0] += flatten_output[199] * 0.015799;
    output[0] += flatten_output[200] * -0.037489;
    output[0] += flatten_output[201] * -0.004617;
    output[0] += flatten_output[202] * 0.011266;
    output[0] += flatten_output[203] * -0.010290;
    output[0] += flatten_output[204] * -0.031091;
    output[0] += flatten_output[205] * 0.012093;
    output[0] += flatten_output[206] * -0.000533;
    output[0] += flatten_output[207] * -0.018859;
    output[0] += flatten_output[208] * 0.053251;
    output[0] += flatten_output[209] * -0.041356;
    output[0] += flatten_output[210] * -0.022959;
    output[0] += flatten_output[211] * -0.014822;
    output[0] += flatten_output[212] * -0.054771;
    output[0] += flatten_output[213] * -0.023491;
    output[0] += flatten_output[214] * -0.013219;
    output[0] += flatten_output[215] * -0.011549;
    output[0] += flatten_output[216] * 0.017507;
    output[0] += flatten_output[217] * -0.005787;
    output[0] += flatten_output[218] * 0.025411;
    output[0] += flatten_output[219] * -0.051506;
    output[0] += flatten_output[220] * -0.043103;
    output[0] += flatten_output[221] * -0.008529;
    output[0] += flatten_output[222] * 0.010722;
    output[0] += flatten_output[223] * -0.011291;
    output[0] += flatten_output[224] * -0.028925;
    output[0] += flatten_output[225] * -0.076000;
    output[0] += flatten_output[226] * 0.051081;
    output[0] += flatten_output[227] * -0.026090;
    output[0] += flatten_output[228] * -0.072391;
    output[0] += flatten_output[229] * -0.021449;
    output[0] += flatten_output[230] * -0.000673;
    output[0] += flatten_output[231] * 0.011120;
    output[0] += flatten_output[232] * -0.044058;
    output[0] += flatten_output[233] * 0.016615;
    output[0] += flatten_output[234] * -0.014066;
    output[0] += flatten_output[235] * -0.007775;
    output[0] += flatten_output[236] * -0.004805;
    output[0] += flatten_output[237] * -0.030254;
    output[0] += flatten_output[238] * -0.009409;
    output[0] += flatten_output[239] * -0.001654;
    output[0] += flatten_output[240] * 0.054637;
    output[0] += flatten_output[241] * -0.051049;
    output[0] += flatten_output[242] * -0.010604;
    output[0] += flatten_output[243] * -0.010753;
    output[0] += flatten_output[244] * -0.066223;
    output[0] += flatten_output[245] * 0.009639;
    output[0] += flatten_output[246] * -0.015330;
    output[0] += flatten_output[247] * -0.020732;
    output[0] += flatten_output[248] * -0.009597;
    output[0] += flatten_output[249] * -0.046651;
    output[0] += flatten_output[250] * -0.015519;
    output[0] += flatten_output[251] * -0.023862;
    output[0] += flatten_output[252] * -0.063920;
    output[0] += flatten_output[253] * -0.016538;
    output[0] += flatten_output[254] * -0.007872;
    output[0] += flatten_output[255] * -0.014754;
    output[0] += flatten_output[256] * -0.011955;
    output[0] += flatten_output[257] * -0.080103;
    output[0] += flatten_output[258] * 0.049061;
    output[0] += flatten_output[259] * -0.166536;
    output[0] += flatten_output[260] * -0.107022;
    output[0] += flatten_output[261] * -0.035915;
    output[0] += flatten_output[262] * -0.026657;
    output[0] += flatten_output[263] * 0.005456;
    output[0] += flatten_output[264] * -0.040353;
    output[0] += flatten_output[265] * 0.006545;
    output[0] += flatten_output[266] * -0.031644;
    output[0] += flatten_output[267] * 0.007368;
    output[0] += flatten_output[268] * -0.044760;
    output[0] += flatten_output[269] * -0.061169;
    output[0] += flatten_output[270] * -0.008130;
    output[0] += flatten_output[271] * 0.007138;
    output[0] += flatten_output[272] * 0.015248;
    output[0] += flatten_output[273] * -0.103375;
    output[0] += flatten_output[274] * 0.003678;
    output[0] += flatten_output[275] * -0.058293;
    output[0] += flatten_output[276] * -0.092878;
    output[0] += flatten_output[277] * -0.099307;
    output[0] += flatten_output[278] * -0.024466;
    output[0] += flatten_output[279] * -0.043646;
    output[0] += flatten_output[280] * 0.008694;
    output[0] += flatten_output[281] * -0.063232;
    output[0] += flatten_output[282] * -0.054446;
    output[0] += flatten_output[283] * -0.075459;
    output[0] += flatten_output[284] * -0.100539;
    output[0] += flatten_output[285] * -0.156588;
    output[0] += flatten_output[286] * 0.021161;
    output[0] += flatten_output[287] * -0.001820;
    output[0] += flatten_output[288] * -0.016949;
    output[0] += flatten_output[289] * -0.086807;
    output[0] += flatten_output[290] * 0.032445;
    output[0] += flatten_output[291] * -0.170397;
    output[0] += flatten_output[292] * -0.078779;
    output[0] += flatten_output[293] * -0.046672;
    output[0] += flatten_output[294] * -0.013614;
    output[0] += flatten_output[295] * 0.014411;
    output[0] += flatten_output[296] * -0.061315;
    output[0] += flatten_output[297] * 0.010349;
    output[0] += flatten_output[298] * -0.025681;
    output[0] += flatten_output[299] * 0.056489;
    output[0] += flatten_output[300] * -0.026606;
    output[0] += flatten_output[301] * -0.047273;
    output[0] += flatten_output[302] * -0.002896;
    output[0] += flatten_output[303] * 0.021351;
    output[0] += flatten_output[304] * 0.010903;
    output[0] += flatten_output[305] * -0.114191;
    output[0] += flatten_output[306] * -0.014441;
    output[0] += flatten_output[307] * -0.025771;
    output[0] += flatten_output[308] * -0.064515;
    output[0] += flatten_output[309] * -0.133742;
    output[0] += flatten_output[310] * -0.014631;
    output[0] += flatten_output[311] * -0.037955;
    output[0] += flatten_output[312] * 0.003347;
    output[0] += flatten_output[313] * -0.070578;
    output[0] += flatten_output[314] * -0.076899;
    output[0] += flatten_output[315] * -0.016632;
    output[0] += flatten_output[316] * -0.083628;
    output[0] += flatten_output[317] * -0.130297;
    output[0] += flatten_output[318] * 0.019108;
    output[0] += flatten_output[319] * -0.008686;
    output[0] += flatten_output[320] * -0.061668;
    output[0] += flatten_output[321] * -0.095900;
    output[0] += flatten_output[322] * 0.033873;
    output[0] += flatten_output[323] * -0.178439;
    output[0] += flatten_output[324] * -0.044859;
    output[0] += flatten_output[325] * -0.045262;
    output[0] += flatten_output[326] * -0.003665;
    output[0] += flatten_output[327] * 0.014937;
    output[0] += flatten_output[328] * -0.051198;
    output[0] += flatten_output[329] * 0.003647;
    output[0] += flatten_output[330] * -0.034491;
    output[0] += flatten_output[331] * 0.006565;
    output[0] += flatten_output[332] * -0.056028;
    output[0] += flatten_output[333] * -0.033117;
    output[0] += flatten_output[334] * 0.003225;
    output[0] += flatten_output[335] * 0.039290;
    output[0] += flatten_output[336] * -0.036638;
    output[0] += flatten_output[337] * -0.088201;
    output[0] += flatten_output[338] * -0.025853;
    output[0] += flatten_output[339] * 0.015246;
    output[0] += flatten_output[340] * -0.012929;
    output[0] += flatten_output[341] * -0.143552;
    output[0] += flatten_output[342] * -0.017252;
    output[0] += flatten_output[343] * -0.081504;
    output[0] += flatten_output[344] * 0.018484;
    output[0] += flatten_output[345] * -0.058455;
    output[0] += flatten_output[346] * -0.091102;
    output[0] += flatten_output[347] * -0.004358;
    output[0] += flatten_output[348] * -0.074976;
    output[0] += flatten_output[349] * -0.109148;
    output[0] += flatten_output[350] * -0.006583;
    output[0] += flatten_output[351] * 0.017370;
    output[0] += flatten_output[352] * -0.001685;
    output[0] += flatten_output[353] * -0.098257;
    output[0] += flatten_output[354] * 0.048668;
    output[0] += flatten_output[355] * -0.165555;
    output[0] += flatten_output[356] * -0.074051;
    output[0] += flatten_output[357] * -0.028294;
    output[0] += flatten_output[358] * -0.059814;
    output[0] += flatten_output[359] * 0.028145;
    output[0] += flatten_output[360] * -0.034153;
    output[0] += flatten_output[361] * 0.014735;
    output[0] += flatten_output[362] * -0.075040;
    output[0] += flatten_output[363] * 0.013321;
    output[0] += flatten_output[364] * -0.053334;
    output[0] += flatten_output[365] * -0.097210;
    output[0] += flatten_output[366] * -0.008050;
    output[0] += flatten_output[367] * 0.001773;
    output[0] += flatten_output[368] * -0.006736;
    output[0] += flatten_output[369] * -0.110347;
    output[0] += flatten_output[370] * -0.059647;
    output[0] += flatten_output[371] * -0.023622;
    output[0] += flatten_output[372] * -0.084018;
    output[0] += flatten_output[373] * -0.066900;
    output[0] += flatten_output[374] * -0.031997;
    output[0] += flatten_output[375] * -0.049002;
    output[0] += flatten_output[376] * -0.007894;
    output[0] += flatten_output[377] * -0.112694;
    output[0] += flatten_output[378] * -0.054512;
    output[0] += flatten_output[379] * -0.049987;
    output[0] += flatten_output[380] * -0.090156;
    output[0] += flatten_output[381] * -0.139515;
    output[0] += flatten_output[382] * 0.024195;
    output[0] += flatten_output[383] * 0.009623;
    output[0] += flatten_output[384] * -0.077482;
    output[0] += flatten_output[385] * -0.089048;
    output[0] += flatten_output[386] * 0.065151;
    output[0] += flatten_output[387] * -0.166186;
    output[0] += flatten_output[388] * -0.084465;
    output[0] += flatten_output[389] * -0.039079;
    output[0] += flatten_output[390] * -0.057195;
    output[0] += flatten_output[391] * 0.007056;
    output[0] += flatten_output[392] * -0.061266;
    output[0] += flatten_output[393] * -0.004065;
    output[0] += flatten_output[394] * -0.082048;
    output[0] += flatten_output[395] * -0.008257;
    output[0] += flatten_output[396] * -0.003652;
    output[0] += flatten_output[397] * -0.120880;
    output[0] += flatten_output[398] * 0.005033;
    output[0] += flatten_output[399] * 0.002072;
    output[0] += flatten_output[400] * 0.022161;
    output[0] += flatten_output[401] * -0.070811;
    output[0] += flatten_output[402] * 0.008975;
    output[0] += flatten_output[403] * -0.068404;
    output[0] += flatten_output[404] * -0.099523;
    output[0] += flatten_output[405] * -0.060758;
    output[0] += flatten_output[406] * -0.019048;
    output[0] += flatten_output[407] * -0.027625;
    output[0] += flatten_output[408] * -0.007495;
    output[0] += flatten_output[409] * -0.122998;
    output[0] += flatten_output[410] * -0.012268;
    output[0] += flatten_output[411] * -0.122637;
    output[0] += flatten_output[412] * -0.075685;
    output[0] += flatten_output[413] * -0.142411;
    output[0] += flatten_output[414] * 0.031511;
    output[0] += flatten_output[415] * 0.025319;
    output[0] += flatten_output[416] * -0.091017;
    output[0] += flatten_output[417] * -0.120720;
    output[0] += flatten_output[418] * 0.100070;
    output[0] += flatten_output[419] * -0.233372;
    output[0] += flatten_output[420] * -0.104347;
    output[0] += flatten_output[421] * -0.075693;
    output[0] += flatten_output[422] * -0.062538;
    output[0] += flatten_output[423] * 0.016739;
    output[0] += flatten_output[424] * -0.088877;
    output[0] += flatten_output[425] * -0.009174;
    output[0] += flatten_output[426] * -0.098621;
    output[0] += flatten_output[427] * 0.068062;
    output[0] += flatten_output[428] * -0.041094;
    output[0] += flatten_output[429] * -0.141821;
    output[0] += flatten_output[430] * 0.042920;
    output[0] += flatten_output[431] * 0.033803;
    output[0] += flatten_output[432] * -0.031771;
    output[0] += flatten_output[433] * -0.118141;
    output[0] += flatten_output[434] * -0.022225;
    output[0] += flatten_output[435] * -0.015383;
    output[0] += flatten_output[436] * -0.095590;
    output[0] += flatten_output[437] * -0.126048;
    output[0] += flatten_output[438] * -0.016407;
    output[0] += flatten_output[439] * -0.058011;
    output[0] += flatten_output[440] * 0.006088;
    output[0] += flatten_output[441] * -0.123601;
    output[0] += flatten_output[442] * -0.067500;
    output[0] += flatten_output[443] * -0.034453;
    output[0] += flatten_output[444] * -0.086716;
    output[0] += flatten_output[445] * -0.211378;
    output[0] += flatten_output[446] * 0.016140;
    output[0] += flatten_output[447] * 0.006119;
    output[0] += flatten_output[448] * -0.071823;
    output[0] += flatten_output[449] * -0.124046;
    output[0] += flatten_output[450] * 0.098203;
    output[0] += flatten_output[451] * -0.243426;
    output[0] += flatten_output[452] * -0.068091;
    output[0] += flatten_output[453] * -0.065225;
    output[0] += flatten_output[454] * 0.004872;
    output[0] += flatten_output[455] * -0.001273;
    output[0] += flatten_output[456] * -0.065086;
    output[0] += flatten_output[457] * 0.016316;
    output[0] += flatten_output[458] * -0.070019;
    output[0] += flatten_output[459] * 0.063023;
    output[0] += flatten_output[460] * -0.123889;
    output[0] += flatten_output[461] * -0.101328;
    output[0] += flatten_output[462] * 0.046751;
    output[0] += flatten_output[463] * 0.046858;
    output[0] += flatten_output[464] * -0.019914;
    output[0] += flatten_output[465] * -0.115860;
    output[0] += flatten_output[466] * -0.083110;
    output[0] += flatten_output[467] * 0.051629;
    output[0] += flatten_output[468] * -0.018930;
    output[0] += flatten_output[469] * -0.131887;
    output[0] += flatten_output[470] * 0.065392;
    output[0] += flatten_output[471] * -0.092503;
    output[0] += flatten_output[472] * 0.006965;
    output[0] += flatten_output[473] * -0.128744;
    output[0] += flatten_output[474] * -0.123201;
    output[0] += flatten_output[475] * 0.050450;
    output[0] += flatten_output[476] * -0.096771;
    output[0] += flatten_output[477] * -0.263942;
    output[0] += flatten_output[478] * 0.001363;
    output[0] += flatten_output[479] * 0.046621;
    output[0] += flatten_output[480] * -0.006643;
    output[0] += flatten_output[481] * -0.078398;
    output[0] += flatten_output[482] * 0.075618;
    output[0] += flatten_output[483] * -0.295302;
    output[0] += flatten_output[484] * -0.071051;
    output[0] += flatten_output[485] * -0.006360;
    output[0] += flatten_output[486] * -0.005063;
    output[0] += flatten_output[487] * 0.041868;
    output[0] += flatten_output[488] * -0.005216;
    output[0] += flatten_output[489] * -0.014443;
    output[0] += flatten_output[490] * -0.058645;
    output[0] += flatten_output[491] * 0.011355;
    output[0] += flatten_output[492] * -0.170895;
    output[0] += flatten_output[493] * -0.118947;
    output[0] += flatten_output[494] * -0.016711;
    output[0] += flatten_output[495] * 0.031263;
    output[0] += flatten_output[496] * 0.029122;
    output[0] += flatten_output[497] * -0.105374;
    output[0] += flatten_output[498] * -0.074378;
    output[0] += flatten_output[499] * 0.029901;
    output[0] += flatten_output[500] * -0.055494;
    output[0] += flatten_output[501] * -0.151895;
    output[0] += flatten_output[502] * 0.003183;
    output[0] += flatten_output[503] * -0.084379;
    output[0] += flatten_output[504] * -0.008892;
    output[0] += flatten_output[505] * -0.123111;
    output[0] += flatten_output[506] * -0.045636;
    output[0] += flatten_output[507] * -0.041487;
    output[0] += flatten_output[508] * -0.081177;
    output[0] += flatten_output[509] * -0.255104;
    output[0] += flatten_output[510] * 0.037383;
    output[0] += flatten_output[511] * 0.018878;
    output[0] += flatten_output[512] * -0.034935;
    output[0] += flatten_output[513] * -0.101452;
    output[0] += flatten_output[514] * 0.044326;
    output[0] += flatten_output[515] * -0.247433;
    output[0] += flatten_output[516] * -0.088851;
    output[0] += flatten_output[517] * -0.008156;
    output[0] += flatten_output[518] * -0.004358;
    output[0] += flatten_output[519] * 0.005874;
    output[0] += flatten_output[520] * -0.032195;
    output[0] += flatten_output[521] * -0.008272;
    output[0] += flatten_output[522] * -0.038042;
    output[0] += flatten_output[523] * 0.009176;
    output[0] += flatten_output[524] * -0.019026;
    output[0] += flatten_output[525] * -0.050506;
    output[0] += flatten_output[526] * 0.006567;
    output[0] += flatten_output[527] * 0.010239;
    output[0] += flatten_output[528] * -0.007562;
    output[0] += flatten_output[529] * -0.065884;
    output[0] += flatten_output[530] * -0.044532;
    output[0] += flatten_output[531] * 0.009358;
    output[0] += flatten_output[532] * -0.045458;
    output[0] += flatten_output[533] * -0.076262;
    output[0] += flatten_output[534] * -0.012292;
    output[0] += flatten_output[535] * -0.011980;
    output[0] += flatten_output[536] * 0.003485;
    output[0] += flatten_output[537] * -0.106260;
    output[0] += flatten_output[538] * -0.042072;
    output[0] += flatten_output[539] * -0.015344;
    output[0] += flatten_output[540] * -0.084487;
    output[0] += flatten_output[541] * -0.201274;
    output[0] += flatten_output[542] * 0.049697;
    output[0] += flatten_output[543] * -0.000371;
    output[0] += flatten_output[544] * -0.038670;
    output[0] += flatten_output[545] * -0.076908;
    output[0] += flatten_output[546] * 0.042997;
    output[0] += flatten_output[547] * -0.279136;
    output[0] += flatten_output[548] * -0.067573;
    output[0] += flatten_output[549] * -0.044808;
    output[0] += flatten_output[550] * -0.004621;
    output[0] += flatten_output[551] * 0.015655;
    output[0] += flatten_output[552] * -0.045943;
    output[0] += flatten_output[553] * 0.000947;
    output[0] += flatten_output[554] * -0.023112;
    output[0] += flatten_output[555] * -0.004908;
    output[0] += flatten_output[556] * -0.015790;
    output[0] += flatten_output[557] * -0.042997;
    output[0] += flatten_output[558] * -0.024337;
    output[0] += flatten_output[559] * -0.008807;
    output[0] += flatten_output[560] * 0.036941;
    output[0] += flatten_output[561] * -0.058814;
    output[0] += flatten_output[562] * -0.018951;
    output[0] += flatten_output[563] * 0.015161;
    output[0] += flatten_output[564] * -0.029034;
    output[0] += flatten_output[565] * -0.168014;
    output[0] += flatten_output[566] * -0.013856;
    output[0] += flatten_output[567] * -0.055352;
    output[0] += flatten_output[568] * 0.012681;
    output[0] += flatten_output[569] * -0.060181;
    output[0] += flatten_output[570] * -0.005069;
    output[0] += flatten_output[571] * -0.025058;
    output[0] += flatten_output[572] * -0.077964;
    output[0] += flatten_output[573] * -0.204405;
    output[0] += flatten_output[574] * 0.055919;
    output[0] += flatten_output[575] * -0.001605;
    output[0] += flatten_output[576] * -0.032694;
    output[0] += flatten_output[577] * -0.040126;
    output[0] += flatten_output[578] * 0.047739;
    output[0] += flatten_output[579] * -0.220375;
    output[0] += flatten_output[580] * -0.072417;
    output[0] += flatten_output[581] * -0.053935;
    output[0] += flatten_output[582] * -0.000395;
    output[0] += flatten_output[583] * 0.018165;
    output[0] += flatten_output[584] * -0.051417;
    output[0] += flatten_output[585] * -0.001694;
    output[0] += flatten_output[586] * -0.023583;
    output[0] += flatten_output[587] * -0.002917;
    output[0] += flatten_output[588] * -0.049138;
    output[0] += flatten_output[589] * -0.014906;
    output[0] += flatten_output[590] * 0.004564;
    output[0] += flatten_output[591] * -0.000376;
    output[0] += flatten_output[592] * 0.012283;
    output[0] += flatten_output[593] * -0.054637;
    output[0] += flatten_output[594] * -0.030102;
    output[0] += flatten_output[595] * -0.022042;
    output[0] += flatten_output[596] * -0.064462;
    output[0] += flatten_output[597] * -0.125620;
    output[0] += flatten_output[598] * -0.021964;
    output[0] += flatten_output[599] * -0.077760;
    output[0] += flatten_output[600] * -0.011116;
    output[0] += flatten_output[601] * -0.053326;
    output[0] += flatten_output[602] * -0.063239;
    output[0] += flatten_output[603] * -0.044824;
    output[0] += flatten_output[604] * -0.082159;
    output[0] += flatten_output[605] * -0.192823;
    output[0] += flatten_output[606] * -0.009104;
    output[0] += flatten_output[607] * 0.017636;
    output[0] += flatten_output[608] * -0.050153;
    output[0] += flatten_output[609] * -0.056694;
    output[0] += flatten_output[610] * 0.058020;
    output[0] += flatten_output[611] * -0.174563;
    output[0] += flatten_output[612] * -0.046716;
    output[0] += flatten_output[613] * -0.034812;
    output[0] += flatten_output[614] * -0.002067;
    output[0] += flatten_output[615] * 0.009775;
    output[0] += flatten_output[616] * -0.030566;
    output[0] += flatten_output[617] * -0.009916;
    output[0] += flatten_output[618] * -0.020979;
    output[0] += flatten_output[619] * 0.003635;
    output[0] += flatten_output[620] * -0.042857;
    output[0] += flatten_output[621] * 0.006356;
    output[0] += flatten_output[622] * -0.016868;
    output[0] += flatten_output[623] * -0.005127;
    output[0] += flatten_output[624] * 0.002772;
    output[0] += flatten_output[625] * -0.063161;
    output[0] += flatten_output[626] * -0.008776;
    output[0] += flatten_output[627] * 0.005106;
    output[0] += flatten_output[628] * -0.020145;
    output[0] += flatten_output[629] * -0.111514;
    output[0] += flatten_output[630] * -0.014974;
    output[0] += flatten_output[631] * -0.039915;
    output[0] += flatten_output[632] * 0.012238;
    output[0] += flatten_output[633] * -0.059008;
    output[0] += flatten_output[634] * -0.087696;
    output[0] += flatten_output[635] * -0.008200;
    output[0] += flatten_output[636] * -0.040090;
    output[0] += flatten_output[637] * -0.124656;
    output[0] += flatten_output[638] * 0.006539;
    output[0] += flatten_output[639] * 0.014573;
    output[0] += flatten_output[640] * -0.019564;
    output[0] += flatten_output[641] * -0.020099;
    output[0] += flatten_output[642] * 0.047823;
    output[0] += flatten_output[643] * -0.128733;
    output[0] += flatten_output[644] * -0.008899;
    output[0] += flatten_output[645] * -0.028419;
    output[0] += flatten_output[646] * -0.001242;
    output[0] += flatten_output[647] * 0.014562;
    output[0] += flatten_output[648] * -0.012519;
    output[0] += flatten_output[649] * 0.002676;
    output[0] += flatten_output[650] * -0.004655;
    output[0] += flatten_output[651] * 0.007222;
    output[0] += flatten_output[652] * -0.066642;
    output[0] += flatten_output[653] * 0.023140;
    output[0] += flatten_output[654] * -0.012908;
    output[0] += flatten_output[655] * 0.000312;
    output[0] += flatten_output[656] * 0.036892;
    output[0] += flatten_output[657] * -0.022944;
    output[0] += flatten_output[658] * -0.006941;
    output[0] += flatten_output[659] * -0.014303;
    output[0] += flatten_output[660] * -0.029364;
    output[0] += flatten_output[661] * -0.115184;
    output[0] += flatten_output[662] * -0.019173;
    output[0] += flatten_output[663] * -0.029493;
    output[0] += flatten_output[664] * 0.014982;
    output[0] += flatten_output[665] * -0.022563;
    output[0] += flatten_output[666] * -0.030485;
    output[0] += flatten_output[667] * -0.019693;
    output[0] += flatten_output[668] * -0.049987;
    output[0] += flatten_output[669] * -0.097709;
    output[0] += flatten_output[670] * -0.007877;
    output[0] += flatten_output[671] * -0.013248;
    output[0] += flatten_output[672] * -0.024839;
    output[0] += flatten_output[673] * -0.019449;
    output[0] += flatten_output[674] * 0.056619;
    output[0] += flatten_output[675] * -0.076829;
    output[0] = 1 / (1 + exp(-output[0]));
    output[1] = 0.062558;
    output[1] += flatten_output[0] * -0.003822;
    output[1] += flatten_output[1] * 0.001895;
    output[1] += flatten_output[2] * 0.084206;
    output[1] += flatten_output[3] * 0.026208;
    output[1] += flatten_output[4] * 0.027907;
    output[1] += flatten_output[5] * 0.018270;
    output[1] += flatten_output[6] * 0.031306;
    output[1] += flatten_output[7] * 0.024214;
    output[1] += flatten_output[8] * 0.002142;
    output[1] += flatten_output[9] * -0.007485;
    output[1] += flatten_output[10] * 0.042581;
    output[1] += flatten_output[11] * 0.038849;
    output[1] += flatten_output[12] * 0.010335;
    output[1] += flatten_output[13] * 0.014238;
    output[1] += flatten_output[14] * 0.008464;
    output[1] += flatten_output[15] * -0.004619;
    output[1] += flatten_output[16] * 0.001961;
    output[1] += flatten_output[17] * 0.008708;
    output[1] += flatten_output[18] * 0.000842;
    output[1] += flatten_output[19] * 0.014114;
    output[1] += flatten_output[20] * 0.023421;
    output[1] += flatten_output[21] * 0.016998;
    output[1] += flatten_output[22] * 0.018890;
    output[1] += flatten_output[23] * 0.015546;
    output[1] += flatten_output[24] * 0.031381;
    output[1] += flatten_output[25] * 0.010594;
    output[1] += flatten_output[26] * 0.029409;
    output[1] += flatten_output[27] * -0.003554;
    output[1] += flatten_output[28] * 0.001223;
    output[1] += flatten_output[29] * 0.067566;
    output[1] += flatten_output[30] * 0.007135;
    output[1] += flatten_output[31] * 0.065073;
    output[1] += flatten_output[32] * -0.005228;
    output[1] += flatten_output[33] * 0.025515;
    output[1] += flatten_output[34] * 0.086359;
    output[1] += flatten_output[35] * 0.035603;
    output[1] += flatten_output[36] * 0.027942;
    output[1] += flatten_output[37] * 0.008010;
    output[1] += flatten_output[38] * 0.001008;
    output[1] += flatten_output[39] * 0.039393;
    output[1] += flatten_output[40] * 0.008527;
    output[1] += flatten_output[41] * 0.002655;
    output[1] += flatten_output[42] * 0.039110;
    output[1] += flatten_output[43] * 0.014143;
    output[1] += flatten_output[44] * 0.016261;
    output[1] += flatten_output[45] * 0.004727;
    output[1] += flatten_output[46] * 0.014577;
    output[1] += flatten_output[47] * 0.009753;
    output[1] += flatten_output[48] * 0.023776;
    output[1] += flatten_output[49] * 0.025817;
    output[1] += flatten_output[50] * 0.016072;
    output[1] += flatten_output[51] * 0.000530;
    output[1] += flatten_output[52] * 0.003848;
    output[1] += flatten_output[53] * 0.015128;
    output[1] += flatten_output[54] * 0.013928;
    output[1] += flatten_output[55] * 0.011051;
    output[1] += flatten_output[56] * 0.010874;
    output[1] += flatten_output[57] * 0.024722;
    output[1] += flatten_output[58] * 0.011884;
    output[1] += flatten_output[59] * -0.002168;
    output[1] += flatten_output[60] * 0.005136;
    output[1] += flatten_output[61] * 0.066909;
    output[1] += flatten_output[62] * 0.015966;
    output[1] += flatten_output[63] * 0.046944;
    output[1] += flatten_output[64] * 0.018195;
    output[1] += flatten_output[65] * 0.007801;
    output[1] += flatten_output[66] * 0.066724;
    output[1] += flatten_output[67] * 0.036226;
    output[1] += flatten_output[68] * 0.006494;
    output[1] += flatten_output[69] * 0.020962;
    output[1] += flatten_output[70] * -0.000314;
    output[1] += flatten_output[71] * 0.038191;
    output[1] += flatten_output[72] * 0.024472;
    output[1] += flatten_output[73] * 0.012567;
    output[1] += flatten_output[74] * 0.023924;
    output[1] += flatten_output[75] * 0.023456;
    output[1] += flatten_output[76] * 0.005455;
    output[1] += flatten_output[77] * 0.004000;
    output[1] += flatten_output[78] * 0.039570;
    output[1] += flatten_output[79] * 0.023697;
    output[1] += flatten_output[80] * 0.013235;
    output[1] += flatten_output[81] * 0.011311;
    output[1] += flatten_output[82] * 0.023660;
    output[1] += flatten_output[83] * -0.011272;
    output[1] += flatten_output[84] * 0.015035;
    output[1] += flatten_output[85] * 0.019078;
    output[1] += flatten_output[86] * 0.028257;
    output[1] += flatten_output[87] * 0.006790;
    output[1] += flatten_output[88] * 0.029578;
    output[1] += flatten_output[89] * -0.000870;
    output[1] += flatten_output[90] * 0.014939;
    output[1] += flatten_output[91] * 0.013646;
    output[1] += flatten_output[92] * 0.014368;
    output[1] += flatten_output[93] * 0.051901;
    output[1] += flatten_output[94] * 0.034464;
    output[1] += flatten_output[95] * 0.065234;
    output[1] += flatten_output[96] * -0.005003;
    output[1] += flatten_output[97] * 0.015242;
    output[1] += flatten_output[98] * 0.058893;
    output[1] += flatten_output[99] * 0.029760;
    output[1] += flatten_output[100] * 0.015009;
    output[1] += flatten_output[101] * 0.017382;
    output[1] += flatten_output[102] * 0.002458;
    output[1] += flatten_output[103] * 0.052162;
    output[1] += flatten_output[104] * 0.028921;
    output[1] += flatten_output[105] * -0.015454;
    output[1] += flatten_output[106] * 0.036006;
    output[1] += flatten_output[107] * 0.042519;
    output[1] += flatten_output[108] * 0.013269;
    output[1] += flatten_output[109] * -0.010558;
    output[1] += flatten_output[110] * 0.035324;
    output[1] += flatten_output[111] * 0.002198;
    output[1] += flatten_output[112] * 0.011502;
    output[1] += flatten_output[113] * -0.002447;
    output[1] += flatten_output[114] * 0.019293;
    output[1] += flatten_output[115] * 0.012418;
    output[1] += flatten_output[116] * -0.002851;
    output[1] += flatten_output[117] * 0.004780;
    output[1] += flatten_output[118] * 0.012805;
    output[1] += flatten_output[119] * -0.002411;
    output[1] += flatten_output[120] * 0.017609;
    output[1] += flatten_output[121] * 0.017127;
    output[1] += flatten_output[122] * 0.014195;
    output[1] += flatten_output[123] * 0.018127;
    output[1] += flatten_output[124] * 0.030229;
    output[1] += flatten_output[125] * 0.047387;
    output[1] += flatten_output[126] * 0.018715;
    output[1] += flatten_output[127] * 0.069135;
    output[1] += flatten_output[128] * -0.002677;
    output[1] += flatten_output[129] * 0.010148;
    output[1] += flatten_output[130] * 0.064696;
    output[1] += flatten_output[131] * 0.018634;
    output[1] += flatten_output[132] * 0.023973;
    output[1] += flatten_output[133] * 0.020442;
    output[1] += flatten_output[134] * 0.013092;
    output[1] += flatten_output[135] * 0.028460;
    output[1] += flatten_output[136] * 0.011623;
    output[1] += flatten_output[137] * -0.011191;
    output[1] += flatten_output[138] * 0.015538;
    output[1] += flatten_output[139] * 0.030977;
    output[1] += flatten_output[140] * -0.005027;
    output[1] += flatten_output[141] * 0.021374;
    output[1] += flatten_output[142] * 0.014946;
    output[1] += flatten_output[143] * -0.002337;
    output[1] += flatten_output[144] * 0.001017;
    output[1] += flatten_output[145] * 0.001581;
    output[1] += flatten_output[146] * 0.002126;
    output[1] += flatten_output[147] * 0.003816;
    output[1] += flatten_output[148] * -0.005168;
    output[1] += flatten_output[149] * -0.004255;
    output[1] += flatten_output[150] * 0.009269;
    output[1] += flatten_output[151] * 0.018543;
    output[1] += flatten_output[152] * 0.017934;
    output[1] += flatten_output[153] * 0.008735;
    output[1] += flatten_output[154] * 0.006344;
    output[1] += flatten_output[155] * 0.005199;
    output[1] += flatten_output[156] * 0.019920;
    output[1] += flatten_output[157] * 0.055118;
    output[1] += flatten_output[158] * 0.018282;
    output[1] += flatten_output[159] * 0.048202;
    output[1] += flatten_output[160] * 0.010724;
    output[1] += flatten_output[161] * -0.001618;
    output[1] += flatten_output[162] * 0.056406;
    output[1] += flatten_output[163] * 0.010194;
    output[1] += flatten_output[164] * 0.018555;
    output[1] += flatten_output[165] * 0.020226;
    output[1] += flatten_output[166] * 0.020346;
    output[1] += flatten_output[167] * 0.022901;
    output[1] += flatten_output[168] * 0.021766;
    output[1] += flatten_output[169] * -0.000462;
    output[1] += flatten_output[170] * 0.046834;
    output[1] += flatten_output[171] * 0.016549;
    output[1] += flatten_output[172] * 0.005244;
    output[1] += flatten_output[173] * -0.007087;
    output[1] += flatten_output[174] * 0.026097;
    output[1] += flatten_output[175] * -0.002026;
    output[1] += flatten_output[176] * 0.011459;
    output[1] += flatten_output[177] * 0.004261;
    output[1] += flatten_output[178] * 0.008047;
    output[1] += flatten_output[179] * 0.001383;
    output[1] += flatten_output[180] * -0.000144;
    output[1] += flatten_output[181] * 0.009719;
    output[1] += flatten_output[182] * 0.019264;
    output[1] += flatten_output[183] * 0.025741;
    output[1] += flatten_output[184] * 0.009581;
    output[1] += flatten_output[185] * 0.024857;
    output[1] += flatten_output[186] * 0.004100;
    output[1] += flatten_output[187] * 0.010124;
    output[1] += flatten_output[188] * 0.025030;
    output[1] += flatten_output[189] * 0.055361;
    output[1] += flatten_output[190] * 0.004604;
    output[1] += flatten_output[191] * 0.064602;
    output[1] += flatten_output[192] * -0.004629;
    output[1] += flatten_output[193] * 0.003853;
    output[1] += flatten_output[194] * 0.066072;
    output[1] += flatten_output[195] * -0.074235;
    output[1] += flatten_output[196] * -0.023256;
    output[1] += flatten_output[197] * 0.007649;
    output[1] += flatten_output[198] * -0.003290;
    output[1] += flatten_output[199] * 0.031371;
    output[1] += flatten_output[200] * 0.009329;
    output[1] += flatten_output[201] * 0.002567;
    output[1] += flatten_output[202] * 0.015030;
    output[1] += flatten_output[203] * 0.010462;
    output[1] += flatten_output[204] * 0.002544;
    output[1] += flatten_output[205] * -0.017176;
    output[1] += flatten_output[206] * 0.034079;
    output[1] += flatten_output[207] * -0.001882;
    output[1] += flatten_output[208] * 0.014677;
    output[1] += flatten_output[209] * 0.000139;
    output[1] += flatten_output[210] * 0.027681;
    output[1] += flatten_output[211] * 0.000051;
    output[1] += flatten_output[212] * -0.034577;
    output[1] += flatten_output[213] * 0.017714;
    output[1] += flatten_output[214] * 0.021621;
    output[1] += flatten_output[215] * 0.003766;
    output[1] += flatten_output[216] * 0.031476;
    output[1] += flatten_output[217] * -0.011711;
    output[1] += flatten_output[218] * 0.006704;
    output[1] += flatten_output[219] * -0.030922;
    output[1] += flatten_output[220] * -0.034036;
    output[1] += flatten_output[221] * -0.033721;
    output[1] += flatten_output[222] * 0.003413;
    output[1] += flatten_output[223] * 0.074588;
    output[1] += flatten_output[224] * 0.007878;
    output[1] += flatten_output[225] * -0.070900;
    output[1] += flatten_output[226] * 0.079001;
    output[1] += flatten_output[227] * -0.062509;
    output[1] += flatten_output[228] * -0.043362;
    output[1] += flatten_output[229] * 0.009418;
    output[1] += flatten_output[230] * -0.026404;
    output[1] += flatten_output[231] * 0.056431;
    output[1] += flatten_output[232] * -0.040790;
    output[1] += flatten_output[233] * 0.007294;
    output[1] += flatten_output[234] * -0.031285;
    output[1] += flatten_output[235] * 0.022508;
    output[1] += flatten_output[236] * 0.013080;
    output[1] += flatten_output[237] * -0.063700;
    output[1] += flatten_output[238] * 0.012600;
    output[1] += flatten_output[239] * -0.004060;
    output[1] += flatten_output[240] * 0.011891;
    output[1] += flatten_output[241] * -0.070967;
    output[1] += flatten_output[242] * 0.028749;
    output[1] += flatten_output[243] * -0.006344;
    output[1] += flatten_output[244] * -0.045180;
    output[1] += flatten_output[245] * -0.010272;
    output[1] += flatten_output[246] * 0.024656;
    output[1] += flatten_output[247] * 0.005602;
    output[1] += flatten_output[248] * 0.017187;
    output[1] += flatten_output[249] * -0.053693;
    output[1] += flatten_output[250] * 0.023656;
    output[1] += flatten_output[251] * -0.007883;
    output[1] += flatten_output[252] * -0.069778;
    output[1] += flatten_output[253] * -0.053258;
    output[1] += flatten_output[254] * 0.011206;
    output[1] += flatten_output[255] * 0.069703;
    output[1] += flatten_output[256] * -0.049433;
    output[1] += flatten_output[257] * -0.069647;
    output[1] += flatten_output[258] * 0.063349;
    output[1] += flatten_output[259] * -0.112964;
    output[1] += flatten_output[260] * -0.043001;
    output[1] += flatten_output[261] * 0.015093;
    output[1] += flatten_output[262] * 0.018500;
    output[1] += flatten_output[263] * 0.033659;
    output[1] += flatten_output[264] * -0.010977;
    output[1] += flatten_output[265] * 0.010046;
    output[1] += flatten_output[266] * -0.008089;
    output[1] += flatten_output[267] * 0.042537;
    output[1] += flatten_output[268] * -0.044671;
    output[1] += flatten_output[269] * -0.053799;
    output[1] += flatten_output[270] * 0.013167;
    output[1] += flatten_output[271] * 0.012574;
    output[1] += flatten_output[272] * -0.028555;
    output[1] += flatten_output[273] * -0.072641;
    output[1] += flatten_output[274] * 0.018357;
    output[1] += flatten_output[275] * -0.012974;
    output[1] += flatten_output[276] * -0.035426;
    output[1] += flatten_output[277] * -0.074051;
    output[1] += flatten_output[278] * 0.000716;
    output[1] += flatten_output[279] * -0.027475;
    output[1] += flatten_output[280] * 0.009289;
    output[1] += flatten_output[281] * -0.064012;
    output[1] += flatten_output[282] * -0.080593;
    output[1] += flatten_output[283] * -0.021417;
    output[1] += flatten_output[284] * -0.043511;
    output[1] += flatten_output[285] * -0.084177;
    output[1] += flatten_output[286] * 0.004394;
    output[1] += flatten_output[287] * 0.066930;
    output[1] += flatten_output[288] * -0.007669;
    output[1] += flatten_output[289] * -0.063483;
    output[1] += flatten_output[290] * 0.062476;
    output[1] += flatten_output[291] * -0.134854;
    output[1] += flatten_output[292] * -0.031542;
    output[1] += flatten_output[293] * -0.010314;
    output[1] += flatten_output[294] * 0.000894;
    output[1] += flatten_output[295] * 0.046679;
    output[1] += flatten_output[296] * -0.034703;
    output[1] += flatten_output[297] * 0.002889;
    output[1] += flatten_output[298] * -0.002831;
    output[1] += flatten_output[299] * 0.038248;
    output[1] += flatten_output[300] * -0.068398;
    output[1] += flatten_output[301] * -0.047534;
    output[1] += flatten_output[302] * 0.033239;
    output[1] += flatten_output[303] * 0.003461;
    output[1] += flatten_output[304] * -0.011417;
    output[1] += flatten_output[305] * -0.059621;
    output[1] += flatten_output[306] * -0.012148;
    output[1] += flatten_output[307] * -0.014398;
    output[1] += flatten_output[308] * -0.035395;
    output[1] += flatten_output[309] * -0.091315;
    output[1] += flatten_output[310] * 0.019374;
    output[1] += flatten_output[311] * -0.064174;
    output[1] += flatten_output[312] * 0.036467;
    output[1] += flatten_output[313] * -0.069824;
    output[1] += flatten_output[314] * -0.067885;
    output[1] += flatten_output[315] * -0.037560;
    output[1] += flatten_output[316] * -0.058157;
    output[1] += flatten_output[317] * -0.126860;
    output[1] += flatten_output[318] * 0.004437;
    output[1] += flatten_output[319] * 0.061981;
    output[1] += flatten_output[320] * -0.013100;
    output[1] += flatten_output[321] * -0.043130;
    output[1] += flatten_output[322] * 0.077499;
    output[1] += flatten_output[323] * -0.112609;
    output[1] += flatten_output[324] * -0.011887;
    output[1] += flatten_output[325] * 0.008814;
    output[1] += flatten_output[326] * -0.028997;
    output[1] += flatten_output[327] * 0.033937;
    output[1] += flatten_output[328] * -0.019327;
    output[1] += flatten_output[329] * -0.007464;
    output[1] += flatten_output[330] * 0.010172;
    output[1] += flatten_output[331] * 0.036669;
    output[1] += flatten_output[332] * -0.075657;
    output[1] += flatten_output[333] * -0.079415;
    output[1] += flatten_output[334] * 0.013614;
    output[1] += flatten_output[335] * 0.007048;
    output[1] += flatten_output[336] * -0.038363;
    output[1] += flatten_output[337] * -0.015900;
    output[1] += flatten_output[338] * -0.006030;
    output[1] += flatten_output[339] * 0.009405;
    output[1] += flatten_output[340] * -0.030933;
    output[1] += flatten_output[341] * -0.068709;
    output[1] += flatten_output[342] * 0.029365;
    output[1] += flatten_output[343] * -0.032064;
    output[1] += flatten_output[344] * 0.026998;
    output[1] += flatten_output[345] * -0.041178;
    output[1] += flatten_output[346] * -0.052979;
    output[1] += flatten_output[347] * -0.049596;
    output[1] += flatten_output[348] * -0.007885;
    output[1] += flatten_output[349] * -0.097818;
    output[1] += flatten_output[350] * 0.018607;
    output[1] += flatten_output[351] * 0.077420;
    output[1] += flatten_output[352] * -0.039650;
    output[1] += flatten_output[353] * -0.032217;
    output[1] += flatten_output[354] * 0.083503;
    output[1] += flatten_output[355] * 0.070021;
    output[1] += flatten_output[356] * 0.076625;
    output[1] += flatten_output[357] * 0.000040;
    output[1] += flatten_output[358] * 0.102654;
    output[1] += flatten_output[359] * 0.046395;
    output[1] += flatten_output[360] * 0.016592;
    output[1] += flatten_output[361] * 0.003054;
    output[1] += flatten_output[362] * 0.114750;
    output[1] += flatten_output[363] * 0.015741;
    output[1] += flatten_output[364] * -0.030034;
    output[1] += flatten_output[365] * 0.096100;
    output[1] += flatten_output[366] * 0.014391;
    output[1] += flatten_output[367] * -0.001559;
    output[1] += flatten_output[368] * 0.008532;
    output[1] += flatten_output[369] * -0.000123;
    output[1] += flatten_output[370] * -0.000636;
    output[1] += flatten_output[371] * 0.086776;
    output[1] += flatten_output[372] * 0.093948;
    output[1] += flatten_output[373] * -0.036341;
    output[1] += flatten_output[374] * 0.027256;
    output[1] += flatten_output[375] * -0.024602;
    output[1] += flatten_output[376] * 0.022402;
    output[1] += flatten_output[377] * 0.070313;
    output[1] += flatten_output[378] * 0.008851;
    output[1] += flatten_output[379] * 0.146595;
    output[1] += flatten_output[380] * 0.054050;
    output[1] += flatten_output[381] * 0.088681;
    output[1] += flatten_output[382] * 0.002309;
    output[1] += flatten_output[383] * 0.047144;
    output[1] += flatten_output[384] * 0.204602;
    output[1] += flatten_output[385] * 0.107290;
    output[1] += flatten_output[386] * 0.055951;
    output[1] += flatten_output[387] * 0.065795;
    output[1] += flatten_output[388] * -0.005361;
    output[1] += flatten_output[389] * -0.004573;
    output[1] += flatten_output[390] * 0.040794;
    output[1] += flatten_output[391] * 0.013555;
    output[1] += flatten_output[392] * -0.003176;
    output[1] += flatten_output[393] * -0.007819;
    output[1] += flatten_output[394] * 0.118468;
    output[1] += flatten_output[395] * 0.067648;
    output[1] += flatten_output[396] * -0.034178;
    output[1] += flatten_output[397] * 0.131849;
    output[1] += flatten_output[398] * 0.020068;
    output[1] += flatten_output[399] * 0.012281;
    output[1] += flatten_output[400] * 0.047071;
    output[1] += flatten_output[401] * 0.013499;
    output[1] += flatten_output[402] * -0.024134;
    output[1] += flatten_output[403] * 0.059896;
    output[1] += flatten_output[404] * 0.013879;
    output[1] += flatten_output[405] * -0.058523;
    output[1] += flatten_output[406] * 0.052906;
    output[1] += flatten_output[407] * -0.006577;
    output[1] += flatten_output[408] * 0.019045;
    output[1] += flatten_output[409] * 0.069702;
    output[1] += flatten_output[410] * 0.127268;
    output[1] += flatten_output[411] * 0.114214;
    output[1] += flatten_output[412] * -0.024649;
    output[1] += flatten_output[413] * 0.096138;
    output[1] += flatten_output[414] * 0.005716;
    output[1] += flatten_output[415] * 0.024931;
    output[1] += flatten_output[416] * -0.058164;
    output[1] += flatten_output[417] * 0.005168;
    output[1] += flatten_output[418] * 0.058654;
    output[1] += flatten_output[419] * 0.122431;
    output[1] += flatten_output[420] * 0.063575;
    output[1] += flatten_output[421] * 0.015181;
    output[1] += flatten_output[422] * 0.125587;
    output[1] += flatten_output[423] * 0.030491;
    output[1] += flatten_output[424] * 0.041287;
    output[1] += flatten_output[425] * -0.002616;
    output[1] += flatten_output[426] * 0.072302;
    output[1] += flatten_output[427] * 0.050236;
    output[1] += flatten_output[428] * 0.165407;
    output[1] += flatten_output[429] * 0.092414;
    output[1] += flatten_output[430] * 0.017975;
    output[1] += flatten_output[431] * 0.011892;
    output[1] += flatten_output[432] * 0.003534;
    output[1] += flatten_output[433] * 0.010629;
    output[1] += flatten_output[434] * 0.149913;
    output[1] += flatten_output[435] * 0.050701;
    output[1] += flatten_output[436] * 0.101444;
    output[1] += flatten_output[437] * 0.107386;
    output[1] += flatten_output[438] * 0.034513;
    output[1] += flatten_output[439] * 0.035394;
    output[1] += flatten_output[440] * 0.016681;
    output[1] += flatten_output[441] * 0.050363;
    output[1] += flatten_output[442] * 0.062301;
    output[1] += flatten_output[443] * 0.101197;
    output[1] += flatten_output[444] * 0.070250;
    output[1] += flatten_output[445] * 0.108725;
    output[1] += flatten_output[446] * 0.018903;
    output[1] += flatten_output[447] * 0.043091;
    output[1] += flatten_output[448] * 0.135098;
    output[1] += flatten_output[449] * 0.116446;
    output[1] += flatten_output[450] * 0.062763;
    output[1] += flatten_output[451] * 0.081007;
    output[1] += flatten_output[452] * 0.034736;
    output[1] += flatten_output[453] * 0.032031;
    output[1] += flatten_output[454] * -0.004778;
    output[1] += flatten_output[455] * -0.010599;
    output[1] += flatten_output[456] * 0.065722;
    output[1] += flatten_output[457] * 0.008665;
    output[1] += flatten_output[458] * 0.107807;
    output[1] += flatten_output[459] * -0.013418;
    output[1] += flatten_output[460] * -0.001544;
    output[1] += flatten_output[461] * 0.092145;
    output[1] += flatten_output[462] * 0.020558;
    output[1] += flatten_output[463] * -0.033008;
    output[1] += flatten_output[464] * 0.036200;
    output[1] += flatten_output[465] * 0.058690;
    output[1] += flatten_output[466] * -0.017263;
    output[1] += flatten_output[467] * -0.041873;
    output[1] += flatten_output[468] * -0.010246;
    output[1] += flatten_output[469] * -0.020449;
    output[1] += flatten_output[470] * -0.059074;
    output[1] += flatten_output[471] * 0.011354;
    output[1] += flatten_output[472] * 0.014255;
    output[1] += flatten_output[473] * 0.080184;
    output[1] += flatten_output[474] * -0.010014;
    output[1] += flatten_output[475] * -0.081140;
    output[1] += flatten_output[476] * 0.045166;
    output[1] += flatten_output[477] * 0.106492;
    output[1] += flatten_output[478] * 0.002465;
    output[1] += flatten_output[479] * 0.030087;
    output[1] += flatten_output[480] * -0.027739;
    output[1] += flatten_output[481] * 0.041648;
    output[1] += flatten_output[482] * 0.052300;
    output[1] += flatten_output[483] * 0.129417;
    output[1] += flatten_output[484] * 0.025313;
    output[1] += flatten_output[485] * 0.007755;
    output[1] += flatten_output[486] * 0.062643;
    output[1] += flatten_output[487] * 0.039443;
    output[1] += flatten_output[488] * -0.008607;
    output[1] += flatten_output[489] * 0.001721;
    output[1] += flatten_output[490] * 0.055724;
    output[1] += flatten_output[491] * 0.011476;
    output[1] += flatten_output[492] * 0.123780;
    output[1] += flatten_output[493] * 0.034114;
    output[1] += flatten_output[494] * 0.016606;
    output[1] += flatten_output[495] * 0.005923;
    output[1] += flatten_output[496] * 0.027369;
    output[1] += flatten_output[497] * 0.049332;
    output[1] += flatten_output[498] * 0.112664;
    output[1] += flatten_output[499] * -0.079461;
    output[1] += flatten_output[500] * 0.038256;
    output[1] += flatten_output[501] * 0.093302;
    output[1] += flatten_output[502] * 0.005182;
    output[1] += flatten_output[503] * 0.058493;
    output[1] += flatten_output[504] * 0.022975;
    output[1] += flatten_output[505] * 0.071846;
    output[1] += flatten_output[506] * 0.120331;
    output[1] += flatten_output[507] * -0.128987;
    output[1] += flatten_output[508] * 0.044963;
    output[1] += flatten_output[509] * 0.123469;
    output[1] += flatten_output[510] * 0.022490;
    output[1] += flatten_output[511] * 0.061927;
    output[1] += flatten_output[512] * 0.059696;
    output[1] += flatten_output[513] * 0.004538;
    output[1] += flatten_output[514] * 0.073737;
    output[1] += flatten_output[515] * 0.090143;
    output[1] += flatten_output[516] * -0.064088;
    output[1] += flatten_output[517] * -0.031212;
    output[1] += flatten_output[518] * 0.028251;
    output[1] += flatten_output[519] * 0.002208;
    output[1] += flatten_output[520] * -0.045194;
    output[1] += flatten_output[521] * 0.002754;
    output[1] += flatten_output[522] * 0.052192;
    output[1] += flatten_output[523] * 0.022658;
    output[1] += flatten_output[524] * 0.061326;
    output[1] += flatten_output[525] * 0.069131;
    output[1] += flatten_output[526] * 0.009307;
    output[1] += flatten_output[527] * 0.016860;
    output[1] += flatten_output[528] * -0.078050;
    output[1] += flatten_output[529] * -0.006019;
    output[1] += flatten_output[530] * 0.043564;
    output[1] += flatten_output[531] * -0.014498;
    output[1] += flatten_output[532] * -0.068346;
    output[1] += flatten_output[533] * 0.060985;
    output[1] += flatten_output[534] * 0.005462;
    output[1] += flatten_output[535] * -0.003357;
    output[1] += flatten_output[536] * 0.013942;
    output[1] += flatten_output[537] * 0.060430;
    output[1] += flatten_output[538] * -0.023236;
    output[1] += flatten_output[539] * -0.021341;
    output[1] += flatten_output[540] * -0.001411;
    output[1] += flatten_output[541] * 0.059663;
    output[1] += flatten_output[542] * 0.013526;
    output[1] += flatten_output[543] * 0.035700;
    output[1] += flatten_output[544] * -0.077023;
    output[1] += flatten_output[545] * -0.020056;
    output[1] += flatten_output[546] * 0.065131;
    output[1] += flatten_output[547] * 0.065714;
    output[1] += flatten_output[548] * 0.018873;
    output[1] += flatten_output[549] * -0.001229;
    output[1] += flatten_output[550] * 0.076829;
    output[1] += flatten_output[551] * 0.006921;
    output[1] += flatten_output[552] * -0.002126;
    output[1] += flatten_output[553] * 0.010781;
    output[1] += flatten_output[554] * 0.083386;
    output[1] += flatten_output[555] * 0.037340;
    output[1] += flatten_output[556] * 0.021416;
    output[1] += flatten_output[557] * 0.063755;
    output[1] += flatten_output[558] * 0.024126;
    output[1] += flatten_output[559] * -0.005212;
    output[1] += flatten_output[560] * -0.032328;
    output[1] += flatten_output[561] * 0.021355;
    output[1] += flatten_output[562] * 0.057501;
    output[1] += flatten_output[563] * -0.002335;
    output[1] += flatten_output[564] * 0.025974;
    output[1] += flatten_output[565] * 0.012559;
    output[1] += flatten_output[566] * -0.003983;
    output[1] += flatten_output[567] * -0.022718;
    output[1] += flatten_output[568] * 0.008317;
    output[1] += flatten_output[569] * 0.052968;
    output[1] += flatten_output[570] * -0.085173;
    output[1] += flatten_output[571] * -0.012345;
    output[1] += flatten_output[572] * 0.020719;
    output[1] += flatten_output[573] * 0.049269;
    output[1] += flatten_output[574] * 0.007754;
    output[1] += flatten_output[575] * 0.031592;
    output[1] += flatten_output[576] * 0.080781;
    output[1] += flatten_output[577] * 0.043343;
    output[1] += flatten_output[578] * 0.082984;
    output[1] += flatten_output[579] * 0.040016;
    output[1] += flatten_output[580] * 0.004942;
    output[1] += flatten_output[581] * -0.008672;
    output[1] += flatten_output[582] * 0.005661;
    output[1] += flatten_output[583] * 0.020602;
    output[1] += flatten_output[584] * -0.003770;
    output[1] += flatten_output[585] * 0.011792;
    output[1] += flatten_output[586] * 0.096650;
    output[1] += flatten_output[587] * 0.014988;
    output[1] += flatten_output[588] * 0.006879;
    output[1] += flatten_output[589] * 0.066389;
    output[1] += flatten_output[590] * 0.030333;
    output[1] += flatten_output[591] * 0.010807;
    output[1] += flatten_output[592] * 0.011002;
    output[1] += flatten_output[593] * 0.039290;
    output[1] += flatten_output[594] * -0.005008;
    output[1] += flatten_output[595] * -0.011222;
    output[1] += flatten_output[596] * -0.031425;
    output[1] += flatten_output[597] * -0.011333;
    output[1] += flatten_output[598] * -0.009888;
    output[1] += flatten_output[599] * -0.024034;
    output[1] += flatten_output[600] * 0.016779;
    output[1] += flatten_output[601] * 0.064230;
    output[1] += flatten_output[602] * 0.055693;
    output[1] += flatten_output[603] * -0.020489;
    output[1] += flatten_output[604] * -0.001579;
    output[1] += flatten_output[605] * 0.037436;
    output[1] += flatten_output[606] * 0.025508;
    output[1] += flatten_output[607] * 0.063714;
    output[1] += flatten_output[608] * -0.010468;
    output[1] += flatten_output[609] * -0.004311;
    output[1] += flatten_output[610] * 0.070305;
    output[1] += flatten_output[611] * 0.067255;
    output[1] += flatten_output[612] * 0.000224;
    output[1] += flatten_output[613] * -0.008693;
    output[1] += flatten_output[614] * 0.008809;
    output[1] += flatten_output[615] * 0.042735;
    output[1] += flatten_output[616] * -0.019556;
    output[1] += flatten_output[617] * -0.010016;
    output[1] += flatten_output[618] * 0.032571;
    output[1] += flatten_output[619] * 0.035741;
    output[1] += flatten_output[620] * 0.071944;
    output[1] += flatten_output[621] * 0.004773;
    output[1] += flatten_output[622] * 0.010727;
    output[1] += flatten_output[623] * -0.002643;
    output[1] += flatten_output[624] * -0.005647;
    output[1] += flatten_output[625] * -0.018967;
    output[1] += flatten_output[626] * 0.085103;
    output[1] += flatten_output[627] * 0.008751;
    output[1] += flatten_output[628] * -0.015311;
    output[1] += flatten_output[629] * 0.047847;
    output[1] += flatten_output[630] * 0.009811;
    output[1] += flatten_output[631] * 0.016743;
    output[1] += flatten_output[632] * 0.018736;
    output[1] += flatten_output[633] * 0.038609;
    output[1] += flatten_output[634] * 0.043518;
    output[1] += flatten_output[635] * -0.024321;
    output[1] += flatten_output[636] * 0.011283;
    output[1] += flatten_output[637] * 0.048737;
    output[1] += flatten_output[638] * 0.023082;
    output[1] += flatten_output[639] * 0.050163;
    output[1] += flatten_output[640] * 0.005757;
    output[1] += flatten_output[641] * -0.008539;
    output[1] += flatten_output[642] * 0.061479;
    output[1] += flatten_output[643] * 0.059222;
    output[1] += flatten_output[644] * -0.013642;
    output[1] += flatten_output[645] * -0.018807;
    output[1] += flatten_output[646] * 0.003968;
    output[1] += flatten_output[647] * 0.023360;
    output[1] += flatten_output[648] * -0.007723;
    output[1] += flatten_output[649] * 0.000153;
    output[1] += flatten_output[650] * 0.034651;
    output[1] += flatten_output[651] * 0.015143;
    output[1] += flatten_output[652] * 0.076696;
    output[1] += flatten_output[653] * 0.005256;
    output[1] += flatten_output[654] * 0.037262;
    output[1] += flatten_output[655] * 0.016981;
    output[1] += flatten_output[656] * -0.003920;
    output[1] += flatten_output[657] * -0.008604;
    output[1] += flatten_output[658] * 0.031698;
    output[1] += flatten_output[659] * -0.014351;
    output[1] += flatten_output[660] * -0.018197;
    output[1] += flatten_output[661] * 0.022043;
    output[1] += flatten_output[662] * 0.011077;
    output[1] += flatten_output[663] * -0.026516;
    output[1] += flatten_output[664] * 0.009562;
    output[1] += flatten_output[665] * -0.011770;
    output[1] += flatten_output[666] * -0.007500;
    output[1] += flatten_output[667] * -0.022632;
    output[1] += flatten_output[668] * -0.017469;
    output[1] += flatten_output[669] * 0.057303;
    output[1] += flatten_output[670] * 0.034123;
    output[1] += flatten_output[671] * 0.065991;
    output[1] += flatten_output[672] * 0.008337;
    output[1] += flatten_output[673] * 0.000553;
    output[1] += flatten_output[674] * 0.085299;
    output[1] += flatten_output[675] * -0.008288;
    output[1] = 1 / (1 + exp(-output[1]));
    output[2] = 0.019351;
    output[2] += flatten_output[0] * -0.007052;
    output[2] += flatten_output[1] * -0.007359;
    output[2] += flatten_output[2] * -0.043290;
    output[2] += flatten_output[3] * -0.010960;
    output[2] += flatten_output[4] * -0.022486;
    output[2] += flatten_output[5] * -0.016355;
    output[2] += flatten_output[6] * 0.019403;
    output[2] += flatten_output[7] * -0.002726;
    output[2] += flatten_output[8] * -0.005070;
    output[2] += flatten_output[9] * 0.003347;
    output[2] += flatten_output[10] * 0.006384;
    output[2] += flatten_output[11] * 0.011222;
    output[2] += flatten_output[12] * 0.005805;
    output[2] += flatten_output[13] * -0.016674;
    output[2] += flatten_output[14] * -0.018030;
    output[2] += flatten_output[15] * 0.008123;
    output[2] += flatten_output[16] * -0.044666;
    output[2] += flatten_output[17] * -0.020789;
    output[2] += flatten_output[18] * 0.008376;
    output[2] += flatten_output[19] * -0.010975;
    output[2] += flatten_output[20] * -0.015135;
    output[2] += flatten_output[21] * -0.015285;
    output[2] += flatten_output[22] * 0.011401;
    output[2] += flatten_output[23] * 0.010373;
    output[2] += flatten_output[24] * 0.004714;
    output[2] += flatten_output[25] * -0.008662;
    output[2] += flatten_output[26] * -0.014552;
    output[2] += flatten_output[27] * -0.016749;
    output[2] += flatten_output[28] * -0.003801;
    output[2] += flatten_output[29] * -0.041972;
    output[2] += flatten_output[30] * 0.004528;
    output[2] += flatten_output[31] * 0.015627;
    output[2] += flatten_output[32] * 0.001118;
    output[2] += flatten_output[33] * -0.013821;
    output[2] += flatten_output[34] * -0.038092;
    output[2] += flatten_output[35] * -0.027931;
    output[2] += flatten_output[36] * 0.004120;
    output[2] += flatten_output[37] * -0.001464;
    output[2] += flatten_output[38] * 0.013146;
    output[2] += flatten_output[39] * -0.002885;
    output[2] += flatten_output[40] * -0.023419;
    output[2] += flatten_output[41] * 0.005277;
    output[2] += flatten_output[42] * 0.016348;
    output[2] += flatten_output[43] * 0.006038;
    output[2] += flatten_output[44] * 0.018421;
    output[2] += flatten_output[45] * -0.017570;
    output[2] += flatten_output[46] * -0.023271;
    output[2] += flatten_output[47] * 0.012159;
    output[2] += flatten_output[48] * -0.054981;
    output[2] += flatten_output[49] * -0.014332;
    output[2] += flatten_output[50] * 0.018527;
    output[2] += flatten_output[51] * -0.003114;
    output[2] += flatten_output[52] * -0.004256;
    output[2] += flatten_output[53] * -0.017766;
    output[2] += flatten_output[54] * -0.003322;
    output[2] += flatten_output[55] * 0.008510;
    output[2] += flatten_output[56] * -0.021126;
    output[2] += flatten_output[57] * -0.009799;
    output[2] += flatten_output[58] * 0.000857;
    output[2] += flatten_output[59] * 0.005880;
    output[2] += flatten_output[60] * 0.000387;
    output[2] += flatten_output[61] * -0.039788;
    output[2] += flatten_output[62] * -0.000211;
    output[2] += flatten_output[63] * 0.021735;
    output[2] += flatten_output[64] * 0.000170;
    output[2] += flatten_output[65] * -0.010555;
    output[2] += flatten_output[66] * -0.041024;
    output[2] += flatten_output[67] * -0.007046;
    output[2] += flatten_output[68] * -0.023642;
    output[2] += flatten_output[69] * -0.004809;
    output[2] += flatten_output[70] * 0.022250;
    output[2] += flatten_output[71] * -0.011722;
    output[2] += flatten_output[72] * -0.009396;
    output[2] += flatten_output[73] * 0.001248;
    output[2] += flatten_output[74] * -0.014238;
    output[2] += flatten_output[75] * 0.010489;
    output[2] += flatten_output[76] * 0.021527;
    output[2] += flatten_output[77] * 0.001850;
    output[2] += flatten_output[78] * -0.018341;
    output[2] += flatten_output[79] * 0.030828;
    output[2] += flatten_output[80] * -0.046258;
    output[2] += flatten_output[81] * -0.003835;
    output[2] += flatten_output[82] * -0.007031;
    output[2] += flatten_output[83] * -0.012016;
    output[2] += flatten_output[84] * -0.016155;
    output[2] += flatten_output[85] * -0.010224;
    output[2] += flatten_output[86] * -0.016861;
    output[2] += flatten_output[87] * -0.006499;
    output[2] += flatten_output[88] * -0.007508;
    output[2] += flatten_output[89] * -0.020283;
    output[2] += flatten_output[90] * -0.004098;
    output[2] += flatten_output[91] * -0.017722;
    output[2] += flatten_output[92] * 0.002591;
    output[2] += flatten_output[93] * -0.042379;
    output[2] += flatten_output[94] * 0.003040;
    output[2] += flatten_output[95] * 0.025639;
    output[2] += flatten_output[96] * -0.006348;
    output[2] += flatten_output[97] * 0.001790;
    output[2] += flatten_output[98] * -0.034830;
    output[2] += flatten_output[99] * -0.021700;
    output[2] += flatten_output[100] * -0.026533;
    output[2] += flatten_output[101] * -0.022696;
    output[2] += flatten_output[102] * -0.000650;
    output[2] += flatten_output[103] * -0.018764;
    output[2] += flatten_output[104] * -0.000246;
    output[2] += flatten_output[105] * -0.011895;
    output[2] += flatten_output[106] * -0.012891;
    output[2] += flatten_output[107] * -0.004249;
    output[2] += flatten_output[108] * 0.014874;
    output[2] += flatten_output[109] * 0.010708;
    output[2] += flatten_output[110] * -0.021358;
    output[2] += flatten_output[111] * 0.005824;
    output[2] += flatten_output[112] * -0.032951;
    output[2] += flatten_output[113] * -0.021841;
    output[2] += flatten_output[114] * 0.010511;
    output[2] += flatten_output[115] * -0.009835;
    output[2] += flatten_output[116] * -0.005799;
    output[2] += flatten_output[117] * -0.024477;
    output[2] += flatten_output[118] * 0.008294;
    output[2] += flatten_output[119] * 0.008429;
    output[2] += flatten_output[120] * -0.016276;
    output[2] += flatten_output[121] * -0.006024;
    output[2] += flatten_output[122] * 0.005424;
    output[2] += flatten_output[123] * 0.004253;
    output[2] += flatten_output[124] * -0.004729;
    output[2] += flatten_output[125] * -0.015650;
    output[2] += flatten_output[126] * -0.020622;
    output[2] += flatten_output[127] * 0.034381;
    output[2] += flatten_output[128] * -0.005328;
    output[2] += flatten_output[129] * -0.014151;
    output[2] += flatten_output[130] * -0.027785;
    output[2] += flatten_output[131] * -0.018587;
    output[2] += flatten_output[132] * -0.027085;
    output[2] += flatten_output[133] * -0.013313;
    output[2] += flatten_output[134] * -0.006154;
    output[2] += flatten_output[135] * 0.006068;
    output[2] += flatten_output[136] * -0.001058;
    output[2] += flatten_output[137] * 0.009356;
    output[2] += flatten_output[138] * 0.007765;
    output[2] += flatten_output[139] * -0.014529;
    output[2] += flatten_output[140] * -0.005853;
    output[2] += flatten_output[141] * -0.004170;
    output[2] += flatten_output[142] * -0.016450;
    output[2] += flatten_output[143] * 0.013450;
    output[2] += flatten_output[144] * -0.057584;
    output[2] += flatten_output[145] * -0.015059;
    output[2] += flatten_output[146] * 0.004605;
    output[2] += flatten_output[147] * -0.011779;
    output[2] += flatten_output[148] * -0.022344;
    output[2] += flatten_output[149] * -0.026824;
    output[2] += flatten_output[150] * 0.007255;
    output[2] += flatten_output[151] * -0.012537;
    output[2] += flatten_output[152] * -0.014024;
    output[2] += flatten_output[153] * -0.004510;
    output[2] += flatten_output[154] * -0.006372;
    output[2] += flatten_output[155] * -0.009183;
    output[2] += flatten_output[156] * -0.026771;
    output[2] += flatten_output[157] * -0.044749;
    output[2] += flatten_output[158] * -0.012882;
    output[2] += flatten_output[159] * 0.011361;
    output[2] += flatten_output[160] * 0.000250;
    output[2] += flatten_output[161] * 0.008714;
    output[2] += flatten_output[162] * -0.019306;
    output[2] += flatten_output[163] * -0.031302;
    output[2] += flatten_output[164] * -0.031254;
    output[2] += flatten_output[165] * -0.010656;
    output[2] += flatten_output[166] * 0.000390;
    output[2] += flatten_output[167] * -0.020424;
    output[2] += flatten_output[168] * -0.005222;
    output[2] += flatten_output[169] * -0.016523;
    output[2] += flatten_output[170] * 0.007463;
    output[2] += flatten_output[171] * 0.004431;
    output[2] += flatten_output[172] * 0.007905;
    output[2] += flatten_output[173] * -0.005620;
    output[2] += flatten_output[174] * -0.031551;
    output[2] += flatten_output[175] * -0.000281;
    output[2] += flatten_output[176] * -0.064802;
    output[2] += flatten_output[177] * -0.026307;
    output[2] += flatten_output[178] * -0.007061;
    output[2] += flatten_output[179] * -0.004325;
    output[2] += flatten_output[180] * -0.025217;
    output[2] += flatten_output[181] * -0.019350;
    output[2] += flatten_output[182] * -0.023101;
    output[2] += flatten_output[183] * -0.014109;
    output[2] += flatten_output[184] * -0.020300;
    output[2] += flatten_output[185] * -0.002725;
    output[2] += flatten_output[186] * -0.007205;
    output[2] += flatten_output[187] * -0.014871;
    output[2] += flatten_output[188] * -0.017143;
    output[2] += flatten_output[189] * -0.047048;
    output[2] += flatten_output[190] * -0.004668;
    output[2] += flatten_output[191] * 0.012091;
    output[2] += flatten_output[192] * -0.010666;
    output[2] += flatten_output[193] * -0.022612;
    output[2] += flatten_output[194] * -0.043361;
    output[2] += flatten_output[195] * 0.048413;
    output[2] += flatten_output[196] * -0.026672;
    output[2] += flatten_output[197] * -0.018359;
    output[2] += flatten_output[198] * 0.029385;
    output[2] += flatten_output[199] * -0.017984;
    output[2] += flatten_output[200] * -0.038377;
    output[2] += flatten_output[201] * 0.007790;
    output[2] += flatten_output[202] * 0.009116;
    output[2] += flatten_output[203] * 0.011381;
    output[2] += flatten_output[204] * 0.021912;
    output[2] += flatten_output[205] * 0.010718;
    output[2] += flatten_output[206] * -0.002578;
    output[2] += flatten_output[207] * 0.002100;
    output[2] += flatten_output[208] * -0.058491;
    output[2] += flatten_output[209] * -0.012652;
    output[2] += flatten_output[210] * 0.013092;
    output[2] += flatten_output[211] * -0.013704;
    output[2] += flatten_output[212] * -0.021175;
    output[2] += flatten_output[213] * -0.018465;
    output[2] += flatten_output[214] * -0.010053;
    output[2] += flatten_output[215] * -0.022947;
    output[2] += flatten_output[216] * -0.005002;
    output[2] += flatten_output[217] * 0.007743;
    output[2] += flatten_output[218] * -0.002663;
    output[2] += flatten_output[219] * -0.014946;
    output[2] += flatten_output[220] * -0.021154;
    output[2] += flatten_output[221] * 0.022517;
    output[2] += flatten_output[222] * -0.007865;
    output[2] += flatten_output[223] * 0.016645;
    output[2] += flatten_output[224] * -0.010743;
    output[2] += flatten_output[225] * -0.009641;
    output[2] += flatten_output[226] * -0.026488;
    output[2] += flatten_output[227] * 0.071711;
    output[2] += flatten_output[228] * 0.009390;
    output[2] += flatten_output[229] * -0.029851;
    output[2] += flatten_output[230] * 0.046847;
    output[2] += flatten_output[231] * -0.009921;
    output[2] += flatten_output[232] * 0.007381;
    output[2] += flatten_output[233] * 0.013552;
    output[2] += flatten_output[234] * 0.054155;
    output[2] += flatten_output[235] * 0.011312;
    output[2] += flatten_output[236] * 0.009248;
    output[2] += flatten_output[237] * 0.101097;
    output[2] += flatten_output[238] * -0.024356;
    output[2] += flatten_output[239] * 0.018023;
    output[2] += flatten_output[240] * -0.051255;
    output[2] += flatten_output[241] * 0.003160;
    output[2] += flatten_output[242] * 0.008285;
    output[2] += flatten_output[243] * -0.007192;
    output[2] += flatten_output[244] * 0.006754;
    output[2] += flatten_output[245] * -0.007608;
    output[2] += flatten_output[246] * -0.005804;
    output[2] += flatten_output[247] * -0.014553;
    output[2] += flatten_output[248] * 0.006217;
    output[2] += flatten_output[249] * 0.026786;
    output[2] += flatten_output[250] * -0.019474;
    output[2] += flatten_output[251] * 0.009410;
    output[2] += flatten_output[252] * 0.000548;
    output[2] += flatten_output[253] * 0.068487;
    output[2] += flatten_output[254] * -0.021331;
    output[2] += flatten_output[255] * 0.019635;
    output[2] += flatten_output[256] * 0.058306;
    output[2] += flatten_output[257] * 0.016318;
    output[2] += flatten_output[258] * -0.023376;
    output[2] += flatten_output[259] * 0.124833;
    output[2] += flatten_output[260] * 0.039074;
    output[2] += flatten_output[261] * -0.005714;
    output[2] += flatten_output[262] * 0.048965;
    output[2] += flatten_output[263] * -0.024402;
    output[2] += flatten_output[264] * 0.013341;
    output[2] += flatten_output[265] * 0.014393;
    output[2] += flatten_output[266] * 0.088112;
    output[2] += flatten_output[267] * -0.006964;
    output[2] += flatten_output[268] * 0.049724;
    output[2] += flatten_output[269] * 0.112892;
    output[2] += flatten_output[270] * -0.031110;
    output[2] += flatten_output[271] * 0.007770;
    output[2] += flatten_output[272] * -0.031303;
    output[2] += flatten_output[273] * 0.020806;
    output[2] += flatten_output[274] * -0.011291;
    output[2] += flatten_output[275] * 0.024270;
    output[2] += flatten_output[276] * 0.043539;
    output[2] += flatten_output[277] * 0.028264;
    output[2] += flatten_output[278] * -0.022870;
    output[2] += flatten_output[279] * 0.010446;
    output[2] += flatten_output[280] * -0.018548;
    output[2] += flatten_output[281] * 0.084850;
    output[2] += flatten_output[282] * 0.009798;
    output[2] += flatten_output[283] * -0.004803;
    output[2] += flatten_output[284] * 0.031076;
    output[2] += flatten_output[285] * 0.113355;
    output[2] += flatten_output[286] * -0.021707;
    output[2] += flatten_output[287] * 0.000891;
    output[2] += flatten_output[288] * 0.071386;
    output[2] += flatten_output[289] * 0.063607;
    output[2] += flatten_output[290] * -0.048815;
    output[2] += flatten_output[291] * 0.133864;
    output[2] += flatten_output[292] * 0.029897;
    output[2] += flatten_output[293] * -0.010879;
    output[2] += flatten_output[294] * -0.011729;
    output[2] += flatten_output[295] * -0.024840;
    output[2] += flatten_output[296] * 0.001892;
    output[2] += flatten_output[297] * -0.004475;
    output[2] += flatten_output[298] * 0.061142;
    output[2] += flatten_output[299] * 0.000950;
    output[2] += flatten_output[300] * 0.074219;
    output[2] += flatten_output[301] * 0.092614;
    output[2] += flatten_output[302] * -0.015686;
    output[2] += flatten_output[303] * 0.012569;
    output[2] += flatten_output[304] * -0.021726;
    output[2] += flatten_output[305] * 0.014614;
    output[2] += flatten_output[306] * 0.041866;
    output[2] += flatten_output[307] * -0.018212;
    output[2] += flatten_output[308] * 0.003988;
    output[2] += flatten_output[309] * 0.054974;
    output[2] += flatten_output[310] * -0.023447;
    output[2] += flatten_output[311] * 0.011194;
    output[2] += flatten_output[312] * -0.012112;
    output[2] += flatten_output[313] * 0.076428;
    output[2] += flatten_output[314] * 0.002502;
    output[2] += flatten_output[315] * 0.011742;
    output[2] += flatten_output[316] * 0.022916;
    output[2] += flatten_output[317] * 0.122248;
    output[2] += flatten_output[318] * -0.013517;
    output[2] += flatten_output[319] * 0.002246;
    output[2] += flatten_output[320] * -0.011297;
    output[2] += flatten_output[321] * -0.011146;
    output[2] += flatten_output[322] * -0.043778;
    output[2] += flatten_output[323] * 0.134032;
    output[2] += flatten_output[324] * 0.004621;
    output[2] += flatten_output[325] * -0.021187;
    output[2] += flatten_output[326] * 0.075094;
    output[2] += flatten_output[327] * -0.028062;
    output[2] += flatten_output[328] * 0.011461;
    output[2] += flatten_output[329] * 0.013498;
    output[2] += flatten_output[330] * 0.052955;
    output[2] += flatten_output[331] * -0.018256;
    output[2] += flatten_output[332] * 0.116584;
    output[2] += flatten_output[333] * 0.073369;
    output[2] += flatten_output[334] * -0.016559;
    output[2] += flatten_output[335] * -0.010041;
    output[2] += flatten_output[336] * -0.019546;
    output[2] += flatten_output[337] * 0.022235;
    output[2] += flatten_output[338] * 0.064958;
    output[2] += flatten_output[339] * -0.010535;
    output[2] += flatten_output[340] * 0.034856;
    output[2] += flatten_output[341] * 0.082634;
    output[2] += flatten_output[342] * -0.003862;
    output[2] += flatten_output[343] * 0.029036;
    output[2] += flatten_output[344] * -0.007325;
    output[2] += flatten_output[345] * 0.037493;
    output[2] += flatten_output[346] * 0.053634;
    output[2] += flatten_output[347] * 0.060702;
    output[2] += flatten_output[348] * 0.012674;
    output[2] += flatten_output[349] * 0.120634;
    output[2] += flatten_output[350] * -0.021174;
    output[2] += flatten_output[351] * 0.006053;
    output[2] += flatten_output[352] * 0.000909;
    output[2] += flatten_output[353] * 0.053151;
    output[2] += flatten_output[354] * -0.046339;
    output[2] += flatten_output[355] * 0.073191;
    output[2] += flatten_output[356] * -0.009763;
    output[2] += flatten_output[357] * 0.014344;
    output[2] += flatten_output[358] * -0.007183;
    output[2] += flatten_output[359] * -0.020776;
    output[2] += flatten_output[360] * 0.014618;
    output[2] += flatten_output[361] * -0.013061;
    output[2] += flatten_output[362] * 0.013072;
    output[2] += flatten_output[363] * -0.014516;
    output[2] += flatten_output[364] * 0.065158;
    output[2] += flatten_output[365] * 0.034266;
    output[2] += flatten_output[366] * -0.014989;
    output[2] += flatten_output[367] * -0.001549;
    output[2] += flatten_output[368] * -0.052854;
    output[2] += flatten_output[369] * 0.045511;
    output[2] += flatten_output[370] * 0.044412;
    output[2] += flatten_output[371] * -0.036834;
    output[2] += flatten_output[372] * -0.021705;
    output[2] += flatten_output[373] * 0.030807;
    output[2] += flatten_output[374] * -0.005885;
    output[2] += flatten_output[375] * 0.006187;
    output[2] += flatten_output[376] * -0.001580;
    output[2] += flatten_output[377] * 0.040479;
    output[2] += flatten_output[378] * -0.025156;
    output[2] += flatten_output[379] * -0.138096;
    output[2] += flatten_output[380] * 0.005271;
    output[2] += flatten_output[381] * 0.047328;
    output[2] += flatten_output[382] * -0.002535;
    output[2] += flatten_output[383] * 0.022717;
    output[2] += flatten_output[384] * -0.126698;
    output[2] += flatten_output[385] * -0.031830;
    output[2] += flatten_output[386] * -0.038434;
    output[2] += flatten_output[387] * 0.046716;
    output[2] += flatten_output[388] * 0.023291;
    output[2] += flatten_output[389] * 0.021348;
    output[2] += flatten_output[390] * -0.002803;
    output[2] += flatten_output[391] * 0.003443;
    output[2] += flatten_output[392] * 0.002690;
    output[2] += flatten_output[393] * 0.013565;
    output[2] += flatten_output[394] * -0.012257;
    output[2] += flatten_output[395] * -0.016942;
    output[2] += flatten_output[396] * 0.061764;
    output[2] += flatten_output[397] * -0.023791;
    output[2] += flatten_output[398] * -0.021315;
    output[2] += flatten_output[399] * 0.016304;
    output[2] += flatten_output[400] * -0.018200;
    output[2] += flatten_output[401] * 0.036665;
    output[2] += flatten_output[402] * 0.019372;
    output[2] += flatten_output[403] * -0.032064;
    output[2] += flatten_output[404] * 0.011225;
    output[2] += flatten_output[405] * 0.050396;
    output[2] += flatten_output[406] * -0.040241;
    output[2] += flatten_output[407] * 0.025625;
    output[2] += flatten_output[408] * -0.022298;
    output[2] += flatten_output[409] * 0.015024;
    output[2] += flatten_output[410] * -0.056539;
    output[2] += flatten_output[411] * -0.081452;
    output[2] += flatten_output[412] * 0.061550;
    output[2] += flatten_output[413] * 0.040203;
    output[2] += flatten_output[414] * -0.023540;
    output[2] += flatten_output[415] * 0.029469;
    output[2] += flatten_output[416] * 0.018808;
    output[2] += flatten_output[417] * -0.003157;
    output[2] += flatten_output[418] * -0.022441;
    output[2] += flatten_output[419] * -0.025870;
    output[2] += flatten_output[420] * -0.001331;
    output[2] += flatten_output[421] * 0.031834;
    output[2] += flatten_output[422] * -0.086809;
    output[2] += flatten_output[423] * -0.016158;
    output[2] += flatten_output[424] * -0.027831;
    output[2] += flatten_output[425] * 0.011762;
    output[2] += flatten_output[426] * -0.035424;
    output[2] += flatten_output[427] * -0.007715;
    output[2] += flatten_output[428] * -0.087250;
    output[2] += flatten_output[429] * -0.057553;
    output[2] += flatten_output[430] * 0.010884;
    output[2] += flatten_output[431] * 0.028389;
    output[2] += flatten_output[432] * -0.015680;
    output[2] += flatten_output[433] * 0.012203;
    output[2] += flatten_output[434] * -0.063763;
    output[2] += flatten_output[435] * -0.035762;
    output[2] += flatten_output[436] * -0.029954;
    output[2] += flatten_output[437] * -0.001710;
    output[2] += flatten_output[438] * -0.015783;
    output[2] += flatten_output[439] * 0.009953;
    output[2] += flatten_output[440] * 0.009294;
    output[2] += flatten_output[441] * -0.003732;
    output[2] += flatten_output[442] * -0.033577;
    output[2] += flatten_output[443] * -0.034710;
    output[2] += flatten_output[444] * 0.019797;
    output[2] += flatten_output[445] * -0.032236;
    output[2] += flatten_output[446] * -0.006168;
    output[2] += flatten_output[447] * 0.023147;
    output[2] += flatten_output[448] * -0.086971;
    output[2] += flatten_output[449] * -0.073519;
    output[2] += flatten_output[450] * -0.036391;
    output[2] += flatten_output[451] * -0.023625;
    output[2] += flatten_output[452] * 0.025269;
    output[2] += flatten_output[453] * 0.014570;
    output[2] += flatten_output[454] * 0.060723;
    output[2] += flatten_output[455] * -0.010300;
    output[2] += flatten_output[456] * -0.005133;
    output[2] += flatten_output[457] * -0.007113;
    output[2] += flatten_output[458] * -0.032337;
    output[2] += flatten_output[459] * 0.079615;
    output[2] += flatten_output[460] * 0.027163;
    output[2] += flatten_output[461] * -0.042428;
    output[2] += flatten_output[462] * -0.014170;
    output[2] += flatten_output[463] * 0.092397;
    output[2] += flatten_output[464] * -0.014245;
    output[2] += flatten_output[465] * -0.019498;
    output[2] += flatten_output[466] * 0.045449;
    output[2] += flatten_output[467] * 0.040058;
    output[2] += flatten_output[468] * 0.036899;
    output[2] += flatten_output[469] * 0.060133;
    output[2] += flatten_output[470] * 0.076436;
    output[2] += flatten_output[471] * 0.014812;
    output[2] += flatten_output[472] * -0.009304;
    output[2] += flatten_output[473] * -0.029054;
    output[2] += flatten_output[474] * 0.025642;
    output[2] += flatten_output[475] * 0.097042;
    output[2] += flatten_output[476] * -0.012203;
    output[2] += flatten_output[477] * -0.029293;
    output[2] += flatten_output[478] * -0.015380;
    output[2] += flatten_output[479] * 0.047132;
    output[2] += flatten_output[480] * 0.003872;
    output[2] += flatten_output[481] * -0.053066;
    output[2] += flatten_output[482] * -0.018940;
    output[2] += flatten_output[483] * -0.051590;
    output[2] += flatten_output[484] * -0.003939;
    output[2] += flatten_output[485] * 0.009250;
    output[2] += flatten_output[486] * 0.005524;
    output[2] += flatten_output[487] * -0.012028;
    output[2] += flatten_output[488] * 0.032741;
    output[2] += flatten_output[489] * 0.004050;
    output[2] += flatten_output[490] * -0.031068;
    output[2] += flatten_output[491] * 0.013127;
    output[2] += flatten_output[492] * -0.035072;
    output[2] += flatten_output[493] * -0.014938;
    output[2] += flatten_output[494] * -0.013066;
    output[2] += flatten_output[495] * 0.052478;
    output[2] += flatten_output[496] * 0.017887;
    output[2] += flatten_output[497] * -0.046265;
    output[2] += flatten_output[498] * -0.033752;
    output[2] += flatten_output[499] * 0.095253;
    output[2] += flatten_output[500] * -0.009842;
    output[2] += flatten_output[501] * -0.010790;
    output[2] += flatten_output[502] * 0.004960;
    output[2] += flatten_output[503] * -0.030671;
    output[2] += flatten_output[504] * -0.000835;
    output[2] += flatten_output[505] * -0.059114;
    output[2] += flatten_output[506] * -0.052657;
    output[2] += flatten_output[507] * 0.037418;
    output[2] += flatten_output[508] * -0.001372;
    output[2] += flatten_output[509] * -0.051513;
    output[2] += flatten_output[510] * -0.014929;
    output[2] += flatten_output[511] * 0.042381;
    output[2] += flatten_output[512] * -0.070714;
    output[2] += flatten_output[513] * -0.016981;
    output[2] += flatten_output[514] * -0.030226;
    output[2] += flatten_output[515] * -0.055873;
    output[2] += flatten_output[516] * -0.008451;
    output[2] += flatten_output[517] * 0.042967;
    output[2] += flatten_output[518] * -0.040561;
    output[2] += flatten_output[519] * -0.006060;
    output[2] += flatten_output[520] * 0.018287;
    output[2] += flatten_output[521] * 0.012249;
    output[2] += flatten_output[522] * -0.052308;
    output[2] += flatten_output[523] * -0.050494;
    output[2] += flatten_output[524] * 0.082191;
    output[2] += flatten_output[525] * -0.071599;
    output[2] += flatten_output[526] * -0.036289;
    output[2] += flatten_output[527] * -0.014923;
    output[2] += flatten_output[528] * 0.079927;
    output[2] += flatten_output[529] * 0.001533;
    output[2] += flatten_output[530] * 0.036387;
    output[2] += flatten_output[531] * -0.047748;
    output[2] += flatten_output[532] * -0.011362;
    output[2] += flatten_output[533] * 0.013400;
    output[2] += flatten_output[534] * -0.040418;
    output[2] += flatten_output[535] * 0.045945;
    output[2] += flatten_output[536] * -0.016781;
    output[2] += flatten_output[537] * -0.072953;
    output[2] += flatten_output[538] * 0.022537;
    output[2] += flatten_output[539] * -0.080383;
    output[2] += flatten_output[540] * -0.025804;
    output[2] += flatten_output[541] * -0.039566;
    output[2] += flatten_output[542] * 0.000172;
    output[2] += flatten_output[543] * 0.025322;
    output[2] += flatten_output[544] * 0.034793;
    output[2] += flatten_output[545] * -0.055834;
    output[2] += flatten_output[546] * -0.025056;
    output[2] += flatten_output[547] * -0.102299;
    output[2] += flatten_output[548] * -0.063086;
    output[2] += flatten_output[549] * -0.023020;
    output[2] += flatten_output[550] * -0.068891;
    output[2] += flatten_output[551] * 0.017138;
    output[2] += flatten_output[552] * -0.053192;
    output[2] += flatten_output[553] * 0.011752;
    output[2] += flatten_output[554] * -0.069632;
    output[2] += flatten_output[555] * -0.019161;
    output[2] += flatten_output[556] * 0.010212;
    output[2] += flatten_output[557] * -0.097909;
    output[2] += flatten_output[558] * -0.038408;
    output[2] += flatten_output[559] * 0.005282;
    output[2] += flatten_output[560] * -0.008241;
    output[2] += flatten_output[561] * -0.056094;
    output[2] += flatten_output[562] * 0.006807;
    output[2] += flatten_output[563] * -0.074519;
    output[2] += flatten_output[564] * -0.066724;
    output[2] += flatten_output[565] * -0.024246;
    output[2] += flatten_output[566] * -0.004363;
    output[2] += flatten_output[567] * 0.029916;
    output[2] += flatten_output[568] * -0.017483;
    output[2] += flatten_output[569] * -0.085338;
    output[2] += flatten_output[570] * 0.045434;
    output[2] += flatten_output[571] * -0.040053;
    output[2] += flatten_output[572] * -0.066729;
    output[2] += flatten_output[573] * -0.097431;
    output[2] += flatten_output[574] * 0.020115;
    output[2] += flatten_output[575] * 0.022662;
    output[2] += flatten_output[576] * -0.111495;
    output[2] += flatten_output[577] * -0.116525;
    output[2] += flatten_output[578] * -0.042290;
    output[2] += flatten_output[579] * -0.104557;
    output[2] += flatten_output[580] * -0.054196;
    output[2] += flatten_output[581] * -0.042769;
    output[2] += flatten_output[582] * -0.008066;
    output[2] += flatten_output[583] * 0.017368;
    output[2] += flatten_output[584] * -0.049807;
    output[2] += flatten_output[585] * 0.011721;
    output[2] += flatten_output[586] * -0.051335;
    output[2] += flatten_output[587] * -0.001230;
    output[2] += flatten_output[588] * -0.057837;
    output[2] += flatten_output[589] * -0.116141;
    output[2] += flatten_output[590] * -0.034092;
    output[2] += flatten_output[591] * 0.032528;
    output[2] += flatten_output[592] * -0.077949;
    output[2] += flatten_output[593] * -0.067050;
    output[2] += flatten_output[594] * -0.009718;
    output[2] += flatten_output[595] * -0.020986;
    output[2] += flatten_output[596] * -0.022924;
    output[2] += flatten_output[597] * -0.043281;
    output[2] += flatten_output[598] * -0.005436;
    output[2] += flatten_output[599] * -0.038242;
    output[2] += flatten_output[600] * -0.023369;
    output[2] += flatten_output[601] * -0.089765;
    output[2] += flatten_output[602] * -0.102237;
    output[2] += flatten_output[603] * -0.026984;
    output[2] += flatten_output[604] * -0.053529;
    output[2] += flatten_output[605] * -0.117452;
    output[2] += flatten_output[606] * -0.004927;
    output[2] += flatten_output[607] * 0.053835;
    output[2] += flatten_output[608] * -0.051941;
    output[2] += flatten_output[609] * -0.012841;
    output[2] += flatten_output[610] * -0.021873;
    output[2] += flatten_output[611] * -0.133906;
    output[2] += flatten_output[612] * -0.039699;
    output[2] += flatten_output[613] * -0.035862;
    output[2] += flatten_output[614] * 0.004848;
    output[2] += flatten_output[615] * -0.011014;
    output[2] += flatten_output[616] * -0.037286;
    output[2] += flatten_output[617] * -0.016322;
    output[2] += flatten_output[618] * -0.015361;
    output[2] += flatten_output[619] * 0.011146;
    output[2] += flatten_output[620] * -0.120490;
    output[2] += flatten_output[621] * -0.038551;
    output[2] += flatten_output[622] * -0.020490;
    output[2] += flatten_output[623] * 0.025975;
    output[2] += flatten_output[624] * -0.093085;
    output[2] += flatten_output[625] * -0.050691;
    output[2] += flatten_output[626] * -0.084444;
    output[2] += flatten_output[627] * -0.007928;
    output[2] += flatten_output[628] * -0.046714;
    output[2] += flatten_output[629] * -0.129964;
    output[2] += flatten_output[630] * -0.007263;
    output[2] += flatten_output[631] * -0.068375;
    output[2] += flatten_output[632] * 0.002962;
    output[2] += flatten_output[633] * -0.095820;
    output[2] += flatten_output[634] * -0.160816;
    output[2] += flatten_output[635] * -0.031663;
    output[2] += flatten_output[636] * -0.047228;
    output[2] += flatten_output[637] * -0.142023;
    output[2] += flatten_output[638] * -0.016271;
    output[2] += flatten_output[639] * 0.021299;
    output[2] += flatten_output[640] * -0.019416;
    output[2] += flatten_output[641] * -0.067318;
    output[2] += flatten_output[642] * -0.027905;
    output[2] += flatten_output[643] * -0.142298;
    output[2] += flatten_output[644] * -0.048252;
    output[2] += flatten_output[645] * -0.043866;
    output[2] += flatten_output[646] * -0.009115;
    output[2] += flatten_output[647] * -0.012061;
    output[2] += flatten_output[648] * -0.055294;
    output[2] += flatten_output[649] * 0.002027;
    output[2] += flatten_output[650] * -0.016094;
    output[2] += flatten_output[651] * 0.008838;
    output[2] += flatten_output[652] * -0.098662;
    output[2] += flatten_output[653] * -0.023443;
    output[2] += flatten_output[654] * -0.016038;
    output[2] += flatten_output[655] * 0.027666;
    output[2] += flatten_output[656] * -0.077714;
    output[2] += flatten_output[657] * -0.057185;
    output[2] += flatten_output[658] * -0.047577;
    output[2] += flatten_output[659] * -0.056505;
    output[2] += flatten_output[660] * -0.087972;
    output[2] += flatten_output[661] * -0.094582;
    output[2] += flatten_output[662] * -0.016236;
    output[2] += flatten_output[663] * -0.040027;
    output[2] += flatten_output[664] * -0.015157;
    output[2] += flatten_output[665] * -0.038303;
    output[2] += flatten_output[666] * -0.035637;
    output[2] += flatten_output[667] * -0.044741;
    output[2] += flatten_output[668] * -0.046906;
    output[2] += flatten_output[669] * -0.140581;
    output[2] += flatten_output[670] * -0.003000;
    output[2] += flatten_output[671] * 0.046298;
    output[2] += flatten_output[672] * -0.019201;
    output[2] += flatten_output[673] * -0.021536;
    output[2] += flatten_output[674] * -0.032935;
    output[2] += flatten_output[675] * -0.037824;
    output[2] = 1 / (1 + exp(-output[2]));
    output[3] = -0.012585;
    output[3] += flatten_output[0] * 0.001360;
    output[3] += flatten_output[1] * -0.006583;
    output[3] += flatten_output[2] * -0.018120;
    output[3] += flatten_output[3] * 0.003534;
    output[3] += flatten_output[4] * 0.000904;
    output[3] += flatten_output[5] * -0.012225;
    output[3] += flatten_output[6] * 0.008211;
    output[3] += flatten_output[7] * -0.009517;
    output[3] += flatten_output[8] * 0.004522;
    output[3] += flatten_output[9] * 0.003188;
    output[3] += flatten_output[10] * -0.015407;
    output[3] += flatten_output[11] * -0.036807;
    output[3] += flatten_output[12] * 0.008193;
    output[3] += flatten_output[13] * 0.007875;
    output[3] += flatten_output[14] * -0.002945;
    output[3] += flatten_output[15] * 0.008379;
    output[3] += flatten_output[16] * 0.042978;
    output[3] += flatten_output[17] * 0.017795;
    output[3] += flatten_output[18] * -0.013191;
    output[3] += flatten_output[19] * -0.009624;
    output[3] += flatten_output[20] * 0.014791;
    output[3] += flatten_output[21] * -0.015113;
    output[3] += flatten_output[22] * 0.012959;
    output[3] += flatten_output[23] * -0.005375;
    output[3] += flatten_output[24] * -0.005109;
    output[3] += flatten_output[25] * 0.010887;
    output[3] += flatten_output[26] * -0.017973;
    output[3] += flatten_output[27] * 0.007715;
    output[3] += flatten_output[28] * 0.007985;
    output[3] += flatten_output[29] * -0.034266;
    output[3] += flatten_output[30] * -0.009181;
    output[3] += flatten_output[31] * -0.006690;
    output[3] += flatten_output[32] * -0.008408;
    output[3] += flatten_output[33] * -0.015557;
    output[3] += flatten_output[34] * -0.015443;
    output[3] += flatten_output[35] * -0.012235;
    output[3] += flatten_output[36] * -0.001440;
    output[3] += flatten_output[37] * -0.014869;
    output[3] += flatten_output[38] * -0.010066;
    output[3] += flatten_output[39] * -0.017968;
    output[3] += flatten_output[40] * -0.006935;
    output[3] += flatten_output[41] * 0.007122;
    output[3] += flatten_output[42] * -0.012035;
    output[3] += flatten_output[43] * -0.017936;
    output[3] += flatten_output[44] * -0.017923;
    output[3] += flatten_output[45] * 0.010191;
    output[3] += flatten_output[46] * -0.028795;
    output[3] += flatten_output[47] * 0.024319;
    output[3] += flatten_output[48] * 0.040416;
    output[3] += flatten_output[49] * 0.011015;
    output[3] += flatten_output[50] * -0.009210;
    output[3] += flatten_output[51] * 0.017169;
    output[3] += flatten_output[52] * -0.000527;
    output[3] += flatten_output[53] * -0.002685;
    output[3] += flatten_output[54] * -0.010043;
    output[3] += flatten_output[55] * -0.012699;
    output[3] += flatten_output[56] * -0.019655;
    output[3] += flatten_output[57] * 0.008914;
    output[3] += flatten_output[58] * -0.022089;
    output[3] += flatten_output[59] * -0.015410;
    output[3] += flatten_output[60] * -0.004247;
    output[3] += flatten_output[61] * -0.016153;
    output[3] += flatten_output[62] * 0.012042;
    output[3] += flatten_output[63] * -0.018915;
    output[3] += flatten_output[64] * 0.002944;
    output[3] += flatten_output[65] * -0.023187;
    output[3] += flatten_output[66] * 0.003249;
    output[3] += flatten_output[67] * -0.012052;
    output[3] += flatten_output[68] * 0.005710;
    output[3] += flatten_output[69] * 0.004659;
    output[3] += flatten_output[70] * -0.009357;
    output[3] += flatten_output[71] * -0.014448;
    output[3] += flatten_output[72] * -0.008953;
    output[3] += flatten_output[73] * -0.001596;
    output[3] += flatten_output[74] * -0.019853;
    output[3] += flatten_output[75] * -0.036447;
    output[3] += flatten_output[76] * 0.005259;
    output[3] += flatten_output[77] * 0.011021;
    output[3] += flatten_output[78] * -0.004747;
    output[3] += flatten_output[79] * 0.005969;
    output[3] += flatten_output[80] * 0.043247;
    output[3] += flatten_output[81] * 0.008137;
    output[3] += flatten_output[82] * 0.006800;
    output[3] += flatten_output[83] * -0.004082;
    output[3] += flatten_output[84] * 0.015144;
    output[3] += flatten_output[85] * -0.027922;
    output[3] += flatten_output[86] * 0.014714;
    output[3] += flatten_output[87] * 0.006412;
    output[3] += flatten_output[88] * -0.009716;
    output[3] += flatten_output[89] * 0.011677;
    output[3] += flatten_output[90] * -0.023293;
    output[3] += flatten_output[91] * 0.012582;
    output[3] += flatten_output[92] * -0.002249;
    output[3] += flatten_output[93] * -0.020315;
    output[3] += flatten_output[94] * 0.004007;
    output[3] += flatten_output[95] * -0.004630;
    output[3] += flatten_output[96] * -0.003429;
    output[3] += flatten_output[97] * -0.016027;
    output[3] += flatten_output[98] * -0.021541;
    output[3] += flatten_output[99] * 0.006949;
    output[3] += flatten_output[100] * 0.016147;
    output[3] += flatten_output[101] * -0.010132;
    output[3] += flatten_output[102] * -0.000068;
    output[3] += flatten_output[103] * -0.016215;
    output[3] += flatten_output[104] * -0.012317;
    output[3] += flatten_output[105] * 0.000909;
    output[3] += flatten_output[106] * -0.003769;
    output[3] += flatten_output[107] * -0.050266;
    output[3] += flatten_output[108] * -0.016294;
    output[3] += flatten_output[109] * 0.003066;
    output[3] += flatten_output[110] * -0.022681;
    output[3] += flatten_output[111] * 0.011014;
    output[3] += flatten_output[112] * 0.034354;
    output[3] += flatten_output[113] * 0.013660;
    output[3] += flatten_output[114] * 0.011214;
    output[3] += flatten_output[115] * -0.000432;
    output[3] += flatten_output[116] * -0.005231;
    output[3] += flatten_output[117] * -0.010783;
    output[3] += flatten_output[118] * -0.014327;
    output[3] += flatten_output[119] * -0.000427;
    output[3] += flatten_output[120] * -0.007531;
    output[3] += flatten_output[121] * -0.009990;
    output[3] += flatten_output[122] * -0.032831;
    output[3] += flatten_output[123] * -0.007425;
    output[3] += flatten_output[124] * -0.003454;
    output[3] += flatten_output[125] * -0.026347;
    output[3] += flatten_output[126] * 0.005635;
    output[3] += flatten_output[127] * -0.022721;
    output[3] += flatten_output[128] * -0.014987;
    output[3] += flatten_output[129] * -0.019075;
    output[3] += flatten_output[130] * -0.001677;
    output[3] += flatten_output[131] * -0.012278;
    output[3] += flatten_output[132] * 0.003439;
    output[3] += flatten_output[133] * -0.014330;
    output[3] += flatten_output[134] * -0.010014;
    output[3] += flatten_output[135] * 0.000408;
    output[3] += flatten_output[136] * 0.000244;
    output[3] += flatten_output[137] * -0.001491;
    output[3] += flatten_output[138] * -0.014094;
    output[3] += flatten_output[139] * -0.017467;
    output[3] += flatten_output[140] * -0.011796;
    output[3] += flatten_output[141] * -0.005255;
    output[3] += flatten_output[142] * -0.006513;
    output[3] += flatten_output[143] * 0.024029;
    output[3] += flatten_output[144] * 0.021034;
    output[3] += flatten_output[145] * 0.014010;
    output[3] += flatten_output[146] * 0.009360;
    output[3] += flatten_output[147] * -0.005428;
    output[3] += flatten_output[148] * 0.011453;
    output[3] += flatten_output[149] * -0.026748;
    output[3] += flatten_output[150] * 0.011590;
    output[3] += flatten_output[151] * 0.007827;
    output[3] += flatten_output[152] * -0.006063;
    output[3] += flatten_output[153] * -0.007734;
    output[3] += flatten_output[154] * -0.016669;
    output[3] += flatten_output[155] * -0.003715;
    output[3] += flatten_output[156] * -0.013259;
    output[3] += flatten_output[157] * -0.021507;
    output[3] += flatten_output[158] * -0.006785;
    output[3] += flatten_output[159] * -0.014535;
    output[3] += flatten_output[160] * -0.017672;
    output[3] += flatten_output[161] * -0.025694;
    output[3] += flatten_output[162] * -0.007540;
    output[3] += flatten_output[163] * -0.020742;
    output[3] += flatten_output[164] * -0.004962;
    output[3] += flatten_output[165] * -0.021772;
    output[3] += flatten_output[166] * 0.006836;
    output[3] += flatten_output[167] * -0.023935;
    output[3] += flatten_output[168] * -0.012320;
    output[3] += flatten_output[169] * 0.010210;
    output[3] += flatten_output[170] * -0.008374;
    output[3] += flatten_output[171] * -0.038555;
    output[3] += flatten_output[172] * 0.010123;
    output[3] += flatten_output[173] * -0.003825;
    output[3] += flatten_output[174] * -0.021614;
    output[3] += flatten_output[175] * 0.000193;
    output[3] += flatten_output[176] * 0.014474;
    output[3] += flatten_output[177] * -0.005865;
    output[3] += flatten_output[178] * -0.011754;
    output[3] += flatten_output[179] * 0.009991;
    output[3] += flatten_output[180] * 0.009472;
    output[3] += flatten_output[181] * -0.015394;
    output[3] += flatten_output[182] * -0.010481;
    output[3] += flatten_output[183] * -0.001846;
    output[3] += flatten_output[184] * 0.002656;
    output[3] += flatten_output[185] * -0.002249;
    output[3] += flatten_output[186] * -0.006711;
    output[3] += flatten_output[187] * 0.007785;
    output[3] += flatten_output[188] * 0.006001;
    output[3] += flatten_output[189] * -0.014414;
    output[3] += flatten_output[190] * -0.011400;
    output[3] += flatten_output[191] * -0.000990;
    output[3] += flatten_output[192] * 0.007358;
    output[3] += flatten_output[193] * -0.008784;
    output[3] += flatten_output[194] * -0.020351;
    output[3] += flatten_output[195] * -0.025705;
    output[3] += flatten_output[196] * -0.016154;
    output[3] += flatten_output[197] * -0.010319;
    output[3] += flatten_output[198] * -0.000176;
    output[3] += flatten_output[199] * -0.015411;
    output[3] += flatten_output[200] * -0.017997;
    output[3] += flatten_output[201] * 0.005080;
    output[3] += flatten_output[202] * -0.000680;
    output[3] += flatten_output[203] * -0.037683;
    output[3] += flatten_output[204] * 0.008203;
    output[3] += flatten_output[205] * 0.006436;
    output[3] += flatten_output[206] * -0.015166;
    output[3] += flatten_output[207] * 0.016397;
    output[3] += flatten_output[208] * 0.040883;
    output[3] += flatten_output[209] * -0.015237;
    output[3] += flatten_output[210] * 0.009016;
    output[3] += flatten_output[211] * 0.009120;
    output[3] += flatten_output[212] * -0.004002;
    output[3] += flatten_output[213] * -0.016914;
    output[3] += flatten_output[214] * -0.005882;
    output[3] += flatten_output[215] * -0.020520;
    output[3] += flatten_output[216] * -0.005716;
    output[3] += flatten_output[217] * 0.004832;
    output[3] += flatten_output[218] * -0.029812;
    output[3] += flatten_output[219] * 0.012024;
    output[3] += flatten_output[220] * -0.001445;
    output[3] += flatten_output[221] * -0.033592;
    output[3] += flatten_output[222] * 0.017886;
    output[3] += flatten_output[223] * -0.014109;
    output[3] += flatten_output[224] * 0.001526;
    output[3] += flatten_output[225] * -0.031984;
    output[3] += flatten_output[226] * -0.024209;
    output[3] += flatten_output[227] * -0.012809;
    output[3] += flatten_output[228] * -0.025656;
    output[3] += flatten_output[229] * -0.026155;
    output[3] += flatten_output[230] * 0.008727;
    output[3] += flatten_output[231] * -0.019092;
    output[3] += flatten_output[232] * -0.019170;
    output[3] += flatten_output[233] * -0.006303;
    output[3] += flatten_output[234] * -0.015905;
    output[3] += flatten_output[235] * -0.031965;
    output[3] += flatten_output[236] * -0.004298;
    output[3] += flatten_output[237] * -0.009877;
    output[3] += flatten_output[238] * -0.032624;
    output[3] += flatten_output[239] * 0.010540;
    output[3] += flatten_output[240] * 0.035884;
    output[3] += flatten_output[241] * -0.021762;
    output[3] += flatten_output[242] * 0.010991;
    output[3] += flatten_output[243] * -0.000419;
    output[3] += flatten_output[244] * -0.033906;
    output[3] += flatten_output[245] * -0.029767;
    output[3] += flatten_output[246] * -0.016816;
    output[3] += flatten_output[247] * -0.005901;
    output[3] += flatten_output[248] * -0.002222;
    output[3] += flatten_output[249] * -0.016919;
    output[3] += flatten_output[250] * -0.022227;
    output[3] += flatten_output[251] * -0.010622;
    output[3] += flatten_output[252] * -0.027895;
    output[3] += flatten_output[253] * -0.027943;
    output[3] += flatten_output[254] * -0.006760;
    output[3] += flatten_output[255] * 0.002250;
    output[3] += flatten_output[256] * -0.024901;
    output[3] += flatten_output[257] * -0.005221;
    output[3] += flatten_output[258] * 0.003341;
    output[3] += flatten_output[259] * -0.015903;
    output[3] += flatten_output[260] * -0.014437;
    output[3] += flatten_output[261] * -0.004367;
    output[3] += flatten_output[262] * -0.008457;
    output[3] += flatten_output[263] * 0.002658;
    output[3] += flatten_output[264] * -0.002336;
    output[3] += flatten_output[265] * -0.012864;
    output[3] += flatten_output[266] * -0.011286;
    output[3] += flatten_output[267] * -0.024015;
    output[3] += flatten_output[268] * -0.014475;
    output[3] += flatten_output[269] * 0.008114;
    output[3] += flatten_output[270] * -0.002766;
    output[3] += flatten_output[271] * 0.017791;
    output[3] += flatten_output[272] * 0.003077;
    output[3] += flatten_output[273] * -0.025735;
    output[3] += flatten_output[274] * 0.011724;
    output[3] += flatten_output[275] * -0.014058;
    output[3] += flatten_output[276] * -0.007972;
    output[3] += flatten_output[277] * -0.038893;
    output[3] += flatten_output[278] * -0.003149;
    output[3] += flatten_output[279] * -0.036630;
    output[3] += flatten_output[280] * -0.003163;
    output[3] += flatten_output[281] * -0.017555;
    output[3] += flatten_output[282] * -0.038062;
    output[3] += flatten_output[283] * -0.001017;
    output[3] += flatten_output[284] * -0.014221;
    output[3] += flatten_output[285] * -0.030799;
    output[3] += flatten_output[286] * -0.003448;
    output[3] += flatten_output[287] * 0.000234;
    output[3] += flatten_output[288] * -0.004853;
    output[3] += flatten_output[289] * 0.013093;
    output[3] += flatten_output[290] * -0.011120;
    output[3] += flatten_output[291] * 0.018273;
    output[3] += flatten_output[292] * -0.004729;
    output[3] += flatten_output[293] * -0.005128;
    output[3] += flatten_output[294] * 0.001220;
    output[3] += flatten_output[295] * -0.022195;
    output[3] += flatten_output[296] * -0.001411;
    output[3] += flatten_output[297] * -0.011688;
    output[3] += flatten_output[298] * -0.010360;
    output[3] += flatten_output[299] * -0.025160;
    output[3] += flatten_output[300] * 0.006045;
    output[3] += flatten_output[301] * 0.014605;
    output[3] += flatten_output[302] * -0.008720;
    output[3] += flatten_output[303] * 0.017284;
    output[3] += flatten_output[304] * 0.006183;
    output[3] += flatten_output[305] * -0.001340;
    output[3] += flatten_output[306] * 0.010523;
    output[3] += flatten_output[307] * -0.004887;
    output[3] += flatten_output[308] * 0.000678;
    output[3] += flatten_output[309] * -0.015525;
    output[3] += flatten_output[310] * -0.010857;
    output[3] += flatten_output[311] * -0.031468;
    output[3] += flatten_output[312] * -0.000088;
    output[3] += flatten_output[313] * 0.006024;
    output[3] += flatten_output[314] * -0.034198;
    output[3] += flatten_output[315] * -0.058093;
    output[3] += flatten_output[316] * 0.007194;
    output[3] += flatten_output[317] * 0.013844;
    output[3] += flatten_output[318] * 0.015426;
    output[3] += flatten_output[319] * -0.009217;
    output[3] += flatten_output[320] * 0.008987;
    output[3] += flatten_output[321] * -0.009953;
    output[3] += flatten_output[322] * -0.028191;
    output[3] += flatten_output[323] * -0.001732;
    output[3] += flatten_output[324] * 0.002831;
    output[3] += flatten_output[325] * 0.006759;
    output[3] += flatten_output[326] * -0.008912;
    output[3] += flatten_output[327] * -0.005165;
    output[3] += flatten_output[328] * -0.012216;
    output[3] += flatten_output[329] * 0.012180;
    output[3] += flatten_output[330] * 0.005529;
    output[3] += flatten_output[331] * -0.020614;
    output[3] += flatten_output[332] * -0.017076;
    output[3] += flatten_output[333] * 0.003338;
    output[3] += flatten_output[334] * -0.021338;
    output[3] += flatten_output[335] * 0.013567;
    output[3] += flatten_output[336] * 0.000599;
    output[3] += flatten_output[337] * 0.005705;
    output[3] += flatten_output[338] * 0.010024;
    output[3] += flatten_output[339] * -0.021450;
    output[3] += flatten_output[340] * 0.017252;
    output[3] += flatten_output[341] * -0.001769;
    output[3] += flatten_output[342] * -0.002615;
    output[3] += flatten_output[343] * 0.011385;
    output[3] += flatten_output[344] * -0.004834;
    output[3] += flatten_output[345] * 0.015301;
    output[3] += flatten_output[346] * -0.011002;
    output[3] += flatten_output[347] * -0.018051;
    output[3] += flatten_output[348] * -0.009232;
    output[3] += flatten_output[349] * -0.019135;
    output[3] += flatten_output[350] * 0.010038;
    output[3] += flatten_output[351] * -0.004525;
    output[3] += flatten_output[352] * 0.006066;
    output[3] += flatten_output[353] * -0.021774;
    output[3] += flatten_output[354] * -0.014079;
    output[3] += flatten_output[355] * -0.018286;
    output[3] += flatten_output[356] * -0.041985;
    output[3] += flatten_output[357] * 0.006927;
    output[3] += flatten_output[358] * -0.041858;
    output[3] += flatten_output[359] * 0.007486;
    output[3] += flatten_output[360] * -0.006531;
    output[3] += flatten_output[361] * 0.004512;
    output[3] += flatten_output[362] * -0.038262;
    output[3] += flatten_output[363] * -0.024878;
    output[3] += flatten_output[364] * -0.017646;
    output[3] += flatten_output[365] * -0.034260;
    output[3] += flatten_output[366] * -0.002546;
    output[3] += flatten_output[367] * -0.006540;
    output[3] += flatten_output[368] * 0.015255;
    output[3] += flatten_output[369] * 0.004360;
    output[3] += flatten_output[370] * -0.005165;
    output[3] += flatten_output[371] * -0.030744;
    output[3] += flatten_output[372] * -0.059196;
    output[3] += flatten_output[373] * -0.007767;
    output[3] += flatten_output[374] * -0.020700;
    output[3] += flatten_output[375] * 0.004962;
    output[3] += flatten_output[376] * -0.011339;
    output[3] += flatten_output[377] * -0.006012;
    output[3] += flatten_output[378] * -0.013213;
    output[3] += flatten_output[379] * -0.056064;
    output[3] += flatten_output[380] * -0.000382;
    output[3] += flatten_output[381] * -0.055037;
    output[3] += flatten_output[382] * 0.007300;
    output[3] += flatten_output[383] * -0.011985;
    output[3] += flatten_output[384] * -0.090498;
    output[3] += flatten_output[385] * -0.078689;
    output[3] += flatten_output[386] * -0.022868;
    output[3] += flatten_output[387] * -0.032593;
    output[3] += flatten_output[388] * -0.043073;
    output[3] += flatten_output[389] * -0.004297;
    output[3] += flatten_output[390] * -0.001420;
    output[3] += flatten_output[391] * -0.008758;
    output[3] += flatten_output[392] * -0.033377;
    output[3] += flatten_output[393] * 0.011191;
    output[3] += flatten_output[394] * -0.042807;
    output[3] += flatten_output[395] * -0.045277;
    output[3] += flatten_output[396] * -0.019493;
    output[3] += flatten_output[397] * -0.039715;
    output[3] += flatten_output[398] * -0.004984;
    output[3] += flatten_output[399] * -0.007102;
    output[3] += flatten_output[400] * -0.015751;
    output[3] += flatten_output[401] * -0.024003;
    output[3] += flatten_output[402] * 0.014108;
    output[3] += flatten_output[403] * -0.054276;
    output[3] += flatten_output[404] * -0.036575;
    output[3] += flatten_output[405] * -0.010808;
    output[3] += flatten_output[406] * -0.033324;
    output[3] += flatten_output[407] * 0.002233;
    output[3] += flatten_output[408] * -0.021901;
    output[3] += flatten_output[409] * -0.055259;
    output[3] += flatten_output[410] * -0.097183;
    output[3] += flatten_output[411] * -0.016062;
    output[3] += flatten_output[412] * -0.030793;
    output[3] += flatten_output[413] * -0.044380;
    output[3] += flatten_output[414] * 0.005238;
    output[3] += flatten_output[415] * -0.018371;
    output[3] += flatten_output[416] * -0.018126;
    output[3] += flatten_output[417] * -0.030913;
    output[3] += flatten_output[418] * -0.014524;
    output[3] += flatten_output[419] * -0.066075;
    output[3] += flatten_output[420] * -0.044942;
    output[3] += flatten_output[421] * -0.062808;
    output[3] += flatten_output[422] * -0.011693;
    output[3] += flatten_output[423] * -0.012106;
    output[3] += flatten_output[424] * -0.041646;
    output[3] += flatten_output[425] * -0.011195;
    output[3] += flatten_output[426] * -0.006988;
    output[3] += flatten_output[427] * -0.026063;
    output[3] += flatten_output[428] * -0.041606;
    output[3] += flatten_output[429] * -0.010839;
    output[3] += flatten_output[430] * -0.018084;
    output[3] += flatten_output[431] * 0.021217;
    output[3] += flatten_output[432] * -0.022615;
    output[3] += flatten_output[433] * -0.034633;
    output[3] += flatten_output[434] * -0.028975;
    output[3] += flatten_output[435] * -0.058303;
    output[3] += flatten_output[436] * -0.069549;
    output[3] += flatten_output[437] * -0.087331;
    output[3] += flatten_output[438] * -0.030105;
    output[3] += flatten_output[439] * -0.029977;
    output[3] += flatten_output[440] * -0.021934;
    output[3] += flatten_output[441] * -0.047559;
    output[3] += flatten_output[442] * -0.053837;
    output[3] += flatten_output[443] * -0.133636;
    output[3] += flatten_output[444] * -0.042962;
    output[3] += flatten_output[445] * -0.054319;
    output[3] += flatten_output[446] * 0.010439;
    output[3] += flatten_output[447] * -0.021723;
    output[3] += flatten_output[448] * -0.037111;
    output[3] += flatten_output[449] * -0.063752;
    output[3] += flatten_output[450] * -0.005847;
    output[3] += flatten_output[451] * -0.057653;
    output[3] += flatten_output[452] * -0.018143;
    output[3] += flatten_output[453] * -0.076116;
    output[3] += flatten_output[454] * -0.004199;
    output[3] += flatten_output[455] * -0.006143;
    output[3] += flatten_output[456] * -0.057146;
    output[3] += flatten_output[457] * -0.000461;
    output[3] += flatten_output[458] * -0.011748;
    output[3] += flatten_output[459] * -0.029127;
    output[3] += flatten_output[460] * -0.060458;
    output[3] += flatten_output[461] * -0.011975;
    output[3] += flatten_output[462] * -0.011541;
    output[3] += flatten_output[463] * 0.008842;
    output[3] += flatten_output[464] * -0.060231;
    output[3] += flatten_output[465] * -0.029569;
    output[3] += flatten_output[466] * -0.017257;
    output[3] += flatten_output[467] * -0.051804;
    output[3] += flatten_output[468] * -0.026536;
    output[3] += flatten_output[469] * -0.035462;
    output[3] += flatten_output[470] * -0.028498;
    output[3] += flatten_output[471] * -0.047930;
    output[3] += flatten_output[472] * -0.007154;
    output[3] += flatten_output[473] * -0.014997;
    output[3] += flatten_output[474] * -0.085549;
    output[3] += flatten_output[475] * -0.032518;
    output[3] += flatten_output[476] * -0.002611;
    output[3] += flatten_output[477] * -0.052446;
    output[3] += flatten_output[478] * 0.004842;
    output[3] += flatten_output[479] * -0.002948;
    output[3] += flatten_output[480] * -0.061342;
    output[3] += flatten_output[481] * -0.011792;
    output[3] += flatten_output[482] * -0.010506;
    output[3] += flatten_output[483] * -0.057527;
    output[3] += flatten_output[484] * -0.057519;
    output[3] += flatten_output[485] * -0.082112;
    output[3] += flatten_output[486] * -0.078134;
    output[3] += flatten_output[487] * -0.005551;
    output[3] += flatten_output[488] * -0.060228;
    output[3] += flatten_output[489] * -0.016246;
    output[3] += flatten_output[490] * -0.024350;
    output[3] += flatten_output[491] * -0.028294;
    output[3] += flatten_output[492] * -0.069762;
    output[3] += flatten_output[493] * -0.036404;
    output[3] += flatten_output[494] * -0.019334;
    output[3] += flatten_output[495] * 0.020769;
    output[3] += flatten_output[496] * -0.082200;
    output[3] += flatten_output[497] * -0.048629;
    output[3] += flatten_output[498] * -0.028761;
    output[3] += flatten_output[499] * -0.074337;
    output[3] += flatten_output[500] * -0.091061;
    output[3] += flatten_output[501] * -0.073972;
    output[3] += flatten_output[502] * -0.003856;
    output[3] += flatten_output[503] * -0.058584;
    output[3] += flatten_output[504] * -0.021517;
    output[3] += flatten_output[505] * -0.047671;
    output[3] += flatten_output[506] * -0.115503;
    output[3] += flatten_output[507] * -0.124125;
    output[3] += flatten_output[508] * -0.033902;
    output[3] += flatten_output[509] * -0.058036;
    output[3] += flatten_output[510] * 0.008968;
    output[3] += flatten_output[511] * -0.009519;
    output[3] += flatten_output[512] * -0.037967;
    output[3] += flatten_output[513] * -0.135376;
    output[3] += flatten_output[514] * 0.006038;
    output[3] += flatten_output[515] * -0.077992;
    output[3] += flatten_output[516] * -0.112229;
    output[3] += flatten_output[517] * -0.041194;
    output[3] += flatten_output[518] * -0.041434;
    output[3] += flatten_output[519] * 0.000744;
    output[3] += flatten_output[520] * -0.091122;
    output[3] += flatten_output[521] * -0.003262;
    output[3] += flatten_output[522] * -0.092956;
    output[3] += flatten_output[523] * -0.048905;
    output[3] += flatten_output[524] * -0.017703;
    output[3] += flatten_output[525] * -0.096553;
    output[3] += flatten_output[526] * -0.019714;
    output[3] += flatten_output[527] * 0.015383;
    output[3] += flatten_output[528] * -0.018422;
    output[3] += flatten_output[529] * -0.107054;
    output[3] += flatten_output[530] * -0.014949;
    output[3] += flatten_output[531] * -0.036663;
    output[3] += flatten_output[532] * -0.094706;
    output[3] += flatten_output[533] * -0.014162;
    output[3] += flatten_output[534] * 0.001967;
    output[3] += flatten_output[535] * -0.047081;
    output[3] += flatten_output[536] * -0.013099;
    output[3] += flatten_output[537] * -0.094734;
    output[3] += flatten_output[538] * -0.061966;
    output[3] += flatten_output[539] * -0.053933;
    output[3] += flatten_output[540] * -0.064157;
    output[3] += flatten_output[541] * -0.101038;
    output[3] += flatten_output[542] * 0.010418;
    output[3] += flatten_output[543] * -0.012861;
    output[3] += flatten_output[544] * -0.126761;
    output[3] += flatten_output[545] * -0.124511;
    output[3] += flatten_output[546] * 0.005260;
    output[3] += flatten_output[547] * -0.097943;
    output[3] += flatten_output[548] * -0.056130;
    output[3] += flatten_output[549] * -0.053612;
    output[3] += flatten_output[550] * 0.001683;
    output[3] += flatten_output[551] * -0.006896;
    output[3] += flatten_output[552] * -0.050751;
    output[3] += flatten_output[553] * 0.010278;
    output[3] += flatten_output[554] * -0.066202;
    output[3] += flatten_output[555] * -0.023681;
    output[3] += flatten_output[556] * -0.063785;
    output[3] += flatten_output[557] * -0.068384;
    output[3] += flatten_output[558] * -0.036385;
    output[3] += flatten_output[559] * -0.004136;
    output[3] += flatten_output[560] * -0.036915;
    output[3] += flatten_output[561] * -0.099459;
    output[3] += flatten_output[562] * -0.013177;
    output[3] += flatten_output[563] * -0.032207;
    output[3] += flatten_output[564] * -0.082577;
    output[3] += flatten_output[565] * -0.069210;
    output[3] += flatten_output[566] * -0.019586;
    output[3] += flatten_output[567] * -0.106619;
    output[3] += flatten_output[568] * -0.017671;
    output[3] += flatten_output[569] * -0.102581;
    output[3] += flatten_output[570] * -0.134837;
    output[3] += flatten_output[571] * -0.088718;
    output[3] += flatten_output[572] * -0.103036;
    output[3] += flatten_output[573] * -0.125643;
    output[3] += flatten_output[574] * 0.016066;
    output[3] += flatten_output[575] * -0.011131;
    output[3] += flatten_output[576] * -0.019975;
    output[3] += flatten_output[577] * -0.069592;
    output[3] += flatten_output[578] * -0.019985;
    output[3] += flatten_output[579] * -0.144751;
    output[3] += flatten_output[580] * -0.081792;
    output[3] += flatten_output[581] * -0.029239;
    output[3] += flatten_output[582] * -0.007980;
    output[3] += flatten_output[583] * -0.013923;
    output[3] += flatten_output[584] * -0.060745;
    output[3] += flatten_output[585] * -0.014658;
    output[3] += flatten_output[586] * -0.033239;
    output[3] += flatten_output[587] * -0.037217;
    output[3] += flatten_output[588] * -0.094303;
    output[3] += flatten_output[589] * -0.036280;
    output[3] += flatten_output[590] * -0.018353;
    output[3] += flatten_output[591] * 0.019733;
    output[3] += flatten_output[592] * -0.043606;
    output[3] += flatten_output[593] * -0.074343;
    output[3] += flatten_output[594] * -0.069669;
    output[3] += flatten_output[595] * -0.052392;
    output[3] += flatten_output[596] * -0.099797;
    output[3] += flatten_output[597] * -0.139133;
    output[3] += flatten_output[598] * -0.021757;
    output[3] += flatten_output[599] * -0.091034;
    output[3] += flatten_output[600] * -0.020806;
    output[3] += flatten_output[601] * -0.065957;
    output[3] += flatten_output[602] * -0.103377;
    output[3] += flatten_output[603] * -0.082238;
    output[3] += flatten_output[604] * -0.089968;
    output[3] += flatten_output[605] * -0.139224;
    output[3] += flatten_output[606] * -0.003301;
    output[3] += flatten_output[607] * 0.008855;
    output[3] += flatten_output[608] * -0.042989;
    output[3] += flatten_output[609] * -0.091278;
    output[3] += flatten_output[610] * -0.014951;
    output[3] += flatten_output[611] * -0.190536;
    output[3] += flatten_output[612] * -0.049498;
    output[3] += flatten_output[613] * -0.014707;
    output[3] += flatten_output[614] * 0.000685;
    output[3] += flatten_output[615] * -0.013793;
    output[3] += flatten_output[616] * -0.045250;
    output[3] += flatten_output[617] * -0.002221;
    output[3] += flatten_output[618] * -0.007747;
    output[3] += flatten_output[619] * -0.040559;
    output[3] += flatten_output[620] * -0.079349;
    output[3] += flatten_output[621] * -0.014948;
    output[3] += flatten_output[622] * -0.010371;
    output[3] += flatten_output[623] * 0.004895;
    output[3] += flatten_output[624] * -0.045903;
    output[3] += flatten_output[625] * -0.088043;
    output[3] += flatten_output[626] * -0.017168;
    output[3] += flatten_output[627] * -0.003422;
    output[3] += flatten_output[628] * -0.051038;
    output[3] += flatten_output[629] * -0.126596;
    output[3] += flatten_output[630] * 0.007066;
    output[3] += flatten_output[631] * -0.080099;
    output[3] += flatten_output[632] * -0.018666;
    output[3] += flatten_output[633] * -0.052606;
    output[3] += flatten_output[634] * -0.126360;
    output[3] += flatten_output[635] * -0.030947;
    output[3] += flatten_output[636] * -0.091639;
    output[3] += flatten_output[637] * -0.191229;
    output[3] += flatten_output[638] * -0.007553;
    output[3] += flatten_output[639] * -0.011934;
    output[3] += flatten_output[640] * -0.002651;
    output[3] += flatten_output[641] * -0.026967;
    output[3] += flatten_output[642] * -0.019589;
    output[3] += flatten_output[643] * -0.185366;
    output[3] += flatten_output[644] * -0.060744;
    output[3] += flatten_output[645] * -0.006919;
    output[3] += flatten_output[646] * -0.012507;
    output[3] += flatten_output[647] * -0.000086;
    output[3] += flatten_output[648] * -0.018999;
    output[3] += flatten_output[649] * -0.012423;
    output[3] += flatten_output[650] * -0.012978;
    output[3] += flatten_output[651] * -0.017264;
    output[3] += flatten_output[652] * -0.056574;
    output[3] += flatten_output[653] * -0.018145;
    output[3] += flatten_output[654] * -0.032183;
    output[3] += flatten_output[655] * 0.005502;
    output[3] += flatten_output[656] * -0.015073;
    output[3] += flatten_output[657] * -0.059594;
    output[3] += flatten_output[658] * -0.000299;
    output[3] += flatten_output[659] * 0.004834;
    output[3] += flatten_output[660] * -0.034538;
    output[3] += flatten_output[661] * -0.180575;
    output[3] += flatten_output[662] * 0.005155;
    output[3] += flatten_output[663] * -0.091051;
    output[3] += flatten_output[664] * 0.001972;
    output[3] += flatten_output[665] * -0.033108;
    output[3] += flatten_output[666] * -0.141877;
    output[3] += flatten_output[667] * -0.022011;
    output[3] += flatten_output[668] * -0.094138;
    output[3] += flatten_output[669] * -0.163367;
    output[3] += flatten_output[670] * 0.011032;
    output[3] += flatten_output[671] * -0.005576;
    output[3] += flatten_output[672] * -0.030076;
    output[3] += flatten_output[673] * -0.044725;
    output[3] += flatten_output[674] * -0.012688;
    output[3] += flatten_output[675] * -0.145443;
    output[3] = 1 / (1 + exp(-output[3]));
    output[4] = -0.015453;
    output[4] += flatten_output[0] * -0.004740;
    output[4] += flatten_output[1] * 0.012126;
    output[4] += flatten_output[2] * -0.006879;
    output[4] += flatten_output[3] * -0.017381;
    output[4] += flatten_output[4] * 0.006686;
    output[4] += flatten_output[5] * -0.009848;
    output[4] += flatten_output[6] * -0.014323;
    output[4] += flatten_output[7] * 0.002690;
    output[4] += flatten_output[8] * 0.008525;
    output[4] += flatten_output[9] * -0.004228;
    output[4] += flatten_output[10] * -0.014886;
    output[4] += flatten_output[11] * -0.008225;
    output[4] += flatten_output[12] * 0.001740;
    output[4] += flatten_output[13] * -0.026249;
    output[4] += flatten_output[14] * 0.004850;
    output[4] += flatten_output[15] * -0.021971;
    output[4] += flatten_output[16] * 0.018336;
    output[4] += flatten_output[17] * 0.003557;
    output[4] += flatten_output[18] * 0.000086;
    output[4] += flatten_output[19] * -0.000703;
    output[4] += flatten_output[20] * -0.018657;
    output[4] += flatten_output[21] * 0.008688;
    output[4] += flatten_output[22] * -0.012952;
    output[4] += flatten_output[23] * 0.010198;
    output[4] += flatten_output[24] * -0.002461;
    output[4] += flatten_output[25] * 0.017994;
    output[4] += flatten_output[26] * -0.029768;
    output[4] += flatten_output[27] * 0.003802;
    output[4] += flatten_output[28] * -0.011255;
    output[4] += flatten_output[29] * 0.025133;
    output[4] += flatten_output[30] * -0.023016;
    output[4] += flatten_output[31] * -0.020598;
    output[4] += flatten_output[32] * 0.004073;
    output[4] += flatten_output[33] * 0.002443;
    output[4] += flatten_output[34] * 0.021208;
    output[4] += flatten_output[35] * -0.017046;
    output[4] += flatten_output[36] * -0.013522;
    output[4] += flatten_output[37] * 0.010221;
    output[4] += flatten_output[38] * -0.021080;
    output[4] += flatten_output[39] * -0.005023;
    output[4] += flatten_output[40] * 0.012943;
    output[4] += flatten_output[41] * -0.015269;
    output[4] += flatten_output[42] * -0.015572;
    output[4] += flatten_output[43] * -0.004468;
    output[4] += flatten_output[44] * -0.000080;
    output[4] += flatten_output[45] * -0.026738;
    output[4] += flatten_output[46] * -0.003101;
    output[4] += flatten_output[47] * -0.017554;
    output[4] += flatten_output[48] * 0.010718;
    output[4] += flatten_output[49] * 0.007823;
    output[4] += flatten_output[50] * 0.003357;
    output[4] += flatten_output[51] * -0.021050;
    output[4] += flatten_output[52] * 0.000597;
    output[4] += flatten_output[53] * 0.000142;
    output[4] += flatten_output[54] * 0.013052;
    output[4] += flatten_output[55] * 0.003069;
    output[4] += flatten_output[56] * -0.008468;
    output[4] += flatten_output[57] * -0.000290;
    output[4] += flatten_output[58] * -0.051343;
    output[4] += flatten_output[59] * 0.009944;
    output[4] += flatten_output[60] * -0.014555;
    output[4] += flatten_output[61] * 0.004608;
    output[4] += flatten_output[62] * -0.015273;
    output[4] += flatten_output[63] * -0.022543;
    output[4] += flatten_output[64] * 0.010045;
    output[4] += flatten_output[65] * 0.001610;
    output[4] += flatten_output[66] * -0.000271;
    output[4] += flatten_output[67] * -0.047209;
    output[4] += flatten_output[68] * -0.017877;
    output[4] += flatten_output[69] * -0.012898;
    output[4] += flatten_output[70] * -0.009128;
    output[4] += flatten_output[71] * 0.006639;
    output[4] += flatten_output[72] * -0.007140;
    output[4] += flatten_output[73] * 0.014334;
    output[4] += flatten_output[74] * -0.029220;
    output[4] += flatten_output[75] * -0.027955;
    output[4] += flatten_output[76] * -0.019389;
    output[4] += flatten_output[77] * -0.016920;
    output[4] += flatten_output[78] * 0.016165;
    output[4] += flatten_output[79] * -0.010271;
    output[4] += flatten_output[80] * 0.025296;
    output[4] += flatten_output[81] * -0.009614;
    output[4] += flatten_output[82] * -0.019293;
    output[4] += flatten_output[83] * -0.014635;
    output[4] += flatten_output[84] * -0.002388;
    output[4] += flatten_output[85] * -0.006240;
    output[4] += flatten_output[86] * -0.009788;
    output[4] += flatten_output[87] * 0.019891;
    output[4] += flatten_output[88] * -0.005722;
    output[4] += flatten_output[89] * -0.015907;
    output[4] += flatten_output[90] * -0.044931;
    output[4] += flatten_output[91] * -0.014242;
    output[4] += flatten_output[92] * 0.002791;
    output[4] += flatten_output[93] * -0.022003;
    output[4] += flatten_output[94] * -0.002187;
    output[4] += flatten_output[95] * -0.037546;
    output[4] += flatten_output[96] * 0.013304;
    output[4] += flatten_output[97] * -0.012610;
    output[4] += flatten_output[98] * -0.000709;
    output[4] += flatten_output[99] * -0.039506;
    output[4] += flatten_output[100] * -0.010200;
    output[4] += flatten_output[101] * -0.005529;
    output[4] += flatten_output[102] * -0.022028;
    output[4] += flatten_output[103] * 0.008530;
    output[4] += flatten_output[104] * -0.017233;
    output[4] += flatten_output[105] * -0.008116;
    output[4] += flatten_output[106] * -0.027861;
    output[4] += flatten_output[107] * -0.010571;
    output[4] += flatten_output[108] * -0.009272;
    output[4] += flatten_output[109] * -0.016112;
    output[4] += flatten_output[110] * 0.003340;
    output[4] += flatten_output[111] * -0.002168;
    output[4] += flatten_output[112] * 0.023514;
    output[4] += flatten_output[113] * 0.004239;
    output[4] += flatten_output[114] * -0.002596;
    output[4] += flatten_output[115] * -0.014356;
    output[4] += flatten_output[116] * 0.002007;
    output[4] += flatten_output[117] * -0.008178;
    output[4] += flatten_output[118] * 0.009370;
    output[4] += flatten_output[119] * -0.005175;
    output[4] += flatten_output[120] * 0.012848;
    output[4] += flatten_output[121] * -0.005186;
    output[4] += flatten_output[122] * -0.032695;
    output[4] += flatten_output[123] * -0.010804;
    output[4] += flatten_output[124] * -0.016462;
    output[4] += flatten_output[125] * -0.004692;
    output[4] += flatten_output[126] * -0.026751;
    output[4] += flatten_output[127] * -0.023586;
    output[4] += flatten_output[128] * 0.007901;
    output[4] += flatten_output[129] * -0.018725;
    output[4] += flatten_output[130] * -0.007566;
    output[4] += flatten_output[131] * -0.031853;
    output[4] += flatten_output[132] * -0.039767;
    output[4] += flatten_output[133] * 0.008097;
    output[4] += flatten_output[134] * -0.028123;
    output[4] += flatten_output[135] * -0.006412;
    output[4] += flatten_output[136] * -0.007709;
    output[4] += flatten_output[137] * -0.013745;
    output[4] += flatten_output[138] * -0.026919;
    output[4] += flatten_output[139] * -0.047248;
    output[4] += flatten_output[140] * -0.020670;
    output[4] += flatten_output[141] * -0.039839;
    output[4] += flatten_output[142] * 0.001236;
    output[4] += flatten_output[143] * -0.018074;
    output[4] += flatten_output[144] * -0.002446;
    output[4] += flatten_output[145] * -0.030056;
    output[4] += flatten_output[146] * -0.005428;
    output[4] += flatten_output[147] * -0.064869;
    output[4] += flatten_output[148] * -0.033619;
    output[4] += flatten_output[149] * -0.001109;
    output[4] += flatten_output[150] * -0.008871;
    output[4] += flatten_output[151] * 0.011447;
    output[4] += flatten_output[152] * -0.012311;
    output[4] += flatten_output[153] * -0.008856;
    output[4] += flatten_output[154] * -0.040611;
    output[4] += flatten_output[155] * -0.073585;
    output[4] += flatten_output[156] * -0.013046;
    output[4] += flatten_output[157] * -0.039481;
    output[4] += flatten_output[158] * -0.015890;
    output[4] += flatten_output[159] * -0.038954;
    output[4] += flatten_output[160] * -0.002525;
    output[4] += flatten_output[161] * -0.043047;
    output[4] += flatten_output[162] * -0.002523;
    output[4] += flatten_output[163] * -0.120201;
    output[4] += flatten_output[164] * -0.051551;
    output[4] += flatten_output[165] * -0.020910;
    output[4] += flatten_output[166] * -0.028934;
    output[4] += flatten_output[167] * -0.008034;
    output[4] += flatten_output[168] * -0.052407;
    output[4] += flatten_output[169] * 0.010375;
    output[4] += flatten_output[170] * -0.051571;
    output[4] += flatten_output[171] * -0.003189;
    output[4] += flatten_output[172] * -0.007542;
    output[4] += flatten_output[173] * -0.083902;
    output[4] += flatten_output[174] * -0.007052;
    output[4] += flatten_output[175] * -0.034515;
    output[4] += flatten_output[176] * 0.012512;
    output[4] += flatten_output[177] * -0.037174;
    output[4] += flatten_output[178] * -0.014576;
    output[4] += flatten_output[179] * -0.062667;
    output[4] += flatten_output[180] * -0.052070;
    output[4] += flatten_output[181] * -0.008302;
    output[4] += flatten_output[182] * -0.014266;
    output[4] += flatten_output[183] * 0.013558;
    output[4] += flatten_output[184] * -0.000820;
    output[4] += flatten_output[185] * -0.047000;
    output[4] += flatten_output[186] * -0.030004;
    output[4] += flatten_output[187] * -0.082840;
    output[4] += flatten_output[188] * -0.042149;
    output[4] += flatten_output[189] * -0.097109;
    output[4] += flatten_output[190] * 0.001894;
    output[4] += flatten_output[191] * -0.016067;
    output[4] += flatten_output[192] * -0.050426;
    output[4] += flatten_output[193] * -0.066365;
    output[4] += flatten_output[194] * -0.010477;
    output[4] += flatten_output[195] * -0.145998;
    output[4] += flatten_output[196] * -0.085678;
    output[4] += flatten_output[197] * -0.023302;
    output[4] += flatten_output[198] * -0.033697;
    output[4] += flatten_output[199] * 0.004437;
    output[4] += flatten_output[200] * -0.041839;
    output[4] += flatten_output[201] * -0.002805;
    output[4] += flatten_output[202] * -0.070353;
    output[4] += flatten_output[203] * -0.055325;
    output[4] += flatten_output[204] * -0.041236;
    output[4] += flatten_output[205] * -0.074652;
    output[4] += flatten_output[206] * 0.004192;
    output[4] += flatten_output[207] * -0.038917;
    output[4] += flatten_output[208] * -0.049589;
    output[4] += flatten_output[209] * -0.049189;
    output[4] += flatten_output[210] * -0.012959;
    output[4] += flatten_output[211] * -0.058172;
    output[4] += flatten_output[212] * -0.077742;
    output[4] += flatten_output[213] * -0.072289;
    output[4] += flatten_output[214] * -0.027664;
    output[4] += flatten_output[215] * -0.054041;
    output[4] += flatten_output[216] * -0.010223;
    output[4] += flatten_output[217] * -0.060555;
    output[4] += flatten_output[218] * -0.065146;
    output[4] += flatten_output[219] * -0.072664;
    output[4] += flatten_output[220] * -0.047342;
    output[4] += flatten_output[221] * -0.123822;
    output[4] += flatten_output[222] * 0.003180;
    output[4] += flatten_output[223] * -0.019745;
    output[4] += flatten_output[224] * -0.050513;
    output[4] += flatten_output[225] * -0.062244;
    output[4] += flatten_output[226] * 0.007271;
    output[4] += flatten_output[227] * -0.128832;
    output[4] += flatten_output[228] * -0.063043;
    output[4] += flatten_output[229] * -0.042752;
    output[4] += flatten_output[230] * -0.042728;
    output[4] += flatten_output[231] * 0.011496;
    output[4] += flatten_output[232] * -0.064197;
    output[4] += flatten_output[233] * -0.009814;
    output[4] += flatten_output[234] * -0.053637;
    output[4] += flatten_output[235] * 0.004325;
    output[4] += flatten_output[236] * -0.092030;
    output[4] += flatten_output[237] * -0.068756;
    output[4] += flatten_output[238] * -0.010693;
    output[4] += flatten_output[239] * -0.016357;
    output[4] += flatten_output[240] * -0.066331;
    output[4] += flatten_output[241] * -0.069517;
    output[4] += flatten_output[242] * -0.038135;
    output[4] += flatten_output[243] * -0.061437;
    output[4] += flatten_output[244] * -0.047826;
    output[4] += flatten_output[245] * -0.074078;
    output[4] += flatten_output[246] * -0.013287;
    output[4] += flatten_output[247] * -0.069145;
    output[4] += flatten_output[248] * 0.021353;
    output[4] += flatten_output[249] * -0.075907;
    output[4] += flatten_output[250] * -0.086312;
    output[4] += flatten_output[251] * -0.022864;
    output[4] += flatten_output[252] * -0.074720;
    output[4] += flatten_output[253] * -0.119996;
    output[4] += flatten_output[254] * -0.013405;
    output[4] += flatten_output[255] * -0.007197;
    output[4] += flatten_output[256] * -0.004197;
    output[4] += flatten_output[257] * -0.076619;
    output[4] += flatten_output[258] * 0.006612;
    output[4] += flatten_output[259] * -0.191723;
    output[4] += flatten_output[260] * -0.131143;
    output[4] += flatten_output[261] * -0.059642;
    output[4] += flatten_output[262] * -0.066564;
    output[4] += flatten_output[263] * 0.006123;
    output[4] += flatten_output[264] * -0.082948;
    output[4] += flatten_output[265] * -0.009469;
    output[4] += flatten_output[266] * -0.069870;
    output[4] += flatten_output[267] * -0.003676;
    output[4] += flatten_output[268] * -0.090461;
    output[4] += flatten_output[269] * -0.109502;
    output[4] += flatten_output[270] * 0.004918;
    output[4] += flatten_output[271] * -0.000625;
    output[4] += flatten_output[272] * -0.054039;
    output[4] += flatten_output[273] * -0.092495;
    output[4] += flatten_output[274] * -0.036475;
    output[4] += flatten_output[275] * -0.073749;
    output[4] += flatten_output[276] * -0.125457;
    output[4] += flatten_output[277] * -0.072222;
    output[4] += flatten_output[278] * -0.027325;
    output[4] += flatten_output[279] * -0.077673;
    output[4] += flatten_output[280] * 0.014914;
    output[4] += flatten_output[281] * -0.108103;
    output[4] += flatten_output[282] * -0.068274;
    output[4] += flatten_output[283] * -0.134252;
    output[4] += flatten_output[284] * -0.118617;
    output[4] += flatten_output[285] * -0.194747;
    output[4] += flatten_output[286] * 0.002924;
    output[4] += flatten_output[287] * -0.009872;
    output[4] += flatten_output[288] * -0.062127;
    output[4] += flatten_output[289] * -0.123305;
    output[4] += flatten_output[290] * 0.023890;
    output[4] += flatten_output[291] * -0.240940;
    output[4] += flatten_output[292] * -0.114807;
    output[4] += flatten_output[293] * -0.048528;
    output[4] += flatten_output[294] * -0.061260;
    output[4] += flatten_output[295] * -0.005754;
    output[4] += flatten_output[296] * -0.102672;
    output[4] += flatten_output[297] * -0.008345;
    output[4] += flatten_output[298] * -0.128844;
    output[4] += flatten_output[299] * 0.000183;
    output[4] += flatten_output[300] * -0.075142;
    output[4] += flatten_output[301] * -0.156365;
    output[4] += flatten_output[302] * 0.021630;
    output[4] += flatten_output[303] * -0.024087;
    output[4] += flatten_output[304] * -0.054001;
    output[4] += flatten_output[305] * -0.126973;
    output[4] += flatten_output[306] * -0.025132;
    output[4] += flatten_output[307] * -0.041485;
    output[4] += flatten_output[308] * -0.096879;
    output[4] += flatten_output[309] * -0.085865;
    output[4] += flatten_output[310] * -0.014617;
    output[4] += flatten_output[311] * -0.082369;
    output[4] += flatten_output[312] * 0.020336;
    output[4] += flatten_output[313] * -0.129994;
    output[4] += flatten_output[314] * -0.092708;
    output[4] += flatten_output[315] * -0.085619;
    output[4] += flatten_output[316] * -0.117949;
    output[4] += flatten_output[317] * -0.202207;
    output[4] += flatten_output[318] * 0.000690;
    output[4] += flatten_output[319] * -0.010451;
    output[4] += flatten_output[320] * -0.077999;
    output[4] += flatten_output[321] * -0.108331;
    output[4] += flatten_output[322] * -0.001653;
    output[4] += flatten_output[323] * -0.170869;
    output[4] += flatten_output[324] * -0.117244;
    output[4] += flatten_output[325] * -0.047667;
    output[4] += flatten_output[326] * -0.020598;
    output[4] += flatten_output[327] * -0.006535;
    output[4] += flatten_output[328] * -0.077267;
    output[4] += flatten_output[329] * 0.009876;
    output[4] += flatten_output[330] * -0.083415;
    output[4] += flatten_output[331] * -0.046013;
    output[4] += flatten_output[332] * -0.105749;
    output[4] += flatten_output[333] * -0.083762;
    output[4] += flatten_output[334] * 0.012476;
    output[4] += flatten_output[335] * -0.023911;
    output[4] += flatten_output[336] * -0.046871;
    output[4] += flatten_output[337] * -0.119841;
    output[4] += flatten_output[338] * -0.060500;
    output[4] += flatten_output[339] * -0.092015;
    output[4] += flatten_output[340] * -0.101076;
    output[4] += flatten_output[341] * -0.124314;
    output[4] += flatten_output[342] * -0.065795;
    output[4] += flatten_output[343] * -0.113245;
    output[4] += flatten_output[344] * 0.002544;
    output[4] += flatten_output[345] * -0.142093;
    output[4] += flatten_output[346] * -0.129653;
    output[4] += flatten_output[347] * -0.029743;
    output[4] += flatten_output[348] * -0.116207;
    output[4] += flatten_output[349] * -0.168616;
    output[4] += flatten_output[350] * -0.010210;
    output[4] += flatten_output[351] * -0.010995;
    output[4] += flatten_output[352] * -0.120923;
    output[4] += flatten_output[353] * -0.047724;
    output[4] += flatten_output[354] * -0.008113;
    output[4] += flatten_output[355] * -0.131512;
    output[4] += flatten_output[356] * -0.051512;
    output[4] += flatten_output[357] * -0.051357;
    output[4] += flatten_output[358] * -0.023315;
    output[4] += flatten_output[359] * -0.011669;
    output[4] += flatten_output[360] * -0.068639;
    output[4] += flatten_output[361] * -0.013212;
    output[4] += flatten_output[362] * -0.055979;
    output[4] += flatten_output[363] * -0.010674;
    output[4] += flatten_output[364] * -0.138549;
    output[4] += flatten_output[365] * -0.049957;
    output[4] += flatten_output[366] * 0.011177;
    output[4] += flatten_output[367] * -0.005306;
    output[4] += flatten_output[368] * -0.045248;
    output[4] += flatten_output[369] * -0.056880;
    output[4] += flatten_output[370] * -0.045575;
    output[4] += flatten_output[371] * -0.145894;
    output[4] += flatten_output[372] * -0.091208;
    output[4] += flatten_output[373] * -0.141747;
    output[4] += flatten_output[374] * -0.029375;
    output[4] += flatten_output[375] * -0.097560;
    output[4] += flatten_output[376] * 0.002491;
    output[4] += flatten_output[377] * -0.069226;
    output[4] += flatten_output[378] * -0.080964;
    output[4] += flatten_output[379] * -0.210110;
    output[4] += flatten_output[380] * -0.060240;
    output[4] += flatten_output[381] * -0.139118;
    output[4] += flatten_output[382] * -0.000517;
    output[4] += flatten_output[383] * -0.004374;
    output[4] += flatten_output[384] * -0.057292;
    output[4] += flatten_output[385] * -0.058983;
    output[4] += flatten_output[386] * 0.006523;
    output[4] += flatten_output[387] * -0.097272;
    output[4] += flatten_output[388] * -0.061196;
    output[4] += flatten_output[389] * -0.095474;
    output[4] += flatten_output[390] * -0.058491;
    output[4] += flatten_output[391] * -0.003814;
    output[4] += flatten_output[392] * -0.063928;
    output[4] += flatten_output[393] * 0.008864;
    output[4] += flatten_output[394] * -0.043268;
    output[4] += flatten_output[395] * -0.034974;
    output[4] += flatten_output[396] * -0.121706;
    output[4] += flatten_output[397] * -0.062060;
    output[4] += flatten_output[398] * -0.015482;
    output[4] += flatten_output[399] * -0.021207;
    output[4] += flatten_output[400] * -0.120440;
    output[4] += flatten_output[401] * -0.059124;
    output[4] += flatten_output[402] * -0.091525;
    output[4] += flatten_output[403] * -0.054364;
    output[4] += flatten_output[404] * -0.062225;
    output[4] += flatten_output[405] * -0.110189;
    output[4] += flatten_output[406] * -0.021922;
    output[4] += flatten_output[407] * -0.080790;
    output[4] += flatten_output[408] * 0.019422;
    output[4] += flatten_output[409] * -0.062321;
    output[4] += flatten_output[410] * -0.136347;
    output[4] += flatten_output[411] * -0.089602;
    output[4] += flatten_output[412] * -0.045399;
    output[4] += flatten_output[413] * -0.098161;
    output[4] += flatten_output[414] * -0.013390;
    output[4] += flatten_output[415] * -0.002988;
    output[4] += flatten_output[416] * -0.076374;
    output[4] += flatten_output[417] * -0.071882;
    output[4] += flatten_output[418] * -0.022257;
    output[4] += flatten_output[419] * -0.074043;
    output[4] += flatten_output[420] * -0.086369;
    output[4] += flatten_output[421] * -0.063817;
    output[4] += flatten_output[422] * -0.090288;
    output[4] += flatten_output[423] * -0.010274;
    output[4] += flatten_output[424] * -0.077351;
    output[4] += flatten_output[425] * -0.004581;
    output[4] += flatten_output[426] * -0.078044;
    output[4] += flatten_output[427] * -0.038590;
    output[4] += flatten_output[428] * -0.054086;
    output[4] += flatten_output[429] * -0.097452;
    output[4] += flatten_output[430] * -0.027864;
    output[4] += flatten_output[431] * -0.037095;
    output[4] += flatten_output[432] * -0.091631;
    output[4] += flatten_output[433] * -0.075925;
    output[4] += flatten_output[434] * -0.033549;
    output[4] += flatten_output[435] * -0.060460;
    output[4] += flatten_output[436] * -0.089998;
    output[4] += flatten_output[437] * -0.064458;
    output[4] += flatten_output[438] * -0.041901;
    output[4] += flatten_output[439] * -0.063049;
    output[4] += flatten_output[440] * -0.009256;
    output[4] += flatten_output[441] * -0.079343;
    output[4] += flatten_output[442] * -0.092858;
    output[4] += flatten_output[443] * -0.104542;
    output[4] += flatten_output[444] * -0.086874;
    output[4] += flatten_output[445] * -0.090156;
    output[4] += flatten_output[446] * -0.025043;
    output[4] += flatten_output[447] * -0.015844;
    output[4] += flatten_output[448] * -0.051070;
    output[4] += flatten_output[449] * -0.088404;
    output[4] += flatten_output[450] * 0.002091;
    output[4] += flatten_output[451] * -0.099963;
    output[4] += flatten_output[452] * -0.084610;
    output[4] += flatten_output[453] * -0.055280;
    output[4] += flatten_output[454] * -0.093676;
    output[4] += flatten_output[455] * 0.007555;
    output[4] += flatten_output[456] * -0.065720;
    output[4] += flatten_output[457] * -0.015748;
    output[4] += flatten_output[458] * -0.136693;
    output[4] += flatten_output[459] * -0.075034;
    output[4] += flatten_output[460] * -0.019546;
    output[4] += flatten_output[461] * -0.178114;
    output[4] += flatten_output[462] * 0.007508;
    output[4] += flatten_output[463] * -0.044412;
    output[4] += flatten_output[464] * -0.062666;
    output[4] += flatten_output[465] * -0.080801;
    output[4] += flatten_output[466] * -0.008903;
    output[4] += flatten_output[467] * -0.072062;
    output[4] += flatten_output[468] * -0.075226;
    output[4] += flatten_output[469] * -0.065977;
    output[4] += flatten_output[470] * -0.047187;
    output[4] += flatten_output[471] * -0.058530;
    output[4] += flatten_output[472] * 0.015466;
    output[4] += flatten_output[473] * -0.115840;
    output[4] += flatten_output[474] * -0.060516;
    output[4] += flatten_output[475] * -0.152573;
    output[4] += flatten_output[476] * -0.063574;
    output[4] += flatten_output[477] * -0.116127;
    output[4] += flatten_output[478] * -0.004159;
    output[4] += flatten_output[479] * -0.015224;
    output[4] += flatten_output[480] * -0.025818;
    output[4] += flatten_output[481] * -0.026690;
    output[4] += flatten_output[482] * -0.002211;
    output[4] += flatten_output[483] * -0.176891;
    output[4] += flatten_output[484] * -0.070484;
    output[4] += flatten_output[485] * -0.048714;
    output[4] += flatten_output[486] * -0.082947;
    output[4] += flatten_output[487] * 0.011902;
    output[4] += flatten_output[488] * -0.066035;
    output[4] += flatten_output[489] * -0.015602;
    output[4] += flatten_output[490] * -0.094961;
    output[4] += flatten_output[491] * -0.001543;
    output[4] += flatten_output[492] * -0.117844;
    output[4] += flatten_output[493] * -0.134721;
    output[4] += flatten_output[494] * 0.004895;
    output[4] += flatten_output[495] * -0.037227;
    output[4] += flatten_output[496] * -0.082666;
    output[4] += flatten_output[497] * -0.059144;
    output[4] += flatten_output[498] * -0.091862;
    output[4] += flatten_output[499] * -0.090293;
    output[4] += flatten_output[500] * -0.078195;
    output[4] += flatten_output[501] * -0.108374;
    output[4] += flatten_output[502] * 0.015108;
    output[4] += flatten_output[503] * -0.054972;
    output[4] += flatten_output[504] * 0.015243;
    output[4] += flatten_output[505] * -0.103863;
    output[4] += flatten_output[506] * -0.107856;
    output[4] += flatten_output[507] * -0.030879;
    output[4] += flatten_output[508] * -0.077289;
    output[4] += flatten_output[509] * -0.182735;
    output[4] += flatten_output[510] * -0.017981;
    output[4] += flatten_output[511] * -0.015302;
    output[4] += flatten_output[512] * -0.052373;
    output[4] += flatten_output[513] * -0.071067;
    output[4] += flatten_output[514] * -0.004885;
    output[4] += flatten_output[515] * -0.212419;
    output[4] += flatten_output[516] * -0.123550;
    output[4] += flatten_output[517] * -0.078022;
    output[4] += flatten_output[518] * -0.055212;
    output[4] += flatten_output[519] * 0.020788;
    output[4] += flatten_output[520] * -0.113396;
    output[4] += flatten_output[521] * -0.007274;
    output[4] += flatten_output[522] * -0.108192;
    output[4] += flatten_output[523] * -0.085088;
    output[4] += flatten_output[524] * -0.150862;
    output[4] += flatten_output[525] * -0.147763;
    output[4] += flatten_output[526] * -0.021029;
    output[4] += flatten_output[527] * -0.034100;
    output[4] += flatten_output[528] * -0.075551;
    output[4] += flatten_output[529] * -0.086159;
    output[4] += flatten_output[530] * -0.094177;
    output[4] += flatten_output[531] * -0.105243;
    output[4] += flatten_output[532] * -0.133204;
    output[4] += flatten_output[533] * -0.126111;
    output[4] += flatten_output[534] * -0.054088;
    output[4] += flatten_output[535] * -0.104382;
    output[4] += flatten_output[536] * -0.004566;
    output[4] += flatten_output[537] * -0.116823;
    output[4] += flatten_output[538] * -0.108393;
    output[4] += flatten_output[539] * -0.130949;
    output[4] += flatten_output[540] * -0.057476;
    output[4] += flatten_output[541] * -0.188927;
    output[4] += flatten_output[542] * -0.020761;
    output[4] += flatten_output[543] * -0.010469;
    output[4] += flatten_output[544] * -0.056466;
    output[4] += flatten_output[545] * -0.075210;
    output[4] += flatten_output[546] * -0.001324;
    output[4] += flatten_output[547] * -0.220766;
    output[4] += flatten_output[548] * -0.069238;
    output[4] += flatten_output[549] * -0.082962;
    output[4] += flatten_output[550] * -0.039047;
    output[4] += flatten_output[551] * 0.005833;
    output[4] += flatten_output[552] * -0.107849;
    output[4] += flatten_output[553] * 0.005319;
    output[4] += flatten_output[554] * -0.070970;
    output[4] += flatten_output[555] * -0.023379;
    output[4] += flatten_output[556] * -0.126318;
    output[4] += flatten_output[557] * -0.117595;
    output[4] += flatten_output[558] * 0.019831;
    output[4] += flatten_output[559] * -0.002769;
    output[4] += flatten_output[560] * -0.103124;
    output[4] += flatten_output[561] * -0.101379;
    output[4] += flatten_output[562] * -0.073124;
    output[4] += flatten_output[563] * -0.053733;
    output[4] += flatten_output[564] * -0.064337;
    output[4] += flatten_output[565] * -0.149911;
    output[4] += flatten_output[566] * -0.002402;
    output[4] += flatten_output[567] * -0.087295;
    output[4] += flatten_output[568] * 0.011762;
    output[4] += flatten_output[569] * -0.118819;
    output[4] += flatten_output[570] * -0.172591;
    output[4] += flatten_output[571] * -0.015853;
    output[4] += flatten_output[572] * -0.068677;
    output[4] += flatten_output[573] * -0.248481;
    output[4] += flatten_output[574] * -0.039066;
    output[4] += flatten_output[575] * -0.008639;
    output[4] += flatten_output[576] * -0.021738;
    output[4] += flatten_output[577] * -0.058003;
    output[4] += flatten_output[578] * 0.006426;
    output[4] += flatten_output[579] * -0.266394;
    output[4] += flatten_output[580] * -0.062714;
    output[4] += flatten_output[581] * -0.030967;
    output[4] += flatten_output[582] * -0.011697;
    output[4] += flatten_output[583] * 0.000875;
    output[4] += flatten_output[584] * -0.036329;
    output[4] += flatten_output[585] * 0.007339;
    output[4] += flatten_output[586] * -0.042217;
    output[4] += flatten_output[587] * -0.016096;
    output[4] += flatten_output[588] * -0.156686;
    output[4] += flatten_output[589] * -0.065256;
    output[4] += flatten_output[590] * 0.002190;
    output[4] += flatten_output[591] * -0.014194;
    output[4] += flatten_output[592] * -0.055341;
    output[4] += flatten_output[593] * -0.081651;
    output[4] += flatten_output[594] * -0.066458;
    output[4] += flatten_output[595] * -0.050030;
    output[4] += flatten_output[596] * -0.067670;
    output[4] += flatten_output[597] * -0.174946;
    output[4] += flatten_output[598] * -0.010522;
    output[4] += flatten_output[599] * -0.119780;
    output[4] += flatten_output[600] * 0.013860;
    output[4] += flatten_output[601] * -0.071372;
    output[4] += flatten_output[602] * -0.123670;
    output[4] += flatten_output[603] * -0.093542;
    output[4] += flatten_output[604] * -0.053007;
    output[4] += flatten_output[605] * -0.251564;
    output[4] += flatten_output[606] * -0.019216;
    output[4] += flatten_output[607] * -0.017305;
    output[4] += flatten_output[608] * -0.018691;
    output[4] += flatten_output[609] * -0.067607;
    output[4] += flatten_output[610] * 0.008356;
    output[4] += flatten_output[611] * -0.235449;
    output[4] += flatten_output[612] * -0.101743;
    output[4] += flatten_output[613] * -0.028075;
    output[4] += flatten_output[614] * -0.021372;
    output[4] += flatten_output[615] * -0.012260;
    output[4] += flatten_output[616] * -0.044373;
    output[4] += flatten_output[617] * 0.005574;
    output[4] += flatten_output[618] * -0.067501;
    output[4] += flatten_output[619] * 0.001821;
    output[4] += flatten_output[620] * -0.107534;
    output[4] += flatten_output[621] * -0.073896;
    output[4] += flatten_output[622] * -0.008881;
    output[4] += flatten_output[623] * -0.022775;
    output[4] += flatten_output[624] * -0.034644;
    output[4] += flatten_output[625] * -0.057593;
    output[4] += flatten_output[626] * -0.027791;
    output[4] += flatten_output[627] * -0.070191;
    output[4] += flatten_output[628] * -0.089238;
    output[4] += flatten_output[629] * -0.117769;
    output[4] += flatten_output[630] * -0.010232;
    output[4] += flatten_output[631] * -0.035644;
    output[4] += flatten_output[632] * 0.002859;
    output[4] += flatten_output[633] * -0.077450;
    output[4] += flatten_output[634] * -0.077810;
    output[4] += flatten_output[635] * -0.061823;
    output[4] += flatten_output[636] * -0.091854;
    output[4] += flatten_output[637] * -0.197251;
    output[4] += flatten_output[638] * -0.005785;
    output[4] += flatten_output[639] * -0.033106;
    output[4] += flatten_output[640] * -0.025652;
    output[4] += flatten_output[641] * -0.049348;
    output[4] += flatten_output[642] * -0.000186;
    output[4] += flatten_output[643] * -0.173258;
    output[4] += flatten_output[644] * -0.050808;
    output[4] += flatten_output[645] * -0.022646;
    output[4] += flatten_output[646] * -0.001921;
    output[4] += flatten_output[647] * -0.013205;
    output[4] += flatten_output[648] * -0.061179;
    output[4] += flatten_output[649] * 0.000550;
    output[4] += flatten_output[650] * -0.051672;
    output[4] += flatten_output[651] * -0.024737;
    output[4] += flatten_output[652] * -0.091417;
    output[4] += flatten_output[653] * -0.055156;
    output[4] += flatten_output[654] * -0.013338;
    output[4] += flatten_output[655] * -0.007876;
    output[4] += flatten_output[656] * -0.041252;
    output[4] += flatten_output[657] * -0.051276;
    output[4] += flatten_output[658] * -0.029723;
    output[4] += flatten_output[659] * -0.036992;
    output[4] += flatten_output[660] * -0.048200;
    output[4] += flatten_output[661] * -0.125775;
    output[4] += flatten_output[662] * 0.008291;
    output[4] += flatten_output[663] * -0.079629;
    output[4] += flatten_output[664] * -0.002768;
    output[4] += flatten_output[665] * -0.064384;
    output[4] += flatten_output[666] * -0.094739;
    output[4] += flatten_output[667] * -0.036308;
    output[4] += flatten_output[668] * -0.057723;
    output[4] += flatten_output[669] * -0.140026;
    output[4] += flatten_output[670] * -0.019016;
    output[4] += flatten_output[671] * -0.031678;
    output[4] += flatten_output[672] * -0.005468;
    output[4] += flatten_output[673] * -0.020995;
    output[4] += flatten_output[674] * 0.015856;
    output[4] += flatten_output[675] * -0.169754;
    output[4] = 1 / (1 + exp(-output[4]));
    output[5] = 0.023940;
    output[5] += flatten_output[0] * -0.012590;
    output[5] += flatten_output[1] * 0.009873;
    output[5] += flatten_output[2] * -0.041424;
    output[5] += flatten_output[3] * -0.007202;
    output[5] += flatten_output[4] * 0.007287;
    output[5] += flatten_output[5] * 0.007342;
    output[5] += flatten_output[6] * -0.000644;
    output[5] += flatten_output[7] * -0.004483;
    output[5] += flatten_output[8] * 0.005872;
    output[5] += flatten_output[9] * 0.002420;
    output[5] += flatten_output[10] * -0.003125;
    output[5] += flatten_output[11] * -0.024700;
    output[5] += flatten_output[12] * 0.020058;
    output[5] += flatten_output[13] * -0.002794;
    output[5] += flatten_output[14] * -0.017362;
    output[5] += flatten_output[15] * -0.014314;
    output[5] += flatten_output[16] * 0.031984;
    output[5] += flatten_output[17] * -0.002573;
    output[5] += flatten_output[18] * 0.008690;
    output[5] += flatten_output[19] * 0.011564;
    output[5] += flatten_output[20] * -0.000751;
    output[5] += flatten_output[21] * -0.009746;
    output[5] += flatten_output[22] * -0.001364;
    output[5] += flatten_output[23] * 0.002263;
    output[5] += flatten_output[24] * 0.005896;
    output[5] += flatten_output[25] * 0.007780;
    output[5] += flatten_output[26] * 0.039789;
    output[5] += flatten_output[27] * -0.006241;
    output[5] += flatten_output[28] * -0.002131;
    output[5] += flatten_output[29] * -0.014301;
    output[5] += flatten_output[30] * 0.006890;
    output[5] += flatten_output[31] * 0.030021;
    output[5] += flatten_output[32] * 0.012881;
    output[5] += flatten_output[33] * 0.013757;
    output[5] += flatten_output[34] * -0.048618;
    output[5] += flatten_output[35] * -0.002181;
    output[5] += flatten_output[36] * 0.013618;
    output[5] += flatten_output[37] * -0.010583;
    output[5] += flatten_output[38] * -0.001808;
    output[5] += flatten_output[39] * 0.007469;
    output[5] += flatten_output[40] * -0.003407;
    output[5] += flatten_output[41] * 0.015431;
    output[5] += flatten_output[42] * 0.000927;
    output[5] += flatten_output[43] * -0.021777;
    output[5] += flatten_output[44] * 0.003902;
    output[5] += flatten_output[45] * 0.015970;
    output[5] += flatten_output[46] * 0.000507;
    output[5] += flatten_output[47] * -0.018576;
    output[5] += flatten_output[48] * 0.033374;
    output[5] += flatten_output[49] * 0.014092;
    output[5] += flatten_output[50] * 0.021071;
    output[5] += flatten_output[51] * 0.012794;
    output[5] += flatten_output[52] * 0.006630;
    output[5] += flatten_output[53] * -0.008909;
    output[5] += flatten_output[54] * 0.002013;
    output[5] += flatten_output[55] * 0.016298;
    output[5] += flatten_output[56] * -0.016587;
    output[5] += flatten_output[57] * -0.004296;
    output[5] += flatten_output[58] * 0.022939;
    output[5] += flatten_output[59] * -0.005953;
    output[5] += flatten_output[60] * 0.013327;
    output[5] += flatten_output[61] * -0.024109;
    output[5] += flatten_output[62] * -0.000513;
    output[5] += flatten_output[63] * 0.024129;
    output[5] += flatten_output[64] * -0.010304;
    output[5] += flatten_output[65] * -0.011083;
    output[5] += flatten_output[66] * -0.044897;
    output[5] += flatten_output[67] * -0.013335;
    output[5] += flatten_output[68] * 0.013839;
    output[5] += flatten_output[69] * -0.011333;
    output[5] += flatten_output[70] * 0.013245;
    output[5] += flatten_output[71] * 0.002005;
    output[5] += flatten_output[72] * 0.012196;
    output[5] += flatten_output[73] * 0.010975;
    output[5] += flatten_output[74] * 0.003510;
    output[5] += flatten_output[75] * -0.010862;
    output[5] += flatten_output[76] * 0.014935;
    output[5] += flatten_output[77] * -0.003376;
    output[5] += flatten_output[78] * -0.013752;
    output[5] += flatten_output[79] * -0.018196;
    output[5] += flatten_output[80] * 0.044874;
    output[5] += flatten_output[81] * 0.015370;
    output[5] += flatten_output[82] * 0.025753;
    output[5] += flatten_output[83] * -0.008101;
    output[5] += flatten_output[84] * 0.005046;
    output[5] += flatten_output[85] * 0.008366;
    output[5] += flatten_output[86] * 0.021595;
    output[5] += flatten_output[87] * 0.018459;
    output[5] += flatten_output[88] * -0.010750;
    output[5] += flatten_output[89] * 0.005875;
    output[5] += flatten_output[90] * 0.037992;
    output[5] += flatten_output[91] * -0.015023;
    output[5] += flatten_output[92] * 0.003644;
    output[5] += flatten_output[93] * -0.016758;
    output[5] += flatten_output[94] * 0.009289;
    output[5] += flatten_output[95] * 0.009090;
    output[5] += flatten_output[96] * 0.001441;
    output[5] += flatten_output[97] * 0.002491;
    output[5] += flatten_output[98] * -0.034581;
    output[5] += flatten_output[99] * 0.002669;
    output[5] += flatten_output[100] * 0.015732;
    output[5] += flatten_output[101] * 0.015791;
    output[5] += flatten_output[102] * 0.005019;
    output[5] += flatten_output[103] * -0.003334;
    output[5] += flatten_output[104] * 0.015679;
    output[5] += flatten_output[105] * -0.015268;
    output[5] += flatten_output[106] * 0.015436;
    output[5] += flatten_output[107] * -0.029174;
    output[5] += flatten_output[108] * 0.009995;
    output[5] += flatten_output[109] * 0.021384;
    output[5] += flatten_output[110] * -0.028694;
    output[5] += flatten_output[111] * 0.011462;
    output[5] += flatten_output[112] * 0.050443;
    output[5] += flatten_output[113] * -0.004679;
    output[5] += flatten_output[114] * 0.028368;
    output[5] += flatten_output[115] * -0.009332;
    output[5] += flatten_output[116] * 0.017516;
    output[5] += flatten_output[117] * 0.014934;
    output[5] += flatten_output[118] * -0.005984;
    output[5] += flatten_output[119] * 0.013769;
    output[5] += flatten_output[120] * 0.003494;
    output[5] += flatten_output[121] * 0.016155;
    output[5] += flatten_output[122] * 0.016503;
    output[5] += flatten_output[123] * 0.001771;
    output[5] += flatten_output[124] * 0.010700;
    output[5] += flatten_output[125] * -0.013035;
    output[5] += flatten_output[126] * -0.004515;
    output[5] += flatten_output[127] * 0.024445;
    output[5] += flatten_output[128] * -0.008949;
    output[5] += flatten_output[129] * 0.011437;
    output[5] += flatten_output[130] * -0.063586;
    output[5] += flatten_output[131] * 0.006541;
    output[5] += flatten_output[132] * -0.013025;
    output[5] += flatten_output[133] * -0.007147;
    output[5] += flatten_output[134] * 0.010860;
    output[5] += flatten_output[135] * 0.002901;
    output[5] += flatten_output[136] * 0.018336;
    output[5] += flatten_output[137] * 0.010786;
    output[5] += flatten_output[138] * 0.017258;
    output[5] += flatten_output[139] * -0.036988;
    output[5] += flatten_output[140] * 0.007246;
    output[5] += flatten_output[141] * 0.008187;
    output[5] += flatten_output[142] * -0.000673;
    output[5] += flatten_output[143] * 0.003391;
    output[5] += flatten_output[144] * 0.052943;
    output[5] += flatten_output[145] * 0.022029;
    output[5] += flatten_output[146] * 0.001725;
    output[5] += flatten_output[147] * -0.000280;
    output[5] += flatten_output[148] * 0.001693;
    output[5] += flatten_output[149] * 0.018024;
    output[5] += flatten_output[150] * 0.009404;
    output[5] += flatten_output[151] * 0.011813;
    output[5] += flatten_output[152] * -0.012866;
    output[5] += flatten_output[153] * 0.013866;
    output[5] += flatten_output[154] * 0.038075;
    output[5] += flatten_output[155] * 0.002024;
    output[5] += flatten_output[156] * 0.000488;
    output[5] += flatten_output[157] * -0.019090;
    output[5] += flatten_output[158] * 0.000287;
    output[5] += flatten_output[159] * 0.023707;
    output[5] += flatten_output[160] * 0.011944;
    output[5] += flatten_output[161] * -0.010366;
    output[5] += flatten_output[162] * -0.045608;
    output[5] += flatten_output[163] * -0.006444;
    output[5] += flatten_output[164] * -0.029187;
    output[5] += flatten_output[165] * -0.014175;
    output[5] += flatten_output[166] * 0.010157;
    output[5] += flatten_output[167] * 0.012414;
    output[5] += flatten_output[168] * 0.006537;
    output[5] += flatten_output[169] * 0.013563;
    output[5] += flatten_output[170] * 0.020198;
    output[5] += flatten_output[171] * -0.032752;
    output[5] += flatten_output[172] * 0.019110;
    output[5] += flatten_output[173] * -0.005059;
    output[5] += flatten_output[174] * -0.002211;
    output[5] += flatten_output[175] * -0.014923;
    output[5] += flatten_output[176] * 0.039753;
    output[5] += flatten_output[177] * -0.001833;
    output[5] += flatten_output[178] * -0.001059;
    output[5] += flatten_output[179] * -0.017593;
    output[5] += flatten_output[180] * 0.000646;
    output[5] += flatten_output[181] * 0.017442;
    output[5] += flatten_output[182] * 0.010896;
    output[5] += flatten_output[183] * 0.000133;
    output[5] += flatten_output[184] * -0.010588;
    output[5] += flatten_output[185] * 0.016450;
    output[5] += flatten_output[186] * 0.041584;
    output[5] += flatten_output[187] * 0.001151;
    output[5] += flatten_output[188] * -0.017084;
    output[5] += flatten_output[189] * -0.018658;
    output[5] += flatten_output[190] * 0.003173;
    output[5] += flatten_output[191] * 0.030597;
    output[5] += flatten_output[192] * -0.016725;
    output[5] += flatten_output[193] * 0.000574;
    output[5] += flatten_output[194] * -0.034752;
    output[5] += flatten_output[195] * -0.007698;
    output[5] += flatten_output[196] * -0.025041;
    output[5] += flatten_output[197] * -0.008708;
    output[5] += flatten_output[198] * 0.014468;
    output[5] += flatten_output[199] * -0.019601;
    output[5] += flatten_output[200] * -0.015453;
    output[5] += flatten_output[201] * 0.003711;
    output[5] += flatten_output[202] * 0.003765;
    output[5] += flatten_output[203] * -0.026340;
    output[5] += flatten_output[204] * 0.008523;
    output[5] += flatten_output[205] * -0.004768;
    output[5] += flatten_output[206] * -0.007732;
    output[5] += flatten_output[207] * 0.001735;
    output[5] += flatten_output[208] * 0.021403;
    output[5] += flatten_output[209] * -0.014874;
    output[5] += flatten_output[210] * 0.013371;
    output[5] += flatten_output[211] * -0.002961;
    output[5] += flatten_output[212] * -0.007389;
    output[5] += flatten_output[213] * 0.007650;
    output[5] += flatten_output[214] * 0.019503;
    output[5] += flatten_output[215] * -0.014325;
    output[5] += flatten_output[216] * 0.005270;
    output[5] += flatten_output[217] * -0.001246;
    output[5] += flatten_output[218] * 0.008738;
    output[5] += flatten_output[219] * 0.009338;
    output[5] += flatten_output[220] * -0.009605;
    output[5] += flatten_output[221] * -0.028271;
    output[5] += flatten_output[222] * -0.002008;
    output[5] += flatten_output[223] * 0.034182;
    output[5] += flatten_output[224] * -0.013041;
    output[5] += flatten_output[225] * -0.018037;
    output[5] += flatten_output[226] * -0.063248;
    output[5] += flatten_output[227] * -0.050851;
    output[5] += flatten_output[228] * -0.038088;
    output[5] += flatten_output[229] * 0.004212;
    output[5] += flatten_output[230] * 0.010534;
    output[5] += flatten_output[231] * -0.005595;
    output[5] += flatten_output[232] * -0.013788;
    output[5] += flatten_output[233] * 0.003032;
    output[5] += flatten_output[234] * -0.000828;
    output[5] += flatten_output[235] * -0.034525;
    output[5] += flatten_output[236] * -0.006330;
    output[5] += flatten_output[237] * 0.020436;
    output[5] += flatten_output[238] * 0.000930;
    output[5] += flatten_output[239] * -0.016607;
    output[5] += flatten_output[240] * 0.023566;
    output[5] += flatten_output[241] * -0.033452;
    output[5] += flatten_output[242] * 0.002865;
    output[5] += flatten_output[243] * -0.014004;
    output[5] += flatten_output[244] * -0.018072;
    output[5] += flatten_output[245] * -0.036875;
    output[5] += flatten_output[246] * -0.000155;
    output[5] += flatten_output[247] * -0.013867;
    output[5] += flatten_output[248] * -0.020205;
    output[5] += flatten_output[249] * 0.009585;
    output[5] += flatten_output[250] * 0.011938;
    output[5] += flatten_output[251] * -0.030382;
    output[5] += flatten_output[252] * -0.040040;
    output[5] += flatten_output[253] * -0.057190;
    output[5] += flatten_output[254] * -0.011869;
    output[5] += flatten_output[255] * 0.012636;
    output[5] += flatten_output[256] * -0.003359;
    output[5] += flatten_output[257] * -0.025086;
    output[5] += flatten_output[258] * -0.063598;
    output[5] += flatten_output[259] * -0.045008;
    output[5] += flatten_output[260] * -0.040887;
    output[5] += flatten_output[261] * 0.001871;
    output[5] += flatten_output[262] * 0.022662;
    output[5] += flatten_output[263] * -0.003015;
    output[5] += flatten_output[264] * -0.003587;
    output[5] += flatten_output[265] * 0.006571;
    output[5] += flatten_output[266] * 0.005650;
    output[5] += flatten_output[267] * -0.020277;
    output[5] += flatten_output[268] * -0.001787;
    output[5] += flatten_output[269] * -0.007277;
    output[5] += flatten_output[270] * -0.006516;
    output[5] += flatten_output[271] * -0.012110;
    output[5] += flatten_output[272] * 0.031033;
    output[5] += flatten_output[273] * -0.031679;
    output[5] += flatten_output[274] * -0.001365;
    output[5] += flatten_output[275] * -0.007721;
    output[5] += flatten_output[276] * -0.012469;
    output[5] += flatten_output[277] * -0.020680;
    output[5] += flatten_output[278] * -0.015397;
    output[5] += flatten_output[279] * -0.013254;
    output[5] += flatten_output[280] * -0.004307;
    output[5] += flatten_output[281] * -0.022758;
    output[5] += flatten_output[282] * -0.001981;
    output[5] += flatten_output[283] * -0.001297;
    output[5] += flatten_output[284] * -0.035183;
    output[5] += flatten_output[285] * -0.057936;
    output[5] += flatten_output[286] * -0.011431;
    output[5] += flatten_output[287] * 0.026723;
    output[5] += flatten_output[288] * 0.016530;
    output[5] += flatten_output[289] * -0.006337;
    output[5] += flatten_output[290] * -0.059186;
    output[5] += flatten_output[291] * -0.041083;
    output[5] += flatten_output[292] * -0.028441;
    output[5] += flatten_output[293] * -0.014617;
    output[5] += flatten_output[294] * 0.003356;
    output[5] += flatten_output[295] * 0.008786;
    output[5] += flatten_output[296] * -0.009693;
    output[5] += flatten_output[297] * 0.000396;
    output[5] += flatten_output[298] * 0.011381;
    output[5] += flatten_output[299] * -0.036955;
    output[5] += flatten_output[300] * 0.014562;
    output[5] += flatten_output[301] * -0.014865;
    output[5] += flatten_output[302] * -0.028092;
    output[5] += flatten_output[303] * -0.010321;
    output[5] += flatten_output[304] * 0.034894;
    output[5] += flatten_output[305] * -0.028633;
    output[5] += flatten_output[306] * 0.008903;
    output[5] += flatten_output[307] * -0.011431;
    output[5] += flatten_output[308] * -0.032354;
    output[5] += flatten_output[309] * -0.046967;
    output[5] += flatten_output[310] * -0.019321;
    output[5] += flatten_output[311] * -0.022333;
    output[5] += flatten_output[312] * 0.002511;
    output[5] += flatten_output[313] * -0.025930;
    output[5] += flatten_output[314] * 0.002432;
    output[5] += flatten_output[315] * -0.027717;
    output[5] += flatten_output[316] * -0.018814;
    output[5] += flatten_output[317] * -0.059877;
    output[5] += flatten_output[318] * -0.002294;
    output[5] += flatten_output[319] * 0.012391;
    output[5] += flatten_output[320] * -0.000503;
    output[5] += flatten_output[321] * -0.035450;
    output[5] += flatten_output[322] * -0.044660;
    output[5] += flatten_output[323] * -0.083581;
    output[5] += flatten_output[324] * -0.022353;
    output[5] += flatten_output[325] * -0.011371;
    output[5] += flatten_output[326] * 0.010508;
    output[5] += flatten_output[327] * -0.020592;
    output[5] += flatten_output[328] * -0.013264;
    output[5] += flatten_output[329] * 0.008471;
    output[5] += flatten_output[330] * 0.007275;
    output[5] += flatten_output[331] * -0.012135;
    output[5] += flatten_output[332] * 0.015314;
    output[5] += flatten_output[333] * -0.031416;
    output[5] += flatten_output[334] * -0.022615;
    output[5] += flatten_output[335] * 0.010068;
    output[5] += flatten_output[336] * 0.023273;
    output[5] += flatten_output[337] * -0.019868;
    output[5] += flatten_output[338] * 0.009573;
    output[5] += flatten_output[339] * -0.028560;
    output[5] += flatten_output[340] * -0.028772;
    output[5] += flatten_output[341] * -0.041783;
    output[5] += flatten_output[342] * 0.002235;
    output[5] += flatten_output[343] * -0.035301;
    output[5] += flatten_output[344] * 0.003900;
    output[5] += flatten_output[345] * -0.028795;
    output[5] += flatten_output[346] * 0.007115;
    output[5] += flatten_output[347] * -0.030343;
    output[5] += flatten_output[348] * -0.024173;
    output[5] += flatten_output[349] * -0.075180;
    output[5] += flatten_output[350] * -0.013077;
    output[5] += flatten_output[351] * 0.032862;
    output[5] += flatten_output[352] * -0.022483;
    output[5] += flatten_output[353] * -0.044651;
    output[5] += flatten_output[354] * -0.049572;
    output[5] += flatten_output[355] * -0.097897;
    output[5] += flatten_output[356] * -0.043787;
    output[5] += flatten_output[357] * -0.014157;
    output[5] += flatten_output[358] * 0.018745;
    output[5] += flatten_output[359] * -0.015166;
    output[5] += flatten_output[360] * -0.035926;
    output[5] += flatten_output[361] * -0.002089;
    output[5] += flatten_output[362] * 0.001583;
    output[5] += flatten_output[363] * -0.019792;
    output[5] += flatten_output[364] * 0.009165;
    output[5] += flatten_output[365] * -0.044406;
    output[5] += flatten_output[366] * -0.020925;
    output[5] += flatten_output[367] * -0.005672;
    output[5] += flatten_output[368] * -0.003179;
    output[5] += flatten_output[369] * -0.056761;
    output[5] += flatten_output[370] * 0.018894;
    output[5] += flatten_output[371] * -0.043987;
    output[5] += flatten_output[372] * -0.073595;
    output[5] += flatten_output[373] * -0.023887;
    output[5] += flatten_output[374] * -0.018753;
    output[5] += flatten_output[375] * -0.014261;
    output[5] += flatten_output[376] * 0.009181;
    output[5] += flatten_output[377] * -0.035156;
    output[5] += flatten_output[378] * -0.015333;
    output[5] += flatten_output[379] * -0.076660;
    output[5] += flatten_output[380] * -0.051376;
    output[5] += flatten_output[381] * -0.119856;
    output[5] += flatten_output[382] * -0.017209;
    output[5] += flatten_output[383] * 0.010306;
    output[5] += flatten_output[384] * -0.033686;
    output[5] += flatten_output[385] * -0.067480;
    output[5] += flatten_output[386] * -0.045872;
    output[5] += flatten_output[387] * -0.153046;
    output[5] += flatten_output[388] * -0.078862;
    output[5] += flatten_output[389] * -0.056270;
    output[5] += flatten_output[390] * -0.016776;
    output[5] += flatten_output[391] * -0.000924;
    output[5] += flatten_output[392] * -0.060445;
    output[5] += flatten_output[393] * 0.011916;
    output[5] += flatten_output[394] * -0.047900;
    output[5] += flatten_output[395] * -0.029692;
    output[5] += flatten_output[396] * -0.029708;
    output[5] += flatten_output[397] * -0.059158;
    output[5] += flatten_output[398] * -0.029666;
    output[5] += flatten_output[399] * 0.004339;
    output[5] += flatten_output[400] * 0.004036;
    output[5] += flatten_output[401] * -0.070418;
    output[5] += flatten_output[402] * -0.002048;
    output[5] += flatten_output[403] * -0.041371;
    output[5] += flatten_output[404] * -0.073999;
    output[5] += flatten_output[405] * -0.059942;
    output[5] += flatten_output[406] * -0.025090;
    output[5] += flatten_output[407] * -0.047199;
    output[5] += flatten_output[408] * -0.002756;
    output[5] += flatten_output[409] * -0.062346;
    output[5] += flatten_output[410] * -0.032689;
    output[5] += flatten_output[411] * -0.095624;
    output[5] += flatten_output[412] * -0.068624;
    output[5] += flatten_output[413] * -0.163362;
    output[5] += flatten_output[414] * 0.011837;
    output[5] += flatten_output[415] * 0.023602;
    output[5] += flatten_output[416] * -0.029439;
    output[5] += flatten_output[417] * -0.101914;
    output[5] += flatten_output[418] * -0.049681;
    output[5] += flatten_output[419] * -0.103210;
    output[5] += flatten_output[420] * -0.066179;
    output[5] += flatten_output[421] * -0.032987;
    output[5] += flatten_output[422] * -0.018834;
    output[5] += flatten_output[423] * -0.019284;
    output[5] += flatten_output[424] * -0.050565;
    output[5] += flatten_output[425] * -0.016232;
    output[5] += flatten_output[426] * -0.026825;
    output[5] += flatten_output[427] * -0.018089;
    output[5] += flatten_output[428] * -0.043129;
    output[5] += flatten_output[429] * -0.028599;
    output[5] += flatten_output[430] * -0.035130;
    output[5] += flatten_output[431] * -0.008117;
    output[5] += flatten_output[432] * -0.015376;
    output[5] += flatten_output[433] * -0.097098;
    output[5] += flatten_output[434] * -0.005393;
    output[5] += flatten_output[435] * -0.004143;
    output[5] += flatten_output[436] * -0.039106;
    output[5] += flatten_output[437] * -0.099320;
    output[5] += flatten_output[438] * -0.006452;
    output[5] += flatten_output[439] * -0.056013;
    output[5] += flatten_output[440] * -0.015008;
    output[5] += flatten_output[441] * -0.056811;
    output[5] += flatten_output[442] * -0.067458;
    output[5] += flatten_output[443] * 0.021570;
    output[5] += flatten_output[444] * -0.083242;
    output[5] += flatten_output[445] * -0.102376;
    output[5] += flatten_output[446] * 0.010379;
    output[5] += flatten_output[447] * 0.030989;
    output[5] += flatten_output[448] * -0.009209;
    output[5] += flatten_output[449] * -0.027180;
    output[5] += flatten_output[450] * -0.042482;
    output[5] += flatten_output[451] * -0.044268;
    output[5] += flatten_output[452] * -0.030643;
    output[5] += flatten_output[453] * -0.024012;
    output[5] += flatten_output[454] * 0.075315;
    output[5] += flatten_output[455] * -0.019036;
    output[5] += flatten_output[456] * 0.001077;
    output[5] += flatten_output[457] * -0.009531;
    output[5] += flatten_output[458] * -0.003836;
    output[5] += flatten_output[459] * -0.015537;
    output[5] += flatten_output[460] * -0.037677;
    output[5] += flatten_output[461] * 0.021321;
    output[5] += flatten_output[462] * -0.004457;
    output[5] += flatten_output[463] * -0.015850;
    output[5] += flatten_output[464] * -0.006825;
    output[5] += flatten_output[465] * -0.033837;
    output[5] += flatten_output[466] * -0.015050;
    output[5] += flatten_output[467] * 0.007264;
    output[5] += flatten_output[468] * -0.011303;
    output[5] += flatten_output[469] * -0.147783;
    output[5] += flatten_output[470] * 0.007834;
    output[5] += flatten_output[471] * -0.061526;
    output[5] += flatten_output[472] * 0.003926;
    output[5] += flatten_output[473] * -0.030999;
    output[5] += flatten_output[474] * -0.038267;
    output[5] += flatten_output[475] * 0.019741;
    output[5] += flatten_output[476] * -0.049944;
    output[5] += flatten_output[477] * -0.044026;
    output[5] += flatten_output[478] * 0.010825;
    output[5] += flatten_output[479] * 0.004657;
    output[5] += flatten_output[480] * 0.051068;
    output[5] += flatten_output[481] * -0.011844;
    output[5] += flatten_output[482] * -0.042802;
    output[5] += flatten_output[483] * 0.024185;
    output[5] += flatten_output[484] * 0.039863;
    output[5] += flatten_output[485] * -0.012727;
    output[5] += flatten_output[486] * 0.095434;
    output[5] += flatten_output[487] * -0.012469;
    output[5] += flatten_output[488] * 0.018581;
    output[5] += flatten_output[489] * -0.001035;
    output[5] += flatten_output[490] * 0.075959;
    output[5] += flatten_output[491] * -0.038095;
    output[5] += flatten_output[492] * -0.030870;
    output[5] += flatten_output[493] * 0.092889;
    output[5] += flatten_output[494] * -0.028695;
    output[5] += flatten_output[495] * -0.005969;
    output[5] += flatten_output[496] * -0.006872;
    output[5] += flatten_output[497] * 0.009699;
    output[5] += flatten_output[498] * 0.011160;
    output[5] += flatten_output[499] * 0.040401;
    output[5] += flatten_output[500] * 0.058698;
    output[5] += flatten_output[501] * -0.068287;
    output[5] += flatten_output[502] * -0.010123;
    output[5] += flatten_output[503] * -0.036684;
    output[5] += flatten_output[504] * -0.011690;
    output[5] += flatten_output[505] * 0.034669;
    output[5] += flatten_output[506] * -0.000575;
    output[5] += flatten_output[507] * 0.079373;
    output[5] += flatten_output[508] * 0.010460;
    output[5] += flatten_output[509] * 0.044287;
    output[5] += flatten_output[510] * -0.003101;
    output[5] += flatten_output[511] * 0.000752;
    output[5] += flatten_output[512] * 0.050831;
    output[5] += flatten_output[513] * 0.081069;
    output[5] += flatten_output[514] * -0.044322;
    output[5] += flatten_output[515] * 0.087059;
    output[5] += flatten_output[516] * 0.042128;
    output[5] += flatten_output[517] * 0.003812;
    output[5] += flatten_output[518] * 0.066229;
    output[5] += flatten_output[519] * -0.010427;
    output[5] += flatten_output[520] * 0.038953;
    output[5] += flatten_output[521] * -0.013840;
    output[5] += flatten_output[522] * 0.093125;
    output[5] += flatten_output[523] * -0.033245;
    output[5] += flatten_output[524] * 0.065845;
    output[5] += flatten_output[525] * 0.107130;
    output[5] += flatten_output[526] * -0.015084;
    output[5] += flatten_output[527] * 0.002242;
    output[5] += flatten_output[528] * 0.006474;
    output[5] += flatten_output[529] * 0.062310;
    output[5] += flatten_output[530] * 0.023585;
    output[5] += flatten_output[531] * -0.010841;
    output[5] += flatten_output[532] * 0.029781;
    output[5] += flatten_output[533] * -0.020161;
    output[5] += flatten_output[534] * -0.013320;
    output[5] += flatten_output[535] * 0.001449;
    output[5] += flatten_output[536] * -0.014173;
    output[5] += flatten_output[537] * 0.058702;
    output[5] += flatten_output[538] * 0.014838;
    output[5] += flatten_output[539] * -0.078158;
    output[5] += flatten_output[540] * 0.017008;
    output[5] += flatten_output[541] * 0.084455;
    output[5] += flatten_output[542] * -0.001828;
    output[5] += flatten_output[543] * 0.013376;
    output[5] += flatten_output[544] * 0.091890;
    output[5] += flatten_output[545] * 0.028868;
    output[5] += flatten_output[546] * -0.062702;
    output[5] += flatten_output[547] * 0.090971;
    output[5] += flatten_output[548] * 0.001879;
    output[5] += flatten_output[549] * 0.011543;
    output[5] += flatten_output[550] * 0.019378;
    output[5] += flatten_output[551] * -0.011584;
    output[5] += flatten_output[552] * 0.024522;
    output[5] += flatten_output[553] * 0.006660;
    output[5] += flatten_output[554] * 0.052365;
    output[5] += flatten_output[555] * -0.014824;
    output[5] += flatten_output[556] * 0.118657;
    output[5] += flatten_output[557] * 0.033990;
    output[5] += flatten_output[558] * -0.029071;
    output[5] += flatten_output[559] * -0.010643;
    output[5] += flatten_output[560] * 0.041967;
    output[5] += flatten_output[561] * 0.031204;
    output[5] += flatten_output[562] * 0.060462;
    output[5] += flatten_output[563] * -0.013427;
    output[5] += flatten_output[564] * 0.004436;
    output[5] += flatten_output[565] * 0.044135;
    output[5] += flatten_output[566] * 0.015462;
    output[5] += flatten_output[567] * 0.048963;
    output[5] += flatten_output[568] * -0.011157;
    output[5] += flatten_output[569] * 0.078071;
    output[5] += flatten_output[570] * 0.096620;
    output[5] += flatten_output[571] * 0.053880;
    output[5] += flatten_output[572] * 0.012577;
    output[5] += flatten_output[573] * 0.086550;
    output[5] += flatten_output[574] * -0.000243;
    output[5] += flatten_output[575] * 0.016519;
    output[5] += flatten_output[576] * 0.066696;
    output[5] += flatten_output[577] * 0.033494;
    output[5] += flatten_output[578] * -0.054593;
    output[5] += flatten_output[579] * 0.053696;
    output[5] += flatten_output[580] * -0.029474;
    output[5] += flatten_output[581] * -0.000763;
    output[5] += flatten_output[582] * -0.020244;
    output[5] += flatten_output[583] * -0.018586;
    output[5] += flatten_output[584] * -0.011520;
    output[5] += flatten_output[585] * 0.010706;
    output[5] += flatten_output[586] * 0.003620;
    output[5] += flatten_output[587] * -0.030620;
    output[5] += flatten_output[588] * 0.072439;
    output[5] += flatten_output[589] * -0.012058;
    output[5] += flatten_output[590] * -0.020637;
    output[5] += flatten_output[591] * -0.006564;
    output[5] += flatten_output[592] * 0.014771;
    output[5] += flatten_output[593] * 0.006965;
    output[5] += flatten_output[594] * 0.060825;
    output[5] += flatten_output[595] * -0.036666;
    output[5] += flatten_output[596] * -0.046251;
    output[5] += flatten_output[597] * 0.066214;
    output[5] += flatten_output[598] * -0.016500;
    output[5] += flatten_output[599] * 0.024164;
    output[5] += flatten_output[600] * -0.005659;
    output[5] += flatten_output[601] * 0.013037;
    output[5] += flatten_output[602] * -0.008427;
    output[5] += flatten_output[603] * -0.081800;
    output[5] += flatten_output[604] * -0.016439;
    output[5] += flatten_output[605] * 0.043431;
    output[5] += flatten_output[606] * -0.003760;
    output[5] += flatten_output[607] * 0.012359;
    output[5] += flatten_output[608] * -0.027365;
    output[5] += flatten_output[609] * -0.080822;
    output[5] += flatten_output[610] * -0.053995;
    output[5] += flatten_output[611] * -0.020099;
    output[5] += flatten_output[612] * -0.039645;
    output[5] += flatten_output[613] * -0.024493;
    output[5] += flatten_output[614] * 0.000962;
    output[5] += flatten_output[615] * -0.007401;
    output[5] += flatten_output[616] * -0.020186;
    output[5] += flatten_output[617] * 0.015795;
    output[5] += flatten_output[618] * -0.021333;
    output[5] += flatten_output[619] * -0.026775;
    output[5] += flatten_output[620] * 0.063895;
    output[5] += flatten_output[621] * -0.057441;
    output[5] += flatten_output[622] * -0.015545;
    output[5] += flatten_output[623] * 0.003245;
    output[5] += flatten_output[624] * 0.002142;
    output[5] += flatten_output[625] * -0.048602;
    output[5] += flatten_output[626] * 0.043796;
    output[5] += flatten_output[627] * -0.027378;
    output[5] += flatten_output[628] * -0.021998;
    output[5] += flatten_output[629] * -0.004191;
    output[5] += flatten_output[630] * -0.000989;
    output[5] += flatten_output[631] * 0.013203;
    output[5] += flatten_output[632] * 0.010637;
    output[5] += flatten_output[633] * -0.048484;
    output[5] += flatten_output[634] * 0.045018;
    output[5] += flatten_output[635] * -0.010911;
    output[5] += flatten_output[636] * -0.029617;
    output[5] += flatten_output[637] * -0.039912;
    output[5] += flatten_output[638] * -0.005341;
    output[5] += flatten_output[639] * 0.024751;
    output[5] += flatten_output[640] * -0.023984;
    output[5] += flatten_output[641] * -0.027525;
    output[5] += flatten_output[642] * -0.058578;
    output[5] += flatten_output[643] * -0.067084;
    output[5] += flatten_output[644] * -0.027228;
    output[5] += flatten_output[645] * -0.013178;
    output[5] += flatten_output[646] * 0.026055;
    output[5] += flatten_output[647] * -0.012819;
    output[5] += flatten_output[648] * -0.010487;
    output[5] += flatten_output[649] * 0.003116;
    output[5] += flatten_output[650] * 0.000139;
    output[5] += flatten_output[651] * -0.023924;
    output[5] += flatten_output[652] * -0.037072;
    output[5] += flatten_output[653] * 0.003699;
    output[5] += flatten_output[654] * -0.013446;
    output[5] += flatten_output[655] * 0.001025;
    output[5] += flatten_output[656] * 0.000634;
    output[5] += flatten_output[657] * -0.039712;
    output[5] += flatten_output[658] * 0.008068;
    output[5] += flatten_output[659] * -0.011659;
    output[5] += flatten_output[660] * -0.023046;
    output[5] += flatten_output[661] * -0.065757;
    output[5] += flatten_output[662] * -0.009168;
    output[5] += flatten_output[663] * -0.053699;
    output[5] += flatten_output[664] * -0.017470;
    output[5] += flatten_output[665] * -0.037321;
    output[5] += flatten_output[666] * -0.093620;
    output[5] += flatten_output[667] * -0.013478;
    output[5] += flatten_output[668] * -0.032865;
    output[5] += flatten_output[669] * -0.085952;
    output[5] += flatten_output[670] * -0.010773;
    output[5] += flatten_output[671] * 0.009412;
    output[5] += flatten_output[672] * -0.009960;
    output[5] += flatten_output[673] * -0.008067;
    output[5] += flatten_output[674] * -0.057486;
    output[5] += flatten_output[675] * -0.072919;
    output[5] = 1 / (1 + exp(-output[5]));
    output[6] = -0.003047;
    output[6] += flatten_output[0] * -0.000689;
    output[6] += flatten_output[1] * -0.025812;
    output[6] += flatten_output[2] * 0.032103;
    output[6] += flatten_output[3] * -0.022610;
    output[6] += flatten_output[4] * 0.012638;
    output[6] += flatten_output[5] * -0.005095;
    output[6] += flatten_output[6] * -0.004066;
    output[6] += flatten_output[7] * -0.006225;
    output[6] += flatten_output[8] * -0.002877;
    output[6] += flatten_output[9] * -0.005221;
    output[6] += flatten_output[10] * -0.021808;
    output[6] += flatten_output[11] * 0.007825;
    output[6] += flatten_output[12] * -0.017043;
    output[6] += flatten_output[13] * 0.001066;
    output[6] += flatten_output[14] * 0.022933;
    output[6] += flatten_output[15] * -0.010911;
    output[6] += flatten_output[16] * -0.012030;
    output[6] += flatten_output[17] * -0.012088;
    output[6] += flatten_output[18] * -0.015438;
    output[6] += flatten_output[19] * -0.010346;
    output[6] += flatten_output[20] * -0.017308;
    output[6] += flatten_output[21] * -0.004047;
    output[6] += flatten_output[22] * 0.005797;
    output[6] += flatten_output[23] * 0.003033;
    output[6] += flatten_output[24] * -0.007213;
    output[6] += flatten_output[25] * -0.009608;
    output[6] += flatten_output[26] * 0.010411;
    output[6] += flatten_output[27] * -0.011518;
    output[6] += flatten_output[28] * 0.013720;
    output[6] += flatten_output[29] * -0.014697;
    output[6] += flatten_output[30] * 0.001005;
    output[6] += flatten_output[31] * -0.007680;
    output[6] += flatten_output[32] * -0.013254;
    output[6] += flatten_output[33] * 0.002317;
    output[6] += flatten_output[34] * 0.006613;
    output[6] += flatten_output[35] * -0.002416;
    output[6] += flatten_output[36] * 0.000136;
    output[6] += flatten_output[37] * -0.007259;
    output[6] += flatten_output[38] * -0.002516;
    output[6] += flatten_output[39] * 0.018593;
    output[6] += flatten_output[40] * 0.004730;
    output[6] += flatten_output[41] * -0.004884;
    output[6] += flatten_output[42] * 0.004059;
    output[6] += flatten_output[43] * 0.004646;
    output[6] += flatten_output[44] * 0.005439;
    output[6] += flatten_output[45] * -0.004688;
    output[6] += flatten_output[46] * 0.018019;
    output[6] += flatten_output[47] * -0.013888;
    output[6] += flatten_output[48] * -0.018817;
    output[6] += flatten_output[49] * 0.005880;
    output[6] += flatten_output[50] * -0.011751;
    output[6] += flatten_output[51] * -0.003859;
    output[6] += flatten_output[52] * -0.022089;
    output[6] += flatten_output[53] * 0.013013;
    output[6] += flatten_output[54] * 0.002507;
    output[6] += flatten_output[55] * 0.007105;
    output[6] += flatten_output[56] * 0.012362;
    output[6] += flatten_output[57] * -0.021486;
    output[6] += flatten_output[58] * 0.013965;
    output[6] += flatten_output[59] * -0.011287;
    output[6] += flatten_output[60] * 0.013429;
    output[6] += flatten_output[61] * -0.011054;
    output[6] += flatten_output[62] * -0.006772;
    output[6] += flatten_output[63] * -0.006209;
    output[6] += flatten_output[64] * -0.013545;
    output[6] += flatten_output[65] * -0.001274;
    output[6] += flatten_output[66] * 0.025044;
    output[6] += flatten_output[67] * -0.011025;
    output[6] += flatten_output[68] * 0.001790;
    output[6] += flatten_output[69] * -0.015797;
    output[6] += flatten_output[70] * 0.000800;
    output[6] += flatten_output[71] * 0.006063;
    output[6] += flatten_output[72] * -0.008129;
    output[6] += flatten_output[73] * -0.010388;
    output[6] += flatten_output[74] * -0.022590;
    output[6] += flatten_output[75] * -0.016401;
    output[6] += flatten_output[76] * -0.020557;
    output[6] += flatten_output[77] * -0.010169;
    output[6] += flatten_output[78] * -0.003252;
    output[6] += flatten_output[79] * 0.009593;
    output[6] += flatten_output[80] * -0.017331;
    output[6] += flatten_output[81] * 0.001175;
    output[6] += flatten_output[82] * -0.013534;
    output[6] += flatten_output[83] * -0.012735;
    output[6] += flatten_output[84] * -0.006900;
    output[6] += flatten_output[85] * -0.005164;
    output[6] += flatten_output[86] * -0.000728;
    output[6] += flatten_output[87] * 0.010821;
    output[6] += flatten_output[88] * -0.013982;
    output[6] += flatten_output[89] * -0.016163;
    output[6] += flatten_output[90] * 0.020929;
    output[6] += flatten_output[91] * 0.005283;
    output[6] += flatten_output[92] * -0.007182;
    output[6] += flatten_output[93] * 0.008187;
    output[6] += flatten_output[94] * -0.010132;
    output[6] += flatten_output[95] * -0.013215;
    output[6] += flatten_output[96] * -0.021242;
    output[6] += flatten_output[97] * -0.021678;
    output[6] += flatten_output[98] * 0.021110;
    output[6] += flatten_output[99] * -0.014684;
    output[6] += flatten_output[100] * -0.000470;
    output[6] += flatten_output[101] * 0.009959;
    output[6] += flatten_output[102] * 0.000148;
    output[6] += flatten_output[103] * -0.000581;
    output[6] += flatten_output[104] * -0.012960;
    output[6] += flatten_output[105] * 0.009875;
    output[6] += flatten_output[106] * 0.005348;
    output[6] += flatten_output[107] * 0.012182;
    output[6] += flatten_output[108] * -0.010309;
    output[6] += flatten_output[109] * -0.025660;
    output[6] += flatten_output[110] * -0.001093;
    output[6] += flatten_output[111] * 0.002462;
    output[6] += flatten_output[112] * -0.013714;
    output[6] += flatten_output[113] * 0.004539;
    output[6] += flatten_output[114] * -0.002414;
    output[6] += flatten_output[115] * -0.009236;
    output[6] += flatten_output[116] * -0.000766;
    output[6] += flatten_output[117] * 0.000620;
    output[6] += flatten_output[118] * -0.015486;
    output[6] += flatten_output[119] * 0.004907;
    output[6] += flatten_output[120] * -0.003474;
    output[6] += flatten_output[121] * -0.006585;
    output[6] += flatten_output[122] * 0.011245;
    output[6] += flatten_output[123] * -0.010181;
    output[6] += flatten_output[124] * -0.014644;
    output[6] += flatten_output[125] * -0.000850;
    output[6] += flatten_output[126] * -0.026581;
    output[6] += flatten_output[127] * 0.010868;
    output[6] += flatten_output[128] * 0.010414;
    output[6] += flatten_output[129] * 0.014383;
    output[6] += flatten_output[130] * 0.031254;
    output[6] += flatten_output[131] * 0.044326;
    output[6] += flatten_output[132] * 0.039960;
    output[6] += flatten_output[133] * -0.014218;
    output[6] += flatten_output[134] * 0.021619;
    output[6] += flatten_output[135] * 0.000295;
    output[6] += flatten_output[136] * 0.009560;
    output[6] += flatten_output[137] * 0.011075;
    output[6] += flatten_output[138] * 0.016078;
    output[6] += flatten_output[139] * 0.028851;
    output[6] += flatten_output[140] * -0.021615;
    output[6] += flatten_output[141] * 0.032796;
    output[6] += flatten_output[142] * 0.027150;
    output[6] += flatten_output[143] * -0.003608;
    output[6] += flatten_output[144] * -0.023936;
    output[6] += flatten_output[145] * 0.031734;
    output[6] += flatten_output[146] * 0.006054;
    output[6] += flatten_output[147] * 0.040888;
    output[6] += flatten_output[148] * 0.037594;
    output[6] += flatten_output[149] * 0.015309;
    output[6] += flatten_output[150] * 0.002985;
    output[6] += flatten_output[151] * -0.011409;
    output[6] += flatten_output[152] * 0.006644;
    output[6] += flatten_output[153] * 0.012621;
    output[6] += flatten_output[154] * 0.030979;
    output[6] += flatten_output[155] * 0.078116;
    output[6] += flatten_output[156] * 0.028554;
    output[6] += flatten_output[157] * 0.054503;
    output[6] += flatten_output[158] * -0.001334;
    output[6] += flatten_output[159] * -0.014354;
    output[6] += flatten_output[160] * 0.004789;
    output[6] += flatten_output[161] * 0.024016;
    output[6] += flatten_output[162] * 0.005935;
    output[6] += flatten_output[163] * 0.061842;
    output[6] += flatten_output[164] * 0.042599;
    output[6] += flatten_output[165] * 0.017239;
    output[6] += flatten_output[166] * 0.030662;
    output[6] += flatten_output[167] * 0.007390;
    output[6] += flatten_output[168] * 0.034802;
    output[6] += flatten_output[169] * 0.000008;
    output[6] += flatten_output[170] * 0.025417;
    output[6] += flatten_output[171] * -0.003086;
    output[6] += flatten_output[172] * -0.022644;
    output[6] += flatten_output[173] * 0.040179;
    output[6] += flatten_output[174] * -0.002666;
    output[6] += flatten_output[175] * 0.006299;
    output[6] += flatten_output[176] * -0.007892;
    output[6] += flatten_output[177] * 0.035066;
    output[6] += flatten_output[178] * -0.000624;
    output[6] += flatten_output[179] * 0.052042;
    output[6] += flatten_output[180] * 0.061894;
    output[6] += flatten_output[181] * 0.014246;
    output[6] += flatten_output[182] * 0.008799;
    output[6] += flatten_output[183] * 0.001871;
    output[6] += flatten_output[184] * -0.008233;
    output[6] += flatten_output[185] * 0.057128;
    output[6] += flatten_output[186] * 0.023647;
    output[6] += flatten_output[187] * 0.064710;
    output[6] += flatten_output[188] * 0.054127;
    output[6] += flatten_output[189] * 0.079674;
    output[6] += flatten_output[190] * -0.018021;
    output[6] += flatten_output[191] * -0.018989;
    output[6] += flatten_output[192] * 0.011872;
    output[6] += flatten_output[193] * 0.044662;
    output[6] += flatten_output[194] * 0.030890;
    output[6] += flatten_output[195] * 0.110831;
    output[6] += flatten_output[196] * 0.067803;
    output[6] += flatten_output[197] * 0.025139;
    output[6] += flatten_output[198] * 0.019451;
    output[6] += flatten_output[199] * 0.005901;
    output[6] += flatten_output[200] * 0.063586;
    output[6] += flatten_output[201] * -0.007106;
    output[6] += flatten_output[202] * 0.052768;
    output[6] += flatten_output[203] * 0.037677;
    output[6] += flatten_output[204] * 0.048757;
    output[6] += flatten_output[205] * 0.063364;
    output[6] += flatten_output[206] * 0.021122;
    output[6] += flatten_output[207] * 0.015077;
    output[6] += flatten_output[208] * 0.027488;
    output[6] += flatten_output[209] * 0.064285;
    output[6] += flatten_output[210] * 0.010564;
    output[6] += flatten_output[211] * 0.046888;
    output[6] += flatten_output[212] * 0.080421;
    output[6] += flatten_output[213] * 0.074492;
    output[6] += flatten_output[214] * 0.018486;
    output[6] += flatten_output[215] * 0.030558;
    output[6] += flatten_output[216] * 0.005391;
    output[6] += flatten_output[217] * 0.072755;
    output[6] += flatten_output[218] * 0.025739;
    output[6] += flatten_output[219] * 0.086369;
    output[6] += flatten_output[220] * 0.068351;
    output[6] += flatten_output[221] * 0.128586;
    output[6] += flatten_output[222] * -0.008556;
    output[6] += flatten_output[223] * -0.008325;
    output[6] += flatten_output[224] * 0.079444;
    output[6] += flatten_output[225] * 0.050450;
    output[6] += flatten_output[226] * 0.028755;
    output[6] += flatten_output[227] * 0.073574;
    output[6] += flatten_output[228] * 0.029951;
    output[6] += flatten_output[229] * 0.031273;
    output[6] += flatten_output[230] * -0.002454;
    output[6] += flatten_output[231] * -0.013638;
    output[6] += flatten_output[232] * 0.060717;
    output[6] += flatten_output[233] * 0.000330;
    output[6] += flatten_output[234] * -0.000966;
    output[6] += flatten_output[235] * -0.011528;
    output[6] += flatten_output[236] * 0.090725;
    output[6] += flatten_output[237] * 0.025405;
    output[6] += flatten_output[238] * 0.019354;
    output[6] += flatten_output[239] * -0.019790;
    output[6] += flatten_output[240] * 0.062910;
    output[6] += flatten_output[241] * 0.046354;
    output[6] += flatten_output[242] * 0.019453;
    output[6] += flatten_output[243] * 0.027007;
    output[6] += flatten_output[244] * 0.021667;
    output[6] += flatten_output[245] * 0.083563;
    output[6] += flatten_output[246] * -0.000631;
    output[6] += flatten_output[247] * 0.054169;
    output[6] += flatten_output[248] * -0.006484;
    output[6] += flatten_output[249] * 0.032706;
    output[6] += flatten_output[250] * 0.073117;
    output[6] += flatten_output[251] * 0.006546;
    output[6] += flatten_output[252] * 0.049000;
    output[6] += flatten_output[253] * 0.078210;
    output[6] += flatten_output[254] * -0.006602;
    output[6] += flatten_output[255] * -0.021358;
    output[6] += flatten_output[256] * 0.007318;
    output[6] += flatten_output[257] * 0.011289;
    output[6] += flatten_output[258] * 0.031791;
    output[6] += flatten_output[259] * 0.066531;
    output[6] += flatten_output[260] * 0.027050;
    output[6] += flatten_output[261] * 0.029607;
    output[6] += flatten_output[262] * 0.011350;
    output[6] += flatten_output[263] * -0.002105;
    output[6] += flatten_output[264] * 0.044424;
    output[6] += flatten_output[265] * 0.008081;
    output[6] += flatten_output[266] * 0.011321;
    output[6] += flatten_output[267] * -0.001407;
    output[6] += flatten_output[268] * 0.071116;
    output[6] += flatten_output[269] * 0.015474;
    output[6] += flatten_output[270] * 0.007252;
    output[6] += flatten_output[271] * -0.011887;
    output[6] += flatten_output[272] * 0.046992;
    output[6] += flatten_output[273] * 0.058751;
    output[6] += flatten_output[274] * 0.037785;
    output[6] += flatten_output[275] * 0.047977;
    output[6] += flatten_output[276] * 0.052428;
    output[6] += flatten_output[277] * 0.072752;
    output[6] += flatten_output[278] * 0.028036;
    output[6] += flatten_output[279] * 0.049396;
    output[6] += flatten_output[280] * 0.013117;
    output[6] += flatten_output[281] * 0.038891;
    output[6] += flatten_output[282] * 0.067700;
    output[6] += flatten_output[283] * 0.109977;
    output[6] += flatten_output[284] * 0.052655;
    output[6] += flatten_output[285] * 0.059570;
    output[6] += flatten_output[286] * -0.031835;
    output[6] += flatten_output[287] * -0.017676;
    output[6] += flatten_output[288] * -0.019301;
    output[6] += flatten_output[289] * 0.056942;
    output[6] += flatten_output[290] * 0.025400;
    output[6] += flatten_output[291] * 0.093180;
    output[6] += flatten_output[292] * 0.074948;
    output[6] += flatten_output[293] * 0.028615;
    output[6] += flatten_output[294] * 0.085146;
    output[6] += flatten_output[295] * -0.000252;
    output[6] += flatten_output[296] * 0.066157;
    output[6] += flatten_output[297] * -0.007057;
    output[6] += flatten_output[298] * 0.075402;
    output[6] += flatten_output[299] * 0.012905;
    output[6] += flatten_output[300] * 0.040203;
    output[6] += flatten_output[301] * 0.096509;
    output[6] += flatten_output[302] * -0.000894;
    output[6] += flatten_output[303] * -0.014429;
    output[6] += flatten_output[304] * 0.028391;
    output[6] += flatten_output[305] * 0.069608;
    output[6] += flatten_output[306] * 0.001489;
    output[6] += flatten_output[307] * 0.062781;
    output[6] += flatten_output[308] * 0.079126;
    output[6] += flatten_output[309] * 0.019664;
    output[6] += flatten_output[310] * 0.027886;
    output[6] += flatten_output[311] * 0.044571;
    output[6] += flatten_output[312] * -0.020361;
    output[6] += flatten_output[313] * 0.052971;
    output[6] += flatten_output[314] * 0.060628;
    output[6] += flatten_output[315] * 0.082307;
    output[6] += flatten_output[316] * 0.064682;
    output[6] += flatten_output[317] * 0.075840;
    output[6] += flatten_output[318] * -0.036627;
    output[6] += flatten_output[319] * -0.040303;
    output[6] += flatten_output[320] * 0.089578;
    output[6] += flatten_output[321] * 0.091823;
    output[6] += flatten_output[322] * 0.032427;
    output[6] += flatten_output[323] * 0.064104;
    output[6] += flatten_output[324] * 0.074657;
    output[6] += flatten_output[325] * 0.020433;
    output[6] += flatten_output[326] * 0.003280;
    output[6] += flatten_output[327] * 0.015182;
    output[6] += flatten_output[328] * 0.059700;
    output[6] += flatten_output[329] * -0.014663;
    output[6] += flatten_output[330] * 0.055614;
    output[6] += flatten_output[331] * 0.019041;
    output[6] += flatten_output[332] * 0.008491;
    output[6] += flatten_output[333] * 0.068831;
    output[6] += flatten_output[334] * -0.008189;
    output[6] += flatten_output[335] * 0.043679;
    output[6] += flatten_output[336] * 0.046953;
    output[6] += flatten_output[337] * 0.085358;
    output[6] += flatten_output[338] * -0.008128;
    output[6] += flatten_output[339] * 0.056687;
    output[6] += flatten_output[340] * 0.051021;
    output[6] += flatten_output[341] * 0.023109;
    output[6] += flatten_output[342] * 0.050068;
    output[6] += flatten_output[343] * 0.041357;
    output[6] += flatten_output[344] * -0.001618;
    output[6] += flatten_output[345] * 0.097955;
    output[6] += flatten_output[346] * 0.060024;
    output[6] += flatten_output[347] * 0.032534;
    output[6] += flatten_output[348] * 0.045977;
    output[6] += flatten_output[349] * 0.076103;
    output[6] += flatten_output[350] * -0.014009;
    output[6] += flatten_output[351] * 0.005136;
    output[6] += flatten_output[352] * 0.120016;
    output[6] += flatten_output[353] * 0.012370;
    output[6] += flatten_output[354] * 0.036998;
    output[6] += flatten_output[355] * 0.042824;
    output[6] += flatten_output[356] * 0.016722;
    output[6] += flatten_output[357] * 0.047986;
    output[6] += flatten_output[358] * -0.005771;
    output[6] += flatten_output[359] * -0.012763;
    output[6] += flatten_output[360] * 0.052604;
    output[6] += flatten_output[361] * 0.013364;
    output[6] += flatten_output[362] * -0.002401;
    output[6] += flatten_output[363] * 0.006027;
    output[6] += flatten_output[364] * 0.083917;
    output[6] += flatten_output[365] * -0.001993;
    output[6] += flatten_output[366] * 0.019966;
    output[6] += flatten_output[367] * -0.017327;
    output[6] += flatten_output[368] * 0.050149;
    output[6] += flatten_output[369] * 0.000605;
    output[6] += flatten_output[370] * 0.049117;
    output[6] += flatten_output[371] * 0.053598;
    output[6] += flatten_output[372] * 0.008950;
    output[6] += flatten_output[373] * 0.094585;
    output[6] += flatten_output[374] * 0.022567;
    output[6] += flatten_output[375] * 0.042921;
    output[6] += flatten_output[376] * 0.000413;
    output[6] += flatten_output[377] * 0.011719;
    output[6] += flatten_output[378] * 0.073207;
    output[6] += flatten_output[379] * 0.123721;
    output[6] += flatten_output[380] * 0.013694;
    output[6] += flatten_output[381] * 0.053867;
    output[6] += flatten_output[382] * -0.019707;
    output[6] += flatten_output[383] * -0.012460;
    output[6] += flatten_output[384] * -0.022101;
    output[6] += flatten_output[385] * -0.007779;
    output[6] += flatten_output[386] * 0.006606;
    output[6] += flatten_output[387] * 0.042054;
    output[6] += flatten_output[388] * 0.028361;
    output[6] += flatten_output[389] * 0.052891;
    output[6] += flatten_output[390] * 0.097367;
    output[6] += flatten_output[391] * -0.031584;
    output[6] += flatten_output[392] * 0.049530;
    output[6] += flatten_output[393] * 0.014815;
    output[6] += flatten_output[394] * 0.026456;
    output[6] += flatten_output[395] * -0.028868;
    output[6] += flatten_output[396] * 0.139862;
    output[6] += flatten_output[397] * 0.035999;
    output[6] += flatten_output[398] * 0.025172;
    output[6] += flatten_output[399] * -0.018041;
    output[6] += flatten_output[400] * 0.051620;
    output[6] += flatten_output[401] * 0.006068;
    output[6] += flatten_output[402] * 0.114758;
    output[6] += flatten_output[403] * 0.031388;
    output[6] += flatten_output[404] * 0.058001;
    output[6] += flatten_output[405] * 0.049871;
    output[6] += flatten_output[406] * 0.019946;
    output[6] += flatten_output[407] * 0.055578;
    output[6] += flatten_output[408] * -0.026758;
    output[6] += flatten_output[409] * 0.008380;
    output[6] += flatten_output[410] * 0.048936;
    output[6] += flatten_output[411] * 0.058035;
    output[6] += flatten_output[412] * 0.043431;
    output[6] += flatten_output[413] * 0.029126;
    output[6] += flatten_output[414] * -0.038709;
    output[6] += flatten_output[415] * -0.052011;
    output[6] += flatten_output[416] * 0.119444;
    output[6] += flatten_output[417] * 0.071908;
    output[6] += flatten_output[418] * 0.001812;
    output[6] += flatten_output[419] * 0.031680;
    output[6] += flatten_output[420] * 0.036088;
    output[6] += flatten_output[421] * 0.047005;
    output[6] += flatten_output[422] * 0.110192;
    output[6] += flatten_output[423] * -0.013213;
    output[6] += flatten_output[424] * 0.032395;
    output[6] += flatten_output[425] * 0.010669;
    output[6] += flatten_output[426] * 0.102964;
    output[6] += flatten_output[427] * -0.030226;
    output[6] += flatten_output[428] * 0.020286;
    output[6] += flatten_output[429] * 0.145533;
    output[6] += flatten_output[430] * 0.000707;
    output[6] += flatten_output[431] * -0.019553;
    output[6] += flatten_output[432] * 0.069481;
    output[6] += flatten_output[433] * 0.042854;
    output[6] += flatten_output[434] * -0.034992;
    output[6] += flatten_output[435] * 0.027531;
    output[6] += flatten_output[436] * 0.047692;
    output[6] += flatten_output[437] * -0.003117;
    output[6] += flatten_output[438] * 0.015259;
    output[6] += flatten_output[439] * 0.012134;
    output[6] += flatten_output[440] * -0.027042;
    output[6] += flatten_output[441] * 0.066496;
    output[6] += flatten_output[442] * 0.039429;
    output[6] += flatten_output[443] * 0.087157;
    output[6] += flatten_output[444] * 0.036770;
    output[6] += flatten_output[445] * 0.040381;
    output[6] += flatten_output[446] * -0.017492;
    output[6] += flatten_output[447] * -0.025367;
    output[6] += flatten_output[448] * 0.050224;
    output[6] += flatten_output[449] * 0.092505;
    output[6] += flatten_output[450] * -0.009398;
    output[6] += flatten_output[451] * 0.097715;
    output[6] += flatten_output[452] * 0.039606;
    output[6] += flatten_output[453] * 0.020526;
    output[6] += flatten_output[454] * 0.061452;
    output[6] += flatten_output[455] * 0.002081;
    output[6] += flatten_output[456] * 0.035809;
    output[6] += flatten_output[457] * 0.005706;
    output[6] += flatten_output[458] * 0.140952;
    output[6] += flatten_output[459] * -0.035390;
    output[6] += flatten_output[460] * 0.067589;
    output[6] += flatten_output[461] * 0.176892;
    output[6] += flatten_output[462] * 0.022166;
    output[6] += flatten_output[463] * -0.010547;
    output[6] += flatten_output[464] * 0.013546;
    output[6] += flatten_output[465] * 0.052252;
    output[6] += flatten_output[466] * 0.025351;
    output[6] += flatten_output[467] * 0.010618;
    output[6] += flatten_output[468] * 0.047818;
    output[6] += flatten_output[469] * 0.061815;
    output[6] += flatten_output[470] * 0.017240;
    output[6] += flatten_output[471] * 0.032167;
    output[6] += flatten_output[472] * -0.016005;
    output[6] += flatten_output[473] * 0.063727;
    output[6] += flatten_output[474] * 0.049345;
    output[6] += flatten_output[475] * 0.045898;
    output[6] += flatten_output[476] * 0.041872;
    output[6] += flatten_output[477] * 0.097890;
    output[6] += flatten_output[478] * -0.030738;
    output[6] += flatten_output[479] * -0.028943;
    output[6] += flatten_output[480] * 0.062396;
    output[6] += flatten_output[481] * 0.069401;
    output[6] += flatten_output[482] * 0.007085;
    output[6] += flatten_output[483] * 0.161461;
    output[6] += flatten_output[484] * 0.050384;
    output[6] += flatten_output[485] * 0.019053;
    output[6] += flatten_output[486] * 0.031156;
    output[6] += flatten_output[487] * -0.023797;
    output[6] += flatten_output[488] * 0.053447;
    output[6] += flatten_output[489] * -0.007060;
    output[6] += flatten_output[490] * 0.084221;
    output[6] += flatten_output[491] * -0.008136;
    output[6] += flatten_output[492] * 0.100057;
    output[6] += flatten_output[493] * 0.093510;
    output[6] += flatten_output[494] * 0.031480;
    output[6] += flatten_output[495] * -0.002806;
    output[6] += flatten_output[496] * 0.026886;
    output[6] += flatten_output[497] * 0.043322;
    output[6] += flatten_output[498] * 0.075713;
    output[6] += flatten_output[499] * 0.027539;
    output[6] += flatten_output[500] * 0.048923;
    output[6] += flatten_output[501] * 0.078982;
    output[6] += flatten_output[502] * -0.001399;
    output[6] += flatten_output[503] * 0.023984;
    output[6] += flatten_output[504] * -0.018052;
    output[6] += flatten_output[505] * 0.050188;
    output[6] += flatten_output[506] * 0.049332;
    output[6] += flatten_output[507] * 0.052508;
    output[6] += flatten_output[508] * 0.043218;
    output[6] += flatten_output[509] * 0.154947;
    output[6] += flatten_output[510] * -0.021296;
    output[6] += flatten_output[511] * -0.039079;
    output[6] += flatten_output[512] * 0.091804;
    output[6] += flatten_output[513] * 0.077879;
    output[6] += flatten_output[514] * -0.000308;
    output[6] += flatten_output[515] * 0.138151;
    output[6] += flatten_output[516] * 0.053089;
    output[6] += flatten_output[517] * 0.043884;
    output[6] += flatten_output[518] * 0.082217;
    output[6] += flatten_output[519] * -0.022686;
    output[6] += flatten_output[520] * 0.031336;
    output[6] += flatten_output[521] * -0.008849;
    output[6] += flatten_output[522] * 0.085748;
    output[6] += flatten_output[523] * 0.065199;
    output[6] += flatten_output[524] * 0.100080;
    output[6] += flatten_output[525] * 0.112437;
    output[6] += flatten_output[526] * 0.009427;
    output[6] += flatten_output[527] * 0.030281;
    output[6] += flatten_output[528] * 0.041578;
    output[6] += flatten_output[529] * 0.050435;
    output[6] += flatten_output[530] * 0.081823;
    output[6] += flatten_output[531] * 0.101191;
    output[6] += flatten_output[532] * 0.070374;
    output[6] += flatten_output[533] * 0.074606;
    output[6] += flatten_output[534] * 0.038243;
    output[6] += flatten_output[535] * 0.043016;
    output[6] += flatten_output[536] * -0.024327;
    output[6] += flatten_output[537] * 0.080939;
    output[6] += flatten_output[538] * 0.076859;
    output[6] += flatten_output[539] * 0.083928;
    output[6] += flatten_output[540] * 0.050341;
    output[6] += flatten_output[541] * 0.138906;
    output[6] += flatten_output[542] * -0.018072;
    output[6] += flatten_output[543] * -0.035892;
    output[6] += flatten_output[544] * 0.025175;
    output[6] += flatten_output[545] * 0.067771;
    output[6] += flatten_output[546] * -0.010449;
    output[6] += flatten_output[547] * 0.144926;
    output[6] += flatten_output[548] * 0.060770;
    output[6] += flatten_output[549] * 0.031661;
    output[6] += flatten_output[550] * 0.058928;
    output[6] += flatten_output[551] * -0.016740;
    output[6] += flatten_output[552] * 0.049946;
    output[6] += flatten_output[553] * -0.000066;
    output[6] += flatten_output[554] * 0.112501;
    output[6] += flatten_output[555] * -0.000424;
    output[6] += flatten_output[556] * 0.055462;
    output[6] += flatten_output[557] * 0.164758;
    output[6] += flatten_output[558] * 0.014458;
    output[6] += flatten_output[559] * 0.010116;
    output[6] += flatten_output[560] * 0.028089;
    output[6] += flatten_output[561] * 0.067856;
    output[6] += flatten_output[562] * 0.050046;
    output[6] += flatten_output[563] * 0.068899;
    output[6] += flatten_output[564] * 0.038011;
    output[6] += flatten_output[565] * 0.098016;
    output[6] += flatten_output[566] * 0.012482;
    output[6] += flatten_output[567] * 0.048585;
    output[6] += flatten_output[568] * -0.026948;
    output[6] += flatten_output[569] * 0.076595;
    output[6] += flatten_output[570] * 0.019269;
    output[6] += flatten_output[571] * 0.021464;
    output[6] += flatten_output[572] * 0.041588;
    output[6] += flatten_output[573] * 0.131837;
    output[6] += flatten_output[574] * -0.031615;
    output[6] += flatten_output[575] * -0.015410;
    output[6] += flatten_output[576] * 0.011529;
    output[6] += flatten_output[577] * 0.013766;
    output[6] += flatten_output[578] * 0.007120;
    output[6] += flatten_output[579] * 0.149829;
    output[6] += flatten_output[580] * 0.041650;
    output[6] += flatten_output[581] * 0.054196;
    output[6] += flatten_output[582] * 0.072126;
    output[6] += flatten_output[583] * -0.017297;
    output[6] += flatten_output[584] * 0.032904;
    output[6] += flatten_output[585] * -0.010724;
    output[6] += flatten_output[586] * 0.094100;
    output[6] += flatten_output[587] * -0.002656;
    output[6] += flatten_output[588] * 0.115770;
    output[6] += flatten_output[589] * 0.115230;
    output[6] += flatten_output[590] * 0.002900;
    output[6] += flatten_output[591] * 0.006875;
    output[6] += flatten_output[592] * 0.061037;
    output[6] += flatten_output[593] * 0.052764;
    output[6] += flatten_output[594] * 0.082759;
    output[6] += flatten_output[595] * 0.036488;
    output[6] += flatten_output[596] * 0.071436;
    output[6] += flatten_output[597] * 0.110689;
    output[6] += flatten_output[598] * -0.007537;
    output[6] += flatten_output[599] * 0.060817;
    output[6] += flatten_output[600] * -0.000598;
    output[6] += flatten_output[601] * 0.081551;
    output[6] += flatten_output[602] * 0.126338;
    output[6] += flatten_output[603] * 0.122452;
    output[6] += flatten_output[604] * 0.041000;
    output[6] += flatten_output[605] * 0.161414;
    output[6] += flatten_output[606] * -0.009096;
    output[6] += flatten_output[607] * -0.025336;
    output[6] += flatten_output[608] * 0.105974;
    output[6] += flatten_output[609] * 0.082933;
    output[6] += flatten_output[610] * 0.008214;
    output[6] += flatten_output[611] * 0.181594;
    output[6] += flatten_output[612] * 0.051568;
    output[6] += flatten_output[613] * 0.037737;
    output[6] += flatten_output[614] * 0.035141;
    output[6] += flatten_output[615] * -0.009227;
    output[6] += flatten_output[616] * 0.033775;
    output[6] += flatten_output[617] * -0.003823;
    output[6] += flatten_output[618] * 0.085408;
    output[6] += flatten_output[619] * -0.021204;
    output[6] += flatten_output[620] * 0.125504;
    output[6] += flatten_output[621] * 0.127314;
    output[6] += flatten_output[622] * 0.020004;
    output[6] += flatten_output[623] * -0.000960;
    output[6] += flatten_output[624] * 0.050645;
    output[6] += flatten_output[625] * 0.062649;
    output[6] += flatten_output[626] * 0.098010;
    output[6] += flatten_output[627] * 0.072702;
    output[6] += flatten_output[628] * 0.086344;
    output[6] += flatten_output[629] * 0.086057;
    output[6] += flatten_output[630] * -0.002462;
    output[6] += flatten_output[631] * 0.032231;
    output[6] += flatten_output[632] * -0.022267;
    output[6] += flatten_output[633] * 0.089192;
    output[6] += flatten_output[634] * 0.092456;
    output[6] += flatten_output[635] * 0.089627;
    output[6] += flatten_output[636] * 0.055833;
    output[6] += flatten_output[637] * 0.179864;
    output[6] += flatten_output[638] * -0.028159;
    output[6] += flatten_output[639] * -0.044580;
    output[6] += flatten_output[640] * 0.082500;
    output[6] += flatten_output[641] * 0.045879;
    output[6] += flatten_output[642] * 0.021106;
    output[6] += flatten_output[643] * 0.164849;
    output[6] += flatten_output[644] * 0.045024;
    output[6] += flatten_output[645] * 0.057447;
    output[6] += flatten_output[646] * 0.032732;
    output[6] += flatten_output[647] * -0.001895;
    output[6] += flatten_output[648] * 0.079626;
    output[6] += flatten_output[649] * 0.002569;
    output[6] += flatten_output[650] * 0.060898;
    output[6] += flatten_output[651] * -0.005200;
    output[6] += flatten_output[652] * 0.146973;
    output[6] += flatten_output[653] * 0.094336;
    output[6] += flatten_output[654] * 0.023797;
    output[6] += flatten_output[655] * 0.003046;
    output[6] += flatten_output[656] * 0.065719;
    output[6] += flatten_output[657] * 0.046946;
    output[6] += flatten_output[658] * 0.063005;
    output[6] += flatten_output[659] * 0.046128;
    output[6] += flatten_output[660] * 0.068036;
    output[6] += flatten_output[661] * 0.116389;
    output[6] += flatten_output[662] * 0.007981;
    output[6] += flatten_output[663] * 0.041795;
    output[6] += flatten_output[664] * -0.000882;
    output[6] += flatten_output[665] * 0.071667;
    output[6] += flatten_output[666] * 0.098887;
    output[6] += flatten_output[667] * 0.054708;
    output[6] += flatten_output[668] * 0.062130;
    output[6] += flatten_output[669] * 0.176900;
    output[6] += flatten_output[670] * 0.005454;
    output[6] += flatten_output[671] * -0.034428;
    output[6] += flatten_output[672] * 0.035323;
    output[6] += flatten_output[673] * 0.019002;
    output[6] += flatten_output[674] * 0.024675;
    output[6] += flatten_output[675] * 0.163561;
    output[6] = 1 / (1 + exp(-output[6]));
    output[7] = 0.028796;
    output[7] += flatten_output[0] * 0.001969;
    output[7] += flatten_output[1] * 0.021841;
    output[7] += flatten_output[2] * 0.042191;
    output[7] += flatten_output[3] * 0.016987;
    output[7] += flatten_output[4] * -0.005017;
    output[7] += flatten_output[5] * -0.004797;
    output[7] += flatten_output[6] * 0.000177;
    output[7] += flatten_output[7] * 0.012265;
    output[7] += flatten_output[8] * 0.019761;
    output[7] += flatten_output[9] * -0.010411;
    output[7] += flatten_output[10] * 0.013873;
    output[7] += flatten_output[11] * 0.027841;
    output[7] += flatten_output[12] * 0.012692;
    output[7] += flatten_output[13] * -0.018034;
    output[7] += flatten_output[14] * 0.039073;
    output[7] += flatten_output[15] * -0.006989;
    output[7] += flatten_output[16] * -0.007472;
    output[7] += flatten_output[17] * 0.008807;
    output[7] += flatten_output[18] * 0.004985;
    output[7] += flatten_output[19] * 0.004563;
    output[7] += flatten_output[20] * -0.009084;
    output[7] += flatten_output[21] * 0.018135;
    output[7] += flatten_output[22] * 0.011349;
    output[7] += flatten_output[23] * 0.008809;
    output[7] += flatten_output[24] * 0.011117;
    output[7] += flatten_output[25] * 0.002694;
    output[7] += flatten_output[26] * 0.021237;
    output[7] += flatten_output[27] * 0.017247;
    output[7] += flatten_output[28] * -0.002090;
    output[7] += flatten_output[29] * -0.022194;
    output[7] += flatten_output[30] * -0.027376;
    output[7] += flatten_output[31] * 0.037019;
    output[7] += flatten_output[32] * -0.002278;
    output[7] += flatten_output[33] * 0.002443;
    output[7] += flatten_output[34] * 0.025153;
    output[7] += flatten_output[35] * 0.003164;
    output[7] += flatten_output[36] * -0.004518;
    output[7] += flatten_output[37] * 0.002371;
    output[7] += flatten_output[38] * 0.003048;
    output[7] += flatten_output[39] * 0.020179;
    output[7] += flatten_output[40] * 0.011644;
    output[7] += flatten_output[41] * -0.013283;
    output[7] += flatten_output[42] * 0.005334;
    output[7] += flatten_output[43] * 0.016887;
    output[7] += flatten_output[44] * 0.007577;
    output[7] += flatten_output[45] * -0.014350;
    output[7] += flatten_output[46] * 0.042256;
    output[7] += flatten_output[47] * -0.012108;
    output[7] += flatten_output[48] * -0.030228;
    output[7] += flatten_output[49] * 0.021143;
    output[7] += flatten_output[50] * -0.002372;
    output[7] += flatten_output[51] * 0.011627;
    output[7] += flatten_output[52] * 0.010860;
    output[7] += flatten_output[53] * 0.019169;
    output[7] += flatten_output[54] * -0.003432;
    output[7] += flatten_output[55] * 0.022204;
    output[7] += flatten_output[56] * 0.001248;
    output[7] += flatten_output[57] * -0.004745;
    output[7] += flatten_output[58] * 0.030900;
    output[7] += flatten_output[59] * 0.015185;
    output[7] += flatten_output[60] * -0.015201;
    output[7] += flatten_output[61] * 0.001503;
    output[7] += flatten_output[62] * -0.037375;
    output[7] += flatten_output[63] * 0.038536;
    output[7] += flatten_output[64] * 0.013107;
    output[7] += flatten_output[65] * 0.005349;
    output[7] += flatten_output[66] * 0.013562;
    output[7] += flatten_output[67] * 0.013650;
    output[7] += flatten_output[68] * 0.018685;
    output[7] += flatten_output[69] * 0.018473;
    output[7] += flatten_output[70] * 0.018468;
    output[7] += flatten_output[71] * 0.019198;
    output[7] += flatten_output[72] * 0.019084;
    output[7] += flatten_output[73] * 0.005650;
    output[7] += flatten_output[74] * 0.002012;
    output[7] += flatten_output[75] * 0.021015;
    output[7] += flatten_output[76] * 0.000153;
    output[7] += flatten_output[77] * -0.033894;
    output[7] += flatten_output[78] * 0.046646;
    output[7] += flatten_output[79] * 0.001340;
    output[7] += flatten_output[80] * -0.035290;
    output[7] += flatten_output[81] * 0.015572;
    output[7] += flatten_output[82] * 0.014293;
    output[7] += flatten_output[83] * -0.012079;
    output[7] += flatten_output[84] * 0.002285;
    output[7] += flatten_output[85] * 0.030087;
    output[7] += flatten_output[86] * -0.000368;
    output[7] += flatten_output[87] * 0.015205;
    output[7] += flatten_output[88] * 0.030494;
    output[7] += flatten_output[89] * 0.012203;
    output[7] += flatten_output[90] * 0.031405;
    output[7] += flatten_output[91] * 0.001870;
    output[7] += flatten_output[92] * -0.008016;
    output[7] += flatten_output[93] * -0.019676;
    output[7] += flatten_output[94] * -0.037895;
    output[7] += flatten_output[95] * 0.026680;
    output[7] += flatten_output[96] * 0.007433;
    output[7] += flatten_output[97] * 0.010763;
    output[7] += flatten_output[98] * 0.035241;
    output[7] += flatten_output[99] * 0.022227;
    output[7] += flatten_output[100] * 0.019710;
    output[7] += flatten_output[101] * 0.008715;
    output[7] += flatten_output[102] * -0.004175;
    output[7] += flatten_output[103] * 0.034055;
    output[7] += flatten_output[104] * 0.021632;
    output[7] += flatten_output[105] * -0.010097;
    output[7] += flatten_output[106] * 0.002854;
    output[7] += flatten_output[107] * 0.016824;
    output[7] += flatten_output[108] * -0.010081;
    output[7] += flatten_output[109] * -0.041387;
    output[7] += flatten_output[110] * 0.025115;
    output[7] += flatten_output[111] * -0.010811;
    output[7] += flatten_output[112] * -0.032747;
    output[7] += flatten_output[113] * 0.023350;
    output[7] += flatten_output[114] * 0.023043;
    output[7] += flatten_output[115] * -0.017681;
    output[7] += flatten_output[116] * 0.002511;
    output[7] += flatten_output[117] * 0.008885;
    output[7] += flatten_output[118] * 0.010583;
    output[7] += flatten_output[119] * 0.011645;
    output[7] += flatten_output[120] * 0.015200;
    output[7] += flatten_output[121] * 0.002005;
    output[7] += flatten_output[122] * 0.041565;
    output[7] += flatten_output[123] * -0.000024;
    output[7] += flatten_output[124] * -0.010040;
    output[7] += flatten_output[125] * -0.012378;
    output[7] += flatten_output[126] * -0.020896;
    output[7] += flatten_output[127] * 0.033620;
    output[7] += flatten_output[128] * -0.007247;
    output[7] += flatten_output[129] * -0.007594;
    output[7] += flatten_output[130] * 0.034679;
    output[7] += flatten_output[131] * 0.016036;
    output[7] += flatten_output[132] * -0.001542;
    output[7] += flatten_output[133] * -0.005374;
    output[7] += flatten_output[134] * -0.000903;
    output[7] += flatten_output[135] * 0.017135;
    output[7] += flatten_output[136] * 0.012652;
    output[7] += flatten_output[137] * 0.005675;
    output[7] += flatten_output[138] * -0.010515;
    output[7] += flatten_output[139] * 0.011621;
    output[7] += flatten_output[140] * -0.008858;
    output[7] += flatten_output[141] * -0.021760;
    output[7] += flatten_output[142] * 0.026431;
    output[7] += flatten_output[143] * -0.006365;
    output[7] += flatten_output[144] * -0.037714;
    output[7] += flatten_output[145] * 0.022978;
    output[7] += flatten_output[146] * 0.017781;
    output[7] += flatten_output[147] * -0.012185;
    output[7] += flatten_output[148] * 0.007257;
    output[7] += flatten_output[149] * 0.009068;
    output[7] += flatten_output[150] * 0.022998;
    output[7] += flatten_output[151] * 0.017917;
    output[7] += flatten_output[152] * 0.014145;
    output[7] += flatten_output[153] * 0.022888;
    output[7] += flatten_output[154] * 0.020551;
    output[7] += flatten_output[155] * -0.015152;
    output[7] += flatten_output[156] * -0.002832;
    output[7] += flatten_output[157] * -0.005627;
    output[7] += flatten_output[158] * -0.026136;
    output[7] += flatten_output[159] * 0.035703;
    output[7] += flatten_output[160] * -0.005959;
    output[7] += flatten_output[161] * 0.014475;
    output[7] += flatten_output[162] * 0.011479;
    output[7] += flatten_output[163] * -0.003395;
    output[7] += flatten_output[164] * -0.020969;
    output[7] += flatten_output[165] * 0.017760;
    output[7] += flatten_output[166] * 0.025177;
    output[7] += flatten_output[167] * 0.005910;
    output[7] += flatten_output[168] * 0.022193;
    output[7] += flatten_output[169] * -0.005262;
    output[7] += flatten_output[170] * 0.010001;
    output[7] += flatten_output[171] * 0.017250;
    output[7] += flatten_output[172] * 0.011349;
    output[7] += flatten_output[173] * -0.043285;
    output[7] += flatten_output[174] * 0.044962;
    output[7] += flatten_output[175] * -0.010204;
    output[7] += flatten_output[176] * -0.017059;
    output[7] += flatten_output[177] * -0.000173;
    output[7] += flatten_output[178] * 0.020466;
    output[7] += flatten_output[179] * -0.016450;
    output[7] += flatten_output[180] * -0.013166;
    output[7] += flatten_output[181] * 0.011392;
    output[7] += flatten_output[182] * 0.012028;
    output[7] += flatten_output[183] * 0.016706;
    output[7] += flatten_output[184] * 0.015493;
    output[7] += flatten_output[185] * 0.011810;
    output[7] += flatten_output[186] * 0.019805;
    output[7] += flatten_output[187] * -0.000590;
    output[7] += flatten_output[188] * 0.005614;
    output[7] += flatten_output[189] * -0.021776;
    output[7] += flatten_output[190] * -0.035717;
    output[7] += flatten_output[191] * 0.030424;
    output[7] += flatten_output[192] * 0.007363;
    output[7] += flatten_output[193] * -0.007228;
    output[7] += flatten_output[194] * 0.016331;
    output[7] += flatten_output[195] * -0.002390;
    output[7] += flatten_output[196] * 0.002297;
    output[7] += flatten_output[197] * -0.015501;
    output[7] += flatten_output[198] * 0.020177;
    output[7] += flatten_output[199] * 0.021638;
    output[7] += flatten_output[200] * -0.008778;
    output[7] += flatten_output[201] * -0.007756;
    output[7] += flatten_output[202] * -0.013100;
    output[7] += flatten_output[203] * 0.002857;
    output[7] += flatten_output[204] * 0.013152;
    output[7] += flatten_output[205] * -0.026541;
    output[7] += flatten_output[206] * 0.038168;
    output[7] += flatten_output[207] * 0.010872;
    output[7] += flatten_output[208] * -0.028239;
    output[7] += flatten_output[209] * -0.017054;
    output[7] += flatten_output[210] * 0.001832;
    output[7] += flatten_output[211] * -0.003956;
    output[7] += flatten_output[212] * -0.020876;
    output[7] += flatten_output[213] * 0.009117;
    output[7] += flatten_output[214] * 0.002124;
    output[7] += flatten_output[215] * -0.001823;
    output[7] += flatten_output[216] * 0.015714;
    output[7] += flatten_output[217] * 0.015168;
    output[7] += flatten_output[218] * 0.032507;
    output[7] += flatten_output[219] * 0.009586;
    output[7] += flatten_output[220] * -0.023833;
    output[7] += flatten_output[221] * -0.021018;
    output[7] += flatten_output[222] * -0.027140;
    output[7] += flatten_output[223] * 0.038265;
    output[7] += flatten_output[224] * 0.014907;
    output[7] += flatten_output[225] * 0.000584;
    output[7] += flatten_output[226] * 0.041538;
    output[7] += flatten_output[227] * 0.001029;
    output[7] += flatten_output[228] * -0.010426;
    output[7] += flatten_output[229] * -0.016955;
    output[7] += flatten_output[230] * 0.009470;
    output[7] += flatten_output[231] * 0.014913;
    output[7] += flatten_output[232] * -0.008501;
    output[7] += flatten_output[233] * 0.016594;
    output[7] += flatten_output[234] * -0.014267;
    output[7] += flatten_output[235] * 0.024691;
    output[7] += flatten_output[236] * -0.014705;
    output[7] += flatten_output[237] * -0.044148;
    output[7] += flatten_output[238] * 0.024300;
    output[7] += flatten_output[239] * -0.005356;
    output[7] += flatten_output[240] * -0.012326;
    output[7] += flatten_output[241] * 0.001446;
    output[7] += flatten_output[242] * 0.018266;
    output[7] += flatten_output[243] * -0.014035;
    output[7] += flatten_output[244] * -0.020189;
    output[7] += flatten_output[245] * -0.012217;
    output[7] += flatten_output[246] * 0.000931;
    output[7] += flatten_output[247] * 0.006634;
    output[7] += flatten_output[248] * 0.013159;
    output[7] += flatten_output[249] * 0.004027;
    output[7] += flatten_output[250] * 0.026601;
    output[7] += flatten_output[251] * -0.011218;
    output[7] += flatten_output[252] * -0.010779;
    output[7] += flatten_output[253] * -0.024306;
    output[7] += flatten_output[254] * -0.021874;
    output[7] += flatten_output[255] * 0.019739;
    output[7] += flatten_output[256] * -0.002988;
    output[7] += flatten_output[257] * -0.005892;
    output[7] += flatten_output[258] * 0.042650;
    output[7] += flatten_output[259] * -0.010904;
    output[7] += flatten_output[260] * -0.024304;
    output[7] += flatten_output[261] * -0.013886;
    output[7] += flatten_output[262] * 0.009350;
    output[7] += flatten_output[263] * 0.006912;
    output[7] += flatten_output[264] * -0.010388;
    output[7] += flatten_output[265] * 0.015885;
    output[7] += flatten_output[266] * 0.005587;
    output[7] += flatten_output[267] * 0.030950;
    output[7] += flatten_output[268] * 0.015686;
    output[7] += flatten_output[269] * -0.020351;
    output[7] += flatten_output[270] * 0.031804;
    output[7] += flatten_output[271] * -0.010304;
    output[7] += flatten_output[272] * -0.013619;
    output[7] += flatten_output[273] * -0.013442;
    output[7] += flatten_output[274] * 0.015571;
    output[7] += flatten_output[275] * -0.027735;
    output[7] += flatten_output[276] * -0.011416;
    output[7] += flatten_output[277] * -0.016000;
    output[7] += flatten_output[278] * -0.004467;
    output[7] += flatten_output[279] * -0.012663;
    output[7] += flatten_output[280] * 0.009956;
    output[7] += flatten_output[281] * -0.019305;
    output[7] += flatten_output[282] * 0.027530;
    output[7] += flatten_output[283] * -0.019055;
    output[7] += flatten_output[284] * -0.045369;
    output[7] += flatten_output[285] * -0.052485;
    output[7] += flatten_output[286] * -0.012697;
    output[7] += flatten_output[287] * 0.032281;
    output[7] += flatten_output[288] * -0.004987;
    output[7] += flatten_output[289] * -0.031430;
    output[7] += flatten_output[290] * 0.037154;
    output[7] += flatten_output[291] * -0.040532;
    output[7] += flatten_output[292] * -0.042665;
    output[7] += flatten_output[293] * -0.018228;
    output[7] += flatten_output[294] * -0.008591;
    output[7] += flatten_output[295] * 0.039275;
    output[7] += flatten_output[296] * -0.014128;
    output[7] += flatten_output[297] * 0.003440;
    output[7] += flatten_output[298] * -0.006436;
    output[7] += flatten_output[299] * 0.013942;
    output[7] += flatten_output[300] * 0.008179;
    output[7] += flatten_output[301] * -0.050436;
    output[7] += flatten_output[302] * 0.044544;
    output[7] += flatten_output[303] * -0.004389;
    output[7] += flatten_output[304] * -0.048623;
    output[7] += flatten_output[305] * -0.015193;
    output[7] += flatten_output[306] * 0.000269;
    output[7] += flatten_output[307] * -0.036320;
    output[7] += flatten_output[308] * -0.023687;
    output[7] += flatten_output[309] * -0.013838;
    output[7] += flatten_output[310] * -0.016278;
    output[7] += flatten_output[311] * -0.022203;
    output[7] += flatten_output[312] * 0.025805;
    output[7] += flatten_output[313] * -0.021149;
    output[7] += flatten_output[314] * 0.002953;
    output[7] += flatten_output[315] * -0.021378;
    output[7] += flatten_output[316] * -0.042231;
    output[7] += flatten_output[317] * -0.062470;
    output[7] += flatten_output[318] * -0.022745;
    output[7] += flatten_output[319] * 0.035055;
    output[7] += flatten_output[320] * -0.002799;
    output[7] += flatten_output[321] * -0.037930;
    output[7] += flatten_output[322] * 0.019474;
    output[7] += flatten_output[323] * -0.048955;
    output[7] += flatten_output[324] * -0.058742;
    output[7] += flatten_output[325] * -0.001916;
    output[7] += flatten_output[326] * -0.013688;
    output[7] += flatten_output[327] * 0.007370;
    output[7] += flatten_output[328] * -0.012464;
    output[7] += flatten_output[329] * 0.012250;
    output[7] += flatten_output[330] * -0.028441;
    output[7] += flatten_output[331] * 0.005169;
    output[7] += flatten_output[332] * -0.009696;
    output[7] += flatten_output[333] * -0.044852;
    output[7] += flatten_output[334] * 0.042544;
    output[7] += flatten_output[335] * 0.001046;
    output[7] += flatten_output[336] * -0.045943;
    output[7] += flatten_output[337] * -0.014205;
    output[7] += flatten_output[338] * 0.010227;
    output[7] += flatten_output[339] * -0.051258;
    output[7] += flatten_output[340] * -0.056827;
    output[7] += flatten_output[341] * -0.037496;
    output[7] += flatten_output[342] * 0.003753;
    output[7] += flatten_output[343] * -0.034757;
    output[7] += flatten_output[344] * 0.013562;
    output[7] += flatten_output[345] * -0.044451;
    output[7] += flatten_output[346] * -0.013981;
    output[7] += flatten_output[347] * -0.061202;
    output[7] += flatten_output[348] * -0.039746;
    output[7] += flatten_output[349] * -0.062521;
    output[7] += flatten_output[350] * -0.037760;
    output[7] += flatten_output[351] * 0.024607;
    output[7] += flatten_output[352] * -0.008903;
    output[7] += flatten_output[353] * -0.019390;
    output[7] += flatten_output[354] * 0.030980;
    output[7] += flatten_output[355] * -0.071603;
    output[7] += flatten_output[356] * -0.036591;
    output[7] += flatten_output[357] * -0.023970;
    output[7] += flatten_output[358] * -0.004003;
    output[7] += flatten_output[359] * 0.006609;
    output[7] += flatten_output[360] * -0.023957;
    output[7] += flatten_output[361] * -0.001734;
    output[7] += flatten_output[362] * 0.000204;
    output[7] += flatten_output[363] * 0.035037;
    output[7] += flatten_output[364] * -0.019092;
    output[7] += flatten_output[365] * -0.051672;
    output[7] += flatten_output[366] * 0.024638;
    output[7] += flatten_output[367] * 0.001901;
    output[7] += flatten_output[368] * -0.048872;
    output[7] += flatten_output[369] * -0.026925;
    output[7] += flatten_output[370] * 0.017327;
    output[7] += flatten_output[371] * -0.025411;
    output[7] += flatten_output[372] * -0.031331;
    output[7] += flatten_output[373] * -0.056924;
    output[7] += flatten_output[374] * 0.004192;
    output[7] += flatten_output[375] * -0.014119;
    output[7] += flatten_output[376] * 0.022127;
    output[7] += flatten_output[377] * -0.020783;
    output[7] += flatten_output[378] * -0.016657;
    output[7] += flatten_output[379] * -0.005551;
    output[7] += flatten_output[380] * -0.057185;
    output[7] += flatten_output[381] * -0.054787;
    output[7] += flatten_output[382] * -0.023096;
    output[7] += flatten_output[383] * 0.028162;
    output[7] += flatten_output[384] * -0.024694;
    output[7] += flatten_output[385] * -0.031696;
    output[7] += flatten_output[386] * 0.039034;
    output[7] += flatten_output[387] * -0.047803;
    output[7] += flatten_output[388] * -0.010240;
    output[7] += flatten_output[389] * -0.050222;
    output[7] += flatten_output[390] * 0.004163;
    output[7] += flatten_output[391] * 0.034007;
    output[7] += flatten_output[392] * -0.031029;
    output[7] += flatten_output[393] * -0.007401;
    output[7] += flatten_output[394] * -0.013691;
    output[7] += flatten_output[395] * 0.008715;
    output[7] += flatten_output[396] * -0.024100;
    output[7] += flatten_output[397] * -0.039029;
    output[7] += flatten_output[398] * 0.032056;
    output[7] += flatten_output[399] * 0.015163;
    output[7] += flatten_output[400] * -0.053007;
    output[7] += flatten_output[401] * -0.019261;
    output[7] += flatten_output[402] * 0.005266;
    output[7] += flatten_output[403] * -0.010332;
    output[7] += flatten_output[404] * -0.024682;
    output[7] += flatten_output[405] * -0.055029;
    output[7] += flatten_output[406] * -0.019087;
    output[7] += flatten_output[407] * -0.037541;
    output[7] += flatten_output[408] * 0.029155;
    output[7] += flatten_output[409] * -0.034015;
    output[7] += flatten_output[410] * -0.023922;
    output[7] += flatten_output[411] * -0.007226;
    output[7] += flatten_output[412] * -0.031733;
    output[7] += flatten_output[413] * -0.052373;
    output[7] += flatten_output[414] * -0.033465;
    output[7] += flatten_output[415] * 0.024087;
    output[7] += flatten_output[416] * 0.009581;
    output[7] += flatten_output[417] * -0.003606;
    output[7] += flatten_output[418] * 0.039087;
    output[7] += flatten_output[419] * -0.056569;
    output[7] += flatten_output[420] * -0.030843;
    output[7] += flatten_output[421] * -0.032147;
    output[7] += flatten_output[422] * 0.014111;
    output[7] += flatten_output[423] * 0.017001;
    output[7] += flatten_output[424] * -0.002956;
    output[7] += flatten_output[425] * -0.002883;
    output[7] += flatten_output[426] * -0.000598;
    output[7] += flatten_output[427] * 0.017049;
    output[7] += flatten_output[428] * -0.003600;
    output[7] += flatten_output[429] * -0.049441;
    output[7] += flatten_output[430] * 0.014365;
    output[7] += flatten_output[431] * -0.012716;
    output[7] += flatten_output[432] * -0.024291;
    output[7] += flatten_output[433] * -0.021476;
    output[7] += flatten_output[434] * 0.011814;
    output[7] += flatten_output[435] * -0.036357;
    output[7] += flatten_output[436] * -0.012694;
    output[7] += flatten_output[437] * -0.061111;
    output[7] += flatten_output[438] * -0.009912;
    output[7] += flatten_output[439] * -0.042214;
    output[7] += flatten_output[440] * 0.031664;
    output[7] += flatten_output[441] * -0.024393;
    output[7] += flatten_output[442] * 0.013625;
    output[7] += flatten_output[443] * -0.018466;
    output[7] += flatten_output[444] * -0.019658;
    output[7] += flatten_output[445] * -0.046001;
    output[7] += flatten_output[446] * -0.024820;
    output[7] += flatten_output[447] * 0.036306;
    output[7] += flatten_output[448] * -0.008379;
    output[7] += flatten_output[449] * -0.029940;
    output[7] += flatten_output[450] * 0.036255;
    output[7] += flatten_output[451] * -0.014928;
    output[7] += flatten_output[452] * -0.014276;
    output[7] += flatten_output[453] * -0.007140;
    output[7] += flatten_output[454] * 0.000643;
    output[7] += flatten_output[455] * 0.017645;
    output[7] += flatten_output[456] * 0.000276;
    output[7] += flatten_output[457] * -0.010904;
    output[7] += flatten_output[458] * -0.020174;
    output[7] += flatten_output[459] * 0.012023;
    output[7] += flatten_output[460] * 0.004634;
    output[7] += flatten_output[461] * -0.055712;
    output[7] += flatten_output[462] * 0.030661;
    output[7] += flatten_output[463] * 0.014962;
    output[7] += flatten_output[464] * -0.028350;
    output[7] += flatten_output[465] * -0.030981;
    output[7] += flatten_output[466] * -0.001888;
    output[7] += flatten_output[467] * -0.038561;
    output[7] += flatten_output[468] * -0.028631;
    output[7] += flatten_output[469] * -0.017721;
    output[7] += flatten_output[470] * 0.013319;
    output[7] += flatten_output[471] * -0.027145;
    output[7] += flatten_output[472] * 0.007931;
    output[7] += flatten_output[473] * -0.013941;
    output[7] += flatten_output[474] * 0.008911;
    output[7] += flatten_output[475] * -0.035302;
    output[7] += flatten_output[476] * -0.024013;
    output[7] += flatten_output[477] * -0.049058;
    output[7] += flatten_output[478] * -0.026392;
    output[7] += flatten_output[479] * 0.034839;
    output[7] += flatten_output[480] * -0.002480;
    output[7] += flatten_output[481] * -0.016729;
    output[7] += flatten_output[482] * 0.015254;
    output[7] += flatten_output[483] * -0.062435;
    output[7] += flatten_output[484] * -0.026253;
    output[7] += flatten_output[485] * -0.027821;
    output[7] += flatten_output[486] * 0.004916;
    output[7] += flatten_output[487] * 0.002275;
    output[7] += flatten_output[488] * -0.007590;
    output[7] += flatten_output[489] * 0.000827;
    output[7] += flatten_output[490] * -0.011259;
    output[7] += flatten_output[491] * 0.021688;
    output[7] += flatten_output[492] * -0.010222;
    output[7] += flatten_output[493] * -0.056841;
    output[7] += flatten_output[494] * 0.024375;
    output[7] += flatten_output[495] * 0.002914;
    output[7] += flatten_output[496] * -0.041999;
    output[7] += flatten_output[497] * -0.030321;
    output[7] += flatten_output[498] * 0.005075;
    output[7] += flatten_output[499] * -0.030986;
    output[7] += flatten_output[500] * -0.024362;
    output[7] += flatten_output[501] * -0.021638;
    output[7] += flatten_output[502] * -0.001215;
    output[7] += flatten_output[503] * -0.013621;
    output[7] += flatten_output[504] * 0.001725;
    output[7] += flatten_output[505] * -0.011286;
    output[7] += flatten_output[506] * -0.005093;
    output[7] += flatten_output[507] * -0.013691;
    output[7] += flatten_output[508] * -0.024650;
    output[7] += flatten_output[509] * -0.070486;
    output[7] += flatten_output[510] * -0.036509;
    output[7] += flatten_output[511] * 0.032036;
    output[7] += flatten_output[512] * -0.020428;
    output[7] += flatten_output[513] * -0.023774;
    output[7] += flatten_output[514] * 0.028487;
    output[7] += flatten_output[515] * -0.073753;
    output[7] += flatten_output[516] * -0.017553;
    output[7] += flatten_output[517] * -0.015023;
    output[7] += flatten_output[518] * 0.016643;
    output[7] += flatten_output[519] * 0.009321;
    output[7] += flatten_output[520] * -0.019942;
    output[7] += flatten_output[521] * 0.004334;
    output[7] += flatten_output[522] * -0.006192;
    output[7] += flatten_output[523] * 0.023757;
    output[7] += flatten_output[524] * -0.029882;
    output[7] += flatten_output[525] * -0.033100;
    output[7] += flatten_output[526] * 0.033808;
    output[7] += flatten_output[527] * -0.003923;
    output[7] += flatten_output[528] * -0.053290;
    output[7] += flatten_output[529] * -0.021834;
    output[7] += flatten_output[530] * -0.011700;
    output[7] += flatten_output[531] * -0.019672;
    output[7] += flatten_output[532] * -0.009948;
    output[7] += flatten_output[533] * -0.045666;
    output[7] += flatten_output[534] * 0.015458;
    output[7] += flatten_output[535] * -0.023217;
    output[7] += flatten_output[536] * 0.017069;
    output[7] += flatten_output[537] * -0.015045;
    output[7] += flatten_output[538] * -0.010067;
    output[7] += flatten_output[539] * -0.009874;
    output[7] += flatten_output[540] * -0.011883;
    output[7] += flatten_output[541] * -0.100528;
    output[7] += flatten_output[542] * -0.027790;
    output[7] += flatten_output[543] * 0.029332;
    output[7] += flatten_output[544] * 0.005779;
    output[7] += flatten_output[545] * -0.024500;
    output[7] += flatten_output[546] * 0.013680;
    output[7] += flatten_output[547] * -0.078967;
    output[7] += flatten_output[548] * -0.026322;
    output[7] += flatten_output[549] * -0.007581;
    output[7] += flatten_output[550] * 0.003037;
    output[7] += flatten_output[551] * 0.014174;
    output[7] += flatten_output[552] * -0.011327;
    output[7] += flatten_output[553] * -0.002001;
    output[7] += flatten_output[554] * -0.021881;
    output[7] += flatten_output[555] * 0.025572;
    output[7] += flatten_output[556] * -0.031182;
    output[7] += flatten_output[557] * -0.019968;
    output[7] += flatten_output[558] * 0.022912;
    output[7] += flatten_output[559] * 0.000615;
    output[7] += flatten_output[560] * -0.036949;
    output[7] += flatten_output[561] * -0.017928;
    output[7] += flatten_output[562] * 0.012267;
    output[7] += flatten_output[563] * -0.006545;
    output[7] += flatten_output[564] * -0.004098;
    output[7] += flatten_output[565] * -0.072021;
    output[7] += flatten_output[566] * 0.007342;
    output[7] += flatten_output[567] * -0.007965;
    output[7] += flatten_output[568] * 0.001894;
    output[7] += flatten_output[569] * 0.003006;
    output[7] += flatten_output[570] * -0.004122;
    output[7] += flatten_output[571] * -0.020773;
    output[7] += flatten_output[572] * -0.031725;
    output[7] += flatten_output[573] * -0.073214;
    output[7] += flatten_output[574] * -0.016496;
    output[7] += flatten_output[575] * 0.038686;
    output[7] += flatten_output[576] * -0.003307;
    output[7] += flatten_output[577] * -0.021198;
    output[7] += flatten_output[578] * 0.032644;
    output[7] += flatten_output[579] * -0.013357;
    output[7] += flatten_output[580] * -0.023229;
    output[7] += flatten_output[581] * 0.000752;
    output[7] += flatten_output[582] * 0.007359;
    output[7] += flatten_output[583] * 0.031158;
    output[7] += flatten_output[584] * -0.015501;
    output[7] += flatten_output[585] * -0.010363;
    output[7] += flatten_output[586] * -0.012769;
    output[7] += flatten_output[587] * 0.024358;
    output[7] += flatten_output[588] * 0.007371;
    output[7] += flatten_output[589] * -0.035667;
    output[7] += flatten_output[590] * 0.019965;
    output[7] += flatten_output[591] * -0.006396;
    output[7] += flatten_output[592] * -0.020687;
    output[7] += flatten_output[593] * 0.001186;
    output[7] += flatten_output[594] * 0.000637;
    output[7] += flatten_output[595] * -0.016476;
    output[7] += flatten_output[596] * -0.027760;
    output[7] += flatten_output[597] * -0.040652;
    output[7] += flatten_output[598] * -0.004696;
    output[7] += flatten_output[599] * 0.000132;
    output[7] += flatten_output[600] * 0.004369;
    output[7] += flatten_output[601] * -0.002652;
    output[7] += flatten_output[602] * 0.007458;
    output[7] += flatten_output[603] * -0.007379;
    output[7] += flatten_output[604] * -0.029659;
    output[7] += flatten_output[605] * -0.034335;
    output[7] += flatten_output[606] * -0.023345;
    output[7] += flatten_output[607] * 0.028341;
    output[7] += flatten_output[608] * -0.006051;
    output[7] += flatten_output[609] * -0.014860;
    output[7] += flatten_output[610] * 0.026832;
    output[7] += flatten_output[611] * -0.004303;
    output[7] += flatten_output[612] * -0.018815;
    output[7] += flatten_output[613] * -0.009498;
    output[7] += flatten_output[614] * -0.005122;
    output[7] += flatten_output[615] * 0.018480;
    output[7] += flatten_output[616] * 0.015057;
    output[7] += flatten_output[617] * -0.002674;
    output[7] += flatten_output[618] * 0.013332;
    output[7] += flatten_output[619] * 0.028305;
    output[7] += flatten_output[620] * 0.010700;
    output[7] += flatten_output[621] * -0.044183;
    output[7] += flatten_output[622] * 0.013032;
    output[7] += flatten_output[623] * 0.009053;
    output[7] += flatten_output[624] * -0.023941;
    output[7] += flatten_output[625] * -0.006787;
    output[7] += flatten_output[626] * 0.005042;
    output[7] += flatten_output[627] * -0.006224;
    output[7] += flatten_output[628] * -0.006506;
    output[7] += flatten_output[629] * -0.018062;
    output[7] += flatten_output[630] * 0.012443;
    output[7] += flatten_output[631] * 0.003260;
    output[7] += flatten_output[632] * -0.000174;
    output[7] += flatten_output[633] * -0.012441;
    output[7] += flatten_output[634] * 0.034422;
    output[7] += flatten_output[635] * -0.008417;
    output[7] += flatten_output[636] * -0.026966;
    output[7] += flatten_output[637] * -0.037759;
    output[7] += flatten_output[638] * -0.029073;
    output[7] += flatten_output[639] * 0.031782;
    output[7] += flatten_output[640] * 0.012460;
    output[7] += flatten_output[641] * -0.010320;
    output[7] += flatten_output[642] * 0.020588;
    output[7] += flatten_output[643] * -0.006548;
    output[7] += flatten_output[644] * 0.003925;
    output[7] += flatten_output[645] * -0.007043;
    output[7] += flatten_output[646] * 0.002006;
    output[7] += flatten_output[647] * 0.018843;
    output[7] += flatten_output[648] * 0.011838;
    output[7] += flatten_output[649] * 0.013477;
    output[7] += flatten_output[650] * 0.001637;
    output[7] += flatten_output[651] * 0.003610;
    output[7] += flatten_output[652] * 0.010894;
    output[7] += flatten_output[653] * -0.038044;
    output[7] += flatten_output[654] * 0.037294;
    output[7] += flatten_output[655] * 0.017188;
    output[7] += flatten_output[656] * -0.014117;
    output[7] += flatten_output[657] * 0.005034;
    output[7] += flatten_output[658] * 0.005573;
    output[7] += flatten_output[659] * 0.012102;
    output[7] += flatten_output[660] * -0.001509;
    output[7] += flatten_output[661] * -0.026911;
    output[7] += flatten_output[662] * 0.023177;
    output[7] += flatten_output[663] * -0.015863;
    output[7] += flatten_output[664] * 0.022372;
    output[7] += flatten_output[665] * 0.008859;
    output[7] += flatten_output[666] * 0.022253;
    output[7] += flatten_output[667] * -0.018160;
    output[7] += flatten_output[668] * 0.001544;
    output[7] += flatten_output[669] * -0.022022;
    output[7] += flatten_output[670] * -0.031647;
    output[7] += flatten_output[671] * 0.038285;
    output[7] += flatten_output[672] * 0.003630;
    output[7] += flatten_output[673] * 0.009708;
    output[7] += flatten_output[674] * 0.017403;
    output[7] += flatten_output[675] * 0.012855;
    output[7] = 1 / (1 + exp(-output[7]));
    output[8] = -0.053736;
    output[8] += flatten_output[0] * 0.001371;
    output[8] += flatten_output[1] * -0.001791;
    output[8] += flatten_output[2] * -0.033973;
    output[8] += flatten_output[3] * -0.009760;
    output[8] += flatten_output[4] * -0.024351;
    output[8] += flatten_output[5] * -0.005785;
    output[8] += flatten_output[6] * -0.024353;
    output[8] += flatten_output[7] * -0.015539;
    output[8] += flatten_output[8] * -0.008240;
    output[8] += flatten_output[9] * 0.000910;
    output[8] += flatten_output[10] * -0.022220;
    output[8] += flatten_output[11] * 0.018659;
    output[8] += flatten_output[12] * -0.029532;
    output[8] += flatten_output[13] * -0.012610;
    output[8] += flatten_output[14] * -0.003068;
    output[8] += flatten_output[15] * -0.023213;
    output[8] += flatten_output[16] * -0.063424;
    output[8] += flatten_output[17] * -0.007650;
    output[8] += flatten_output[18] * -0.014849;
    output[8] += flatten_output[19] * -0.013764;
    output[8] += flatten_output[20] * -0.010115;
    output[8] += flatten_output[21] * -0.005420;
    output[8] += flatten_output[22] * -0.002287;
    output[8] += flatten_output[23] * -0.019999;
    output[8] += flatten_output[24] * -0.018146;
    output[8] += flatten_output[25] * -0.006192;
    output[8] += flatten_output[26] * -0.044980;
    output[8] += flatten_output[27] * -0.002090;
    output[8] += flatten_output[28] * -0.010456;
    output[8] += flatten_output[29] * -0.013633;
    output[8] += flatten_output[30] * 0.012199;
    output[8] += flatten_output[31] * -0.047186;
    output[8] += flatten_output[32] * -0.006187;
    output[8] += flatten_output[33] * -0.021985;
    output[8] += flatten_output[34] * -0.021039;
    output[8] += flatten_output[35] * 0.010353;
    output[8] += flatten_output[36] * -0.014627;
    output[8] += flatten_output[37] * 0.009274;
    output[8] += flatten_output[38] * -0.012876;
    output[8] += flatten_output[39] * -0.002917;
    output[8] += flatten_output[40] * -0.017987;
    output[8] += flatten_output[41] * 0.013812;
    output[8] += flatten_output[42] * 0.001394;
    output[8] += flatten_output[43] * 0.022969;
    output[8] += flatten_output[44] * -0.027839;
    output[8] += flatten_output[45] * 0.018905;
    output[8] += flatten_output[46] * 0.008980;
    output[8] += flatten_output[47] * -0.009542;
    output[8] += flatten_output[48] * -0.054804;
    output[8] += flatten_output[49] * 0.000517;
    output[8] += flatten_output[50] * -0.016299;
    output[8] += flatten_output[51] * -0.022395;
    output[8] += flatten_output[52] * -0.006298;
    output[8] += flatten_output[53] * 0.009224;
    output[8] += flatten_output[54] * -0.026226;
    output[8] += flatten_output[55] * 0.007168;
    output[8] += flatten_output[56] * -0.013505;
    output[8] += flatten_output[57] * 0.001051;
    output[8] += flatten_output[58] * -0.055798;
    output[8] += flatten_output[59] * 0.008343;
    output[8] += flatten_output[60] * -0.034010;
    output[8] += flatten_output[61] * -0.014214;
    output[8] += flatten_output[62] * 0.001729;
    output[8] += flatten_output[63] * -0.049917;
    output[8] += flatten_output[64] * -0.006495;
    output[8] += flatten_output[65] * -0.019746;
    output[8] += flatten_output[66] * -0.051160;
    output[8] += flatten_output[67] * 0.001280;
    output[8] += flatten_output[68] * -0.000704;
    output[8] += flatten_output[69] * 0.002364;
    output[8] += flatten_output[70] * -0.011301;
    output[8] += flatten_output[71] * -0.001792;
    output[8] += flatten_output[72] * -0.014556;
    output[8] += flatten_output[73] * 0.000712;
    output[8] += flatten_output[74] * -0.022745;
    output[8] += flatten_output[75] * -0.005610;
    output[8] += flatten_output[76] * -0.000722;
    output[8] += flatten_output[77] * 0.018625;
    output[8] += flatten_output[78] * -0.001887;
    output[8] += flatten_output[79] * -0.033488;
    output[8] += flatten_output[80] * -0.063509;
    output[8] += flatten_output[81] * -0.017507;
    output[8] += flatten_output[82] * -0.010840;
    output[8] += flatten_output[83] * -0.008164;
    output[8] += flatten_output[84] * -0.022426;
    output[8] += flatten_output[85] * 0.009875;
    output[8] += flatten_output[86] * 0.003522;
    output[8] += flatten_output[87] * -0.010391;
    output[8] += flatten_output[88] * -0.023438;
    output[8] += flatten_output[89] * -0.003158;
    output[8] += flatten_output[90] * -0.055775;
    output[8] += flatten_output[91] * -0.013506;
    output[8] += flatten_output[92] * -0.018965;
    output[8] += flatten_output[93] * 0.003915;
    output[8] += flatten_output[94] * 0.004610;
    output[8] += flatten_output[95] * -0.059670;
    output[8] += flatten_output[96] * -0.001757;
    output[8] += flatten_output[97] * -0.001487;
    output[8] += flatten_output[98] * -0.027157;
    output[8] += flatten_output[99] * -0.006149;
    output[8] += flatten_output[100] * 0.006669;
    output[8] += flatten_output[101] * -0.013323;
    output[8] += flatten_output[102] * -0.035560;
    output[8] += flatten_output[103] * -0.012860;
    output[8] += flatten_output[104] * -0.001655;
    output[8] += flatten_output[105] * -0.003546;
    output[8] += flatten_output[106] * -0.025885;
    output[8] += flatten_output[107] * 0.016386;
    output[8] += flatten_output[108] * -0.008332;
    output[8] += flatten_output[109] * 0.008632;
    output[8] += flatten_output[110] * 0.014132;
    output[8] += flatten_output[111] * -0.018559;
    output[8] += flatten_output[112] * -0.043764;
    output[8] += flatten_output[113] * -0.021631;
    output[8] += flatten_output[114] * -0.004174;
    output[8] += flatten_output[115] * 0.004493;
    output[8] += flatten_output[116] * -0.018962;
    output[8] += flatten_output[117] * 0.022245;
    output[8] += flatten_output[118] * -0.024583;
    output[8] += flatten_output[119] * -0.004233;
    output[8] += flatten_output[120] * -0.024334;
    output[8] += flatten_output[121] * 0.006207;
    output[8] += flatten_output[122] * -0.034444;
    output[8] += flatten_output[123] * 0.007259;
    output[8] += flatten_output[124] * -0.031888;
    output[8] += flatten_output[125] * 0.002841;
    output[8] += flatten_output[126] * 0.002366;
    output[8] += flatten_output[127] * -0.046921;
    output[8] += flatten_output[128] * -0.023592;
    output[8] += flatten_output[129] * 0.004311;
    output[8] += flatten_output[130] * -0.045310;
    output[8] += flatten_output[131] * -0.005938;
    output[8] += flatten_output[132] * -0.020131;
    output[8] += flatten_output[133] * -0.001470;
    output[8] += flatten_output[134] * -0.010662;
    output[8] += flatten_output[135] * -0.005927;
    output[8] += flatten_output[136] * 0.008776;
    output[8] += flatten_output[137] * -0.003532;
    output[8] += flatten_output[138] * -0.003952;
    output[8] += flatten_output[139] * 0.001848;
    output[8] += flatten_output[140] * -0.021277;
    output[8] += flatten_output[141] * 0.016863;
    output[8] += flatten_output[142] * -0.008852;
    output[8] += flatten_output[143] * -0.006443;
    output[8] += flatten_output[144] * -0.051034;
    output[8] += flatten_output[145] * -0.006118;
    output[8] += flatten_output[146] * -0.003495;
    output[8] += flatten_output[147] * 0.005484;
    output[8] += flatten_output[148] * -0.024436;
    output[8] += flatten_output[149] * 0.007302;
    output[8] += flatten_output[150] * -0.018609;
    output[8] += flatten_output[151] * 0.001953;
    output[8] += flatten_output[152] * -0.017579;
    output[8] += flatten_output[153] * -0.004800;
    output[8] += flatten_output[154] * -0.046613;
    output[8] += flatten_output[155] * -0.024476;
    output[8] += flatten_output[156] * -0.015030;
    output[8] += flatten_output[157] * -0.025336;
    output[8] += flatten_output[158] * 0.024226;
    output[8] += flatten_output[159] * -0.048385;
    output[8] += flatten_output[160] * 0.000220;
    output[8] += flatten_output[161] * -0.018915;
    output[8] += flatten_output[162] * -0.039110;
    output[8] += flatten_output[163] * 0.004090;
    output[8] += flatten_output[164] * -0.012114;
    output[8] += flatten_output[165] * 0.000177;
    output[8] += flatten_output[166] * -0.024012;
    output[8] += flatten_output[167] * -0.007520;
    output[8] += flatten_output[168] * 0.003795;
    output[8] += flatten_output[169] * -0.011466;
    output[8] += flatten_output[170] * 0.004019;
    output[8] += flatten_output[171] * 0.025754;
    output[8] += flatten_output[172] * -0.004078;
    output[8] += flatten_output[173] * -0.009815;
    output[8] += flatten_output[174] * 0.016362;
    output[8] += flatten_output[175] * -0.028546;
    output[8] += flatten_output[176] * -0.071339;
    output[8] += flatten_output[177] * -0.026677;
    output[8] += flatten_output[178] * -0.017336;
    output[8] += flatten_output[179] * -0.007139;
    output[8] += flatten_output[180] * -0.015424;
    output[8] += flatten_output[181] * -0.007599;
    output[8] += flatten_output[182] * -0.028270;
    output[8] += flatten_output[183] * -0.017515;
    output[8] += flatten_output[184] * -0.024108;
    output[8] += flatten_output[185] * -0.023924;
    output[8] += flatten_output[186] * -0.051225;
    output[8] += flatten_output[187] * 0.003554;
    output[8] += flatten_output[188] * -0.011358;
    output[8] += flatten_output[189] * -0.004919;
    output[8] += flatten_output[190] * 0.019303;
    output[8] += flatten_output[191] * -0.047991;
    output[8] += flatten_output[192] * -0.011779;
    output[8] += flatten_output[193] * -0.009732;
    output[8] += flatten_output[194] * -0.043240;
    output[8] += flatten_output[195] * -0.018454;
    output[8] += flatten_output[196] * -0.000306;
    output[8] += flatten_output[197] * 0.007376;
    output[8] += flatten_output[198] * -0.036896;
    output[8] += flatten_output[199] * -0.006508;
    output[8] += flatten_output[200] * -0.019350;
    output[8] += flatten_output[201] * 0.010795;
    output[8] += flatten_output[202] * -0.024775;
    output[8] += flatten_output[203] * 0.023440;
    output[8] += flatten_output[204] * -0.007954;
    output[8] += flatten_output[205] * -0.011969;
    output[8] += flatten_output[206] * 0.007376;
    output[8] += flatten_output[207] * -0.014581;
    output[8] += flatten_output[208] * -0.069202;
    output[8] += flatten_output[209] * -0.027811;
    output[8] += flatten_output[210] * -0.024619;
    output[8] += flatten_output[211] * -0.006657;
    output[8] += flatten_output[212] * -0.018060;
    output[8] += flatten_output[213] * 0.000292;
    output[8] += flatten_output[214] * -0.001624;
    output[8] += flatten_output[215] * -0.001015;
    output[8] += flatten_output[216] * -0.001510;
    output[8] += flatten_output[217] * -0.012951;
    output[8] += flatten_output[218] * -0.059443;
    output[8] += flatten_output[219] * -0.012200;
    output[8] += flatten_output[220] * -0.022749;
    output[8] += flatten_output[221] * -0.011479;
    output[8] += flatten_output[222] * 0.023609;
    output[8] += flatten_output[223] * -0.044207;
    output[8] += flatten_output[224] * -0.006716;
    output[8] += flatten_output[225] * -0.014662;
    output[8] += flatten_output[226] * -0.024645;
    output[8] += flatten_output[227] * -0.021551;
    output[8] += flatten_output[228] * -0.004161;
    output[8] += flatten_output[229] * -0.008170;
    output[8] += flatten_output[230] * -0.016527;
    output[8] += flatten_output[231] * -0.027214;
    output[8] += flatten_output[232] * 0.002157;
    output[8] += flatten_output[233] * -0.010784;
    output[8] += flatten_output[234] * 0.000050;
    output[8] += flatten_output[235] * 0.011110;
    output[8] += flatten_output[236] * -0.020186;
    output[8] += flatten_output[237] * 0.007816;
    output[8] += flatten_output[238] * 0.004362;
    output[8] += flatten_output[239] * -0.026717;
    output[8] += flatten_output[240] * -0.069172;
    output[8] += flatten_output[241] * -0.016528;
    output[8] += flatten_output[242] * -0.009645;
    output[8] += flatten_output[243] * -0.014102;
    output[8] += flatten_output[244] * -0.011760;
    output[8] += flatten_output[245] * -0.015198;
    output[8] += flatten_output[246] * -0.019216;
    output[8] += flatten_output[247] * -0.021836;
    output[8] += flatten_output[248] * -0.020601;
    output[8] += flatten_output[249] * -0.005285;
    output[8] += flatten_output[250] * -0.066840;
    output[8] += flatten_output[251] * 0.005658;
    output[8] += flatten_output[252] * -0.046514;
    output[8] += flatten_output[253] * -0.028679;
    output[8] += flatten_output[254] * 0.023922;
    output[8] += flatten_output[255] * -0.033588;
    output[8] += flatten_output[256] * 0.000710;
    output[8] += flatten_output[257] * -0.034796;
    output[8] += flatten_output[258] * -0.022218;
    output[8] += flatten_output[259] * -0.068238;
    output[8] += flatten_output[260] * -0.036831;
    output[8] += flatten_output[261] * 0.003746;
    output[8] += flatten_output[262] * -0.031610;
    output[8] += flatten_output[263] * -0.025544;
    output[8] += flatten_output[264] * -0.032632;
    output[8] += flatten_output[265] * 0.016379;
    output[8] += flatten_output[266] * -0.035930;
    output[8] += flatten_output[267] * 0.003160;
    output[8] += flatten_output[268] * -0.010754;
    output[8] += flatten_output[269] * 0.004858;
    output[8] += flatten_output[270] * -0.000602;
    output[8] += flatten_output[271] * -0.029754;
    output[8] += flatten_output[272] * -0.049274;
    output[8] += flatten_output[273] * -0.043173;
    output[8] += flatten_output[274] * -0.031115;
    output[8] += flatten_output[275] * 0.001003;
    output[8] += flatten_output[276] * -0.032262;
    output[8] += flatten_output[277] * -0.007455;
    output[8] += flatten_output[278] * -0.013867;
    output[8] += flatten_output[279] * -0.005155;
    output[8] += flatten_output[280] * -0.018767;
    output[8] += flatten_output[281] * -0.019632;
    output[8] += flatten_output[282] * -0.070460;
    output[8] += flatten_output[283] * -0.005598;
    output[8] += flatten_output[284] * -0.054557;
    output[8] += flatten_output[285] * -0.070760;
    output[8] += flatten_output[286] * 0.013642;
    output[8] += flatten_output[287] * -0.040168;
    output[8] += flatten_output[288] * -0.032558;
    output[8] += flatten_output[289] * -0.049477;
    output[8] += flatten_output[290] * -0.047628;
    output[8] += flatten_output[291] * -0.091601;
    output[8] += flatten_output[292] * -0.038098;
    output[8] += flatten_output[293] * -0.001486;
    output[8] += flatten_output[294] * -0.035716;
    output[8] += flatten_output[295] * -0.005877;
    output[8] += flatten_output[296] * -0.032892;
    output[8] += flatten_output[297] * 0.013287;
    output[8] += flatten_output[298] * -0.009061;
    output[8] += flatten_output[299] * -0.002169;
    output[8] += flatten_output[300] * -0.009047;
    output[8] += flatten_output[301] * -0.023902;
    output[8] += flatten_output[302] * -0.008926;
    output[8] += flatten_output[303] * -0.012543;
    output[8] += flatten_output[304] * -0.072331;
    output[8] += flatten_output[305] * -0.044409;
    output[8] += flatten_output[306] * -0.021079;
    output[8] += flatten_output[307] * -0.019618;
    output[8] += flatten_output[308] * -0.041197;
    output[8] += flatten_output[309] * -0.037099;
    output[8] += flatten_output[310] * -0.023786;
    output[8] += flatten_output[311] * -0.014484;
    output[8] += flatten_output[312] * -0.005218;
    output[8] += flatten_output[313] * -0.040679;
    output[8] += flatten_output[314] * -0.059041;
    output[8] += flatten_output[315] * -0.008239;
    output[8] += flatten_output[316] * -0.026121;
    output[8] += flatten_output[317] * -0.089543;
    output[8] += flatten_output[318] * -0.004942;
    output[8] += flatten_output[319] * -0.054565;
    output[8] += flatten_output[320] * -0.039541;
    output[8] += flatten_output[321] * -0.029107;
    output[8] += flatten_output[322] * -0.037392;
    output[8] += flatten_output[323] * -0.147065;
    output[8] += flatten_output[324] * -0.028699;
    output[8] += flatten_output[325] * -0.017191;
    output[8] += flatten_output[326] * -0.041156;
    output[8] += flatten_output[327] * -0.005326;
    output[8] += flatten_output[328] * -0.012114;
    output[8] += flatten_output[329] * 0.002680;
    output[8] += flatten_output[330] * -0.006285;
    output[8] += flatten_output[331] * -0.003522;
    output[8] += flatten_output[332] * -0.044366;
    output[8] += flatten_output[333] * -0.006774;
    output[8] += flatten_output[334] * 0.000004;
    output[8] += flatten_output[335] * -0.032422;
    output[8] += flatten_output[336] * -0.085622;
    output[8] += flatten_output[337] * -0.047329;
    output[8] += flatten_output[338] * -0.039508;
    output[8] += flatten_output[339] * -0.005341;
    output[8] += flatten_output[340] * -0.051187;
    output[8] += flatten_output[341] * -0.064445;
    output[8] += flatten_output[342] * -0.014163;
    output[8] += flatten_output[343] * -0.033251;
    output[8] += flatten_output[344] * -0.000613;
    output[8] += flatten_output[345] * -0.046039;
    output[8] += flatten_output[346] * -0.128746;
    output[8] += flatten_output[347] * -0.050140;
    output[8] += flatten_output[348] * -0.027689;
    output[8] += flatten_output[349] * -0.108128;
    output[8] += flatten_output[350] * 0.006899;
    output[8] += flatten_output[351] * -0.046160;
    output[8] += flatten_output[352] * -0.036329;
    output[8] += flatten_output[353] * -0.071370;
    output[8] += flatten_output[354] * -0.021093;
    output[8] += flatten_output[355] * -0.146738;
    output[8] += flatten_output[356] * -0.061037;
    output[8] += flatten_output[357] * -0.014792;
    output[8] += flatten_output[358] * -0.034853;
    output[8] += flatten_output[359] * -0.018131;
    output[8] += flatten_output[360] * -0.047727;
    output[8] += flatten_output[361] * -0.013519;
    output[8] += flatten_output[362] * -0.044283;
    output[8] += flatten_output[363] * 0.016791;
    output[8] += flatten_output[364] * -0.032620;
    output[8] += flatten_output[365] * -0.016157;
    output[8] += flatten_output[366] * 0.007056;
    output[8] += flatten_output[367] * -0.027987;
    output[8] += flatten_output[368] * -0.066644;
    output[8] += flatten_output[369] * -0.062923;
    output[8] += flatten_output[370] * -0.038769;
    output[8] += flatten_output[371] * -0.037617;
    output[8] += flatten_output[372] * -0.049811;
    output[8] += flatten_output[373] * -0.073420;
    output[8] += flatten_output[374] * -0.008124;
    output[8] += flatten_output[375] * -0.025398;
    output[8] += flatten_output[376] * -0.009122;
    output[8] += flatten_output[377] * -0.057386;
    output[8] += flatten_output[378] * -0.086616;
    output[8] += flatten_output[379] * -0.038065;
    output[8] += flatten_output[380] * -0.048062;
    output[8] += flatten_output[381] * -0.146108;
    output[8] += flatten_output[382] * 0.008924;
    output[8] += flatten_output[383] * -0.051532;
    output[8] += flatten_output[384] * -0.035818;
    output[8] += flatten_output[385] * -0.044253;
    output[8] += flatten_output[386] * -0.032479;
    output[8] += flatten_output[387] * -0.138184;
    output[8] += flatten_output[388] * -0.038550;
    output[8] += flatten_output[389] * -0.021980;
    output[8] += flatten_output[390] * -0.022558;
    output[8] += flatten_output[391] * -0.009172;
    output[8] += flatten_output[392] * -0.030611;
    output[8] += flatten_output[393] * 0.014356;
    output[8] += flatten_output[394] * -0.020202;
    output[8] += flatten_output[395] * -0.001010;
    output[8] += flatten_output[396] * -0.052616;
    output[8] += flatten_output[397] * -0.009734;
    output[8] += flatten_output[398] * -0.015766;
    output[8] += flatten_output[399] * -0.009133;
    output[8] += flatten_output[400] * -0.066786;
    output[8] += flatten_output[401] * -0.045452;
    output[8] += flatten_output[402] * -0.019308;
    output[8] += flatten_output[403] * -0.020848;
    output[8] += flatten_output[404] * -0.029657;
    output[8] += flatten_output[405] * -0.090320;
    output[8] += flatten_output[406] * -0.022833;
    output[8] += flatten_output[407] * -0.044396;
    output[8] += flatten_output[408] * -0.000806;
    output[8] += flatten_output[409] * -0.039587;
    output[8] += flatten_output[410] * -0.109521;
    output[8] += flatten_output[411] * -0.023848;
    output[8] += flatten_output[412] * -0.061737;
    output[8] += flatten_output[413] * -0.141094;
    output[8] += flatten_output[414] * 0.007418;
    output[8] += flatten_output[415] * -0.042517;
    output[8] += flatten_output[416] * -0.001731;
    output[8] += flatten_output[417] * -0.029116;
    output[8] += flatten_output[418] * -0.020771;
    output[8] += flatten_output[419] * -0.131018;
    output[8] += flatten_output[420] * -0.056393;
    output[8] += flatten_output[421] * -0.035521;
    output[8] += flatten_output[422] * -0.032493;
    output[8] += flatten_output[423] * -0.031243;
    output[8] += flatten_output[424] * -0.056946;
    output[8] += flatten_output[425] * 0.003115;
    output[8] += flatten_output[426] * -0.034963;
    output[8] += flatten_output[427] * 0.005918;
    output[8] += flatten_output[428] * -0.063673;
    output[8] += flatten_output[429] * -0.022949;
    output[8] += flatten_output[430] * -0.004759;
    output[8] += flatten_output[431] * -0.023539;
    output[8] += flatten_output[432] * -0.061662;
    output[8] += flatten_output[433] * -0.035966;
    output[8] += flatten_output[434] * -0.027649;
    output[8] += flatten_output[435] * -0.023366;
    output[8] += flatten_output[436] * -0.035753;
    output[8] += flatten_output[437] * -0.100394;
    output[8] += flatten_output[438] * -0.033726;
    output[8] += flatten_output[439] * -0.033042;
    output[8] += flatten_output[440] * 0.000043;
    output[8] += flatten_output[441] * -0.038971;
    output[8] += flatten_output[442] * -0.083056;
    output[8] += flatten_output[443] * -0.051505;
    output[8] += flatten_output[444] * -0.032675;
    output[8] += flatten_output[445] * -0.121539;
    output[8] += flatten_output[446] * 0.015895;
    output[8] += flatten_output[447] * -0.045097;
    output[8] += flatten_output[448] * -0.028828;
    output[8] += flatten_output[449] * -0.052498;
    output[8] += flatten_output[450] * -0.043754;
    output[8] += flatten_output[451] * -0.122968;
    output[8] += flatten_output[452] * -0.060740;
    output[8] += flatten_output[453] * -0.051005;
    output[8] += flatten_output[454] * -0.034899;
    output[8] += flatten_output[455] * -0.011412;
    output[8] += flatten_output[456] * -0.049849;
    output[8] += flatten_output[457] * 0.013738;
    output[8] += flatten_output[458] * -0.033547;
    output[8] += flatten_output[459] * 0.021567;
    output[8] += flatten_output[460] * -0.026522;
    output[8] += flatten_output[461] * -0.028498;
    output[8] += flatten_output[462] * -0.018539;
    output[8] += flatten_output[463] * -0.029806;
    output[8] += flatten_output[464] * -0.094416;
    output[8] += flatten_output[465] * -0.043270;
    output[8] += flatten_output[466] * -0.018143;
    output[8] += flatten_output[467] * -0.046712;
    output[8] += flatten_output[468] * -0.066613;
    output[8] += flatten_output[469] * -0.064530;
    output[8] += flatten_output[470] * -0.015622;
    output[8] += flatten_output[471] * -0.033843;
    output[8] += flatten_output[472] * 0.000738;
    output[8] += flatten_output[473] * -0.050886;
    output[8] += flatten_output[474] * -0.068165;
    output[8] += flatten_output[475] * -0.033754;
    output[8] += flatten_output[476] * -0.056973;
    output[8] += flatten_output[477] * -0.105238;
    output[8] += flatten_output[478] * 0.002307;
    output[8] += flatten_output[479] * -0.029280;
    output[8] += flatten_output[480] * -0.003166;
    output[8] += flatten_output[481] * -0.063276;
    output[8] += flatten_output[482] * -0.039674;
    output[8] += flatten_output[483] * -0.112768;
    output[8] += flatten_output[484] * -0.080532;
    output[8] += flatten_output[485] * -0.059277;
    output[8] += flatten_output[486] * -0.016758;
    output[8] += flatten_output[487] * -0.015283;
    output[8] += flatten_output[488] * -0.074882;
    output[8] += flatten_output[489] * 0.004195;
    output[8] += flatten_output[490] * -0.036004;
    output[8] += flatten_output[491] * 0.019520;
    output[8] += flatten_output[492] * -0.028352;
    output[8] += flatten_output[493] * 0.001118;
    output[8] += flatten_output[494] * 0.000017;
    output[8] += flatten_output[495] * -0.015388;
    output[8] += flatten_output[496] * -0.077758;
    output[8] += flatten_output[497] * -0.066950;
    output[8] += flatten_output[498] * -0.018306;
    output[8] += flatten_output[499] * -0.038321;
    output[8] += flatten_output[500] * -0.063935;
    output[8] += flatten_output[501] * -0.045265;
    output[8] += flatten_output[502] * -0.003663;
    output[8] += flatten_output[503] * -0.050399;
    output[8] += flatten_output[504] * -0.019284;
    output[8] += flatten_output[505] * -0.037297;
    output[8] += flatten_output[506] * -0.080794;
    output[8] += flatten_output[507] * -0.028114;
    output[8] += flatten_output[508] * -0.060744;
    output[8] += flatten_output[509] * -0.124397;
    output[8] += flatten_output[510] * 0.000157;
    output[8] += flatten_output[511] * -0.044394;
    output[8] += flatten_output[512] * -0.031120;
    output[8] += flatten_output[513] * -0.052083;
    output[8] += flatten_output[514] * -0.025120;
    output[8] += flatten_output[515] * -0.058057;
    output[8] += flatten_output[516] * -0.051653;
    output[8] += flatten_output[517] * -0.036795;
    output[8] += flatten_output[518] * -0.017266;
    output[8] += flatten_output[519] * -0.008618;
    output[8] += flatten_output[520] * -0.055491;
    output[8] += flatten_output[521] * -0.009582;
    output[8] += flatten_output[522] * -0.002795;
    output[8] += flatten_output[523] * 0.022688;
    output[8] += flatten_output[524] * -0.050633;
    output[8] += flatten_output[525] * 0.024588;
    output[8] += flatten_output[526] * -0.009760;
    output[8] += flatten_output[527] * -0.024164;
    output[8] += flatten_output[528] * -0.093884;
    output[8] += flatten_output[529] * -0.061725;
    output[8] += flatten_output[530] * -0.039118;
    output[8] += flatten_output[531] * -0.035074;
    output[8] += flatten_output[532] * -0.049407;
    output[8] += flatten_output[533] * -0.075693;
    output[8] += flatten_output[534] * -0.018629;
    output[8] += flatten_output[535] * -0.057549;
    output[8] += flatten_output[536] * -0.009061;
    output[8] += flatten_output[537] * -0.014019;
    output[8] += flatten_output[538] * -0.119371;
    output[8] += flatten_output[539] * 0.006233;
    output[8] += flatten_output[540] * -0.064691;
    output[8] += flatten_output[541] * -0.055852;
    output[8] += flatten_output[542] * 0.017708;
    output[8] += flatten_output[543] * -0.038375;
    output[8] += flatten_output[544] * 0.046672;
    output[8] += flatten_output[545] * 0.006388;
    output[8] += flatten_output[546] * -0.043413;
    output[8] += flatten_output[547] * -0.059437;
    output[8] += flatten_output[548] * -0.067894;
    output[8] += flatten_output[549] * -0.045052;
    output[8] += flatten_output[550] * -0.009009;
    output[8] += flatten_output[551] * -0.021709;
    output[8] += flatten_output[552] * -0.026408;
    output[8] += flatten_output[553] * 0.006548;
    output[8] += flatten_output[554] * -0.012157;
    output[8] += flatten_output[555] * 0.019692;
    output[8] += flatten_output[556] * -0.029750;
    output[8] += flatten_output[557] * 0.009253;
    output[8] += flatten_output[558] * -0.005017;
    output[8] += flatten_output[559] * -0.019064;
    output[8] += flatten_output[560] * -0.063904;
    output[8] += flatten_output[561] * -0.047937;
    output[8] += flatten_output[562] * -0.017311;
    output[8] += flatten_output[563] * -0.034611;
    output[8] += flatten_output[564] * -0.053782;
    output[8] += flatten_output[565] * -0.095061;
    output[8] += flatten_output[566] * -0.008624;
    output[8] += flatten_output[567] * -0.060529;
    output[8] += flatten_output[568] * -0.005020;
    output[8] += flatten_output[569] * -0.011082;
    output[8] += flatten_output[570] * -0.020031;
    output[8] += flatten_output[571] * -0.014954;
    output[8] += flatten_output[572] * -0.074516;
    output[8] += flatten_output[573] * -0.067335;
    output[8] += flatten_output[574] * 0.017389;
    output[8] += flatten_output[575] * -0.033773;
    output[8] += flatten_output[576] * -0.042557;
    output[8] += flatten_output[577] * -0.045726;
    output[8] += flatten_output[578] * -0.050188;
    output[8] += flatten_output[579] * -0.018089;
    output[8] += flatten_output[580] * -0.029837;
    output[8] += flatten_output[581] * -0.042388;
    output[8] += flatten_output[582] * -0.016924;
    output[8] += flatten_output[583] * -0.009420;
    output[8] += flatten_output[584] * -0.027244;
    output[8] += flatten_output[585] * 0.006498;
    output[8] += flatten_output[586] * -0.007751;
    output[8] += flatten_output[587] * -0.004056;
    output[8] += flatten_output[588] * 0.020259;
    output[8] += flatten_output[589] * -0.016975;
    output[8] += flatten_output[590] * -0.012089;
    output[8] += flatten_output[591] * -0.021191;
    output[8] += flatten_output[592] * -0.078307;
    output[8] += flatten_output[593] * -0.050793;
    output[8] += flatten_output[594] * 0.003226;
    output[8] += flatten_output[595] * -0.007323;
    output[8] += flatten_output[596] * -0.022178;
    output[8] += flatten_output[597] * 0.001052;
    output[8] += flatten_output[598] * -0.004109;
    output[8] += flatten_output[599] * -0.032729;
    output[8] += flatten_output[600] * -0.002383;
    output[8] += flatten_output[601] * -0.037988;
    output[8] += flatten_output[602] * -0.105233;
    output[8] += flatten_output[603] * -0.015552;
    output[8] += flatten_output[604] * -0.040918;
    output[8] += flatten_output[605] * -0.049800;
    output[8] += flatten_output[606] * -0.004358;
    output[8] += flatten_output[607] * -0.057370;
    output[8] += flatten_output[608] * -0.002528;
    output[8] += flatten_output[609] * -0.027497;
    output[8] += flatten_output[610] * -0.040542;
    output[8] += flatten_output[611] * -0.100127;
    output[8] += flatten_output[612] * -0.036366;
    output[8] += flatten_output[613] * -0.020249;
    output[8] += flatten_output[614] * -0.018526;
    output[8] += flatten_output[615] * -0.025466;
    output[8] += flatten_output[616] * -0.016248;
    output[8] += flatten_output[617] * -0.015768;
    output[8] += flatten_output[618] * 0.003112;
    output[8] += flatten_output[619] * 0.003135;
    output[8] += flatten_output[620] * -0.046166;
    output[8] += flatten_output[621] * -0.013977;
    output[8] += flatten_output[622] * 0.005623;
    output[8] += flatten_output[623] * -0.030883;
    output[8] += flatten_output[624] * -0.053511;
    output[8] += flatten_output[625] * -0.031848;
    output[8] += flatten_output[626] * -0.035551;
    output[8] += flatten_output[627] * 0.003870;
    output[8] += flatten_output[628] * -0.010954;
    output[8] += flatten_output[629] * -0.099413;
    output[8] += flatten_output[630] * -0.021736;
    output[8] += flatten_output[631] * -0.037638;
    output[8] += flatten_output[632] * 0.001433;
    output[8] += flatten_output[633] * -0.010358;
    output[8] += flatten_output[634] * -0.058220;
    output[8] += flatten_output[635] * -0.025310;
    output[8] += flatten_output[636] * -0.039608;
    output[8] += flatten_output[637] * -0.085583;
    output[8] += flatten_output[638] * -0.002970;
    output[8] += flatten_output[639] * -0.039884;
    output[8] += flatten_output[640] * -0.009030;
    output[8] += flatten_output[641] * -0.005363;
    output[8] += flatten_output[642] * -0.044132;
    output[8] += flatten_output[643] * -0.041103;
    output[8] += flatten_output[644] * -0.029667;
    output[8] += flatten_output[645] * -0.015919;
    output[8] += flatten_output[646] * -0.015666;
    output[8] += flatten_output[647] * -0.029494;
    output[8] += flatten_output[648] * -0.030111;
    output[8] += flatten_output[649] * -0.004410;
    output[8] += flatten_output[650] * 0.000055;
    output[8] += flatten_output[651] * 0.022550;
    output[8] += flatten_output[652] * -0.027297;
    output[8] += flatten_output[653] * 0.014600;
    output[8] += flatten_output[654] * 0.009976;
    output[8] += flatten_output[655] * -0.018544;
    output[8] += flatten_output[656] * -0.072655;
    output[8] += flatten_output[657] * -0.028088;
    output[8] += flatten_output[658] * -0.015448;
    output[8] += flatten_output[659] * -0.023656;
    output[8] += flatten_output[660] * -0.019307;
    output[8] += flatten_output[661] * -0.016328;
    output[8] += flatten_output[662] * -0.000253;
    output[8] += flatten_output[663] * -0.006524;
    output[8] += flatten_output[664] * -0.004195;
    output[8] += flatten_output[665] * -0.028465;
    output[8] += flatten_output[666] * -0.067623;
    output[8] += flatten_output[667] * -0.022183;
    output[8] += flatten_output[668] * -0.022796;
    output[8] += flatten_output[669] * -0.023683;
    output[8] += flatten_output[670] * 0.000742;
    output[8] += flatten_output[671] * -0.051128;
    output[8] += flatten_output[672] * -0.020659;
    output[8] += flatten_output[673] * -0.032269;
    output[8] += flatten_output[674] * -0.019886;
    output[8] += flatten_output[675] * -0.081068;
    output[8] = 1 / (1 + exp(-output[8]));
    output[9] = -0.023130;
    output[9] += flatten_output[0] * -0.003505;
    output[9] += flatten_output[1] * 0.005388;
    output[9] += flatten_output[2] * 0.003065;
    output[9] += flatten_output[3] * -0.021988;
    output[9] += flatten_output[4] * 0.009292;
    output[9] += flatten_output[5] * -0.016573;
    output[9] += flatten_output[6] * 0.001309;
    output[9] += flatten_output[7] * 0.003219;
    output[9] += flatten_output[8] * -0.000552;
    output[9] += flatten_output[9] * -0.008563;
    output[9] += flatten_output[10] * -0.012870;
    output[9] += flatten_output[11] * 0.003405;
    output[9] += flatten_output[12] * -0.003979;
    output[9] += flatten_output[13] * 0.010182;
    output[9] += flatten_output[14] * 0.000342;
    output[9] += flatten_output[15] * 0.011888;
    output[9] += flatten_output[16] * 0.036831;
    output[9] += flatten_output[17] * 0.016585;
    output[9] += flatten_output[18] * -0.015615;
    output[9] += flatten_output[19] * 0.024702;
    output[9] += flatten_output[20] * 0.027120;
    output[9] += flatten_output[21] * -0.011970;
    output[9] += flatten_output[22] * -0.011085;
    output[9] += flatten_output[23] * -0.011582;
    output[9] += flatten_output[24] * 0.009302;
    output[9] += flatten_output[25] * -0.000842;
    output[9] += flatten_output[26] * 0.022047;
    output[9] += flatten_output[27] * 0.001086;
    output[9] += flatten_output[28] * 0.013468;
    output[9] += flatten_output[29] * 0.014846;
    output[9] += flatten_output[30] * 0.020495;
    output[9] += flatten_output[31] * -0.023749;
    output[9] += flatten_output[32] * -0.005633;
    output[9] += flatten_output[33] * 0.010541;
    output[9] += flatten_output[34] * 0.020149;
    output[9] += flatten_output[35] * -0.000667;
    output[9] += flatten_output[36] * 0.002085;
    output[9] += flatten_output[37] * -0.019304;
    output[9] += flatten_output[38] * 0.008790;
    output[9] += flatten_output[39] * -0.013873;
    output[9] += flatten_output[40] * -0.012233;
    output[9] += flatten_output[41] * 0.004187;
    output[9] += flatten_output[42] * -0.006916;
    output[9] += flatten_output[43] * -0.008368;
    output[9] += flatten_output[44] * -0.000985;
    output[9] += flatten_output[45] * 0.009367;
    output[9] += flatten_output[46] * -0.010876;
    output[9] += flatten_output[47] * -0.006135;
    output[9] += flatten_output[48] * 0.026847;
    output[9] += flatten_output[49] * -0.008304;
    output[9] += flatten_output[50] * -0.012343;
    output[9] += flatten_output[51] * 0.021082;
    output[9] += flatten_output[52] * 0.013796;
    output[9] += flatten_output[53] * 0.010838;
    output[9] += flatten_output[54] * -0.004148;
    output[9] += flatten_output[55] * 0.010837;
    output[9] += flatten_output[56] * 0.000003;
    output[9] += flatten_output[57] * -0.013321;
    output[9] += flatten_output[58] * 0.019401;
    output[9] += flatten_output[59] * 0.007559;
    output[9] += flatten_output[60] * 0.020708;
    output[9] += flatten_output[61] * 0.016215;
    output[9] += flatten_output[62] * 0.020785;
    output[9] += flatten_output[63] * -0.025447;
    output[9] += flatten_output[64] * 0.009491;
    output[9] += flatten_output[65] * -0.010159;
    output[9] += flatten_output[66] * 0.016603;
    output[9] += flatten_output[67] * 0.001984;
    output[9] += flatten_output[68] * 0.023155;
    output[9] += flatten_output[69] * -0.002256;
    output[9] += flatten_output[70] * -0.005606;
    output[9] += flatten_output[71] * -0.011286;
    output[9] += flatten_output[72] * 0.018268;
    output[9] += flatten_output[73] * -0.004460;
    output[9] += flatten_output[74] * 0.009372;
    output[9] += flatten_output[75] * 0.009398;
    output[9] += flatten_output[76] * 0.000204;
    output[9] += flatten_output[77] * 0.018904;
    output[9] += flatten_output[78] * -0.018376;
    output[9] += flatten_output[79] * 0.016966;
    output[9] += flatten_output[80] * 0.019323;
    output[9] += flatten_output[81] * 0.018730;
    output[9] += flatten_output[82] * -0.018008;
    output[9] += flatten_output[83] * 0.007285;
    output[9] += flatten_output[84] * 0.009693;
    output[9] += flatten_output[85] * -0.002691;
    output[9] += flatten_output[86] * -0.005309;
    output[9] += flatten_output[87] * -0.011542;
    output[9] += flatten_output[88] * -0.005903;
    output[9] += flatten_output[89] * 0.001621;
    output[9] += flatten_output[90] * 0.021155;
    output[9] += flatten_output[91] * 0.005232;
    output[9] += flatten_output[92] * 0.021113;
    output[9] += flatten_output[93] * 0.032001;
    output[9] += flatten_output[94] * -0.004873;
    output[9] += flatten_output[95] * -0.020296;
    output[9] += flatten_output[96] * -0.007724;
    output[9] += flatten_output[97] * -0.002426;
    output[9] += flatten_output[98] * 0.020333;
    output[9] += flatten_output[99] * 0.001235;
    output[9] += flatten_output[100] * 0.024978;
    output[9] += flatten_output[101] * 0.006191;
    output[9] += flatten_output[102] * 0.007158;
    output[9] += flatten_output[103] * -0.021902;
    output[9] += flatten_output[104] * -0.000437;
    output[9] += flatten_output[105] * -0.011998;
    output[9] += flatten_output[106] * 0.010490;
    output[9] += flatten_output[107] * 0.011259;
    output[9] += flatten_output[108] * 0.021531;
    output[9] += flatten_output[109] * 0.015358;
    output[9] += flatten_output[110] * -0.010811;
    output[9] += flatten_output[111] * 0.016092;
    output[9] += flatten_output[112] * 0.049530;
    output[9] += flatten_output[113] * 0.008504;
    output[9] += flatten_output[114] * -0.006972;
    output[9] += flatten_output[115] * 0.001646;
    output[9] += flatten_output[116] * 0.022246;
    output[9] += flatten_output[117] * -0.012814;
    output[9] += flatten_output[118] * 0.004367;
    output[9] += flatten_output[119] * 0.000655;
    output[9] += flatten_output[120] * 0.008977;
    output[9] += flatten_output[121] * 0.009490;
    output[9] += flatten_output[122] * 0.028861;
    output[9] += flatten_output[123] * -0.004618;
    output[9] += flatten_output[124] * 0.025076;
    output[9] += flatten_output[125] * 0.016508;
    output[9] += flatten_output[126] * 0.002004;
    output[9] += flatten_output[127] * -0.018069;
    output[9] += flatten_output[128] * -0.015214;
    output[9] += flatten_output[129] * 0.008726;
    output[9] += flatten_output[130] * 0.020158;
    output[9] += flatten_output[131] * -0.017472;
    output[9] += flatten_output[132] * 0.013400;
    output[9] += flatten_output[133] * -0.005986;
    output[9] += flatten_output[134] * -0.020014;
    output[9] += flatten_output[135] * 0.004720;
    output[9] += flatten_output[136] * -0.005551;
    output[9] += flatten_output[137] * 0.004619;
    output[9] += flatten_output[138] * 0.003006;
    output[9] += flatten_output[139] * -0.004005;
    output[9] += flatten_output[140] * 0.016759;
    output[9] += flatten_output[141] * 0.025625;
    output[9] += flatten_output[142] * 0.004861;
    output[9] += flatten_output[143] * -0.007539;
    output[9] += flatten_output[144] * 0.051456;
    output[9] += flatten_output[145] * -0.005519;
    output[9] += flatten_output[146] * 0.004814;
    output[9] += flatten_output[147] * 0.011326;
    output[9] += flatten_output[148] * 0.014960;
    output[9] += flatten_output[149] * 0.010685;
    output[9] += flatten_output[150] * -0.014799;
    output[9] += flatten_output[151] * -0.001101;
    output[9] += flatten_output[152] * -0.006027;
    output[9] += flatten_output[153] * -0.009357;
    output[9] += flatten_output[154] * 0.027940;
    output[9] += flatten_output[155] * -0.013160;
    output[9] += flatten_output[156] * 0.022581;
    output[9] += flatten_output[157] * 0.022391;
    output[9] += flatten_output[158] * 0.004904;
    output[9] += flatten_output[159] * -0.030619;
    output[9] += flatten_output[160] * 0.013261;
    output[9] += flatten_output[161] * 0.012839;
    output[9] += flatten_output[162] * 0.006991;
    output[9] += flatten_output[163] * -0.029109;
    output[9] += flatten_output[164] * -0.022460;
    output[9] += flatten_output[165] * -0.011184;
    output[9] += flatten_output[166] * 0.004502;
    output[9] += flatten_output[167] * -0.004802;
    output[9] += flatten_output[168] * 0.006171;
    output[9] += flatten_output[169] * 0.013206;
    output[9] += flatten_output[170] * 0.005952;
    output[9] += flatten_output[171] * -0.004606;
    output[9] += flatten_output[172] * 0.008747;
    output[9] += flatten_output[173] * 0.028334;
    output[9] += flatten_output[174] * -0.007796;
    output[9] += flatten_output[175] * -0.006521;
    output[9] += flatten_output[176] * 0.036771;
    output[9] += flatten_output[177] * -0.019139;
    output[9] += flatten_output[178] * -0.010951;
    output[9] += flatten_output[179] * 0.006523;
    output[9] += flatten_output[180] * 0.003688;
    output[9] += flatten_output[181] * -0.009711;
    output[9] += flatten_output[182] * -0.013430;
    output[9] += flatten_output[183] * -0.007659;
    output[9] += flatten_output[184] * -0.021211;
    output[9] += flatten_output[185] * -0.007453;
    output[9] += flatten_output[186] * 0.006638;
    output[9] += flatten_output[187] * -0.012621;
    output[9] += flatten_output[188] * 0.000543;
    output[9] += flatten_output[189] * -0.003559;
    output[9] += flatten_output[190] * 0.015770;
    output[9] += flatten_output[191] * -0.031803;
    output[9] += flatten_output[192] * -0.002976;
    output[9] += flatten_output[193] * -0.012236;
    output[9] += flatten_output[194] * 0.021480;
    output[9] += flatten_output[195] * -0.035105;
    output[9] += flatten_output[196] * 0.001027;
    output[9] += flatten_output[197] * -0.008760;
    output[9] += flatten_output[198] * 0.000239;
    output[9] += flatten_output[199] * -0.006695;
    output[9] += flatten_output[200] * -0.007500;
    output[9] += flatten_output[201] * 0.001604;
    output[9] += flatten_output[202] * -0.007109;
    output[9] += flatten_output[203] * -0.005519;
    output[9] += flatten_output[204] * 0.018100;
    output[9] += flatten_output[205] * 0.025835;
    output[9] += flatten_output[206] * -0.019621;
    output[9] += flatten_output[207] * 0.003879;
    output[9] += flatten_output[208] * 0.018736;
    output[9] += flatten_output[209] * -0.017520;
    output[9] += flatten_output[210] * -0.011507;
    output[9] += flatten_output[211] * 0.016884;
    output[9] += flatten_output[212] * 0.011409;
    output[9] += flatten_output[213] * -0.007220;
    output[9] += flatten_output[214] * -0.018646;
    output[9] += flatten_output[215] * -0.005376;
    output[9] += flatten_output[216] * -0.013838;
    output[9] += flatten_output[217] * 0.000043;
    output[9] += flatten_output[218] * -0.008994;
    output[9] += flatten_output[219] * 0.014067;
    output[9] += flatten_output[220] * -0.009347;
    output[9] += flatten_output[221] * 0.010638;
    output[9] += flatten_output[222] * 0.000252;
    output[9] += flatten_output[223] * -0.030991;
    output[9] += flatten_output[224] * -0.014857;
    output[9] += flatten_output[225] * 0.010957;
    output[9] += flatten_output[226] * 0.007383;
    output[9] += flatten_output[227] * -0.038705;
    output[9] += flatten_output[228] * -0.003658;
    output[9] += flatten_output[229] * -0.002061;
    output[9] += flatten_output[230] * 0.011868;
    output[9] += flatten_output[231] * -0.023342;
    output[9] += flatten_output[232] * -0.010812;
    output[9] += flatten_output[233] * 0.001951;
    output[9] += flatten_output[234] * 0.010743;
    output[9] += flatten_output[235] * -0.005901;
    output[9] += flatten_output[236] * -0.002727;
    output[9] += flatten_output[237] * 0.017024;
    output[9] += flatten_output[238] * -0.019921;
    output[9] += flatten_output[239] * 0.003700;
    output[9] += flatten_output[240] * 0.035682;
    output[9] += flatten_output[241] * -0.012585;
    output[9] += flatten_output[242] * -0.009799;
    output[9] += flatten_output[243] * 0.006832;
    output[9] += flatten_output[244] * 0.004372;
    output[9] += flatten_output[245] * -0.023026;
    output[9] += flatten_output[246] * -0.004060;
    output[9] += flatten_output[247] * -0.006824;
    output[9] += flatten_output[248] * -0.019346;
    output[9] += flatten_output[249] * -0.020703;
    output[9] += flatten_output[250] * 0.002987;
    output[9] += flatten_output[251] * 0.011722;
    output[9] += flatten_output[252] * -0.015000;
    output[9] += flatten_output[253] * 0.015890;
    output[9] += flatten_output[254] * 0.017151;
    output[9] += flatten_output[255] * -0.038388;
    output[9] += flatten_output[256] * -0.016486;
    output[9] += flatten_output[257] * -0.016622;
    output[9] += flatten_output[258] * 0.031593;
    output[9] += flatten_output[259] * -0.025748;
    output[9] += flatten_output[260] * -0.002061;
    output[9] += flatten_output[261] * -0.010344;
    output[9] += flatten_output[262] * -0.009515;
    output[9] += flatten_output[263] * -0.023533;
    output[9] += flatten_output[264] * -0.007152;
    output[9] += flatten_output[265] * 0.008033;
    output[9] += flatten_output[266] * -0.009542;
    output[9] += flatten_output[267] * -0.017298;
    output[9] += flatten_output[268] * -0.003462;
    output[9] += flatten_output[269] * -0.003640;
    output[9] += flatten_output[270] * -0.019102;
    output[9] += flatten_output[271] * -0.006154;
    output[9] += flatten_output[272] * 0.021532;
    output[9] += flatten_output[273] * -0.019618;
    output[9] += flatten_output[274] * -0.003758;
    output[9] += flatten_output[275] * -0.012183;
    output[9] += flatten_output[276] * -0.027802;
    output[9] += flatten_output[277] * -0.007662;
    output[9] += flatten_output[278] * -0.020305;
    output[9] += flatten_output[279] * -0.002051;
    output[9] += flatten_output[280] * -0.009226;
    output[9] += flatten_output[281] * -0.020846;
    output[9] += flatten_output[282] * -0.001783;
    output[9] += flatten_output[283] * -0.018426;
    output[9] += flatten_output[284] * 0.001122;
    output[9] += flatten_output[285] * -0.007686;
    output[9] += flatten_output[286] * -0.002976;
    output[9] += flatten_output[287] * -0.013376;
    output[9] += flatten_output[288] * -0.016473;
    output[9] += flatten_output[289] * -0.004892;
    output[9] += flatten_output[290] * 0.000732;
    output[9] += flatten_output[291] * -0.045400;
    output[9] += flatten_output[292] * -0.043546;
    output[9] += flatten_output[293] * -0.030414;
    output[9] += flatten_output[294] * -0.017381;
    output[9] += flatten_output[295] * 0.004839;
    output[9] += flatten_output[296] * -0.029574;
    output[9] += flatten_output[297] * -0.011743;
    output[9] += flatten_output[298] * -0.030570;
    output[9] += flatten_output[299] * -0.042734;
    output[9] += flatten_output[300] * -0.006357;
    output[9] += flatten_output[301] * -0.010989;
    output[9] += flatten_output[302] * 0.008595;
    output[9] += flatten_output[303] * 0.009270;
    output[9] += flatten_output[304] * 0.015155;
    output[9] += flatten_output[305] * -0.026610;
    output[9] += flatten_output[306] * -0.016180;
    output[9] += flatten_output[307] * -0.046854;
    output[9] += flatten_output[308] * -0.058161;
    output[9] += flatten_output[309] * -0.001288;
    output[9] += flatten_output[310] * -0.034534;
    output[9] += flatten_output[311] * -0.022092;
    output[9] += flatten_output[312] * -0.013707;
    output[9] += flatten_output[313] * -0.028529;
    output[9] += flatten_output[314] * 0.008541;
    output[9] += flatten_output[315] * -0.079686;
    output[9] += flatten_output[316] * -0.029000;
    output[9] += flatten_output[317] * -0.039373;
    output[9] += flatten_output[318] * 0.002867;
    output[9] += flatten_output[319] * -0.040322;
    output[9] += flatten_output[320] * 0.002086;
    output[9] += flatten_output[321] * -0.019936;
    output[9] += flatten_output[322] * 0.004053;
    output[9] += flatten_output[323] * -0.111425;
    output[9] += flatten_output[324] * -0.077144;
    output[9] += flatten_output[325] * -0.009498;
    output[9] += flatten_output[326] * -0.032834;
    output[9] += flatten_output[327] * -0.012306;
    output[9] += flatten_output[328] * -0.026662;
    output[9] += flatten_output[329] * -0.008727;
    output[9] += flatten_output[330] * -0.032855;
    output[9] += flatten_output[331] * -0.028853;
    output[9] += flatten_output[332] * 0.008061;
    output[9] += flatten_output[333] * -0.034174;
    output[9] += flatten_output[334] * -0.016714;
    output[9] += flatten_output[335] * -0.006892;
    output[9] += flatten_output[336] * 0.004608;
    output[9] += flatten_output[337] * -0.045551;
    output[9] += flatten_output[338] * -0.015556;
    output[9] += flatten_output[339] * -0.085747;
    output[9] += flatten_output[340] * -0.087988;
    output[9] += flatten_output[341] * -0.026260;
    output[9] += flatten_output[342] * -0.019296;
    output[9] += flatten_output[343] * -0.032729;
    output[9] += flatten_output[344] * 0.001935;
    output[9] += flatten_output[345] * -0.047053;
    output[9] += flatten_output[346] * -0.002446;
    output[9] += flatten_output[347] * -0.092329;
    output[9] += flatten_output[348] * -0.045329;
    output[9] += flatten_output[349] * -0.090393;
    output[9] += flatten_output[350] * 0.013477;
    output[9] += flatten_output[351] * -0.017126;
    output[9] += flatten_output[352] * -0.065211;
    output[9] += flatten_output[353] * -0.047275;
    output[9] += flatten_output[354] * 0.015518;
    output[9] += flatten_output[355] * -0.142202;
    output[9] += flatten_output[356] * -0.042006;
    output[9] += flatten_output[357] * -0.058762;
    output[9] += flatten_output[358] * -0.006293;
    output[9] += flatten_output[359] * 0.006043;
    output[9] += flatten_output[360] * -0.095288;
    output[9] += flatten_output[361] * 0.003867;
    output[9] += flatten_output[362] * -0.000419;
    output[9] += flatten_output[363] * 0.005080;
    output[9] += flatten_output[364] * -0.031080;
    output[9] += flatten_output[365] * -0.016820;
    output[9] += flatten_output[366] * -0.010260;
    output[9] += flatten_output[367] * -0.000072;
    output[9] += flatten_output[368] * -0.045103;
    output[9] += flatten_output[369] * -0.057636;
    output[9] += flatten_output[370] * 0.002477;
    output[9] += flatten_output[371] * -0.055269;
    output[9] += flatten_output[372] * -0.048193;
    output[9] += flatten_output[373] * -0.093473;
    output[9] += flatten_output[374] * -0.016418;
    output[9] += flatten_output[375] * -0.046367;
    output[9] += flatten_output[376] * -0.003244;
    output[9] += flatten_output[377] * -0.044260;
    output[9] += flatten_output[378] * -0.079235;
    output[9] += flatten_output[379] * -0.008524;
    output[9] += flatten_output[380] * -0.038069;
    output[9] += flatten_output[381] * -0.099678;
    output[9] += flatten_output[382] * 0.016905;
    output[9] += flatten_output[383] * -0.021717;
    output[9] += flatten_output[384] * -0.000640;
    output[9] += flatten_output[385] * -0.042790;
    output[9] += flatten_output[386] * 0.015968;
    output[9] += flatten_output[387] * -0.137362;
    output[9] += flatten_output[388] * -0.040565;
    output[9] += flatten_output[389] * -0.051722;
    output[9] += flatten_output[390] * -0.007383;
    output[9] += flatten_output[391] * -0.002083;
    output[9] += flatten_output[392] * -0.064448;
    output[9] += flatten_output[393] * -0.002987;
    output[9] += flatten_output[394] * 0.001280;
    output[9] += flatten_output[395] * 0.009922;
    output[9] += flatten_output[396] * -0.094327;
    output[9] += flatten_output[397] * 0.005242;
    output[9] += flatten_output[398] * 0.001012;
    output[9] += flatten_output[399] * -0.013945;
    output[9] += flatten_output[400] * -0.086697;
    output[9] += flatten_output[401] * -0.032042;
    output[9] += flatten_output[402] * -0.025979;
    output[9] += flatten_output[403] * -0.000822;
    output[9] += flatten_output[404] * -0.042266;
    output[9] += flatten_output[405] * -0.131469;
    output[9] += flatten_output[406] * -0.023152;
    output[9] += flatten_output[407] * -0.086229;
    output[9] += flatten_output[408] * -0.004161;
    output[9] += flatten_output[409] * -0.035355;
    output[9] += flatten_output[410] * -0.096771;
    output[9] += flatten_output[411] * -0.019591;
    output[9] += flatten_output[412] * -0.032975;
    output[9] += flatten_output[413] * -0.120537;
    output[9] += flatten_output[414] * 0.004816;
    output[9] += flatten_output[415] * -0.006642;
    output[9] += flatten_output[416] * -0.010355;
    output[9] += flatten_output[417] * -0.036094;
    output[9] += flatten_output[418] * -0.014671;
    output[9] += flatten_output[419] * -0.103734;
    output[9] += flatten_output[420] * -0.037868;
    output[9] += flatten_output[421] * -0.036572;
    output[9] += flatten_output[422] * -0.022113;
    output[9] += flatten_output[423] * -0.011162;
    output[9] += flatten_output[424] * -0.026111;
    output[9] += flatten_output[425] * 0.003502;
    output[9] += flatten_output[426] * -0.032366;
    output[9] += flatten_output[427] * -0.060438;
    output[9] += flatten_output[428] * -0.058026;
    output[9] += flatten_output[429] * -0.020842;
    output[9] += flatten_output[430] * -0.068823;
    output[9] += flatten_output[431] * -0.013592;
    output[9] += flatten_output[432] * -0.018065;
    output[9] += flatten_output[433] * -0.020399;
    output[9] += flatten_output[434] * -0.002681;
    output[9] += flatten_output[435] * -0.065662;
    output[9] += flatten_output[436] * -0.030236;
    output[9] += flatten_output[437] * -0.105853;
    output[9] += flatten_output[438] * -0.016931;
    output[9] += flatten_output[439] * -0.052085;
    output[9] += flatten_output[440] * -0.008668;
    output[9] += flatten_output[441] * -0.015610;
    output[9] += flatten_output[442] * -0.079408;
    output[9] += flatten_output[443] * -0.054395;
    output[9] += flatten_output[444] * -0.013687;
    output[9] += flatten_output[445] * -0.067283;
    output[9] += flatten_output[446] * -0.012083;
    output[9] += flatten_output[447] * -0.030471;
    output[9] += flatten_output[448] * -0.022501;
    output[9] += flatten_output[449] * -0.018103;
    output[9] += flatten_output[450] * -0.065171;
    output[9] += flatten_output[451] * -0.049993;
    output[9] += flatten_output[452] * -0.058482;
    output[9] += flatten_output[453] * -0.033207;
    output[9] += flatten_output[454] * -0.043908;
    output[9] += flatten_output[455] * -0.009230;
    output[9] += flatten_output[456] * -0.046740;
    output[9] += flatten_output[457] * 0.014978;
    output[9] += flatten_output[458] * -0.038818;
    output[9] += flatten_output[459] * -0.075359;
    output[9] += flatten_output[460] * -0.010924;
    output[9] += flatten_output[461] * -0.045597;
    output[9] += flatten_output[462] * -0.040480;
    output[9] += flatten_output[463] * -0.020599;
    output[9] += flatten_output[464] * -0.041162;
    output[9] += flatten_output[465] * -0.030269;
    output[9] += flatten_output[466] * -0.014314;
    output[9] += flatten_output[467] * -0.068036;
    output[9] += flatten_output[468] * -0.069522;
    output[9] += flatten_output[469] * -0.023380;
    output[9] += flatten_output[470] * -0.075441;
    output[9] += flatten_output[471] * -0.035017;
    output[9] += flatten_output[472] * 0.001028;
    output[9] += flatten_output[473] * -0.040266;
    output[9] += flatten_output[474] * 0.002314;
    output[9] += flatten_output[475] * -0.091571;
    output[9] += flatten_output[476] * -0.037874;
    output[9] += flatten_output[477] * -0.016306;
    output[9] += flatten_output[478] * -0.002165;
    output[9] += flatten_output[479] * -0.020103;
    output[9] += flatten_output[480] * -0.063283;
    output[9] += flatten_output[481] * -0.037480;
    output[9] += flatten_output[482] * -0.031758;
    output[9] += flatten_output[483] * -0.030328;
    output[9] += flatten_output[484] * -0.031237;
    output[9] += flatten_output[485] * -0.049813;
    output[9] += flatten_output[486] * -0.006885;
    output[9] += flatten_output[487] * -0.005426;
    output[9] += flatten_output[488] * -0.062643;
    output[9] += flatten_output[489] * -0.001990;
    output[9] += flatten_output[490] * -0.021877;
    output[9] += flatten_output[491] * 0.004257;
    output[9] += flatten_output[492] * -0.005579;
    output[9] += flatten_output[493] * 0.023918;
    output[9] += flatten_output[494] * -0.029022;
    output[9] += flatten_output[495] * 0.004433;
    output[9] += flatten_output[496] * -0.062943;
    output[9] += flatten_output[497] * -0.045817;
    output[9] += flatten_output[498] * 0.010426;
    output[9] += flatten_output[499] * -0.054176;
    output[9] += flatten_output[500] * -0.039663;
    output[9] += flatten_output[501] * -0.049865;
    output[9] += flatten_output[502] * 0.001331;
    output[9] += flatten_output[503] * -0.031810;
    output[9] += flatten_output[504] * -0.016800;
    output[9] += flatten_output[505] * -0.036321;
    output[9] += flatten_output[506] * -0.051804;
    output[9] += flatten_output[507] * -0.009583;
    output[9] += flatten_output[508] * -0.048382;
    output[9] += flatten_output[509] * -0.074672;
    output[9] += flatten_output[510] * -0.005872;
    output[9] += flatten_output[511] * -0.020988;
    output[9] += flatten_output[512] * 0.003726;
    output[9] += flatten_output[513] * -0.017531;
    output[9] += flatten_output[514] * 0.017147;
    output[9] += flatten_output[515] * -0.106047;
    output[9] += flatten_output[516] * -0.069379;
    output[9] += flatten_output[517] * -0.067546;
    output[9] += flatten_output[518] * 0.008241;
    output[9] += flatten_output[519] * -0.017486;
    output[9] += flatten_output[520] * -0.047951;
    output[9] += flatten_output[521] * -0.004187;
    output[9] += flatten_output[522] * -0.002223;
    output[9] += flatten_output[523] * -0.000329;
    output[9] += flatten_output[524] * -0.045785;
    output[9] += flatten_output[525] * 0.016220;
    output[9] += flatten_output[526] * -0.002840;
    output[9] += flatten_output[527] * 0.011968;
    output[9] += flatten_output[528] * -0.043955;
    output[9] += flatten_output[529] * -0.042912;
    output[9] += flatten_output[530] * -0.050012;
    output[9] += flatten_output[531] * -0.035408;
    output[9] += flatten_output[532] * -0.046486;
    output[9] += flatten_output[533] * -0.099982;
    output[9] += flatten_output[534] * 0.002365;
    output[9] += flatten_output[535] * -0.086596;
    output[9] += flatten_output[536] * -0.001904;
    output[9] += flatten_output[537] * -0.007008;
    output[9] += flatten_output[538] * -0.095904;
    output[9] += flatten_output[539] * -0.036731;
    output[9] += flatten_output[540] * -0.033513;
    output[9] += flatten_output[541] * -0.095450;
    output[9] += flatten_output[542] * -0.034618;
    output[9] += flatten_output[543] * -0.013214;
    output[9] += flatten_output[544] * -0.003705;
    output[9] += flatten_output[545] * -0.033601;
    output[9] += flatten_output[546] * 0.007634;
    output[9] += flatten_output[547] * -0.075881;
    output[9] += flatten_output[548] * -0.036431;
    output[9] += flatten_output[549] * -0.058826;
    output[9] += flatten_output[550] * 0.008396;
    output[9] += flatten_output[551] * -0.004668;
    output[9] += flatten_output[552] * -0.033809;
    output[9] += flatten_output[553] * -0.002041;
    output[9] += flatten_output[554] * -0.002285;
    output[9] += flatten_output[555] * -0.008376;
    output[9] += flatten_output[556] * -0.057836;
    output[9] += flatten_output[557] * -0.004842;
    output[9] += flatten_output[558] * -0.019193;
    output[9] += flatten_output[559] * 0.004245;
    output[9] += flatten_output[560] * -0.033460;
    output[9] += flatten_output[561] * -0.058868;
    output[9] += flatten_output[562] * -0.003093;
    output[9] += flatten_output[563] * -0.047960;
    output[9] += flatten_output[564] * -0.052568;
    output[9] += flatten_output[565] * -0.075045;
    output[9] += flatten_output[566] * -0.018401;
    output[9] += flatten_output[567] * -0.057582;
    output[9] += flatten_output[568] * -0.015497;
    output[9] += flatten_output[569] * -0.028927;
    output[9] += flatten_output[570] * -0.076170;
    output[9] += flatten_output[571] * -0.000696;
    output[9] += flatten_output[572] * -0.031471;
    output[9] += flatten_output[573] * -0.057998;
    output[9] += flatten_output[574] * -0.010674;
    output[9] += flatten_output[575] * -0.005188;
    output[9] += flatten_output[576] * -0.012896;
    output[9] += flatten_output[577] * -0.014742;
    output[9] += flatten_output[578] * 0.013256;
    output[9] += flatten_output[579] * -0.081146;
    output[9] += flatten_output[580] * -0.031975;
    output[9] += flatten_output[581] * -0.029655;
    output[9] += flatten_output[582] * 0.009864;
    output[9] += flatten_output[583] * -0.010738;
    output[9] += flatten_output[584] * -0.027545;
    output[9] += flatten_output[585] * 0.003113;
    output[9] += flatten_output[586] * -0.005029;
    output[9] += flatten_output[587] * -0.011223;
    output[9] += flatten_output[588] * -0.002812;
    output[9] += flatten_output[589] * 0.009846;
    output[9] += flatten_output[590] * -0.011707;
    output[9] += flatten_output[591] * -0.003026;
    output[9] += flatten_output[592] * -0.001092;
    output[9] += flatten_output[593] * -0.030327;
    output[9] += flatten_output[594] * 0.000484;
    output[9] += flatten_output[595] * -0.005255;
    output[9] += flatten_output[596] * -0.012835;
    output[9] += flatten_output[597] * -0.047557;
    output[9] += flatten_output[598] * -0.023687;
    output[9] += flatten_output[599] * -0.037493;
    output[9] += flatten_output[600] * 0.007728;
    output[9] += flatten_output[601] * -0.010612;
    output[9] += flatten_output[602] * -0.051967;
    output[9] += flatten_output[603] * 0.005311;
    output[9] += flatten_output[604] * -0.021062;
    output[9] += flatten_output[605] * -0.050568;
    output[9] += flatten_output[606] * 0.024907;
    output[9] += flatten_output[607] * -0.030741;
    output[9] += flatten_output[608] * 0.000937;
    output[9] += flatten_output[609] * -0.026510;
    output[9] += flatten_output[610] * 0.020872;
    output[9] += flatten_output[611] * -0.061156;
    output[9] += flatten_output[612] * -0.016401;
    output[9] += flatten_output[613] * -0.026897;
    output[9] += flatten_output[614] * -0.014875;
    output[9] += flatten_output[615] * 0.001128;
    output[9] += flatten_output[616] * -0.013176;
    output[9] += flatten_output[617] * 0.009332;
    output[9] += flatten_output[618] * -0.007527;
    output[9] += flatten_output[619] * -0.019147;
    output[9] += flatten_output[620] * 0.007864;
    output[9] += flatten_output[621] * 0.018371;
    output[9] += flatten_output[622] * -0.020997;
    output[9] += flatten_output[623] * -0.014461;
    output[9] += flatten_output[624] * 0.011794;
    output[9] += flatten_output[625] * -0.008234;
    output[9] += flatten_output[626] * 0.002829;
    output[9] += flatten_output[627] * 0.004887;
    output[9] += flatten_output[628] * -0.004989;
    output[9] += flatten_output[629] * -0.059580;
    output[9] += flatten_output[630] * 0.005204;
    output[9] += flatten_output[631] * -0.028721;
    output[9] += flatten_output[632] * 0.005101;
    output[9] += flatten_output[633] * -0.031175;
    output[9] += flatten_output[634] * -0.033502;
    output[9] += flatten_output[635] * -0.026086;
    output[9] += flatten_output[636] * -0.014092;
    output[9] += flatten_output[637] * -0.019738;
    output[9] += flatten_output[638] * 0.001321;
    output[9] += flatten_output[639] * -0.013976;
    output[9] += flatten_output[640] * -0.013453;
    output[9] += flatten_output[641] * -0.019073;
    output[9] += flatten_output[642] * 0.008690;
    output[9] += flatten_output[643] * -0.040485;
    output[9] += flatten_output[644] * -0.026751;
    output[9] += flatten_output[645] * -0.013032;
    output[9] += flatten_output[646] * 0.003747;
    output[9] += flatten_output[647] * 0.000081;
    output[9] += flatten_output[648] * -0.007140;
    output[9] += flatten_output[649] * 0.014111;
    output[9] += flatten_output[650] * -0.004667;
    output[9] += flatten_output[651] * -0.016722;
    output[9] += flatten_output[652] * -0.003478;
    output[9] += flatten_output[653] * 0.011329;
    output[9] += flatten_output[654] * 0.003956;
    output[9] += flatten_output[655] * -0.014004;
    output[9] += flatten_output[656] * 0.039806;
    output[9] += flatten_output[657] * -0.004315;
    output[9] += flatten_output[658] * 0.011525;
    output[9] += flatten_output[659] * -0.026038;
    output[9] += flatten_output[660] * -0.018959;
    output[9] += flatten_output[661] * -0.041297;
    output[9] += flatten_output[662] * 0.002526;
    output[9] += flatten_output[663] * -0.028173;
    output[9] += flatten_output[664] * 0.004559;
    output[9] += flatten_output[665] * -0.030384;
    output[9] += flatten_output[666] * 0.001750;
    output[9] += flatten_output[667] * -0.032108;
    output[9] += flatten_output[668] * -0.013661;
    output[9] += flatten_output[669] * -0.028039;
    output[9] += flatten_output[670] * 0.017495;
    output[9] += flatten_output[671] * -0.024606;
    output[9] += flatten_output[672] * -0.006015;
    output[9] += flatten_output[673] * -0.021115;
    output[9] += flatten_output[674] * 0.013829;
    output[9] += flatten_output[675] * -0.066036;
    output[9] = 1 / (1 + exp(-output[9]));


    float sum_exp = 0.0f;
    sum_exp += exp(output[0]);
    sum_exp += exp(output[1]);
    sum_exp += exp(output[2]);
    sum_exp += exp(output[3]);
    sum_exp += exp(output[4]);
    sum_exp += exp(output[5]);
    sum_exp += exp(output[6]);
    sum_exp += exp(output[7]);
    sum_exp += exp(output[8]);
    sum_exp += exp(output[9]);
    output[0] = exp(output[0]) / sum_exp;
    output[1] = exp(output[1]) / sum_exp;
    output[2] = exp(output[2]) / sum_exp;
    output[3] = exp(output[3]) / sum_exp;
    output[4] = exp(output[4]) / sum_exp;
    output[5] = exp(output[5]) / sum_exp;
    output[6] = exp(output[6]) / sum_exp;
    output[7] = exp(output[7]) / sum_exp;
    output[8] = exp(output[8]) / sum_exp;
    output[9] = exp(output[9]) / sum_exp;
}
