// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_52_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln55,
        zext_ln55_1,
        zext_ln55_2,
        zext_ln55_3,
        zext_ln55_4,
        zext_ln55_5,
        zext_ln55_6,
        zext_ln55_7,
        layer2_output_2_03_out,
        layer2_output_2_03_out_ap_vld,
        layer2_output_1_02_out,
        layer2_output_1_02_out_ap_vld,
        layer2_output_0_01_out,
        layer2_output_0_01_out_ap_vld,
        max_val_out,
        max_val_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [14:0] zext_ln55;
input  [14:0] zext_ln55_1;
input  [14:0] zext_ln55_2;
input  [14:0] zext_ln55_3;
input  [14:0] zext_ln55_4;
input  [14:0] zext_ln55_5;
input  [14:0] zext_ln55_6;
input  [14:0] zext_ln55_7;
output  [15:0] layer2_output_2_03_out;
output   layer2_output_2_03_out_ap_vld;
output  [15:0] layer2_output_1_02_out;
output   layer2_output_1_02_out_ap_vld;
output  [15:0] layer2_output_0_01_out;
output   layer2_output_0_01_out_ap_vld;
output  [15:0] max_val_out;
output   max_val_out_ap_vld;

reg ap_idle;
reg layer2_output_2_03_out_ap_vld;
reg layer2_output_1_02_out_ap_vld;
reg layer2_output_0_01_out_ap_vld;
reg max_val_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln52_fu_258_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [23:0] zext_ln55_7_cast_fu_218_p1;
reg   [23:0] zext_ln55_7_cast_reg_674;
wire   [23:0] zext_ln55_6_cast_fu_222_p1;
reg   [23:0] zext_ln55_6_cast_reg_679;
wire   [23:0] zext_ln55_5_cast_fu_226_p1;
reg   [23:0] zext_ln55_5_cast_reg_684;
wire   [23:0] zext_ln55_4_cast_fu_230_p1;
reg   [23:0] zext_ln55_4_cast_reg_689;
wire   [23:0] zext_ln55_3_cast_fu_234_p1;
reg   [23:0] zext_ln55_3_cast_reg_694;
wire   [23:0] zext_ln55_2_cast_fu_238_p1;
reg   [23:0] zext_ln55_2_cast_reg_699;
wire   [23:0] zext_ln55_cast_fu_246_p1;
reg   [23:0] zext_ln55_cast_reg_709;
reg   [1:0] i_1_reg_714;
reg   [1:0] i_1_reg_714_pp0_iter1_reg;
reg   [1:0] i_1_reg_714_pp0_iter2_reg;
reg   [1:0] i_1_reg_714_pp0_iter3_reg;
reg   [1:0] i_1_reg_714_pp0_iter4_reg;
reg   [1:0] i_1_reg_714_pp0_iter5_reg;
reg   [1:0] i_1_reg_714_pp0_iter6_reg;
reg   [1:0] i_1_reg_714_pp0_iter7_reg;
reg   [1:0] i_1_reg_714_pp0_iter8_reg;
reg   [0:0] icmp_ln52_reg_726;
reg   [0:0] icmp_ln52_reg_726_pp0_iter1_reg;
reg   [0:0] icmp_ln52_reg_726_pp0_iter2_reg;
reg   [0:0] icmp_ln52_reg_726_pp0_iter3_reg;
reg   [0:0] icmp_ln52_reg_726_pp0_iter4_reg;
reg   [0:0] icmp_ln52_reg_726_pp0_iter5_reg;
reg   [0:0] icmp_ln52_reg_726_pp0_iter6_reg;
reg   [0:0] icmp_ln52_reg_726_pp0_iter7_reg;
reg   [15:0] tmp_s_reg_735;
reg   [1:0] i_fu_122;
wire   [1:0] add_ln52_fu_264_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0;
reg   [15:0] max_val_fu_126;
wire   [15:0] layer2_output_1_4_fu_544_p2;
reg   [15:0] layer2_output_1_fu_130;
reg   [15:0] layer2_output_1_1_fu_134;
reg   [15:0] layer2_output_1_2_fu_138;
wire    ap_block_pp0_stage0_01001;
wire  signed [8:0] tmp_1_fu_270_p5;
wire  signed [9:0] tmp_fu_291_p5;
wire   [14:0] mul_ln55_fu_306_p1;
wire   [23:0] mul_ln55_fu_306_p2;
wire  signed [8:0] tmp_2_fu_321_p5;
wire  signed [8:0] tmp_3_fu_343_p5;
wire  signed [23:0] tmp_9_fu_358_p1;
wire   [23:0] grp_fu_586_p3;
wire   [15:0] tmp_9_fu_358_p4;
wire  signed [8:0] tmp_4_fu_375_p5;
wire  signed [23:0] tmp_10_fu_390_p1;
wire   [23:0] grp_fu_595_p3;
wire   [15:0] tmp_10_fu_390_p4;
wire  signed [8:0] tmp_5_fu_407_p5;
wire  signed [23:0] tmp_11_fu_422_p1;
wire   [23:0] grp_fu_603_p3;
wire   [15:0] tmp_11_fu_422_p4;
wire  signed [8:0] tmp_6_fu_439_p5;
wire  signed [23:0] tmp_12_fu_454_p1;
wire   [23:0] grp_fu_611_p3;
wire   [15:0] tmp_12_fu_454_p4;
wire  signed [9:0] tmp_7_fu_471_p5;
wire  signed [23:0] tmp_13_fu_486_p1;
wire   [23:0] grp_fu_619_p3;
wire   [15:0] tmp_13_fu_486_p4;
wire  signed [23:0] tmp_14_fu_503_p1;
wire   [23:0] grp_fu_627_p3;
wire   [15:0] tmp_14_fu_503_p4;
wire  signed [23:0] trunc_ln55_7_fu_520_p1;
wire   [23:0] grp_fu_635_p3;
wire   [5:0] tmp_8_fu_529_p5;
wire  signed [15:0] sext_ln57_fu_540_p1;
wire   [15:0] trunc_ln55_7_fu_520_p4;
wire   [14:0] grp_fu_586_p1;
wire   [23:0] grp_fu_586_p2;
wire   [14:0] grp_fu_595_p1;
wire   [23:0] grp_fu_595_p2;
wire   [14:0] grp_fu_603_p1;
wire   [23:0] grp_fu_603_p2;
wire   [14:0] grp_fu_611_p1;
wire   [23:0] grp_fu_611_p2;
wire   [14:0] grp_fu_619_p1;
wire   [23:0] grp_fu_619_p2;
wire   [14:0] grp_fu_627_p1;
wire   [23:0] grp_fu_627_p2;
wire   [14:0] grp_fu_635_p1;
wire   [23:0] grp_fu_635_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [23:0] grp_fu_586_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_done_reg = 1'b0;
end

neural_network_mux_3_2_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 9 ))
mux_3_2_9_1_1_U17(
    .din0(9'd7),
    .din1(9'd182),
    .din2(9'd511),
    .din3(ap_sig_allocacmp_i_1),
    .dout(tmp_1_fu_270_p5)
);

neural_network_mux_3_2_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
mux_3_2_10_1_1_U18(
    .din0(10'd281),
    .din1(10'd877),
    .din2(10'd947),
    .din3(i_1_reg_714),
    .dout(tmp_fu_291_p5)
);

neural_network_mul_10s_15ns_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 24 ))
mul_10s_15ns_24_1_1_U19(
    .din0(tmp_fu_291_p5),
    .din1(mul_ln55_fu_306_p1),
    .dout(mul_ln55_fu_306_p2)
);

neural_network_mux_3_2_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 9 ))
mux_3_2_9_1_1_U20(
    .din0(9'd35),
    .din1(9'd6),
    .din2(9'd378),
    .din3(i_1_reg_714),
    .dout(tmp_2_fu_321_p5)
);

neural_network_mux_3_2_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 9 ))
mux_3_2_9_1_1_U21(
    .din0(9'd112),
    .din1(9'd357),
    .din2(9'd372),
    .din3(i_1_reg_714_pp0_iter1_reg),
    .dout(tmp_3_fu_343_p5)
);

neural_network_mux_3_2_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 9 ))
mux_3_2_9_1_1_U22(
    .din0(9'd379),
    .din1(9'd142),
    .din2(9'd42),
    .din3(i_1_reg_714_pp0_iter2_reg),
    .dout(tmp_4_fu_375_p5)
);

neural_network_mux_3_2_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 9 ))
mux_3_2_9_1_1_U23(
    .din0(9'd419),
    .din1(9'd43),
    .din2(9'd261),
    .din3(i_1_reg_714_pp0_iter3_reg),
    .dout(tmp_5_fu_407_p5)
);

neural_network_mux_3_2_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 9 ))
mux_3_2_9_1_1_U24(
    .din0(9'd20),
    .din1(9'd228),
    .din2(9'd486),
    .din3(i_1_reg_714_pp0_iter4_reg),
    .dout(tmp_6_fu_439_p5)
);

neural_network_mux_3_2_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
mux_3_2_10_1_1_U25(
    .din0(10'd707),
    .din1(10'd1022),
    .din2(10'd206),
    .din3(i_1_reg_714_pp0_iter5_reg),
    .dout(tmp_7_fu_471_p5)
);

neural_network_mux_3_2_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mux_3_2_6_1_1_U26(
    .din0(6'd34),
    .din1(6'd7),
    .din2(6'd11),
    .din3(i_1_reg_714_pp0_iter8_reg),
    .dout(tmp_8_fu_529_p5)
);

neural_network_mac_muladd_9s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_15ns_24ns_24_4_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_1_fu_270_p5),
    .din1(grp_fu_586_p1),
    .din2(grp_fu_586_p2),
    .ce(1'b1),
    .dout(grp_fu_586_p3)
);

neural_network_mac_muladd_9s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_15ns_24ns_24_4_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_2_fu_321_p5),
    .din1(grp_fu_595_p1),
    .din2(grp_fu_595_p2),
    .ce(1'b1),
    .dout(grp_fu_595_p3)
);

neural_network_mac_muladd_9s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_15ns_24ns_24_4_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_3_fu_343_p5),
    .din1(grp_fu_603_p1),
    .din2(grp_fu_603_p2),
    .ce(1'b1),
    .dout(grp_fu_603_p3)
);

neural_network_mac_muladd_9s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_15ns_24ns_24_4_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_fu_375_p5),
    .din1(grp_fu_611_p1),
    .din2(grp_fu_611_p2),
    .ce(1'b1),
    .dout(grp_fu_611_p3)
);

neural_network_mac_muladd_9s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_15ns_24ns_24_4_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_fu_407_p5),
    .din1(grp_fu_619_p1),
    .din2(grp_fu_619_p2),
    .ce(1'b1),
    .dout(grp_fu_619_p3)
);

neural_network_mac_muladd_9s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_15ns_24ns_24_4_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_fu_439_p5),
    .din1(grp_fu_627_p1),
    .din2(grp_fu_627_p2),
    .ce(1'b1),
    .dout(grp_fu_627_p3)
);

neural_network_mac_muladd_10s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_15ns_24ns_24_4_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_7_fu_471_p5),
    .din1(grp_fu_635_p1),
    .din2(grp_fu_635_p2),
    .ce(1'b1),
    .dout(grp_fu_635_p3)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln52_fu_258_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_122 <= add_ln52_fu_264_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_122 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_1_reg_714 <= ap_sig_allocacmp_i_1;
        i_1_reg_714_pp0_iter1_reg <= i_1_reg_714;
        icmp_ln52_reg_726 <= icmp_ln52_fu_258_p2;
        icmp_ln52_reg_726_pp0_iter1_reg <= icmp_ln52_reg_726;
        tmp_s_reg_735 <= {{mul_ln55_fu_306_p2[23:8]}};
        zext_ln55_2_cast_reg_699[14 : 0] <= zext_ln55_2_cast_fu_238_p1[14 : 0];
        zext_ln55_3_cast_reg_694[14 : 0] <= zext_ln55_3_cast_fu_234_p1[14 : 0];
        zext_ln55_4_cast_reg_689[14 : 0] <= zext_ln55_4_cast_fu_230_p1[14 : 0];
        zext_ln55_5_cast_reg_684[14 : 0] <= zext_ln55_5_cast_fu_226_p1[14 : 0];
        zext_ln55_6_cast_reg_679[14 : 0] <= zext_ln55_6_cast_fu_222_p1[14 : 0];
        zext_ln55_7_cast_reg_674[14 : 0] <= zext_ln55_7_cast_fu_218_p1[14 : 0];
        zext_ln55_cast_reg_709[14 : 0] <= zext_ln55_cast_fu_246_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        i_1_reg_714_pp0_iter2_reg <= i_1_reg_714_pp0_iter1_reg;
        i_1_reg_714_pp0_iter3_reg <= i_1_reg_714_pp0_iter2_reg;
        i_1_reg_714_pp0_iter4_reg <= i_1_reg_714_pp0_iter3_reg;
        i_1_reg_714_pp0_iter5_reg <= i_1_reg_714_pp0_iter4_reg;
        i_1_reg_714_pp0_iter6_reg <= i_1_reg_714_pp0_iter5_reg;
        i_1_reg_714_pp0_iter7_reg <= i_1_reg_714_pp0_iter6_reg;
        i_1_reg_714_pp0_iter8_reg <= i_1_reg_714_pp0_iter7_reg;
        icmp_ln52_reg_726_pp0_iter2_reg <= icmp_ln52_reg_726_pp0_iter1_reg;
        icmp_ln52_reg_726_pp0_iter3_reg <= icmp_ln52_reg_726_pp0_iter2_reg;
        icmp_ln52_reg_726_pp0_iter4_reg <= icmp_ln52_reg_726_pp0_iter3_reg;
        icmp_ln52_reg_726_pp0_iter5_reg <= icmp_ln52_reg_726_pp0_iter4_reg;
        icmp_ln52_reg_726_pp0_iter6_reg <= icmp_ln52_reg_726_pp0_iter5_reg;
        icmp_ln52_reg_726_pp0_iter7_reg <= icmp_ln52_reg_726_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (i_1_reg_714_pp0_iter8_reg == 2'd1))) begin
        layer2_output_1_1_fu_134 <= layer2_output_1_4_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_1_reg_714_pp0_iter8_reg == 2'd1) & ~(i_1_reg_714_pp0_iter8_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        layer2_output_1_2_fu_138 <= layer2_output_1_4_fu_544_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (i_1_reg_714_pp0_iter8_reg == 2'd0))) begin
        layer2_output_1_fu_130 <= layer2_output_1_4_fu_544_p2;
        max_val_fu_126 <= layer2_output_1_4_fu_544_p2;
    end
end

always @ (*) begin
    if (((icmp_ln52_fu_258_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_122;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln52_reg_726_pp0_iter7_reg == 1'd1))) begin
        layer2_output_0_01_out_ap_vld = 1'b1;
    end else begin
        layer2_output_0_01_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln52_reg_726_pp0_iter7_reg == 1'd1))) begin
        layer2_output_1_02_out_ap_vld = 1'b1;
    end else begin
        layer2_output_1_02_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln52_reg_726_pp0_iter7_reg == 1'd1))) begin
        layer2_output_2_03_out_ap_vld = 1'b1;
    end else begin
        layer2_output_2_03_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln52_reg_726_pp0_iter7_reg == 1'd1))) begin
        max_val_out_ap_vld = 1'b1;
    end else begin
        max_val_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_fu_264_p2 = (ap_sig_allocacmp_i_1 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_586_p1 = grp_fu_586_p10;

assign grp_fu_586_p10 = zext_ln55_1;

assign grp_fu_586_p2 = {{tmp_s_reg_735}, {8'd0}};

assign grp_fu_595_p1 = zext_ln55_2_cast_reg_699;

assign grp_fu_595_p2 = {{tmp_9_fu_358_p4}, {8'd0}};

assign grp_fu_603_p1 = zext_ln55_3_cast_reg_694;

assign grp_fu_603_p2 = {{tmp_10_fu_390_p4}, {8'd0}};

assign grp_fu_611_p1 = zext_ln55_4_cast_reg_689;

assign grp_fu_611_p2 = {{tmp_11_fu_422_p4}, {8'd0}};

assign grp_fu_619_p1 = zext_ln55_5_cast_reg_684;

assign grp_fu_619_p2 = {{tmp_12_fu_454_p4}, {8'd0}};

assign grp_fu_627_p1 = zext_ln55_6_cast_reg_679;

assign grp_fu_627_p2 = {{tmp_13_fu_486_p4}, {8'd0}};

assign grp_fu_635_p1 = zext_ln55_7_cast_reg_674;

assign grp_fu_635_p2 = {{tmp_14_fu_503_p4}, {8'd0}};

assign icmp_ln52_fu_258_p2 = ((ap_sig_allocacmp_i_1 == 2'd3) ? 1'b1 : 1'b0);

assign layer2_output_0_01_out = layer2_output_1_fu_130;

assign layer2_output_1_02_out = layer2_output_1_1_fu_134;

assign layer2_output_1_4_fu_544_p2 = ($signed(sext_ln57_fu_540_p1) + $signed(trunc_ln55_7_fu_520_p4));

assign layer2_output_2_03_out = layer2_output_1_2_fu_138;

assign max_val_out = max_val_fu_126;

assign mul_ln55_fu_306_p1 = zext_ln55_cast_reg_709;

assign sext_ln57_fu_540_p1 = $signed(tmp_8_fu_529_p5);

assign tmp_10_fu_390_p1 = grp_fu_595_p3;

assign tmp_10_fu_390_p4 = {{tmp_10_fu_390_p1[23:8]}};

assign tmp_11_fu_422_p1 = grp_fu_603_p3;

assign tmp_11_fu_422_p4 = {{tmp_11_fu_422_p1[23:8]}};

assign tmp_12_fu_454_p1 = grp_fu_611_p3;

assign tmp_12_fu_454_p4 = {{tmp_12_fu_454_p1[23:8]}};

assign tmp_13_fu_486_p1 = grp_fu_619_p3;

assign tmp_13_fu_486_p4 = {{tmp_13_fu_486_p1[23:8]}};

assign tmp_14_fu_503_p1 = grp_fu_627_p3;

assign tmp_14_fu_503_p4 = {{tmp_14_fu_503_p1[23:8]}};

assign tmp_9_fu_358_p1 = grp_fu_586_p3;

assign tmp_9_fu_358_p4 = {{tmp_9_fu_358_p1[23:8]}};

assign trunc_ln55_7_fu_520_p1 = grp_fu_635_p3;

assign trunc_ln55_7_fu_520_p4 = {{trunc_ln55_7_fu_520_p1[23:8]}};

assign zext_ln55_2_cast_fu_238_p1 = zext_ln55_2;

assign zext_ln55_3_cast_fu_234_p1 = zext_ln55_3;

assign zext_ln55_4_cast_fu_230_p1 = zext_ln55_4;

assign zext_ln55_5_cast_fu_226_p1 = zext_ln55_5;

assign zext_ln55_6_cast_fu_222_p1 = zext_ln55_6;

assign zext_ln55_7_cast_fu_218_p1 = zext_ln55_7;

assign zext_ln55_cast_fu_246_p1 = zext_ln55;

always @ (posedge ap_clk) begin
    zext_ln55_7_cast_reg_674[23:15] <= 9'b000000000;
    zext_ln55_6_cast_reg_679[23:15] <= 9'b000000000;
    zext_ln55_5_cast_reg_684[23:15] <= 9'b000000000;
    zext_ln55_4_cast_reg_689[23:15] <= 9'b000000000;
    zext_ln55_3_cast_reg_694[23:15] <= 9'b000000000;
    zext_ln55_2_cast_reg_699[23:15] <= 9'b000000000;
    zext_ln55_cast_reg_709[23:15] <= 9'b000000000;
end

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_52_3
