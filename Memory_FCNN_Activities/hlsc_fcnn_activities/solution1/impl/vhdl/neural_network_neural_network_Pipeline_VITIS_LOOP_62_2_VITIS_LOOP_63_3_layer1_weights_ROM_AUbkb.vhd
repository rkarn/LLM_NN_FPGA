-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity neural_network_neural_network_Pipeline_VITIS_LOOP_62_2_VITIS_LOOP_63_3_layer1_weights_ROM_AUbkb is 
    generic(
             DataWidth     : integer := 12; 
             AddressWidth     : integer := 9; 
             AddressRange    : integer := 360
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of neural_network_neural_network_Pipeline_VITIS_LOOP_62_2_VITIS_LOOP_63_3_layer1_weights_ROM_AUbkb is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000010100011", 1 => "000001011101", 2 => "111110101011", 3 => "111111101111", 
    4 => "000100010110", 5 => "000001110100", 6 => "111110101110", 7 => "000000010011", 
    8 => "000010011111", 9 => "000000111010", 10 => "000111000110", 11 => "000010011001", 
    12 => "111111010110", 13 => "000011110101", 14 => "111011011000", 15 => "111101110010", 
    16 => "111011111100", 17 => "000010011000", 18 => "111111000010", 19 => "111110100100", 
    20 => "000001010100", 21 => "111110110101", 22 => "000000011001", 23 => "000000010100", 
    24 => "000010100111", 25 => "111010111010", 26 => "111010011010", 27 => "000010100001", 
    28 => "000101011001", 29 => "111101101011", 30 => "001000001010", 31 => "001010010011", 
    32 => "000001001010", 33 => "111111010000", 34 => "111110100111", 35 => "000010100000", 
    36 => "111111000101", 37 => "000011110100", 38 => "000000000000", 39 => "111110111010", 
    40 => "000010010100", 41 => "000010010101", 42 => "000000001000", 43 => "000100010011", 
    44 => "111100111010", 45 => "000000101100", 46 => "000100100001", 47 => "111010011111", 
    48 => "000010011101", 49 => "111100100101", 50 => "111110001101", 51 => "111110101101", 
    52 => "000000101101", 53 => "111100111000", 54 => "111100111100", 55 => "111110110011", 
    56 => "000011000110", 57 => "111111011011", 58 => "111111101010", 59 => "000000011001", 
    60 => "111100100110", 61 => "000000101000", 62 => "000011110111", 63 => "111110101000", 
    64 => "111111001110", 65 => "111111100011", 66 => "001011110000", 67 => "111101111110", 
    68 => "000100111001", 69 => "111100010110", 70 => "111111111101", 71 => "000001111100", 
    72 => "111101001000", 73 => "000001101011", 74 => "000000110010", 75 => "111101110011", 
    76 => "111100101101", 77 => "111111110010", 78 => "000010000110", 79 => "111110100100", 
    80 => "111011000010", 81 => "111101011110", 82 => "000010111101", 83 => "111001111111", 
    84 => "111110001010", 85 => "000001101000", 86 => "111101001111", 87 => "000111100100", 
    88 => "111111010100", 89 => "111111001110", 90 => "000001101000", 91 => "111101110111", 
    92 => "111111111111", 93 => "000010010110", 94 => "000001001001", 95 => "111111111011", 
    96 => "111101001110", 97 => "000011010100", 98 => "000000010000", 99 => "111111011110", 
    100 => "000010111000", 101 => "111011111100", 102 => "001001001111", 103 => "111100000000", 
    104 => "111101000100", 105 => "111111110000", 106 => "111100011110", 107 => "111110101011", 
    108 => "111101100000", 109 => "111101101010", 110 => "000100101000", 111 => "000001010010", 
    112 => "000000010100", 113 => "000000111111", 114 => "000000111100", 115 => "111110110100", 
    116 => "000000111111", 117 => "111110100100", 118 => "111111101000", 119 => "000001100111", 
    120 => "111110010010", 121 => "001011100100", 122 => "000100110100", 123 => "000010100011", 
    124 => "111011110100", 125 => "000010000001", 126 => "000000000111", 127 => "000001000101", 
    128 => "111101111110", 129 => "111111010110", 130 => "000000001011", 131 => "000000101010", 
    132 => "000010000111", 133 => "000001001110", 134 => "000101000010", 135 => "000011000011", 
    136 => "111101011100", 137 => "000010110110", 138 => "000010101001", 139 => "111010011101", 
    140 => "111111111100", 141 => "111101001001", 142 => "111101110011", 143 => "000011001010", 
    144 => "111101001101", 145 => "111110010110", 146 => "000001010000", 147 => "000001000100", 
    148 => "000000001001", 149 => "000000011100", 150 => "111100111001", 151 => "111111110101", 
    152 => "000011000011", 153 => "000000100000", 154 => "000000110100", 155 => "000000010110", 
    156 => "111101000001", 157 => "111110111101", 158 => "111000011111", 159 => "111110011110", 
    160 => "111110101111", 161 => "111111100110", 162 => "000101000001", 163 => "111111000010", 
    164 => "111001100011", 165 => "000001110001", 166 => "000001000101", 167 => "111111000001", 
    168 => "000001100111", 169 => "111100110101", 170 => "111100000001", 171 => "111110101011", 
    172 => "111101111000", 173 => "000011101100", 174 => "111101101111", 175 => "000010011010", 
    176 => "111111000001", 177 => "000111010101", 178 => "111011000101", 179 => "000001100101", 
    180 => "111101000110", 181 => "000001011011", 182 => "111110111110", 183 => "111100010000", 
    184 => "111111000010", 185 => "000000101101", 186 => "111110100100", 187 => "111110101110", 
    188 => "000101010010", 189 => "111111001001", 190 => "111100011111", 191 => "111101100000", 
    192 => "111010111001", 193 => "000010101100", 194 => "000110001101", 195 => "111000110100", 
    196 => "000000111001", 197 => "000000010011", 198 => "000100101100", 199 => "111100011000", 
    200 => "000000001110", 201 => "000001010011", 202 => "000001111010", 203 => "111110111010", 
    204 => "000011101010", 205 => "000010101000", 206 => "111001111000", 207 => "111111110100", 
    208 => "111110110001", 209 => "000100001000", 210 => "000100101111", 211 => "000101110110", 
    212 => "000100000010", 213 => "000011101100", 214 => "111101100111", 215 => "000010010011", 
    216 => "111110111110", 217 => "000001100001", 218 => "000000001011", 219 => "111111110100", 
    220 => "000000011001", 221 => "111111100100", 222 => "111111011001", 223 => "000001101110", 
    224 => "000000101101", 225 => "000000111101", 226 => "111101100010", 227 => "000001010001", 
    228 => "111101101101", 229 => "010100011101", 230 => "000100011000", 231 => "111101111100", 
    232 => "111101100011", 233 => "111111011001", 234 => "111111011010", 235 => "111111101101", 
    236 => "000000011111", 237 => "111111110010", 238 => "000001001010", 239 => "000001110101", 
    240 => "000000110010", 241 => "000001100010", 242 => "111111111001", 243 => "000001000100", 
    244 => "111100110010", 245 => "111110110010", 246 => "111101110111", 247 => "111001011000", 
    248 => "001000000111", 249 => "000000010011", 250 => "000001110111", 251 => "111111000000", 
    252 => "111111110111", 253 => "111111111001", 254 => "111111100001", 255 => "111110000011", 
    256 => "111110111001", 257 => "000001110111", 258 => "000011010111", 259 => "110100001000", 
    260 => "000001000010", 261 => "000010011100", 262 => "111101011100", 263 => "111111100001", 
    264 => "111111111111", 265 => "000001101011", 266 => "111110101011", 267 => "111111011010", 
    268 => "000001011001", 269 => "000000011111", 270 => "000100001011", 271 => "111111001111", 
    272 => "111011110110", 273 => "000000100110", 274 => "000001110101", 275 => "111111111000", 
    276 => "000000101010", 277 => "000010111111", 278 => "111111011010", 279 => "111110110000", 
    280 => "111100011101", 281 => "000001101011", 282 => "111100010110", 283 => "000010100101", 
    284 => "111101001101", 285 => "111100111010", 286 => "111100000000", 287 => "000001101000", 
    288 => "111110010010", 289 => "000000111101", 290 => "111110010001", 291 => "000001100111", 
    292 => "000010000011", 293 => "000010110100", 294 => "000001111100", 295 => "000000101001", 
    296 => "000010101000", 297 => "111110101001", 298 => "000000111001", 299 => "111101010111", 
    300 => "111110000110", 301 => "001010011001", 302 => "111000000111", 303 => "111100111101", 
    304 => "000000111100", 305 => "000000000001", 306 => "111011110111", 307 => "000010001100", 
    308 => "111111001110", 309 => "111101010010", 310 => "111111011010", 311 => "000000001101", 
    312 => "111111111001", 313 => "111101010001", 314 => "111110101000", 315 => "000000010001", 
    316 => "110101010101", 317 => "001000010001", 318 => "000000101000", 319 => "000011011010", 
    320 => "000000110111", 321 => "111011110111", 322 => "111111011100", 323 => "000001000011", 
    324 => "000000010110", 325 => "111111010111", 326 => "111101110000", 327 => "000001001010", 
    328 => "000000001001", 329 => "000000110011", 330 => "111111010000", 331 => "111110110100", 
    332 => "111011110111", 333 => "111111000000", 334 => "000001011010", 335 => "111110001011", 
    336 => "111100001111", 337 => "000101100110", 338 => "111011010110", 339 => "000000110011", 
    340 => "000000111001", 341 => "000010011010", 342 => "000000110001", 343 => "111110011110", 
    344 => "000010100100", 345 => "111111111110", 346 => "111111110000", 347 => "111110011001", 
    348 => "000110001110", 349 => "000100000111", 350 => "111100101101", 351 => "111101111011", 
    352 => "111011111111", 353 => "001000011010", 354 => "111110100010", 355 => "000001010011", 
    356 => "111111111100", 357 => "000001001010", 358 => "111100000111", 359 => "000100010100");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

