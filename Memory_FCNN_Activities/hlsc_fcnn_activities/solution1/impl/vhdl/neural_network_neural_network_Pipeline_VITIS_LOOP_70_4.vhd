-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network_neural_network_Pipeline_VITIS_LOOP_70_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer1_output_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    layer1_output_3_ce0 : OUT STD_LOGIC;
    layer1_output_3_we0 : OUT STD_LOGIC;
    layer1_output_3_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    layer1_output_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    layer1_output_2_ce0 : OUT STD_LOGIC;
    layer1_output_2_we0 : OUT STD_LOGIC;
    layer1_output_2_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    layer1_output_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    layer1_output_1_ce0 : OUT STD_LOGIC;
    layer1_output_1_we0 : OUT STD_LOGIC;
    layer1_output_1_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    layer1_output_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    layer1_output_ce0 : OUT STD_LOGIC;
    layer1_output_we0 : OUT STD_LOGIC;
    layer1_output_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    tile : IN STD_LOGIC_VECTOR (4 downto 0);
    layer1_weight_tile_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_1_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_2_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_3_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_4_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_4_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_5_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_5_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_6_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_6_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_7_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_7_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_8_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_8_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_8_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_9_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_9_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_9_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_10_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_10_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_10_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_11_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_11_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_11_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_12_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_12_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_12_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_13_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_13_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_13_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_14_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_14_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_14_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_15_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_15_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_15_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_16_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_16_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_16_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_16 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_17_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_17_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_17_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    sext_ln74_17 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of neural_network_neural_network_Pipeline_VITIS_LOOP_70_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln70_reg_1369 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_bias_ce0 : STD_LOGIC;
    signal layer1_bias_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln74_17_cast_fu_559_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_17_cast_reg_1255 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_16_cast_fu_563_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_16_cast_reg_1260 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_15_cast_fu_567_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_15_cast_reg_1265 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_14_cast_fu_571_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_14_cast_reg_1270 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_13_cast_fu_575_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_13_cast_reg_1275 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_12_cast_fu_579_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_12_cast_reg_1280 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_11_cast_fu_583_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_11_cast_reg_1285 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_10_cast_fu_587_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_10_cast_reg_1290 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_9_cast_fu_591_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_9_cast_reg_1295 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_8_cast_fu_595_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_8_cast_reg_1300 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_7_cast_fu_599_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_7_cast_reg_1305 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_6_cast_fu_603_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_6_cast_reg_1310 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_5_cast_fu_607_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_5_cast_reg_1315 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_4_cast_fu_611_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_4_cast_reg_1320 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_3_cast_fu_615_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_3_cast_reg_1325 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_2_cast_fu_619_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_2_cast_reg_1330 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_1_cast_fu_623_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_1_cast_reg_1335 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_cast_fu_627_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_cast_reg_1340 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_reg_1345 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1345_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1345_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1345_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1345_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1345_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1345_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1345_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_1345_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln70_2_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_1350 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_1350_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_1350_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_1350_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_1350_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_1350_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_1350_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_1350_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln70_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln70_fu_658_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_1373 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_1373_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_1373_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_1373_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_1373_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_1373_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_1373_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_1373_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_1373_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_1373_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_1373_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal layer1_weight_tile_load_reg_1392 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal layer1_weight_tile_2_load_reg_1402 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_reg_1407 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_weight_tile_4_load_reg_1437 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer1_weight_tile_6_load_reg_1472 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer1_weight_tile_8_load_reg_1507 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer1_weight_tile_10_load_reg_1542 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer1_weight_tile_12_load_reg_1577 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer1_weight_tile_14_load_reg_1612 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer1_weight_tile_16_load_reg_1647 : STD_LOGIC_VECTOR (11 downto 0);
    signal lshr_ln_reg_1677 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln_reg_1677_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal layer1_bias_load_reg_1697 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln72_fu_1077_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln72_reg_1703 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln14_fu_1083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_1708 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln70_fu_998_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_1_fu_1089_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal i_1_fu_142 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln70_1_fu_652_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln14_fu_1096_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln74_fu_674_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln74_fu_674_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_703_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1106_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_703_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_723_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1114_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_fu_723_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_744_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1122_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_744_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_764_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1130_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_fu_764_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_785_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1138_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_7_fu_785_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_805_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1146_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_805_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_826_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1154_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_fu_826_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_846_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1162_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_846_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_867_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1170_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_12_fu_867_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_887_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1178_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_fu_887_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_908_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1186_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_fu_908_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_928_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1194_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_15_fu_928_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_949_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1202_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_16_fu_949_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_969_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1210_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_fu_969_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln70_3_fu_990_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln70_fu_993_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_fu_1013_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1218_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_fu_1013_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_1030_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1226_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_19_fu_1030_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_1047_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1234_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1_fu_1059_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln76_fu_1056_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_1047_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln76_1_fu_1068_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln1_fu_1059_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum_2_fu_1071_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1106_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1106_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1114_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1114_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1122_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1122_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1130_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1130_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1138_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1138_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1146_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1146_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1154_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1154_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1162_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1162_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1170_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1170_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1178_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1178_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1186_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1186_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1194_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1194_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1202_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1202_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1210_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1210_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1218_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1218_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1226_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1226_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1234_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1234_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to10 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component neural_network_mul_12s_16s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_12s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_4_layer1_bias_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    layer1_bias_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_4_layer1_bias_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_bias_address0,
        ce0 => layer1_bias_ce0,
        q0 => layer1_bias_q0);

    mul_12s_16s_24_1_1_U21 : component neural_network_mul_12s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => layer1_weight_tile_load_reg_1392,
        din1 => mul_ln74_fu_674_p1,
        dout => mul_ln74_fu_674_p2);

    mac_muladd_12s_16s_24ns_24_4_1_U22 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_1_q0,
        din1 => grp_fu_1106_p1,
        din2 => grp_fu_1106_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1106_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U23 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_2_load_reg_1402,
        din1 => grp_fu_1114_p1,
        din2 => grp_fu_1114_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1114_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U24 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_3_q0,
        din1 => grp_fu_1122_p1,
        din2 => grp_fu_1122_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1122_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U25 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_4_load_reg_1437,
        din1 => grp_fu_1130_p1,
        din2 => grp_fu_1130_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1130_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U26 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_5_q0,
        din1 => grp_fu_1138_p1,
        din2 => grp_fu_1138_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1138_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U27 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_6_load_reg_1472,
        din1 => grp_fu_1146_p1,
        din2 => grp_fu_1146_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1146_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U28 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_7_q0,
        din1 => grp_fu_1154_p1,
        din2 => grp_fu_1154_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1154_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U29 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_8_load_reg_1507,
        din1 => grp_fu_1162_p1,
        din2 => grp_fu_1162_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1162_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U30 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_9_q0,
        din1 => grp_fu_1170_p1,
        din2 => grp_fu_1170_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1170_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U31 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_10_load_reg_1542,
        din1 => grp_fu_1178_p1,
        din2 => grp_fu_1178_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1178_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U32 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_11_q0,
        din1 => grp_fu_1186_p1,
        din2 => grp_fu_1186_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1186_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U33 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_12_load_reg_1577,
        din1 => grp_fu_1194_p1,
        din2 => grp_fu_1194_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1194_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U34 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_13_q0,
        din1 => grp_fu_1202_p1,
        din2 => grp_fu_1202_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1202_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U35 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_14_load_reg_1612,
        din1 => grp_fu_1210_p1,
        din2 => grp_fu_1210_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1210_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U36 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_15_q0,
        din1 => grp_fu_1218_p1,
        din2 => grp_fu_1218_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1218_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U37 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_16_load_reg_1647,
        din1 => grp_fu_1226_p1,
        din2 => grp_fu_1226_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1226_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U38 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_17_q0,
        din1 => grp_fu_1234_p1,
        din2 => grp_fu_1234_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1234_p3);

    flow_control_loop_pipe_sequential_init_U : component neural_network_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln70_fu_646_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_1_fu_142 <= add_ln70_1_fu_652_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_142 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln72_reg_1703 <= add_ln72_fu_1077_p2;
                i_reg_1345 <= ap_sig_allocacmp_i;
                i_reg_1345_pp0_iter1_reg <= i_reg_1345;
                i_reg_1345_pp0_iter2_reg <= i_reg_1345_pp0_iter1_reg;
                i_reg_1345_pp0_iter3_reg <= i_reg_1345_pp0_iter2_reg;
                i_reg_1345_pp0_iter4_reg <= i_reg_1345_pp0_iter3_reg;
                i_reg_1345_pp0_iter5_reg <= i_reg_1345_pp0_iter4_reg;
                i_reg_1345_pp0_iter6_reg <= i_reg_1345_pp0_iter5_reg;
                i_reg_1345_pp0_iter7_reg <= i_reg_1345_pp0_iter6_reg;
                i_reg_1345_pp0_iter8_reg <= i_reg_1345_pp0_iter7_reg;
                icmp_ln14_reg_1708 <= icmp_ln14_fu_1083_p2;
                icmp_ln70_reg_1369 <= icmp_ln70_fu_646_p2;
                lshr_ln_reg_1677 <= add_ln70_fu_993_p2(4 downto 2);
                lshr_ln_reg_1677_pp0_iter10_reg <= lshr_ln_reg_1677;
                sext_ln74_10_cast_reg_1290 <= sext_ln74_10_cast_fu_587_p1;
                sext_ln74_11_cast_reg_1285 <= sext_ln74_11_cast_fu_583_p1;
                sext_ln74_12_cast_reg_1280 <= sext_ln74_12_cast_fu_579_p1;
                sext_ln74_13_cast_reg_1275 <= sext_ln74_13_cast_fu_575_p1;
                sext_ln74_14_cast_reg_1270 <= sext_ln74_14_cast_fu_571_p1;
                sext_ln74_15_cast_reg_1265 <= sext_ln74_15_cast_fu_567_p1;
                sext_ln74_16_cast_reg_1260 <= sext_ln74_16_cast_fu_563_p1;
                sext_ln74_17_cast_reg_1255 <= sext_ln74_17_cast_fu_559_p1;
                sext_ln74_1_cast_reg_1335 <= sext_ln74_1_cast_fu_623_p1;
                sext_ln74_2_cast_reg_1330 <= sext_ln74_2_cast_fu_619_p1;
                sext_ln74_3_cast_reg_1325 <= sext_ln74_3_cast_fu_615_p1;
                sext_ln74_4_cast_reg_1320 <= sext_ln74_4_cast_fu_611_p1;
                sext_ln74_5_cast_reg_1315 <= sext_ln74_5_cast_fu_607_p1;
                sext_ln74_6_cast_reg_1310 <= sext_ln74_6_cast_fu_603_p1;
                sext_ln74_7_cast_reg_1305 <= sext_ln74_7_cast_fu_599_p1;
                sext_ln74_8_cast_reg_1300 <= sext_ln74_8_cast_fu_595_p1;
                sext_ln74_9_cast_reg_1295 <= sext_ln74_9_cast_fu_591_p1;
                sext_ln74_cast_reg_1340 <= sext_ln74_cast_fu_627_p1;
                tmp_9_reg_1407 <= mul_ln74_fu_674_p2(23 downto 8);
                trunc_ln70_reg_1373_pp0_iter10_reg <= trunc_ln70_reg_1373_pp0_iter9_reg;
                trunc_ln70_reg_1373_pp0_iter1_reg <= trunc_ln70_reg_1373;
                trunc_ln70_reg_1373_pp0_iter2_reg <= trunc_ln70_reg_1373_pp0_iter1_reg;
                trunc_ln70_reg_1373_pp0_iter3_reg <= trunc_ln70_reg_1373_pp0_iter2_reg;
                trunc_ln70_reg_1373_pp0_iter4_reg <= trunc_ln70_reg_1373_pp0_iter3_reg;
                trunc_ln70_reg_1373_pp0_iter5_reg <= trunc_ln70_reg_1373_pp0_iter4_reg;
                trunc_ln70_reg_1373_pp0_iter6_reg <= trunc_ln70_reg_1373_pp0_iter5_reg;
                trunc_ln70_reg_1373_pp0_iter7_reg <= trunc_ln70_reg_1373_pp0_iter6_reg;
                trunc_ln70_reg_1373_pp0_iter8_reg <= trunc_ln70_reg_1373_pp0_iter7_reg;
                trunc_ln70_reg_1373_pp0_iter9_reg <= trunc_ln70_reg_1373_pp0_iter8_reg;
                    zext_ln70_2_reg_1350(2 downto 0) <= zext_ln70_2_fu_639_p1(2 downto 0);
                    zext_ln70_2_reg_1350_pp0_iter1_reg(2 downto 0) <= zext_ln70_2_reg_1350(2 downto 0);
                    zext_ln70_2_reg_1350_pp0_iter2_reg(2 downto 0) <= zext_ln70_2_reg_1350_pp0_iter1_reg(2 downto 0);
                    zext_ln70_2_reg_1350_pp0_iter3_reg(2 downto 0) <= zext_ln70_2_reg_1350_pp0_iter2_reg(2 downto 0);
                    zext_ln70_2_reg_1350_pp0_iter4_reg(2 downto 0) <= zext_ln70_2_reg_1350_pp0_iter3_reg(2 downto 0);
                    zext_ln70_2_reg_1350_pp0_iter5_reg(2 downto 0) <= zext_ln70_2_reg_1350_pp0_iter4_reg(2 downto 0);
                    zext_ln70_2_reg_1350_pp0_iter6_reg(2 downto 0) <= zext_ln70_2_reg_1350_pp0_iter5_reg(2 downto 0);
                    zext_ln70_2_reg_1350_pp0_iter7_reg(2 downto 0) <= zext_ln70_2_reg_1350_pp0_iter6_reg(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                layer1_bias_load_reg_1697 <= layer1_bias_q0;
                layer1_weight_tile_10_load_reg_1542 <= layer1_weight_tile_10_q0;
                layer1_weight_tile_12_load_reg_1577 <= layer1_weight_tile_12_q0;
                layer1_weight_tile_14_load_reg_1612 <= layer1_weight_tile_14_q0;
                layer1_weight_tile_16_load_reg_1647 <= layer1_weight_tile_16_q0;
                layer1_weight_tile_4_load_reg_1437 <= layer1_weight_tile_4_q0;
                layer1_weight_tile_6_load_reg_1472 <= layer1_weight_tile_6_q0;
                layer1_weight_tile_8_load_reg_1507 <= layer1_weight_tile_8_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_reg_1369 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                layer1_weight_tile_2_load_reg_1402 <= layer1_weight_tile_2_q0;
                layer1_weight_tile_load_reg_1392 <= layer1_weight_tile_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln70_fu_646_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln70_reg_1373 <= trunc_ln70_fu_658_p1;
            end if;
        end if;
    end process;
    zext_ln70_2_reg_1350(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_1350_pp0_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_1350_pp0_iter2_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_1350_pp0_iter3_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_1350_pp0_iter4_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_1350_pp0_iter5_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_1350_pp0_iter6_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_1350_pp0_iter7_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to10, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to10 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln70_1_fu_652_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv3_1));
    add_ln70_fu_993_p2 <= std_logic_vector(unsigned(zext_ln70_3_fu_990_p1) + unsigned(tile));
    add_ln72_fu_1077_p2 <= std_logic_vector(signed(sext_ln76_1_fu_1068_p1) + signed(trunc_ln1_fu_1059_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln70_reg_1369)
    begin
        if (((icmp_ln70_reg_1369 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to10_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to10 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to10 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_1_fu_142, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_142;
        end if; 
    end process;

    grp_fu_1106_p1 <= sext_ln74_1_cast_reg_1335(16 - 1 downto 0);
    grp_fu_1106_p2 <= (tmp_9_reg_1407 & ap_const_lv8_0);
    grp_fu_1114_p1 <= sext_ln74_2_cast_reg_1330(16 - 1 downto 0);
    grp_fu_1114_p2 <= (tmp_s_fu_703_p4 & ap_const_lv8_0);
    grp_fu_1122_p1 <= sext_ln74_3_cast_reg_1325(16 - 1 downto 0);
    grp_fu_1122_p2 <= (tmp_4_fu_723_p4 & ap_const_lv8_0);
    grp_fu_1130_p1 <= sext_ln74_4_cast_reg_1320(16 - 1 downto 0);
    grp_fu_1130_p2 <= (tmp_5_fu_744_p4 & ap_const_lv8_0);
    grp_fu_1138_p1 <= sext_ln74_5_cast_reg_1315(16 - 1 downto 0);
    grp_fu_1138_p2 <= (tmp_6_fu_764_p4 & ap_const_lv8_0);
    grp_fu_1146_p1 <= sext_ln74_6_cast_reg_1310(16 - 1 downto 0);
    grp_fu_1146_p2 <= (tmp_7_fu_785_p4 & ap_const_lv8_0);
    grp_fu_1154_p1 <= sext_ln74_7_cast_reg_1305(16 - 1 downto 0);
    grp_fu_1154_p2 <= (tmp_8_fu_805_p4 & ap_const_lv8_0);
    grp_fu_1162_p1 <= sext_ln74_8_cast_reg_1300(16 - 1 downto 0);
    grp_fu_1162_p2 <= (tmp_10_fu_826_p4 & ap_const_lv8_0);
    grp_fu_1170_p1 <= sext_ln74_9_cast_reg_1295(16 - 1 downto 0);
    grp_fu_1170_p2 <= (tmp_11_fu_846_p4 & ap_const_lv8_0);
    grp_fu_1178_p1 <= sext_ln74_10_cast_reg_1290(16 - 1 downto 0);
    grp_fu_1178_p2 <= (tmp_12_fu_867_p4 & ap_const_lv8_0);
    grp_fu_1186_p1 <= sext_ln74_11_cast_reg_1285(16 - 1 downto 0);
    grp_fu_1186_p2 <= (tmp_13_fu_887_p4 & ap_const_lv8_0);
    grp_fu_1194_p1 <= sext_ln74_12_cast_reg_1280(16 - 1 downto 0);
    grp_fu_1194_p2 <= (tmp_14_fu_908_p4 & ap_const_lv8_0);
    grp_fu_1202_p1 <= sext_ln74_13_cast_reg_1275(16 - 1 downto 0);
    grp_fu_1202_p2 <= (tmp_15_fu_928_p4 & ap_const_lv8_0);
    grp_fu_1210_p1 <= sext_ln74_14_cast_reg_1270(16 - 1 downto 0);
    grp_fu_1210_p2 <= (tmp_16_fu_949_p4 & ap_const_lv8_0);
    grp_fu_1218_p1 <= sext_ln74_15_cast_reg_1265(16 - 1 downto 0);
    grp_fu_1218_p2 <= (tmp_17_fu_969_p4 & ap_const_lv8_0);
    grp_fu_1226_p1 <= sext_ln74_16_cast_reg_1260(16 - 1 downto 0);
    grp_fu_1226_p2 <= (tmp_18_fu_1013_p4 & ap_const_lv8_0);
    grp_fu_1234_p1 <= sext_ln74_17_cast_reg_1255(16 - 1 downto 0);
    grp_fu_1234_p2 <= (tmp_19_fu_1030_p4 & ap_const_lv8_0);
    icmp_ln14_fu_1083_p2 <= "1" when (signed(sum_2_fu_1071_p2) > signed(ap_const_lv16_0)) else "0";
    icmp_ln70_fu_646_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv3_4) else "0";
    layer1_bias_address0 <= zext_ln70_fu_998_p1(5 - 1 downto 0);

    layer1_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_bias_ce0 <= ap_const_logic_1;
        else 
            layer1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_1_address0 <= zext_ln70_1_fu_1089_p1(3 - 1 downto 0);

    layer1_output_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer1_output_1_ce0 <= ap_const_logic_1;
        else 
            layer1_output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_1_d0 <= select_ln14_fu_1096_p3;

    layer1_output_1_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, trunc_ln70_reg_1373_pp0_iter10_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln70_reg_1373_pp0_iter10_reg = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer1_output_1_we0 <= ap_const_logic_1;
        else 
            layer1_output_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_2_address0 <= zext_ln70_1_fu_1089_p1(3 - 1 downto 0);

    layer1_output_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer1_output_2_ce0 <= ap_const_logic_1;
        else 
            layer1_output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_2_d0 <= select_ln14_fu_1096_p3;

    layer1_output_2_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, trunc_ln70_reg_1373_pp0_iter10_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln70_reg_1373_pp0_iter10_reg = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer1_output_2_we0 <= ap_const_logic_1;
        else 
            layer1_output_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_3_address0 <= zext_ln70_1_fu_1089_p1(3 - 1 downto 0);

    layer1_output_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer1_output_3_ce0 <= ap_const_logic_1;
        else 
            layer1_output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_3_d0 <= select_ln14_fu_1096_p3;

    layer1_output_3_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, trunc_ln70_reg_1373_pp0_iter10_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln70_reg_1373_pp0_iter10_reg = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer1_output_3_we0 <= ap_const_logic_1;
        else 
            layer1_output_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_address0 <= zext_ln70_1_fu_1089_p1(3 - 1 downto 0);

    layer1_output_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer1_output_ce0 <= ap_const_logic_1;
        else 
            layer1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_d0 <= select_ln14_fu_1096_p3;

    layer1_output_we0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_CS_fsm_pp0_stage1, trunc_ln70_reg_1373_pp0_iter10_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (trunc_ln70_reg_1373_pp0_iter10_reg = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer1_output_we0 <= ap_const_logic_1;
        else 
            layer1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_10_address0 <= zext_ln70_2_reg_1350_pp0_iter3_reg(2 - 1 downto 0);

    layer1_weight_tile_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_10_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_11_address0 <= zext_ln70_2_reg_1350_pp0_iter4_reg(2 - 1 downto 0);

    layer1_weight_tile_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_11_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_12_address0 <= zext_ln70_2_reg_1350_pp0_iter4_reg(2 - 1 downto 0);

    layer1_weight_tile_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_12_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_13_address0 <= zext_ln70_2_reg_1350_pp0_iter5_reg(2 - 1 downto 0);

    layer1_weight_tile_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_13_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_14_address0 <= zext_ln70_2_reg_1350_pp0_iter5_reg(2 - 1 downto 0);

    layer1_weight_tile_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_14_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_15_address0 <= zext_ln70_2_reg_1350_pp0_iter6_reg(2 - 1 downto 0);

    layer1_weight_tile_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_15_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_16_address0 <= zext_ln70_2_reg_1350_pp0_iter6_reg(2 - 1 downto 0);

    layer1_weight_tile_16_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_16_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_17_address0 <= zext_ln70_2_reg_1350_pp0_iter7_reg(2 - 1 downto 0);

    layer1_weight_tile_17_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_17_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_1_address0 <= zext_ln70_2_fu_639_p1(2 - 1 downto 0);

    layer1_weight_tile_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_1_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_2_address0 <= zext_ln70_2_fu_639_p1(2 - 1 downto 0);

    layer1_weight_tile_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_2_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_3_address0 <= zext_ln70_2_reg_1350(2 - 1 downto 0);

    layer1_weight_tile_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_3_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_4_address0 <= zext_ln70_2_reg_1350(2 - 1 downto 0);

    layer1_weight_tile_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_4_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_5_address0 <= zext_ln70_2_reg_1350_pp0_iter1_reg(2 - 1 downto 0);

    layer1_weight_tile_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_5_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_6_address0 <= zext_ln70_2_reg_1350_pp0_iter1_reg(2 - 1 downto 0);

    layer1_weight_tile_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_6_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_7_address0 <= zext_ln70_2_reg_1350_pp0_iter2_reg(2 - 1 downto 0);

    layer1_weight_tile_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_7_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_8_address0 <= zext_ln70_2_reg_1350_pp0_iter2_reg(2 - 1 downto 0);

    layer1_weight_tile_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_8_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_9_address0 <= zext_ln70_2_reg_1350_pp0_iter3_reg(2 - 1 downto 0);

    layer1_weight_tile_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_9_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_address0 <= zext_ln70_2_fu_639_p1(2 - 1 downto 0);

    layer1_weight_tile_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln74_fu_674_p1 <= sext_ln74_cast_reg_1340(16 - 1 downto 0);
    select_ln14_fu_1096_p3 <= 
        add_ln72_reg_1703 when (icmp_ln14_reg_1708(0) = '1') else 
        ap_const_lv15_0;
        sext_ln74_10_cast_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_10),24));

        sext_ln74_11_cast_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_11),24));

        sext_ln74_12_cast_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_12),24));

        sext_ln74_13_cast_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_13),24));

        sext_ln74_14_cast_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_14),24));

        sext_ln74_15_cast_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_15),24));

        sext_ln74_16_cast_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_16),24));

        sext_ln74_17_cast_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_17),24));

        sext_ln74_1_cast_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_1),24));

        sext_ln74_2_cast_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_2),24));

        sext_ln74_3_cast_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_3),24));

        sext_ln74_4_cast_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_4),24));

        sext_ln74_5_cast_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_5),24));

        sext_ln74_6_cast_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_6),24));

        sext_ln74_7_cast_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_7),24));

        sext_ln74_8_cast_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_8),24));

        sext_ln74_9_cast_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_9),24));

        sext_ln74_cast_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74),24));

        sext_ln76_1_fu_1068_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(layer1_bias_load_reg_1697),15));

        sext_ln76_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(layer1_bias_load_reg_1697),16));

    sum_2_fu_1071_p2 <= std_logic_vector(signed(sext_ln76_fu_1056_p1) + signed(sum_fu_1047_p4));
    sum_fu_1047_p1 <= grp_fu_1234_p3;
    sum_fu_1047_p4 <= sum_fu_1047_p1(23 downto 8);
    tmp_10_fu_826_p1 <= grp_fu_1154_p3;
    tmp_10_fu_826_p4 <= tmp_10_fu_826_p1(23 downto 8);
    tmp_11_fu_846_p1 <= grp_fu_1162_p3;
    tmp_11_fu_846_p4 <= tmp_11_fu_846_p1(23 downto 8);
    tmp_12_fu_867_p1 <= grp_fu_1170_p3;
    tmp_12_fu_867_p4 <= tmp_12_fu_867_p1(23 downto 8);
    tmp_13_fu_887_p1 <= grp_fu_1178_p3;
    tmp_13_fu_887_p4 <= tmp_13_fu_887_p1(23 downto 8);
    tmp_14_fu_908_p1 <= grp_fu_1186_p3;
    tmp_14_fu_908_p4 <= tmp_14_fu_908_p1(23 downto 8);
    tmp_15_fu_928_p1 <= grp_fu_1194_p3;
    tmp_15_fu_928_p4 <= tmp_15_fu_928_p1(23 downto 8);
    tmp_16_fu_949_p1 <= grp_fu_1202_p3;
    tmp_16_fu_949_p4 <= tmp_16_fu_949_p1(23 downto 8);
    tmp_17_fu_969_p1 <= grp_fu_1210_p3;
    tmp_17_fu_969_p4 <= tmp_17_fu_969_p1(23 downto 8);
    tmp_18_fu_1013_p1 <= grp_fu_1218_p3;
    tmp_18_fu_1013_p4 <= tmp_18_fu_1013_p1(23 downto 8);
    tmp_19_fu_1030_p1 <= grp_fu_1226_p3;
    tmp_19_fu_1030_p4 <= tmp_19_fu_1030_p1(23 downto 8);
    tmp_4_fu_723_p1 <= grp_fu_1114_p3;
    tmp_4_fu_723_p4 <= tmp_4_fu_723_p1(23 downto 8);
    tmp_5_fu_744_p1 <= grp_fu_1122_p3;
    tmp_5_fu_744_p4 <= tmp_5_fu_744_p1(23 downto 8);
    tmp_6_fu_764_p1 <= grp_fu_1130_p3;
    tmp_6_fu_764_p4 <= tmp_6_fu_764_p1(23 downto 8);
    tmp_7_fu_785_p1 <= grp_fu_1138_p3;
    tmp_7_fu_785_p4 <= tmp_7_fu_785_p1(23 downto 8);
    tmp_8_fu_805_p1 <= grp_fu_1146_p3;
    tmp_8_fu_805_p4 <= tmp_8_fu_805_p1(23 downto 8);
    tmp_s_fu_703_p1 <= grp_fu_1106_p3;
    tmp_s_fu_703_p4 <= tmp_s_fu_703_p1(23 downto 8);
    trunc_ln1_fu_1059_p1 <= grp_fu_1234_p3;
    trunc_ln1_fu_1059_p4 <= trunc_ln1_fu_1059_p1(22 downto 8);
    trunc_ln70_fu_658_p1 <= ap_sig_allocacmp_i(2 - 1 downto 0);
    zext_ln70_1_fu_1089_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_1677_pp0_iter10_reg),64));
    zext_ln70_2_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
    zext_ln70_3_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_1345_pp0_iter8_reg),5));
    zext_ln70_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_fu_993_p2),64));
end behav;
