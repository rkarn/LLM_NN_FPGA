// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_84_7_VITIS_LOOP_85_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer2_weight_tile_address0,
        layer2_weight_tile_ce0,
        layer2_weight_tile_we0,
        layer2_weight_tile_d0,
        zext_ln82,
        layer2_weight_tile_1_address0,
        layer2_weight_tile_1_ce0,
        layer2_weight_tile_1_we0,
        layer2_weight_tile_1_d0,
        layer2_weight_tile_2_address0,
        layer2_weight_tile_2_ce0,
        layer2_weight_tile_2_we0,
        layer2_weight_tile_2_d0,
        layer2_weight_tile_3_address0,
        layer2_weight_tile_3_ce0,
        layer2_weight_tile_3_we0,
        layer2_weight_tile_3_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] layer2_weight_tile_address0;
output   layer2_weight_tile_ce0;
output   layer2_weight_tile_we0;
output  [11:0] layer2_weight_tile_d0;
input  [4:0] zext_ln82;
output  [2:0] layer2_weight_tile_1_address0;
output   layer2_weight_tile_1_ce0;
output   layer2_weight_tile_1_we0;
output  [11:0] layer2_weight_tile_1_d0;
output  [2:0] layer2_weight_tile_2_address0;
output   layer2_weight_tile_2_ce0;
output   layer2_weight_tile_2_we0;
output  [11:0] layer2_weight_tile_2_d0;
output  [2:0] layer2_weight_tile_3_address0;
output   layer2_weight_tile_3_ce0;
output   layer2_weight_tile_3_we0;
output  [11:0] layer2_weight_tile_3_d0;

reg ap_idle;
reg layer2_weight_tile_ce0;
reg layer2_weight_tile_we0;
reg layer2_weight_tile_1_ce0;
reg layer2_weight_tile_1_we0;
reg layer2_weight_tile_2_ce0;
reg layer2_weight_tile_2_we0;
reg layer2_weight_tile_3_ce0;
reg layer2_weight_tile_3_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln84_fu_171_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [6:0] layer2_weights_address0;
reg    layer2_weights_ce0;
wire   [11:0] layer2_weights_q0;
wire   [6:0] zext_ln82_cast_fu_149_p1;
reg   [6:0] zext_ln82_cast_reg_313;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln84_reg_318;
wire    ap_block_pp0_stage1_11001;
wire   [63:0] select_ln84_fu_201_p3;
reg   [63:0] select_ln84_reg_322;
wire   [2:0] select_ln84_1_fu_209_p3;
reg   [2:0] select_ln84_1_reg_327;
wire   [6:0] add_ln87_fu_237_p2;
reg   [6:0] add_ln87_reg_332;
wire   [6:0] trunc_ln85_fu_243_p1;
reg   [6:0] trunc_ln85_reg_337;
wire   [1:0] trunc_ln85_1_fu_247_p1;
reg   [1:0] trunc_ln85_1_reg_342;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln87_1_fu_270_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln84_fu_285_p1;
wire    ap_block_pp0_stage1;
reg   [63:0] j_fu_62;
wire   [63:0] add_ln85_1_fu_275_p2;
wire    ap_loop_init;
reg   [2:0] i_fu_66;
reg   [4:0] indvar_flatten28_fu_70;
wire   [4:0] add_ln84_1_fu_177_p2;
wire   [0:0] icmp_ln85_fu_195_p2;
wire   [2:0] add_ln84_fu_189_p2;
wire   [4:0] tmp_3_fu_225_p3;
wire   [6:0] tmp_s_fu_217_p3;
wire   [6:0] zext_ln87_fu_233_p1;
wire   [6:0] add_ln85_fu_261_p2;
wire   [6:0] add_ln87_1_fu_265_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

neural_network_neural_network_Pipeline_VITIS_LOOP_84_7_VITIS_LOOP_85_8_layer2_weights_ROM_AUcud #(
    .DataWidth( 12 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
layer2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_address0),
    .ce0(layer2_weights_ce0),
    .q0(layer2_weights_q0)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_66 <= 3'd0;
    end else if (((icmp_ln84_fu_171_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_66 <= select_ln84_1_fu_209_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        indvar_flatten28_fu_70 <= 5'd0;
    end else if (((icmp_ln84_fu_171_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        indvar_flatten28_fu_70 <= add_ln84_1_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_62 <= 64'd0;
        end else if (((icmp_ln84_reg_318 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_62 <= add_ln85_1_fu_275_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln84_fu_171_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln87_reg_332[6 : 2] <= add_ln87_fu_237_p2[6 : 2];
        select_ln84_1_reg_327 <= select_ln84_1_fu_209_p3;
        select_ln84_reg_322 <= select_ln84_fu_201_p3;
        trunc_ln85_1_reg_342 <= trunc_ln85_1_fu_247_p1;
        trunc_ln85_reg_337 <= trunc_ln85_fu_243_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        icmp_ln84_reg_318 <= icmp_ln84_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln82_cast_reg_313[4 : 0] <= zext_ln82_cast_fu_149_p1[4 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln84_fu_171_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer2_weight_tile_1_ce0 = 1'b1;
    end else begin
        layer2_weight_tile_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln85_1_reg_342 == 2'd1))) begin
        layer2_weight_tile_1_we0 = 1'b1;
    end else begin
        layer2_weight_tile_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer2_weight_tile_2_ce0 = 1'b1;
    end else begin
        layer2_weight_tile_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln85_1_reg_342 == 2'd2))) begin
        layer2_weight_tile_2_we0 = 1'b1;
    end else begin
        layer2_weight_tile_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer2_weight_tile_3_ce0 = 1'b1;
    end else begin
        layer2_weight_tile_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln85_1_reg_342 == 2'd3))) begin
        layer2_weight_tile_3_we0 = 1'b1;
    end else begin
        layer2_weight_tile_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer2_weight_tile_ce0 = 1'b1;
    end else begin
        layer2_weight_tile_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln85_1_reg_342 == 2'd0))) begin
        layer2_weight_tile_we0 = 1'b1;
    end else begin
        layer2_weight_tile_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_weights_ce0 = 1'b1;
    end else begin
        layer2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln84_1_fu_177_p2 = (indvar_flatten28_fu_70 + 5'd1);

assign add_ln84_fu_189_p2 = (i_fu_66 + 3'd1);

assign add_ln85_1_fu_275_p2 = (select_ln84_reg_322 + 64'd1);

assign add_ln85_fu_261_p2 = (trunc_ln85_reg_337 + zext_ln82_cast_reg_313);

assign add_ln87_1_fu_265_p2 = (add_ln87_reg_332 + add_ln85_fu_261_p2);

assign add_ln87_fu_237_p2 = (tmp_s_fu_217_p3 + zext_ln87_fu_233_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign icmp_ln84_fu_171_p2 = ((indvar_flatten28_fu_70 == 5'd20) ? 1'b1 : 1'b0);

assign icmp_ln85_fu_195_p2 = ((j_fu_62 == 64'd4) ? 1'b1 : 1'b0);

assign layer2_weight_tile_1_address0 = zext_ln84_fu_285_p1;

assign layer2_weight_tile_1_d0 = layer2_weights_q0;

assign layer2_weight_tile_2_address0 = zext_ln84_fu_285_p1;

assign layer2_weight_tile_2_d0 = layer2_weights_q0;

assign layer2_weight_tile_3_address0 = zext_ln84_fu_285_p1;

assign layer2_weight_tile_3_d0 = layer2_weights_q0;

assign layer2_weight_tile_address0 = zext_ln84_fu_285_p1;

assign layer2_weight_tile_d0 = layer2_weights_q0;

assign layer2_weights_address0 = zext_ln87_1_fu_270_p1;

assign select_ln84_1_fu_209_p3 = ((icmp_ln85_fu_195_p2[0:0] == 1'b1) ? add_ln84_fu_189_p2 : i_fu_66);

assign select_ln84_fu_201_p3 = ((icmp_ln85_fu_195_p2[0:0] == 1'b1) ? 64'd0 : j_fu_62);

assign tmp_3_fu_225_p3 = {{select_ln84_1_fu_209_p3}, {2'd0}};

assign tmp_s_fu_217_p3 = {{select_ln84_1_fu_209_p3}, {4'd0}};

assign trunc_ln85_1_fu_247_p1 = select_ln84_fu_201_p3[1:0];

assign trunc_ln85_fu_243_p1 = select_ln84_fu_201_p3[6:0];

assign zext_ln82_cast_fu_149_p1 = zext_ln82;

assign zext_ln84_fu_285_p1 = select_ln84_1_reg_327;

assign zext_ln87_1_fu_270_p1 = add_ln87_1_fu_265_p2;

assign zext_ln87_fu_233_p1 = tmp_3_fu_225_p3;

always @ (posedge ap_clk) begin
    zext_ln82_cast_reg_313[6:5] <= 2'b00;
    add_ln87_reg_332[1:0] <= 2'b00;
end

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_84_7_VITIS_LOOP_85_8
