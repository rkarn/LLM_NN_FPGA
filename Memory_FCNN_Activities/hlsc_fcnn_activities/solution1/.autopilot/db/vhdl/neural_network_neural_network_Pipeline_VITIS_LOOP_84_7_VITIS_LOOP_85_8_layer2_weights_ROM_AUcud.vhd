-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity neural_network_neural_network_Pipeline_VITIS_LOOP_84_7_VITIS_LOOP_85_8_layer2_weights_ROM_AUcud is 
    generic(
             DataWidth     : integer := 12; 
             AddressWidth     : integer := 7; 
             AddressRange    : integer := 100
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of neural_network_neural_network_Pipeline_VITIS_LOOP_84_7_VITIS_LOOP_85_8_layer2_weights_ROM_AUcud is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000010000101", 1 => "110010011011", 2 => "110100011001", 3 => "000000100110", 
    4 => "111110100010", 5 => "000100010010", 6 => "000001100001", 7 => "111111100011", 
    8 => "000100001000", 9 => "111111101011", 10 => "111111000111", 11 => "111111000110", 
    12 => "111000011101", 13 => "111100011101", 14 => "000101011001", 15 => "111001000110", 
    16 => "000101100101", 17 => "000011001011", 18 => "110111101101", 19 => "000101000001", 
    20 => "111011101010", 21 => "000000011011", 22 => "000000010010", 23 => "110100011111", 
    24 => "111110011111", 25 => "111101110101", 26 => "000101010001", 27 => "000011000000", 
    28 => "110101101100", 29 => "000000110011", 30 => "110110101011", 31 => "111010011011", 
    32 => "111110001001", 33 => "000110010010", 34 => "111011101111", 35 => "000011000010", 
    36 => "111111100011", 37 => "000111110100", 38 => "000011101100", 39 => "111111100101", 
    40 => "000000000101", 41 => "000101110110", 42 => "000001010111", 43 => "110110000011", 
    44 => "000010011001", 45 => "111010100100", 46 => "000100001111", 47 => "000110001011", 
    48 => "111110111011", 49 => "111011011100", 50 => "000101100010", 51 => "000110010011", 
    52 => "101011101001", 53 => "110110011001", 54 => "110010101110", 55 => "000010100110", 
    56 => "000011100111", 57 => "110010111000", 58 => "111011011001", 59 => "110101100010", 
    60 => "110111111101", 61 => "111101111011", 62 => "000010100010", 63 => "000010011110", 
    64 => "111001100111", 65 => "111100101110", 66 => "111101000011", 67 => "111110101111", 
    68 => "000010111010", 69 => "000011100101", 70 => "000010011010", 71 => "000000110000", 
    72 => "000000000011", 73 => "111101010010", 74 => "111110011110", 75 => "000001101110", 
    76 => "110000011111", 77 => "000010111111", 78 => "000000000100", 79 => "000000111011", 
    80 => "000101110111", 81 => "111101011010", 82 => "000001011110", 83 => "000001011111", 
    84 => "000101101010", 85 => "000101111110", 86 => "111010001010", 87 => "111001000010", 
    88 => "111101101111", 89 => "110111100001", 90 => "111100001111", 91 => "111011110010", 
    92 => "001110101011", 93 => "000011000100", 94 => "000101011100", 95 => "111010101010", 
    96 => "000101001000", 97 => "111000101111", 98 => "000100000000", 99 => "000100000001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

