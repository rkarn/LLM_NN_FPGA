// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_68_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln73,
        conv_i86_1_cast,
        conv_i86_2_cast,
        conv_i86_3_cast,
        conv_i86_4_cast,
        conv_i86_5_cast,
        conv_i86_6_cast,
        zext_ln73_1,
        layer2_output_2_03_out,
        layer2_output_2_03_out_ap_vld,
        layer2_output_1_02_out,
        layer2_output_1_02_out_ap_vld,
        layer2_output_0_01_out,
        layer2_output_0_01_out_ap_vld,
        max_val_out,
        max_val_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [14:0] zext_ln73;
input  [14:0] conv_i86_1_cast;
input  [14:0] conv_i86_2_cast;
input  [14:0] conv_i86_3_cast;
input  [14:0] conv_i86_4_cast;
input  [14:0] conv_i86_5_cast;
input  [14:0] conv_i86_6_cast;
input  [14:0] zext_ln73_1;
output  [15:0] layer2_output_2_03_out;
output   layer2_output_2_03_out_ap_vld;
output  [15:0] layer2_output_1_02_out;
output   layer2_output_1_02_out_ap_vld;
output  [15:0] layer2_output_0_01_out;
output   layer2_output_0_01_out_ap_vld;
output  [15:0] max_val_out;
output   max_val_out_ap_vld;

reg ap_idle;
reg layer2_output_2_03_out_ap_vld;
reg layer2_output_1_02_out_ap_vld;
reg layer2_output_0_01_out_ap_vld;
reg max_val_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln68_fu_343_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [1:0] layer2_weights_0_address0;
reg    layer2_weights_0_ce0;
wire   [9:0] layer2_weights_0_q0;
wire   [1:0] layer2_weights_1_address0;
reg    layer2_weights_1_ce0;
wire  signed [8:0] layer2_weights_1_q0;
wire   [1:0] layer2_weights_2_address0;
reg    layer2_weights_2_ce0;
wire  signed [8:0] layer2_weights_2_q0;
wire   [1:0] layer2_weights_3_address0;
reg    layer2_weights_3_ce0;
wire  signed [8:0] layer2_weights_3_q0;
wire   [1:0] layer2_weights_4_address0;
reg    layer2_weights_4_ce0;
wire  signed [8:0] layer2_weights_4_q0;
wire   [1:0] layer2_weights_5_address0;
reg    layer2_weights_5_ce0;
wire  signed [8:0] layer2_weights_5_q0;
wire   [1:0] layer2_weights_6_address0;
reg    layer2_weights_6_ce0;
wire  signed [8:0] layer2_weights_6_q0;
wire   [1:0] layer2_weights_7_address0;
reg    layer2_weights_7_ce0;
wire  signed [9:0] layer2_weights_7_q0;
wire   [1:0] layer2_bias_address0;
reg    layer2_bias_ce0;
wire   [5:0] layer2_bias_q0;
wire    ap_block_pp0_stage0_11001;
wire   [23:0] zext_ln73_1_cast_fu_303_p1;
reg   [23:0] zext_ln73_1_cast_reg_663;
wire   [23:0] conv_i86_6_cast_cast_fu_307_p1;
reg   [23:0] conv_i86_6_cast_cast_reg_668;
wire   [23:0] conv_i86_5_cast_cast_fu_311_p1;
reg   [23:0] conv_i86_5_cast_cast_reg_673;
wire   [23:0] conv_i86_4_cast_cast_fu_315_p1;
reg   [23:0] conv_i86_4_cast_cast_reg_678;
wire   [23:0] conv_i86_3_cast_cast_fu_319_p1;
reg   [23:0] conv_i86_3_cast_cast_reg_683;
wire   [23:0] conv_i86_2_cast_cast_fu_323_p1;
reg   [23:0] conv_i86_2_cast_cast_reg_688;
wire   [23:0] conv_i86_1_cast_cast_fu_327_p1;
reg   [23:0] conv_i86_1_cast_cast_reg_693;
wire   [23:0] zext_ln73_cast_fu_331_p1;
reg   [23:0] zext_ln73_cast_reg_698;
reg   [1:0] i_1_reg_703;
reg   [1:0] i_1_reg_703_pp0_iter1_reg;
reg   [1:0] i_1_reg_703_pp0_iter2_reg;
reg   [1:0] i_1_reg_703_pp0_iter3_reg;
reg   [1:0] i_1_reg_703_pp0_iter4_reg;
reg   [1:0] i_1_reg_703_pp0_iter5_reg;
reg   [1:0] i_1_reg_703_pp0_iter6_reg;
reg   [1:0] i_1_reg_703_pp0_iter7_reg;
reg   [1:0] i_1_reg_703_pp0_iter8_reg;
reg   [1:0] i_1_reg_703_pp0_iter9_reg;
reg   [0:0] icmp_ln68_reg_707;
reg   [0:0] icmp_ln68_reg_707_pp0_iter1_reg;
reg   [0:0] icmp_ln68_reg_707_pp0_iter2_reg;
reg   [0:0] icmp_ln68_reg_707_pp0_iter3_reg;
reg   [0:0] icmp_ln68_reg_707_pp0_iter4_reg;
reg   [0:0] icmp_ln68_reg_707_pp0_iter5_reg;
reg   [0:0] icmp_ln68_reg_707_pp0_iter6_reg;
reg   [0:0] icmp_ln68_reg_707_pp0_iter7_reg;
reg   [0:0] icmp_ln68_reg_707_pp0_iter8_reg;
wire   [63:0] zext_ln18_fu_355_p1;
reg   [63:0] zext_ln18_reg_711;
reg   [63:0] zext_ln18_reg_711_pp0_iter1_reg;
reg   [63:0] zext_ln18_reg_711_pp0_iter2_reg;
reg   [63:0] zext_ln18_reg_711_pp0_iter3_reg;
reg   [63:0] zext_ln18_reg_711_pp0_iter4_reg;
reg   [63:0] zext_ln18_reg_711_pp0_iter5_reg;
reg   [63:0] zext_ln18_reg_711_pp0_iter6_reg;
reg   [63:0] zext_ln18_reg_711_pp0_iter7_reg;
reg   [63:0] zext_ln18_reg_711_pp0_iter8_reg;
reg  signed [9:0] layer2_weights_0_load_reg_732;
reg   [15:0] tmp_7_reg_747;
wire    ap_block_pp0_stage0;
reg   [1:0] i_fu_90;
wire   [1:0] add_ln68_fu_349_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i_1;
reg   [15:0] max_val_fu_94;
wire   [15:0] layer2_output_1_4_fu_534_p2;
reg   [15:0] layer2_output_1_fu_98;
reg   [15:0] layer2_output_1_1_fu_102;
reg   [15:0] layer2_output_1_2_fu_106;
wire    ap_block_pp0_stage0_01001;
wire   [14:0] mul_ln73_fu_373_p1;
wire   [23:0] mul_ln73_fu_373_p2;
wire  signed [23:0] tmp_8_fu_403_p1;
wire   [23:0] grp_fu_576_p3;
wire   [15:0] tmp_8_fu_403_p4;
wire  signed [23:0] tmp_9_fu_424_p1;
wire   [23:0] grp_fu_584_p3;
wire   [15:0] tmp_9_fu_424_p4;
wire  signed [23:0] tmp_s_fu_445_p1;
wire   [23:0] grp_fu_592_p3;
wire   [15:0] tmp_s_fu_445_p4;
wire  signed [23:0] tmp_1_fu_466_p1;
wire   [23:0] grp_fu_600_p3;
wire   [15:0] tmp_1_fu_466_p4;
wire  signed [23:0] tmp_2_fu_487_p1;
wire   [23:0] grp_fu_608_p3;
wire   [15:0] tmp_2_fu_487_p4;
wire  signed [23:0] tmp_3_fu_504_p1;
wire   [23:0] grp_fu_616_p3;
wire   [15:0] tmp_3_fu_504_p4;
wire  signed [23:0] sum_fu_521_p1;
wire   [23:0] grp_fu_624_p3;
wire  signed [15:0] sext_ln75_fu_530_p1;
wire   [15:0] sum_fu_521_p4;
wire   [14:0] grp_fu_576_p1;
wire   [23:0] grp_fu_576_p2;
wire   [14:0] grp_fu_584_p1;
wire   [23:0] grp_fu_584_p2;
wire   [14:0] grp_fu_592_p1;
wire   [23:0] grp_fu_592_p2;
wire   [14:0] grp_fu_600_p1;
wire   [23:0] grp_fu_600_p2;
wire   [14:0] grp_fu_608_p1;
wire   [23:0] grp_fu_608_p2;
wire   [14:0] grp_fu_616_p1;
wire   [23:0] grp_fu_616_p2;
wire   [14:0] grp_fu_624_p1;
wire   [23:0] grp_fu_624_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_done_reg = 1'b0;
end

neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_0_RAM_2P_BRAM_1R1W #(
    .DataWidth( 10 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
layer2_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_0_address0),
    .ce0(layer2_weights_0_ce0),
    .q0(layer2_weights_0_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_1_RAM_2P_BRAM_1R1W #(
    .DataWidth( 9 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
layer2_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_1_address0),
    .ce0(layer2_weights_1_ce0),
    .q0(layer2_weights_1_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_2_RAM_2P_BRAM_1R1W #(
    .DataWidth( 9 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
layer2_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_2_address0),
    .ce0(layer2_weights_2_ce0),
    .q0(layer2_weights_2_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_3_RAM_2P_BRAM_1R1W #(
    .DataWidth( 9 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
layer2_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_3_address0),
    .ce0(layer2_weights_3_ce0),
    .q0(layer2_weights_3_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_4_RAM_2P_BRAM_1R1W #(
    .DataWidth( 9 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
layer2_weights_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_4_address0),
    .ce0(layer2_weights_4_ce0),
    .q0(layer2_weights_4_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_5_RAM_2P_BRAM_1R1W #(
    .DataWidth( 9 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
layer2_weights_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_5_address0),
    .ce0(layer2_weights_5_ce0),
    .q0(layer2_weights_5_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_6_RAM_2P_BRAM_1R1W #(
    .DataWidth( 9 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
layer2_weights_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_6_address0),
    .ce0(layer2_weights_6_ce0),
    .q0(layer2_weights_6_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_7_RAM_2P_BRAM_1R1W #(
    .DataWidth( 10 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
layer2_weights_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_7_address0),
    .ce0(layer2_weights_7_ce0),
    .q0(layer2_weights_7_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_bias_RAM_1P_BRAM_1R1W #(
    .DataWidth( 6 ),
    .AddressRange( 3 ),
    .AddressWidth( 2 ))
layer2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_bias_address0),
    .ce0(layer2_bias_ce0),
    .q0(layer2_bias_q0)
);

neural_network_mul_10s_15ns_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 24 ))
mul_10s_15ns_24_1_1_U17(
    .din0(layer2_weights_0_load_reg_732),
    .din1(mul_ln73_fu_373_p1),
    .dout(mul_ln73_fu_373_p2)
);

neural_network_mac_muladd_9s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_15ns_24ns_24_4_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_1_q0),
    .din1(grp_fu_576_p1),
    .din2(grp_fu_576_p2),
    .ce(1'b1),
    .dout(grp_fu_576_p3)
);

neural_network_mac_muladd_9s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_15ns_24ns_24_4_1_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_2_q0),
    .din1(grp_fu_584_p1),
    .din2(grp_fu_584_p2),
    .ce(1'b1),
    .dout(grp_fu_584_p3)
);

neural_network_mac_muladd_9s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_15ns_24ns_24_4_1_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_3_q0),
    .din1(grp_fu_592_p1),
    .din2(grp_fu_592_p2),
    .ce(1'b1),
    .dout(grp_fu_592_p3)
);

neural_network_mac_muladd_9s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_15ns_24ns_24_4_1_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_4_q0),
    .din1(grp_fu_600_p1),
    .din2(grp_fu_600_p2),
    .ce(1'b1),
    .dout(grp_fu_600_p3)
);

neural_network_mac_muladd_9s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_15ns_24ns_24_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_5_q0),
    .din1(grp_fu_608_p1),
    .din2(grp_fu_608_p2),
    .ce(1'b1),
    .dout(grp_fu_608_p3)
);

neural_network_mac_muladd_9s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_15ns_24ns_24_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_6_q0),
    .din1(grp_fu_616_p1),
    .din2(grp_fu_616_p2),
    .ce(1'b1),
    .dout(grp_fu_616_p3)
);

neural_network_mac_muladd_10s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_15ns_24ns_24_4_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_7_q0),
    .din1(grp_fu_624_p1),
    .din2(grp_fu_624_p2),
    .ce(1'b1),
    .dout(grp_fu_624_p3)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln68_fu_343_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_90 <= add_ln68_fu_349_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_90 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        conv_i86_1_cast_cast_reg_693[14 : 0] <= conv_i86_1_cast_cast_fu_327_p1[14 : 0];
        conv_i86_2_cast_cast_reg_688[14 : 0] <= conv_i86_2_cast_cast_fu_323_p1[14 : 0];
        conv_i86_3_cast_cast_reg_683[14 : 0] <= conv_i86_3_cast_cast_fu_319_p1[14 : 0];
        conv_i86_4_cast_cast_reg_678[14 : 0] <= conv_i86_4_cast_cast_fu_315_p1[14 : 0];
        conv_i86_5_cast_cast_reg_673[14 : 0] <= conv_i86_5_cast_cast_fu_311_p1[14 : 0];
        conv_i86_6_cast_cast_reg_668[14 : 0] <= conv_i86_6_cast_cast_fu_307_p1[14 : 0];
        i_1_reg_703 <= ap_sig_allocacmp_i_1;
        i_1_reg_703_pp0_iter1_reg <= i_1_reg_703;
        icmp_ln68_reg_707 <= icmp_ln68_fu_343_p2;
        icmp_ln68_reg_707_pp0_iter1_reg <= icmp_ln68_reg_707;
        layer2_weights_0_load_reg_732 <= layer2_weights_0_q0;
        zext_ln18_reg_711_pp0_iter1_reg[1 : 0] <= zext_ln18_reg_711[1 : 0];
        zext_ln73_1_cast_reg_663[14 : 0] <= zext_ln73_1_cast_fu_303_p1[14 : 0];
        zext_ln73_cast_reg_698[14 : 0] <= zext_ln73_cast_fu_331_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        i_1_reg_703_pp0_iter2_reg <= i_1_reg_703_pp0_iter1_reg;
        i_1_reg_703_pp0_iter3_reg <= i_1_reg_703_pp0_iter2_reg;
        i_1_reg_703_pp0_iter4_reg <= i_1_reg_703_pp0_iter3_reg;
        i_1_reg_703_pp0_iter5_reg <= i_1_reg_703_pp0_iter4_reg;
        i_1_reg_703_pp0_iter6_reg <= i_1_reg_703_pp0_iter5_reg;
        i_1_reg_703_pp0_iter7_reg <= i_1_reg_703_pp0_iter6_reg;
        i_1_reg_703_pp0_iter8_reg <= i_1_reg_703_pp0_iter7_reg;
        i_1_reg_703_pp0_iter9_reg <= i_1_reg_703_pp0_iter8_reg;
        icmp_ln68_reg_707_pp0_iter2_reg <= icmp_ln68_reg_707_pp0_iter1_reg;
        icmp_ln68_reg_707_pp0_iter3_reg <= icmp_ln68_reg_707_pp0_iter2_reg;
        icmp_ln68_reg_707_pp0_iter4_reg <= icmp_ln68_reg_707_pp0_iter3_reg;
        icmp_ln68_reg_707_pp0_iter5_reg <= icmp_ln68_reg_707_pp0_iter4_reg;
        icmp_ln68_reg_707_pp0_iter6_reg <= icmp_ln68_reg_707_pp0_iter5_reg;
        icmp_ln68_reg_707_pp0_iter7_reg <= icmp_ln68_reg_707_pp0_iter6_reg;
        icmp_ln68_reg_707_pp0_iter8_reg <= icmp_ln68_reg_707_pp0_iter7_reg;
        tmp_7_reg_747 <= {{mul_ln73_fu_373_p2[23:8]}};
        zext_ln18_reg_711_pp0_iter2_reg[1 : 0] <= zext_ln18_reg_711_pp0_iter1_reg[1 : 0];
        zext_ln18_reg_711_pp0_iter3_reg[1 : 0] <= zext_ln18_reg_711_pp0_iter2_reg[1 : 0];
        zext_ln18_reg_711_pp0_iter4_reg[1 : 0] <= zext_ln18_reg_711_pp0_iter3_reg[1 : 0];
        zext_ln18_reg_711_pp0_iter5_reg[1 : 0] <= zext_ln18_reg_711_pp0_iter4_reg[1 : 0];
        zext_ln18_reg_711_pp0_iter6_reg[1 : 0] <= zext_ln18_reg_711_pp0_iter5_reg[1 : 0];
        zext_ln18_reg_711_pp0_iter7_reg[1 : 0] <= zext_ln18_reg_711_pp0_iter6_reg[1 : 0];
        zext_ln18_reg_711_pp0_iter8_reg[1 : 0] <= zext_ln18_reg_711_pp0_iter7_reg[1 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (i_1_reg_703_pp0_iter9_reg == 2'd1))) begin
        layer2_output_1_1_fu_102 <= layer2_output_1_4_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_1_reg_703_pp0_iter9_reg == 2'd1) & ~(i_1_reg_703_pp0_iter9_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1))) begin
        layer2_output_1_2_fu_106 <= layer2_output_1_4_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (i_1_reg_703_pp0_iter9_reg == 2'd0))) begin
        layer2_output_1_fu_98 <= layer2_output_1_4_fu_534_p2;
        max_val_fu_94 <= layer2_output_1_4_fu_534_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_343_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln18_reg_711[1 : 0] <= zext_ln18_fu_355_p1[1 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln68_fu_343_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_90;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        layer2_bias_ce0 = 1'b1;
    end else begin
        layer2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln68_reg_707_pp0_iter8_reg == 1'd1))) begin
        layer2_output_0_01_out_ap_vld = 1'b1;
    end else begin
        layer2_output_0_01_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln68_reg_707_pp0_iter8_reg == 1'd1))) begin
        layer2_output_1_02_out_ap_vld = 1'b1;
    end else begin
        layer2_output_1_02_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln68_reg_707_pp0_iter8_reg == 1'd1))) begin
        layer2_output_2_03_out_ap_vld = 1'b1;
    end else begin
        layer2_output_2_03_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_weights_0_ce0 = 1'b1;
    end else begin
        layer2_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_weights_1_ce0 = 1'b1;
    end else begin
        layer2_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_weights_2_ce0 = 1'b1;
    end else begin
        layer2_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer2_weights_3_ce0 = 1'b1;
    end else begin
        layer2_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        layer2_weights_4_ce0 = 1'b1;
    end else begin
        layer2_weights_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        layer2_weights_5_ce0 = 1'b1;
    end else begin
        layer2_weights_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        layer2_weights_6_ce0 = 1'b1;
    end else begin
        layer2_weights_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        layer2_weights_7_ce0 = 1'b1;
    end else begin
        layer2_weights_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln68_reg_707_pp0_iter8_reg == 1'd1))) begin
        max_val_out_ap_vld = 1'b1;
    end else begin
        max_val_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln68_fu_349_p2 = (ap_sig_allocacmp_i_1 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv_i86_1_cast_cast_fu_327_p1 = conv_i86_1_cast;

assign conv_i86_2_cast_cast_fu_323_p1 = conv_i86_2_cast;

assign conv_i86_3_cast_cast_fu_319_p1 = conv_i86_3_cast;

assign conv_i86_4_cast_cast_fu_315_p1 = conv_i86_4_cast;

assign conv_i86_5_cast_cast_fu_311_p1 = conv_i86_5_cast;

assign conv_i86_6_cast_cast_fu_307_p1 = conv_i86_6_cast;

assign grp_fu_576_p1 = conv_i86_1_cast_cast_reg_693;

assign grp_fu_576_p2 = {{tmp_7_reg_747}, {8'd0}};

assign grp_fu_584_p1 = conv_i86_2_cast_cast_reg_688;

assign grp_fu_584_p2 = {{tmp_8_fu_403_p4}, {8'd0}};

assign grp_fu_592_p1 = conv_i86_3_cast_cast_reg_683;

assign grp_fu_592_p2 = {{tmp_9_fu_424_p4}, {8'd0}};

assign grp_fu_600_p1 = conv_i86_4_cast_cast_reg_678;

assign grp_fu_600_p2 = {{tmp_s_fu_445_p4}, {8'd0}};

assign grp_fu_608_p1 = conv_i86_5_cast_cast_reg_673;

assign grp_fu_608_p2 = {{tmp_1_fu_466_p4}, {8'd0}};

assign grp_fu_616_p1 = conv_i86_6_cast_cast_reg_668;

assign grp_fu_616_p2 = {{tmp_2_fu_487_p4}, {8'd0}};

assign grp_fu_624_p1 = zext_ln73_1_cast_reg_663;

assign grp_fu_624_p2 = {{tmp_3_fu_504_p4}, {8'd0}};

assign icmp_ln68_fu_343_p2 = ((ap_sig_allocacmp_i_1 == 2'd3) ? 1'b1 : 1'b0);

assign layer2_bias_address0 = zext_ln18_reg_711_pp0_iter8_reg;

assign layer2_output_0_01_out = layer2_output_1_fu_98;

assign layer2_output_1_02_out = layer2_output_1_1_fu_102;

assign layer2_output_1_4_fu_534_p2 = ($signed(sext_ln75_fu_530_p1) + $signed(sum_fu_521_p4));

assign layer2_output_2_03_out = layer2_output_1_2_fu_106;

assign layer2_weights_0_address0 = zext_ln18_fu_355_p1;

assign layer2_weights_1_address0 = zext_ln18_fu_355_p1;

assign layer2_weights_2_address0 = zext_ln18_reg_711;

assign layer2_weights_3_address0 = zext_ln18_reg_711_pp0_iter1_reg;

assign layer2_weights_4_address0 = zext_ln18_reg_711_pp0_iter2_reg;

assign layer2_weights_5_address0 = zext_ln18_reg_711_pp0_iter3_reg;

assign layer2_weights_6_address0 = zext_ln18_reg_711_pp0_iter4_reg;

assign layer2_weights_7_address0 = zext_ln18_reg_711_pp0_iter5_reg;

assign max_val_out = max_val_fu_94;

assign mul_ln73_fu_373_p1 = zext_ln73_cast_reg_698;

assign sext_ln75_fu_530_p1 = $signed(layer2_bias_q0);

assign sum_fu_521_p1 = grp_fu_624_p3;

assign sum_fu_521_p4 = {{sum_fu_521_p1[23:8]}};

assign tmp_1_fu_466_p1 = grp_fu_600_p3;

assign tmp_1_fu_466_p4 = {{tmp_1_fu_466_p1[23:8]}};

assign tmp_2_fu_487_p1 = grp_fu_608_p3;

assign tmp_2_fu_487_p4 = {{tmp_2_fu_487_p1[23:8]}};

assign tmp_3_fu_504_p1 = grp_fu_616_p3;

assign tmp_3_fu_504_p4 = {{tmp_3_fu_504_p1[23:8]}};

assign tmp_8_fu_403_p1 = grp_fu_576_p3;

assign tmp_8_fu_403_p4 = {{tmp_8_fu_403_p1[23:8]}};

assign tmp_9_fu_424_p1 = grp_fu_584_p3;

assign tmp_9_fu_424_p4 = {{tmp_9_fu_424_p1[23:8]}};

assign tmp_s_fu_445_p1 = grp_fu_592_p3;

assign tmp_s_fu_445_p4 = {{tmp_s_fu_445_p1[23:8]}};

assign zext_ln18_fu_355_p1 = ap_sig_allocacmp_i_1;

assign zext_ln73_1_cast_fu_303_p1 = zext_ln73_1;

assign zext_ln73_cast_fu_331_p1 = zext_ln73;

always @ (posedge ap_clk) begin
    zext_ln73_1_cast_reg_663[23:15] <= 9'b000000000;
    conv_i86_6_cast_cast_reg_668[23:15] <= 9'b000000000;
    conv_i86_5_cast_cast_reg_673[23:15] <= 9'b000000000;
    conv_i86_4_cast_cast_reg_678[23:15] <= 9'b000000000;
    conv_i86_3_cast_cast_reg_683[23:15] <= 9'b000000000;
    conv_i86_2_cast_cast_reg_688[23:15] <= 9'b000000000;
    conv_i86_1_cast_cast_reg_693[23:15] <= 9'b000000000;
    zext_ln73_cast_reg_698[23:15] <= 9'b000000000;
    zext_ln18_reg_711[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_711_pp0_iter1_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_711_pp0_iter2_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_711_pp0_iter3_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_711_pp0_iter4_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_711_pp0_iter5_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_711_pp0_iter6_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_711_pp0_iter7_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    zext_ln18_reg_711_pp0_iter8_reg[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
end

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_68_3
