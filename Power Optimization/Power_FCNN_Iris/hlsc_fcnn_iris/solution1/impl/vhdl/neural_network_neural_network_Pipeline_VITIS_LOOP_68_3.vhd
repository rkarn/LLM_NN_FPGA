-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network_neural_network_Pipeline_VITIS_LOOP_68_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln73 : IN STD_LOGIC_VECTOR (14 downto 0);
    conv_i86_1_cast : IN STD_LOGIC_VECTOR (14 downto 0);
    conv_i86_2_cast : IN STD_LOGIC_VECTOR (14 downto 0);
    conv_i86_3_cast : IN STD_LOGIC_VECTOR (14 downto 0);
    conv_i86_4_cast : IN STD_LOGIC_VECTOR (14 downto 0);
    conv_i86_5_cast : IN STD_LOGIC_VECTOR (14 downto 0);
    conv_i86_6_cast : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_1 : IN STD_LOGIC_VECTOR (14 downto 0);
    layer2_output_2_03_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_2_03_out_ap_vld : OUT STD_LOGIC;
    layer2_output_1_02_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_1_02_out_ap_vld : OUT STD_LOGIC;
    layer2_output_0_01_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_0_01_out_ap_vld : OUT STD_LOGIC;
    max_val_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    max_val_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of neural_network_neural_network_Pipeline_VITIS_LOOP_68_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln68_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer2_weights_0_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal layer2_weights_0_ce0 : STD_LOGIC;
    signal layer2_weights_0_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer2_weights_1_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal layer2_weights_1_ce0 : STD_LOGIC;
    signal layer2_weights_1_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer2_weights_2_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal layer2_weights_2_ce0 : STD_LOGIC;
    signal layer2_weights_2_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer2_weights_3_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal layer2_weights_3_ce0 : STD_LOGIC;
    signal layer2_weights_3_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer2_weights_4_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal layer2_weights_4_ce0 : STD_LOGIC;
    signal layer2_weights_4_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer2_weights_5_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal layer2_weights_5_ce0 : STD_LOGIC;
    signal layer2_weights_5_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer2_weights_6_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal layer2_weights_6_ce0 : STD_LOGIC;
    signal layer2_weights_6_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer2_weights_7_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal layer2_weights_7_ce0 : STD_LOGIC;
    signal layer2_weights_7_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer2_bias_address0 : STD_LOGIC_VECTOR (1 downto 0);
    signal layer2_bias_ce0 : STD_LOGIC;
    signal layer2_bias_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln73_1_cast_fu_303_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_1_cast_reg_663 : STD_LOGIC_VECTOR (23 downto 0);
    signal conv_i86_6_cast_cast_fu_307_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal conv_i86_6_cast_cast_reg_668 : STD_LOGIC_VECTOR (23 downto 0);
    signal conv_i86_5_cast_cast_fu_311_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal conv_i86_5_cast_cast_reg_673 : STD_LOGIC_VECTOR (23 downto 0);
    signal conv_i86_4_cast_cast_fu_315_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal conv_i86_4_cast_cast_reg_678 : STD_LOGIC_VECTOR (23 downto 0);
    signal conv_i86_3_cast_cast_fu_319_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal conv_i86_3_cast_cast_reg_683 : STD_LOGIC_VECTOR (23 downto 0);
    signal conv_i86_2_cast_cast_fu_323_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal conv_i86_2_cast_cast_reg_688 : STD_LOGIC_VECTOR (23 downto 0);
    signal conv_i86_1_cast_cast_fu_327_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal conv_i86_1_cast_cast_reg_693 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_cast_fu_331_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_cast_reg_698 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_1_reg_703 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_703_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_703_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_703_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_703_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_703_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_703_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_703_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_703_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_703_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln68_reg_707 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_707_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_707_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_707_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_707_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_707_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_707_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_707_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_reg_707_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln18_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_reg_711 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_reg_711_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_reg_711_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_reg_711_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_reg_711_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_reg_711_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_reg_711_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_reg_711_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln18_reg_711_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal layer2_weights_0_load_reg_732 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_reg_747 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_90 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln68_fu_349_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_val_fu_94 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_1_4_fu_534_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_1_fu_98 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_1_1_fu_102 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_1_2_fu_106 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln73_fu_373_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln73_fu_373_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_403_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_576_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_403_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_424_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_584_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_fu_424_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_445_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_592_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_445_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_466_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_600_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_466_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_487_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_608_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_fu_487_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_504_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_616_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_fu_504_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_521_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_624_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_fu_530_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_521_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_576_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_576_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_584_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_584_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_592_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_592_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_600_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_600_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_608_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_608_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_616_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_616_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_624_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_624_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component neural_network_mul_10s_15ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_9s_15ns_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_10s_15ns_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_0_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_1_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_2_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_3_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_4_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_5_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_6_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_7_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_bias_RAM_1P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (1 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component neural_network_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    layer2_weights_0_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_0_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 10,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_0_address0,
        ce0 => layer2_weights_0_ce0,
        q0 => layer2_weights_0_q0);

    layer2_weights_1_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_1_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 9,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_1_address0,
        ce0 => layer2_weights_1_ce0,
        q0 => layer2_weights_1_q0);

    layer2_weights_2_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_2_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 9,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_2_address0,
        ce0 => layer2_weights_2_ce0,
        q0 => layer2_weights_2_q0);

    layer2_weights_3_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_3_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 9,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_3_address0,
        ce0 => layer2_weights_3_ce0,
        q0 => layer2_weights_3_q0);

    layer2_weights_4_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_4_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 9,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_4_address0,
        ce0 => layer2_weights_4_ce0,
        q0 => layer2_weights_4_q0);

    layer2_weights_5_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_5_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 9,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_5_address0,
        ce0 => layer2_weights_5_ce0,
        q0 => layer2_weights_5_q0);

    layer2_weights_6_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_6_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 9,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_6_address0,
        ce0 => layer2_weights_6_ce0,
        q0 => layer2_weights_6_q0);

    layer2_weights_7_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_7_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 10,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_7_address0,
        ce0 => layer2_weights_7_ce0,
        q0 => layer2_weights_7_q0);

    layer2_bias_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_bias_RAM_1P_BRAM_1R1W
    generic map (
        DataWidth => 6,
        AddressRange => 3,
        AddressWidth => 2)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_bias_address0,
        ce0 => layer2_bias_ce0,
        q0 => layer2_bias_q0);

    mul_10s_15ns_24_1_1_U17 : component neural_network_mul_10s_15ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 15,
        dout_WIDTH => 24)
    port map (
        din0 => layer2_weights_0_load_reg_732,
        din1 => mul_ln73_fu_373_p1,
        dout => mul_ln73_fu_373_p2);

    mac_muladd_9s_15ns_24ns_24_4_1_U18 : component neural_network_mac_muladd_9s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_1_q0,
        din1 => grp_fu_576_p1,
        din2 => grp_fu_576_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_576_p3);

    mac_muladd_9s_15ns_24ns_24_4_1_U19 : component neural_network_mac_muladd_9s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_2_q0,
        din1 => grp_fu_584_p1,
        din2 => grp_fu_584_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_584_p3);

    mac_muladd_9s_15ns_24ns_24_4_1_U20 : component neural_network_mac_muladd_9s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_3_q0,
        din1 => grp_fu_592_p1,
        din2 => grp_fu_592_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_592_p3);

    mac_muladd_9s_15ns_24ns_24_4_1_U21 : component neural_network_mac_muladd_9s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_4_q0,
        din1 => grp_fu_600_p1,
        din2 => grp_fu_600_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_600_p3);

    mac_muladd_9s_15ns_24ns_24_4_1_U22 : component neural_network_mac_muladd_9s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_5_q0,
        din1 => grp_fu_608_p1,
        din2 => grp_fu_608_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_608_p3);

    mac_muladd_9s_15ns_24ns_24_4_1_U23 : component neural_network_mac_muladd_9s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_6_q0,
        din1 => grp_fu_616_p1,
        din2 => grp_fu_616_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_616_p3);

    mac_muladd_10s_15ns_24ns_24_4_1_U24 : component neural_network_mac_muladd_10s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_7_q0,
        din1 => grp_fu_624_p1,
        din2 => grp_fu_624_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_624_p3);

    flow_control_loop_pipe_sequential_init_U : component neural_network_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln68_fu_343_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_90 <= add_ln68_fu_349_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_90 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                    conv_i86_1_cast_cast_reg_693(14 downto 0) <= conv_i86_1_cast_cast_fu_327_p1(14 downto 0);
                    conv_i86_2_cast_cast_reg_688(14 downto 0) <= conv_i86_2_cast_cast_fu_323_p1(14 downto 0);
                    conv_i86_3_cast_cast_reg_683(14 downto 0) <= conv_i86_3_cast_cast_fu_319_p1(14 downto 0);
                    conv_i86_4_cast_cast_reg_678(14 downto 0) <= conv_i86_4_cast_cast_fu_315_p1(14 downto 0);
                    conv_i86_5_cast_cast_reg_673(14 downto 0) <= conv_i86_5_cast_cast_fu_311_p1(14 downto 0);
                    conv_i86_6_cast_cast_reg_668(14 downto 0) <= conv_i86_6_cast_cast_fu_307_p1(14 downto 0);
                i_1_reg_703 <= ap_sig_allocacmp_i_1;
                i_1_reg_703_pp0_iter1_reg <= i_1_reg_703;
                icmp_ln68_reg_707 <= icmp_ln68_fu_343_p2;
                icmp_ln68_reg_707_pp0_iter1_reg <= icmp_ln68_reg_707;
                layer2_weights_0_load_reg_732 <= layer2_weights_0_q0;
                    zext_ln18_reg_711_pp0_iter1_reg(1 downto 0) <= zext_ln18_reg_711(1 downto 0);
                    zext_ln73_1_cast_reg_663(14 downto 0) <= zext_ln73_1_cast_fu_303_p1(14 downto 0);
                    zext_ln73_cast_reg_698(14 downto 0) <= zext_ln73_cast_fu_331_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                i_1_reg_703_pp0_iter2_reg <= i_1_reg_703_pp0_iter1_reg;
                i_1_reg_703_pp0_iter3_reg <= i_1_reg_703_pp0_iter2_reg;
                i_1_reg_703_pp0_iter4_reg <= i_1_reg_703_pp0_iter3_reg;
                i_1_reg_703_pp0_iter5_reg <= i_1_reg_703_pp0_iter4_reg;
                i_1_reg_703_pp0_iter6_reg <= i_1_reg_703_pp0_iter5_reg;
                i_1_reg_703_pp0_iter7_reg <= i_1_reg_703_pp0_iter6_reg;
                i_1_reg_703_pp0_iter8_reg <= i_1_reg_703_pp0_iter7_reg;
                i_1_reg_703_pp0_iter9_reg <= i_1_reg_703_pp0_iter8_reg;
                icmp_ln68_reg_707_pp0_iter2_reg <= icmp_ln68_reg_707_pp0_iter1_reg;
                icmp_ln68_reg_707_pp0_iter3_reg <= icmp_ln68_reg_707_pp0_iter2_reg;
                icmp_ln68_reg_707_pp0_iter4_reg <= icmp_ln68_reg_707_pp0_iter3_reg;
                icmp_ln68_reg_707_pp0_iter5_reg <= icmp_ln68_reg_707_pp0_iter4_reg;
                icmp_ln68_reg_707_pp0_iter6_reg <= icmp_ln68_reg_707_pp0_iter5_reg;
                icmp_ln68_reg_707_pp0_iter7_reg <= icmp_ln68_reg_707_pp0_iter6_reg;
                icmp_ln68_reg_707_pp0_iter8_reg <= icmp_ln68_reg_707_pp0_iter7_reg;
                tmp_7_reg_747 <= mul_ln73_fu_373_p2(23 downto 8);
                    zext_ln18_reg_711_pp0_iter2_reg(1 downto 0) <= zext_ln18_reg_711_pp0_iter1_reg(1 downto 0);
                    zext_ln18_reg_711_pp0_iter3_reg(1 downto 0) <= zext_ln18_reg_711_pp0_iter2_reg(1 downto 0);
                    zext_ln18_reg_711_pp0_iter4_reg(1 downto 0) <= zext_ln18_reg_711_pp0_iter3_reg(1 downto 0);
                    zext_ln18_reg_711_pp0_iter5_reg(1 downto 0) <= zext_ln18_reg_711_pp0_iter4_reg(1 downto 0);
                    zext_ln18_reg_711_pp0_iter6_reg(1 downto 0) <= zext_ln18_reg_711_pp0_iter5_reg(1 downto 0);
                    zext_ln18_reg_711_pp0_iter7_reg(1 downto 0) <= zext_ln18_reg_711_pp0_iter6_reg(1 downto 0);
                    zext_ln18_reg_711_pp0_iter8_reg(1 downto 0) <= zext_ln18_reg_711_pp0_iter7_reg(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (i_1_reg_703_pp0_iter9_reg = ap_const_lv2_1))) then
                layer2_output_1_1_fu_102 <= layer2_output_1_4_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_1_reg_703_pp0_iter9_reg = ap_const_lv2_1)) and not((i_1_reg_703_pp0_iter9_reg = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1))) then
                layer2_output_1_2_fu_106 <= layer2_output_1_4_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (i_1_reg_703_pp0_iter9_reg = ap_const_lv2_0))) then
                layer2_output_1_fu_98 <= layer2_output_1_4_fu_534_p2;
                max_val_fu_94 <= layer2_output_1_4_fu_534_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_343_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln18_reg_711(1 downto 0) <= zext_ln18_fu_355_p1(1 downto 0);
            end if;
        end if;
    end process;
    zext_ln73_1_cast_reg_663(23 downto 15) <= "000000000";
    conv_i86_6_cast_cast_reg_668(23 downto 15) <= "000000000";
    conv_i86_5_cast_cast_reg_673(23 downto 15) <= "000000000";
    conv_i86_4_cast_cast_reg_678(23 downto 15) <= "000000000";
    conv_i86_3_cast_cast_reg_683(23 downto 15) <= "000000000";
    conv_i86_2_cast_cast_reg_688(23 downto 15) <= "000000000";
    conv_i86_1_cast_cast_reg_693(23 downto 15) <= "000000000";
    zext_ln73_cast_reg_698(23 downto 15) <= "000000000";
    zext_ln18_reg_711(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln18_reg_711_pp0_iter1_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln18_reg_711_pp0_iter2_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln18_reg_711_pp0_iter3_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln18_reg_711_pp0_iter4_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln18_reg_711_pp0_iter5_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln18_reg_711_pp0_iter6_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln18_reg_711_pp0_iter7_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    zext_ln18_reg_711_pp0_iter8_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln68_fu_349_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln68_fu_343_p2)
    begin
        if (((icmp_ln68_fu_343_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter9_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter9_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_90, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_90;
        end if; 
    end process;

    conv_i86_1_cast_cast_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_i86_1_cast),24));
    conv_i86_2_cast_cast_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_i86_2_cast),24));
    conv_i86_3_cast_cast_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_i86_3_cast),24));
    conv_i86_4_cast_cast_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_i86_4_cast),24));
    conv_i86_5_cast_cast_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_i86_5_cast),24));
    conv_i86_6_cast_cast_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(conv_i86_6_cast),24));
    grp_fu_576_p1 <= conv_i86_1_cast_cast_reg_693(15 - 1 downto 0);
    grp_fu_576_p2 <= (tmp_7_reg_747 & ap_const_lv8_0);
    grp_fu_584_p1 <= conv_i86_2_cast_cast_reg_688(15 - 1 downto 0);
    grp_fu_584_p2 <= (tmp_8_fu_403_p4 & ap_const_lv8_0);
    grp_fu_592_p1 <= conv_i86_3_cast_cast_reg_683(15 - 1 downto 0);
    grp_fu_592_p2 <= (tmp_9_fu_424_p4 & ap_const_lv8_0);
    grp_fu_600_p1 <= conv_i86_4_cast_cast_reg_678(15 - 1 downto 0);
    grp_fu_600_p2 <= (tmp_s_fu_445_p4 & ap_const_lv8_0);
    grp_fu_608_p1 <= conv_i86_5_cast_cast_reg_673(15 - 1 downto 0);
    grp_fu_608_p2 <= (tmp_1_fu_466_p4 & ap_const_lv8_0);
    grp_fu_616_p1 <= conv_i86_6_cast_cast_reg_668(15 - 1 downto 0);
    grp_fu_616_p2 <= (tmp_2_fu_487_p4 & ap_const_lv8_0);
    grp_fu_624_p1 <= zext_ln73_1_cast_reg_663(15 - 1 downto 0);
    grp_fu_624_p2 <= (tmp_3_fu_504_p4 & ap_const_lv8_0);
    icmp_ln68_fu_343_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv2_3) else "0";
    layer2_bias_address0 <= zext_ln18_reg_711_pp0_iter8_reg(2 - 1 downto 0);

    layer2_bias_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            layer2_bias_ce0 <= ap_const_logic_1;
        else 
            layer2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_0_01_out <= layer2_output_1_fu_98;

    layer2_output_0_01_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln68_reg_707_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln68_reg_707_pp0_iter8_reg = ap_const_lv1_1))) then 
            layer2_output_0_01_out_ap_vld <= ap_const_logic_1;
        else 
            layer2_output_0_01_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_1_02_out <= layer2_output_1_1_fu_102;

    layer2_output_1_02_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln68_reg_707_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln68_reg_707_pp0_iter8_reg = ap_const_lv1_1))) then 
            layer2_output_1_02_out_ap_vld <= ap_const_logic_1;
        else 
            layer2_output_1_02_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_1_4_fu_534_p2 <= std_logic_vector(signed(sext_ln75_fu_530_p1) + signed(sum_fu_521_p4));
    layer2_output_2_03_out <= layer2_output_1_2_fu_106;

    layer2_output_2_03_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln68_reg_707_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln68_reg_707_pp0_iter8_reg = ap_const_lv1_1))) then 
            layer2_output_2_03_out_ap_vld <= ap_const_logic_1;
        else 
            layer2_output_2_03_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_0_address0 <= zext_ln18_fu_355_p1(2 - 1 downto 0);

    layer2_weights_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_weights_0_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_1_address0 <= zext_ln18_fu_355_p1(2 - 1 downto 0);

    layer2_weights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_weights_1_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_2_address0 <= zext_ln18_reg_711(2 - 1 downto 0);

    layer2_weights_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_weights_2_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_3_address0 <= zext_ln18_reg_711_pp0_iter1_reg(2 - 1 downto 0);

    layer2_weights_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer2_weights_3_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_4_address0 <= zext_ln18_reg_711_pp0_iter2_reg(2 - 1 downto 0);

    layer2_weights_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            layer2_weights_4_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_5_address0 <= zext_ln18_reg_711_pp0_iter3_reg(2 - 1 downto 0);

    layer2_weights_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer2_weights_5_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_6_address0 <= zext_ln18_reg_711_pp0_iter4_reg(2 - 1 downto 0);

    layer2_weights_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer2_weights_6_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_7_address0 <= zext_ln18_reg_711_pp0_iter5_reg(2 - 1 downto 0);

    layer2_weights_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            layer2_weights_7_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_val_out <= max_val_fu_94;

    max_val_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln68_reg_707_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln68_reg_707_pp0_iter8_reg = ap_const_lv1_1))) then 
            max_val_out_ap_vld <= ap_const_logic_1;
        else 
            max_val_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln73_fu_373_p1 <= zext_ln73_cast_reg_698(15 - 1 downto 0);
        sext_ln75_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(layer2_bias_q0),16));

    sum_fu_521_p1 <= grp_fu_624_p3;
    sum_fu_521_p4 <= sum_fu_521_p1(23 downto 8);
    tmp_1_fu_466_p1 <= grp_fu_600_p3;
    tmp_1_fu_466_p4 <= tmp_1_fu_466_p1(23 downto 8);
    tmp_2_fu_487_p1 <= grp_fu_608_p3;
    tmp_2_fu_487_p4 <= tmp_2_fu_487_p1(23 downto 8);
    tmp_3_fu_504_p1 <= grp_fu_616_p3;
    tmp_3_fu_504_p4 <= tmp_3_fu_504_p1(23 downto 8);
    tmp_8_fu_403_p1 <= grp_fu_576_p3;
    tmp_8_fu_403_p4 <= tmp_8_fu_403_p1(23 downto 8);
    tmp_9_fu_424_p1 <= grp_fu_584_p3;
    tmp_9_fu_424_p4 <= tmp_9_fu_424_p1(23 downto 8);
    tmp_s_fu_445_p1 <= grp_fu_592_p3;
    tmp_s_fu_445_p4 <= tmp_s_fu_445_p1(23 downto 8);
    zext_ln18_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
    zext_ln73_1_cast_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_1),24));
    zext_ln73_cast_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73),24));
end behav;
