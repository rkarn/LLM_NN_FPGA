// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="neural_network_neural_network,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.201000,HLS_SYN_LAT=342,HLS_SYN_TPT=none,HLS_SYN_MEM=102,HLS_SYN_DSP=0,HLS_SYN_FF=6550,HLS_SYN_LUT=3551,HLS_VERSION=2023_1}" *)

module neural_network (
        ap_clk,
        ap_rst_n,
        s_axi_CONTROL_AWVALID,
        s_axi_CONTROL_AWREADY,
        s_axi_CONTROL_AWADDR,
        s_axi_CONTROL_WVALID,
        s_axi_CONTROL_WREADY,
        s_axi_CONTROL_WDATA,
        s_axi_CONTROL_WSTRB,
        s_axi_CONTROL_ARVALID,
        s_axi_CONTROL_ARREADY,
        s_axi_CONTROL_ARADDR,
        s_axi_CONTROL_RVALID,
        s_axi_CONTROL_RREADY,
        s_axi_CONTROL_RDATA,
        s_axi_CONTROL_RRESP,
        s_axi_CONTROL_BVALID,
        s_axi_CONTROL_BREADY,
        s_axi_CONTROL_BRESP,
        interrupt,
        s_axi_INPUT_AWVALID,
        s_axi_INPUT_AWREADY,
        s_axi_INPUT_AWADDR,
        s_axi_INPUT_WVALID,
        s_axi_INPUT_WREADY,
        s_axi_INPUT_WDATA,
        s_axi_INPUT_WSTRB,
        s_axi_INPUT_ARVALID,
        s_axi_INPUT_ARREADY,
        s_axi_INPUT_ARADDR,
        s_axi_INPUT_RVALID,
        s_axi_INPUT_RREADY,
        s_axi_INPUT_RDATA,
        s_axi_INPUT_RRESP,
        s_axi_INPUT_BVALID,
        s_axi_INPUT_BREADY,
        s_axi_INPUT_BRESP,
        s_axi_OUTPUT_AWVALID,
        s_axi_OUTPUT_AWREADY,
        s_axi_OUTPUT_AWADDR,
        s_axi_OUTPUT_WVALID,
        s_axi_OUTPUT_WREADY,
        s_axi_OUTPUT_WDATA,
        s_axi_OUTPUT_WSTRB,
        s_axi_OUTPUT_ARVALID,
        s_axi_OUTPUT_ARREADY,
        s_axi_OUTPUT_ARADDR,
        s_axi_OUTPUT_RVALID,
        s_axi_OUTPUT_RREADY,
        s_axi_OUTPUT_RDATA,
        s_axi_OUTPUT_RRESP,
        s_axi_OUTPUT_BVALID,
        s_axi_OUTPUT_BREADY,
        s_axi_OUTPUT_BRESP
);

parameter    ap_ST_fsm_state1 = 84'd1;
parameter    ap_ST_fsm_state2 = 84'd2;
parameter    ap_ST_fsm_state3 = 84'd4;
parameter    ap_ST_fsm_state4 = 84'd8;
parameter    ap_ST_fsm_state5 = 84'd16;
parameter    ap_ST_fsm_state6 = 84'd32;
parameter    ap_ST_fsm_state7 = 84'd64;
parameter    ap_ST_fsm_state8 = 84'd128;
parameter    ap_ST_fsm_state9 = 84'd256;
parameter    ap_ST_fsm_state10 = 84'd512;
parameter    ap_ST_fsm_state11 = 84'd1024;
parameter    ap_ST_fsm_state12 = 84'd2048;
parameter    ap_ST_fsm_state13 = 84'd4096;
parameter    ap_ST_fsm_state14 = 84'd8192;
parameter    ap_ST_fsm_state15 = 84'd16384;
parameter    ap_ST_fsm_state16 = 84'd32768;
parameter    ap_ST_fsm_state17 = 84'd65536;
parameter    ap_ST_fsm_state18 = 84'd131072;
parameter    ap_ST_fsm_state19 = 84'd262144;
parameter    ap_ST_fsm_state20 = 84'd524288;
parameter    ap_ST_fsm_state21 = 84'd1048576;
parameter    ap_ST_fsm_state22 = 84'd2097152;
parameter    ap_ST_fsm_state23 = 84'd4194304;
parameter    ap_ST_fsm_state24 = 84'd8388608;
parameter    ap_ST_fsm_state25 = 84'd16777216;
parameter    ap_ST_fsm_state26 = 84'd33554432;
parameter    ap_ST_fsm_state27 = 84'd67108864;
parameter    ap_ST_fsm_state28 = 84'd134217728;
parameter    ap_ST_fsm_state29 = 84'd268435456;
parameter    ap_ST_fsm_state30 = 84'd536870912;
parameter    ap_ST_fsm_state31 = 84'd1073741824;
parameter    ap_ST_fsm_state32 = 84'd2147483648;
parameter    ap_ST_fsm_state33 = 84'd4294967296;
parameter    ap_ST_fsm_state34 = 84'd8589934592;
parameter    ap_ST_fsm_state35 = 84'd17179869184;
parameter    ap_ST_fsm_state36 = 84'd34359738368;
parameter    ap_ST_fsm_state37 = 84'd68719476736;
parameter    ap_ST_fsm_state38 = 84'd137438953472;
parameter    ap_ST_fsm_state39 = 84'd274877906944;
parameter    ap_ST_fsm_state40 = 84'd549755813888;
parameter    ap_ST_fsm_state41 = 84'd1099511627776;
parameter    ap_ST_fsm_state42 = 84'd2199023255552;
parameter    ap_ST_fsm_state43 = 84'd4398046511104;
parameter    ap_ST_fsm_state44 = 84'd8796093022208;
parameter    ap_ST_fsm_state45 = 84'd17592186044416;
parameter    ap_ST_fsm_state46 = 84'd35184372088832;
parameter    ap_ST_fsm_state47 = 84'd70368744177664;
parameter    ap_ST_fsm_state48 = 84'd140737488355328;
parameter    ap_ST_fsm_state49 = 84'd281474976710656;
parameter    ap_ST_fsm_state50 = 84'd562949953421312;
parameter    ap_ST_fsm_state51 = 84'd1125899906842624;
parameter    ap_ST_fsm_state52 = 84'd2251799813685248;
parameter    ap_ST_fsm_state53 = 84'd4503599627370496;
parameter    ap_ST_fsm_state54 = 84'd9007199254740992;
parameter    ap_ST_fsm_state55 = 84'd18014398509481984;
parameter    ap_ST_fsm_state56 = 84'd36028797018963968;
parameter    ap_ST_fsm_state57 = 84'd72057594037927936;
parameter    ap_ST_fsm_state58 = 84'd144115188075855872;
parameter    ap_ST_fsm_state59 = 84'd288230376151711744;
parameter    ap_ST_fsm_state60 = 84'd576460752303423488;
parameter    ap_ST_fsm_state61 = 84'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 84'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 84'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 84'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 84'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 84'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 84'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 84'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 84'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 84'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 84'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 84'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 84'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 84'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 84'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 84'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 84'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 84'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 84'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 84'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 84'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 84'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 84'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 84'd9671406556917033397649408;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_S_AXI_INPUT_DATA_WIDTH = 32;
parameter    C_S_AXI_INPUT_ADDR_WIDTH = 8;
parameter    C_S_AXI_OUTPUT_DATA_WIDTH = 32;
parameter    C_S_AXI_OUTPUT_ADDR_WIDTH = 6;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_INPUT_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_OUTPUT_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_CONTROL_AWVALID;
output   s_axi_CONTROL_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_AWADDR;
input   s_axi_CONTROL_WVALID;
output   s_axi_CONTROL_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_CONTROL_WSTRB;
input   s_axi_CONTROL_ARVALID;
output   s_axi_CONTROL_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_CONTROL_ARADDR;
output   s_axi_CONTROL_RVALID;
input   s_axi_CONTROL_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_CONTROL_RDATA;
output  [1:0] s_axi_CONTROL_RRESP;
output   s_axi_CONTROL_BVALID;
input   s_axi_CONTROL_BREADY;
output  [1:0] s_axi_CONTROL_BRESP;
output   interrupt;
input   s_axi_INPUT_AWVALID;
output   s_axi_INPUT_AWREADY;
input  [C_S_AXI_INPUT_ADDR_WIDTH - 1:0] s_axi_INPUT_AWADDR;
input   s_axi_INPUT_WVALID;
output   s_axi_INPUT_WREADY;
input  [C_S_AXI_INPUT_DATA_WIDTH - 1:0] s_axi_INPUT_WDATA;
input  [C_S_AXI_INPUT_WSTRB_WIDTH - 1:0] s_axi_INPUT_WSTRB;
input   s_axi_INPUT_ARVALID;
output   s_axi_INPUT_ARREADY;
input  [C_S_AXI_INPUT_ADDR_WIDTH - 1:0] s_axi_INPUT_ARADDR;
output   s_axi_INPUT_RVALID;
input   s_axi_INPUT_RREADY;
output  [C_S_AXI_INPUT_DATA_WIDTH - 1:0] s_axi_INPUT_RDATA;
output  [1:0] s_axi_INPUT_RRESP;
output   s_axi_INPUT_BVALID;
input   s_axi_INPUT_BREADY;
output  [1:0] s_axi_INPUT_BRESP;
input   s_axi_OUTPUT_AWVALID;
output   s_axi_OUTPUT_AWREADY;
input  [C_S_AXI_OUTPUT_ADDR_WIDTH - 1:0] s_axi_OUTPUT_AWADDR;
input   s_axi_OUTPUT_WVALID;
output   s_axi_OUTPUT_WREADY;
input  [C_S_AXI_OUTPUT_DATA_WIDTH - 1:0] s_axi_OUTPUT_WDATA;
input  [C_S_AXI_OUTPUT_WSTRB_WIDTH - 1:0] s_axi_OUTPUT_WSTRB;
input   s_axi_OUTPUT_ARVALID;
output   s_axi_OUTPUT_ARREADY;
input  [C_S_AXI_OUTPUT_ADDR_WIDTH - 1:0] s_axi_OUTPUT_ARADDR;
output   s_axi_OUTPUT_RVALID;
input   s_axi_OUTPUT_RREADY;
output  [C_S_AXI_OUTPUT_DATA_WIDTH - 1:0] s_axi_OUTPUT_RDATA;
output  [1:0] s_axi_OUTPUT_RRESP;
output   s_axi_OUTPUT_BVALID;
input   s_axi_OUTPUT_BREADY;
output  [1:0] s_axi_OUTPUT_BRESP;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [83:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg   [5:0] input_r_address0;
reg    input_r_ce0;
wire   [15:0] input_r_q0;
reg   [3:0] output_r_address0;
reg    output_r_ce0;
reg    output_r_we0;
reg   [15:0] output_r_d0;
wire   [15:0] output_r_q0;
reg   [15:0] input_r_load_reg_1657;
wire    ap_CS_fsm_state2;
reg   [15:0] input_r_load_1_reg_1667;
wire    ap_CS_fsm_state3;
reg   [15:0] input_r_load_2_reg_1677;
wire    ap_CS_fsm_state4;
reg   [15:0] input_r_load_3_reg_1687;
wire    ap_CS_fsm_state5;
reg   [15:0] input_r_load_4_reg_1697;
wire    ap_CS_fsm_state6;
reg   [15:0] input_r_load_5_reg_1707;
wire    ap_CS_fsm_state7;
reg   [15:0] input_r_load_6_reg_1717;
wire    ap_CS_fsm_state8;
reg   [15:0] input_r_load_7_reg_1727;
wire    ap_CS_fsm_state9;
reg   [15:0] input_r_load_8_reg_1737;
wire    ap_CS_fsm_state10;
reg   [15:0] input_r_load_9_reg_1747;
wire    ap_CS_fsm_state11;
reg   [15:0] input_r_load_10_reg_1757;
wire    ap_CS_fsm_state12;
reg   [15:0] input_r_load_11_reg_1767;
wire    ap_CS_fsm_state13;
reg   [15:0] input_r_load_12_reg_1777;
wire    ap_CS_fsm_state14;
reg   [15:0] input_r_load_13_reg_1787;
wire    ap_CS_fsm_state15;
reg   [15:0] input_r_load_14_reg_1797;
wire    ap_CS_fsm_state16;
reg   [15:0] input_r_load_15_reg_1807;
wire    ap_CS_fsm_state17;
reg   [15:0] input_r_load_16_reg_1817;
wire    ap_CS_fsm_state18;
reg   [15:0] input_r_load_17_reg_1827;
wire    ap_CS_fsm_state19;
reg   [15:0] input_r_load_18_reg_1837;
wire    ap_CS_fsm_state20;
reg   [15:0] input_r_load_19_reg_1847;
wire    ap_CS_fsm_state21;
reg   [15:0] input_r_load_20_reg_1857;
wire    ap_CS_fsm_state22;
reg   [15:0] input_r_load_21_reg_1867;
wire    ap_CS_fsm_state23;
reg   [15:0] input_r_load_22_reg_1877;
wire    ap_CS_fsm_state24;
reg   [15:0] input_r_load_23_reg_1887;
wire    ap_CS_fsm_state25;
reg   [15:0] input_r_load_24_reg_1897;
wire    ap_CS_fsm_state26;
reg   [15:0] input_r_load_25_reg_1907;
wire    ap_CS_fsm_state27;
reg   [15:0] input_r_load_26_reg_1917;
wire    ap_CS_fsm_state28;
reg   [15:0] input_r_load_27_reg_1927;
wire    ap_CS_fsm_state29;
reg   [15:0] input_r_load_28_reg_1937;
wire    ap_CS_fsm_state30;
reg   [15:0] input_r_load_29_reg_1947;
wire    ap_CS_fsm_state31;
reg   [15:0] input_r_load_30_reg_1957;
wire    ap_CS_fsm_state32;
reg   [15:0] input_r_load_31_reg_1967;
wire    ap_CS_fsm_state33;
reg   [15:0] input_r_load_32_reg_1977;
wire    ap_CS_fsm_state34;
reg   [15:0] input_r_load_33_reg_1987;
wire    ap_CS_fsm_state35;
reg   [15:0] input_r_load_34_reg_1997;
wire    ap_CS_fsm_state36;
reg   [15:0] input_r_load_35_reg_2007;
wire    ap_CS_fsm_state37;
reg   [15:0] input_r_load_36_reg_2017;
wire    ap_CS_fsm_state38;
reg   [15:0] input_r_load_37_reg_2027;
wire    ap_CS_fsm_state39;
reg   [15:0] input_r_load_38_reg_2037;
wire    ap_CS_fsm_state40;
reg   [15:0] input_r_load_39_reg_2047;
wire    ap_CS_fsm_state41;
reg   [15:0] input_r_load_40_reg_2057;
wire    ap_CS_fsm_state42;
reg   [15:0] input_r_load_41_reg_2067;
wire    ap_CS_fsm_state43;
reg   [15:0] input_r_load_42_reg_2077;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state46;
wire   [14:0] layer1_output_q0;
reg   [14:0] layer1_output_load_reg_2087;
wire    ap_CS_fsm_state47;
wire   [14:0] layer1_output_q1;
reg   [14:0] layer1_output_load_1_reg_2102;
wire    ap_CS_fsm_state48;
reg   [14:0] layer1_output_load_2_reg_2107;
reg   [14:0] layer1_output_load_3_reg_2122;
wire    ap_CS_fsm_state49;
reg   [14:0] layer1_output_load_4_reg_2127;
reg   [14:0] layer1_output_load_5_reg_2142;
wire    ap_CS_fsm_state50;
reg   [14:0] layer1_output_load_6_reg_2147;
reg   [14:0] layer1_output_load_7_reg_2162;
wire    ap_CS_fsm_state51;
reg   [14:0] layer1_output_load_8_reg_2167;
reg   [14:0] layer1_output_load_9_reg_2182;
wire    ap_CS_fsm_state52;
reg   [14:0] layer1_output_load_10_reg_2187;
reg   [14:0] layer1_output_load_11_reg_2202;
wire    ap_CS_fsm_state53;
reg   [14:0] layer1_output_load_12_reg_2207;
reg   [14:0] layer1_output_load_13_reg_2222;
wire    ap_CS_fsm_state54;
reg   [14:0] layer1_output_load_14_reg_2227;
reg   [14:0] layer1_output_load_15_reg_2242;
wire    ap_CS_fsm_state55;
reg   [14:0] layer1_output_load_16_reg_2247;
reg   [14:0] layer1_output_load_17_reg_2262;
wire    ap_CS_fsm_state56;
reg   [14:0] layer1_output_load_18_reg_2267;
reg   [14:0] layer1_output_load_19_reg_2282;
wire    ap_CS_fsm_state57;
reg   [14:0] layer1_output_load_20_reg_2287;
reg   [14:0] layer1_output_load_21_reg_2302;
wire    ap_CS_fsm_state58;
reg   [14:0] layer1_output_load_22_reg_2307;
reg   [14:0] layer1_output_load_23_reg_2322;
wire    ap_CS_fsm_state59;
reg   [14:0] layer1_output_load_24_reg_2327;
reg   [14:0] layer1_output_load_25_reg_2342;
wire    ap_CS_fsm_state60;
reg   [14:0] layer1_output_load_26_reg_2347;
reg   [14:0] layer1_output_load_27_reg_2362;
wire    ap_CS_fsm_state61;
reg   [14:0] layer1_output_load_28_reg_2367;
reg   [14:0] layer1_output_load_29_reg_2382;
wire    ap_CS_fsm_state62;
reg   [14:0] layer1_output_load_30_reg_2387;
reg   [14:0] layer1_output_load_31_reg_2402;
wire    ap_CS_fsm_state63;
reg   [14:0] layer1_output_load_32_reg_2407;
reg   [14:0] layer1_output_load_33_reg_2422;
wire    ap_CS_fsm_state64;
reg   [14:0] layer1_output_load_34_reg_2427;
reg   [14:0] layer1_output_load_35_reg_2442;
wire    ap_CS_fsm_state65;
reg   [14:0] layer1_output_load_36_reg_2447;
reg   [14:0] layer1_output_load_37_reg_2462;
wire    ap_CS_fsm_state66;
reg   [14:0] layer1_output_load_38_reg_2467;
reg   [14:0] layer1_output_load_39_reg_2482;
wire    ap_CS_fsm_state67;
reg   [14:0] layer1_output_load_40_reg_2487;
reg   [14:0] layer1_output_load_41_reg_2502;
wire    ap_CS_fsm_state68;
reg   [14:0] layer1_output_load_42_reg_2507;
reg   [14:0] layer1_output_load_43_reg_2522;
wire    ap_CS_fsm_state69;
reg   [14:0] layer1_output_load_44_reg_2527;
reg   [14:0] layer1_output_load_45_reg_2542;
wire    ap_CS_fsm_state70;
reg   [14:0] layer1_output_load_46_reg_2547;
reg   [14:0] layer1_output_load_47_reg_2562;
wire    ap_CS_fsm_state71;
reg   [14:0] layer1_output_load_48_reg_2567;
reg   [14:0] layer1_output_load_49_reg_2582;
wire    ap_CS_fsm_state72;
reg   [14:0] layer1_output_load_50_reg_2587;
reg   [14:0] layer1_output_load_51_reg_2602;
wire    ap_CS_fsm_state73;
reg   [14:0] layer1_output_load_52_reg_2607;
reg   [14:0] layer1_output_load_53_reg_2622;
wire    ap_CS_fsm_state74;
reg   [14:0] layer1_output_load_54_reg_2627;
reg   [14:0] layer1_output_load_55_reg_2642;
wire    ap_CS_fsm_state75;
reg   [14:0] layer1_output_load_56_reg_2647;
wire    ap_CS_fsm_state77;
wire   [15:0] layer2_output_q0;
reg   [15:0] max_val_reg_2657;
wire    ap_CS_fsm_state78;
reg   [5:0] layer1_output_address0;
reg    layer1_output_ce0;
reg    layer1_output_we0;
reg   [5:0] layer1_output_address1;
reg    layer1_output_ce1;
reg   [3:0] layer2_output_address0;
reg    layer2_output_ce0;
reg    layer2_output_we0;
wire    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start;
wire    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_done;
wire    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_idle;
wire    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_ready;
wire   [5:0] grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_address0;
wire    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_ce0;
wire    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_we0;
wire   [14:0] grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_d0;
wire    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start;
wire    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_done;
wire    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_idle;
wire    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_ready;
wire   [3:0] grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_address0;
wire    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_ce0;
wire    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_we0;
wire   [15:0] grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_d0;
wire    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start;
wire    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_done;
wire    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_idle;
wire    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_ready;
wire   [3:0] grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_layer2_output_address0;
wire    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_layer2_output_ce0;
wire   [15:0] grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_max_val_1_out;
wire    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_max_val_1_out_ap_vld;
wire    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start;
wire    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_done;
wire    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_idle;
wire    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_ready;
wire   [3:0] grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_layer2_output_address0;
wire    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_layer2_output_ce0;
wire   [3:0] grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_address0;
wire    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_ce0;
wire    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_we0;
wire   [15:0] grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_d0;
wire   [15:0] grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_sum_4_out;
wire    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_sum_4_out_ap_vld;
wire    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start;
wire    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_done;
wire    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_idle;
wire    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_ready;
wire   [3:0] grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_address0;
wire    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_ce0;
wire    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_we0;
wire   [15:0] grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_d0;
reg    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start_reg;
wire    ap_CS_fsm_state45;
reg    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start_reg;
wire    ap_CS_fsm_state76;
reg    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start_reg;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state80;
reg    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start_reg;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state82;
reg    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start_reg;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state84;
reg   [83:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
wire    ap_ST_fsm_state13_blk;
wire    ap_ST_fsm_state14_blk;
wire    ap_ST_fsm_state15_blk;
wire    ap_ST_fsm_state16_blk;
wire    ap_ST_fsm_state17_blk;
wire    ap_ST_fsm_state18_blk;
wire    ap_ST_fsm_state19_blk;
wire    ap_ST_fsm_state20_blk;
wire    ap_ST_fsm_state21_blk;
wire    ap_ST_fsm_state22_blk;
wire    ap_ST_fsm_state23_blk;
wire    ap_ST_fsm_state24_blk;
wire    ap_ST_fsm_state25_blk;
wire    ap_ST_fsm_state26_blk;
wire    ap_ST_fsm_state27_blk;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_ST_fsm_state31_blk;
wire    ap_ST_fsm_state32_blk;
wire    ap_ST_fsm_state33_blk;
wire    ap_ST_fsm_state34_blk;
wire    ap_ST_fsm_state35_blk;
wire    ap_ST_fsm_state36_blk;
wire    ap_ST_fsm_state37_blk;
wire    ap_ST_fsm_state38_blk;
wire    ap_ST_fsm_state39_blk;
wire    ap_ST_fsm_state40_blk;
wire    ap_ST_fsm_state41_blk;
wire    ap_ST_fsm_state42_blk;
wire    ap_ST_fsm_state43_blk;
wire    ap_ST_fsm_state44_blk;
reg    ap_ST_fsm_state45_blk;
wire    ap_ST_fsm_state46_blk;
wire    ap_ST_fsm_state47_blk;
wire    ap_ST_fsm_state48_blk;
wire    ap_ST_fsm_state49_blk;
wire    ap_ST_fsm_state50_blk;
wire    ap_ST_fsm_state51_blk;
wire    ap_ST_fsm_state52_blk;
wire    ap_ST_fsm_state53_blk;
wire    ap_ST_fsm_state54_blk;
wire    ap_ST_fsm_state55_blk;
wire    ap_ST_fsm_state56_blk;
wire    ap_ST_fsm_state57_blk;
wire    ap_ST_fsm_state58_blk;
wire    ap_ST_fsm_state59_blk;
wire    ap_ST_fsm_state60_blk;
wire    ap_ST_fsm_state61_blk;
wire    ap_ST_fsm_state62_blk;
wire    ap_ST_fsm_state63_blk;
wire    ap_ST_fsm_state64_blk;
wire    ap_ST_fsm_state65_blk;
wire    ap_ST_fsm_state66_blk;
wire    ap_ST_fsm_state67_blk;
wire    ap_ST_fsm_state68_blk;
wire    ap_ST_fsm_state69_blk;
wire    ap_ST_fsm_state70_blk;
wire    ap_ST_fsm_state71_blk;
wire    ap_ST_fsm_state72_blk;
wire    ap_ST_fsm_state73_blk;
wire    ap_ST_fsm_state74_blk;
wire    ap_ST_fsm_state75_blk;
reg    ap_ST_fsm_state76_blk;
wire    ap_ST_fsm_state77_blk;
wire    ap_ST_fsm_state78_blk;
wire    ap_ST_fsm_state79_blk;
reg    ap_ST_fsm_state80_blk;
wire    ap_ST_fsm_state81_blk;
reg    ap_ST_fsm_state82_blk;
wire    ap_ST_fsm_state83_blk;
reg    ap_ST_fsm_state84_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 84'd1;
#0 grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start_reg = 1'b0;
#0 grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start_reg = 1'b0;
#0 grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start_reg = 1'b0;
#0 grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start_reg = 1'b0;
#0 grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start_reg = 1'b0;
end

neural_network_layer1_output_RAM_AUTO_1R1W #(
    .DataWidth( 15 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
layer1_output_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer1_output_address0),
    .ce0(layer1_output_ce0),
    .we0(layer1_output_we0),
    .d0(grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_d0),
    .q0(layer1_output_q0),
    .address1(layer1_output_address1),
    .ce1(layer1_output_ce1),
    .q1(layer1_output_q1)
);

neural_network_layer2_output_RAM_AUTO_1R1W #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
layer2_output_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(layer2_output_address0),
    .ce0(layer2_output_ce0),
    .we0(layer2_output_we0),
    .d0(grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_d0),
    .q0(layer2_output_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1 grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start),
    .ap_done(grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_done),
    .ap_idle(grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_idle),
    .ap_ready(grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_ready),
    .sext_ln61(input_r_load_reg_1657),
    .sext_ln61_1(input_r_load_1_reg_1667),
    .sext_ln61_2(input_r_load_2_reg_1677),
    .sext_ln61_3(input_r_load_3_reg_1687),
    .sext_ln61_4(input_r_load_4_reg_1697),
    .sext_ln61_5(input_r_load_5_reg_1707),
    .sext_ln61_6(input_r_load_6_reg_1717),
    .sext_ln61_7(input_r_load_7_reg_1727),
    .sext_ln61_8(input_r_load_8_reg_1737),
    .sext_ln61_9(input_r_load_9_reg_1747),
    .sext_ln61_10(input_r_load_10_reg_1757),
    .sext_ln61_11(input_r_load_11_reg_1767),
    .sext_ln61_12(input_r_load_12_reg_1777),
    .sext_ln61_13(input_r_load_13_reg_1787),
    .sext_ln61_14(input_r_load_14_reg_1797),
    .sext_ln61_15(input_r_load_15_reg_1807),
    .sext_ln61_16(input_r_load_16_reg_1817),
    .sext_ln61_17(input_r_load_17_reg_1827),
    .sext_ln61_18(input_r_load_18_reg_1837),
    .sext_ln61_19(input_r_load_19_reg_1847),
    .sext_ln61_20(input_r_load_20_reg_1857),
    .sext_ln61_21(input_r_load_21_reg_1867),
    .sext_ln61_22(input_r_load_22_reg_1877),
    .sext_ln61_23(input_r_load_23_reg_1887),
    .sext_ln61_24(input_r_load_24_reg_1897),
    .sext_ln61_25(input_r_load_25_reg_1907),
    .sext_ln61_26(input_r_load_26_reg_1917),
    .sext_ln61_27(input_r_load_27_reg_1927),
    .sext_ln61_28(input_r_load_28_reg_1937),
    .sext_ln61_29(input_r_load_29_reg_1947),
    .sext_ln61_30(input_r_load_30_reg_1957),
    .sext_ln61_31(input_r_load_31_reg_1967),
    .sext_ln61_32(input_r_load_32_reg_1977),
    .sext_ln61_33(input_r_load_33_reg_1987),
    .sext_ln61_34(input_r_load_34_reg_1997),
    .sext_ln61_35(input_r_load_35_reg_2007),
    .sext_ln61_36(input_r_load_36_reg_2017),
    .sext_ln61_37(input_r_load_37_reg_2027),
    .sext_ln61_38(input_r_load_38_reg_2037),
    .sext_ln61_39(input_r_load_39_reg_2047),
    .sext_ln61_40(input_r_load_40_reg_2057),
    .sext_ln61_41(input_r_load_41_reg_2067),
    .sext_ln61_42(input_r_load_42_reg_2077),
    .layer1_output_address0(grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_address0),
    .layer1_output_ce0(grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_ce0),
    .layer1_output_we0(grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_we0),
    .layer1_output_d0(grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_d0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_68_3 grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start),
    .ap_done(grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_done),
    .ap_idle(grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_idle),
    .ap_ready(grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_ready),
    .zext_ln73(layer1_output_load_reg_2087),
    .conv_i86_1_cast(layer1_output_load_1_reg_2102),
    .zext_ln73_1(layer1_output_load_2_reg_2107),
    .zext_ln73_2(layer1_output_load_3_reg_2122),
    .zext_ln73_3(layer1_output_load_4_reg_2127),
    .conv_i86_5_cast(layer1_output_load_5_reg_2142),
    .conv_i86_6_cast(layer1_output_load_6_reg_2147),
    .zext_ln73_4(layer1_output_load_7_reg_2162),
    .zext_ln73_5(layer1_output_load_8_reg_2167),
    .zext_ln73_6(layer1_output_load_9_reg_2182),
    .zext_ln73_7(layer1_output_load_10_reg_2187),
    .zext_ln73_8(layer1_output_load_11_reg_2202),
    .zext_ln73_9(layer1_output_load_12_reg_2207),
    .zext_ln73_10(layer1_output_load_13_reg_2222),
    .zext_ln73_11(layer1_output_load_14_reg_2227),
    .zext_ln73_12(layer1_output_load_15_reg_2242),
    .zext_ln73_13(layer1_output_load_16_reg_2247),
    .zext_ln73_14(layer1_output_load_17_reg_2262),
    .conv_i86_22_cast(layer1_output_load_18_reg_2267),
    .zext_ln73_15(layer1_output_load_19_reg_2282),
    .zext_ln73_16(layer1_output_load_20_reg_2287),
    .zext_ln73_17(layer1_output_load_21_reg_2302),
    .conv_i86_27_cast(layer1_output_load_22_reg_2307),
    .conv_i86_28_cast(layer1_output_load_23_reg_2322),
    .zext_ln73_18(layer1_output_load_24_reg_2327),
    .zext_ln73_19(layer1_output_load_25_reg_2342),
    .conv_i86_31_cast(layer1_output_load_26_reg_2347),
    .zext_ln73_20(layer1_output_load_27_reg_2362),
    .zext_ln73_21(layer1_output_load_28_reg_2367),
    .zext_ln73_22(layer1_output_load_29_reg_2382),
    .zext_ln73_23(layer1_output_load_30_reg_2387),
    .zext_ln73_24(layer1_output_load_31_reg_2402),
    .zext_ln73_25(layer1_output_load_32_reg_2407),
    .conv_i86_38_cast(layer1_output_load_33_reg_2422),
    .zext_ln73_26(layer1_output_load_34_reg_2427),
    .zext_ln73_27(layer1_output_load_35_reg_2442),
    .zext_ln73_28(layer1_output_load_36_reg_2447),
    .zext_ln73_29(layer1_output_load_37_reg_2462),
    .zext_ln73_30(layer1_output_load_38_reg_2467),
    .zext_ln73_31(layer1_output_load_39_reg_2482),
    .zext_ln73_32(layer1_output_load_40_reg_2487),
    .conv_i86_46_cast(layer1_output_load_41_reg_2502),
    .conv_i86_48_cast(layer1_output_load_42_reg_2507),
    .conv_i86_49_cast(layer1_output_load_43_reg_2522),
    .conv_i86_50_cast(layer1_output_load_44_reg_2527),
    .zext_ln73_33(layer1_output_load_45_reg_2542),
    .zext_ln73_34(layer1_output_load_46_reg_2547),
    .zext_ln73_35(layer1_output_load_47_reg_2562),
    .conv_i86_54_cast(layer1_output_load_48_reg_2567),
    .conv_i86_55_cast(layer1_output_load_49_reg_2582),
    .zext_ln73_36(layer1_output_load_50_reg_2587),
    .zext_ln73_37(layer1_output_load_51_reg_2602),
    .zext_ln73_38(layer1_output_load_52_reg_2607),
    .conv_i86_59_cast(layer1_output_load_53_reg_2622),
    .zext_ln73_39(layer1_output_load_54_reg_2627),
    .conv_i86_62_cast(layer1_output_load_55_reg_2642),
    .zext_ln73_40(layer1_output_load_56_reg_2647),
    .layer2_output_address0(grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_address0),
    .layer2_output_ce0(grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_ce0),
    .layer2_output_we0(grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_we0),
    .layer2_output_d0(grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_d0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_22_1 grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start),
    .ap_done(grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_done),
    .ap_idle(grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_idle),
    .ap_ready(grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_ready),
    .max_val(max_val_reg_2657),
    .layer2_output_address0(grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_layer2_output_address0),
    .layer2_output_ce0(grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_layer2_output_ce0),
    .layer2_output_q0(layer2_output_q0),
    .max_val_1_out(grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_max_val_1_out),
    .max_val_1_out_ap_vld(grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_max_val_1_out_ap_vld)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_28_2 grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start),
    .ap_done(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_done),
    .ap_idle(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_idle),
    .ap_ready(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_ready),
    .layer2_output_address0(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_layer2_output_address0),
    .layer2_output_ce0(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_layer2_output_ce0),
    .layer2_output_q0(layer2_output_q0),
    .conv_i_i13_i_i8(grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_max_val_1_out),
    .output_r_address0(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_address0),
    .output_r_ce0(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_ce0),
    .output_r_we0(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_we0),
    .output_r_d0(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_d0),
    .sum_4_out(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_sum_4_out),
    .sum_4_out_ap_vld(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_sum_4_out_ap_vld)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_35_3 grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start),
    .ap_done(grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_done),
    .ap_idle(grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_idle),
    .ap_ready(grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_ready),
    .output_r_address0(grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_address0),
    .output_r_ce0(grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_ce0),
    .output_r_we0(grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_we0),
    .output_r_d0(grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_d0),
    .output_r_q0(output_r_q0),
    .sext_ln35(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_sum_4_out)
);

neural_network_CONTROL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
CONTROL_s_axi_U(
    .AWVALID(s_axi_CONTROL_AWVALID),
    .AWREADY(s_axi_CONTROL_AWREADY),
    .AWADDR(s_axi_CONTROL_AWADDR),
    .WVALID(s_axi_CONTROL_WVALID),
    .WREADY(s_axi_CONTROL_WREADY),
    .WDATA(s_axi_CONTROL_WDATA),
    .WSTRB(s_axi_CONTROL_WSTRB),
    .ARVALID(s_axi_CONTROL_ARVALID),
    .ARREADY(s_axi_CONTROL_ARREADY),
    .ARADDR(s_axi_CONTROL_ARADDR),
    .RVALID(s_axi_CONTROL_RVALID),
    .RREADY(s_axi_CONTROL_RREADY),
    .RDATA(s_axi_CONTROL_RDATA),
    .RRESP(s_axi_CONTROL_RRESP),
    .BVALID(s_axi_CONTROL_BVALID),
    .BREADY(s_axi_CONTROL_BREADY),
    .BRESP(s_axi_CONTROL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

neural_network_INPUT_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_INPUT_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_INPUT_DATA_WIDTH ))
INPUT_s_axi_U(
    .AWVALID(s_axi_INPUT_AWVALID),
    .AWREADY(s_axi_INPUT_AWREADY),
    .AWADDR(s_axi_INPUT_AWADDR),
    .WVALID(s_axi_INPUT_WVALID),
    .WREADY(s_axi_INPUT_WREADY),
    .WDATA(s_axi_INPUT_WDATA),
    .WSTRB(s_axi_INPUT_WSTRB),
    .ARVALID(s_axi_INPUT_ARVALID),
    .ARREADY(s_axi_INPUT_ARREADY),
    .ARADDR(s_axi_INPUT_ARADDR),
    .RVALID(s_axi_INPUT_RVALID),
    .RREADY(s_axi_INPUT_RREADY),
    .RDATA(s_axi_INPUT_RDATA),
    .RRESP(s_axi_INPUT_RRESP),
    .BVALID(s_axi_INPUT_BVALID),
    .BREADY(s_axi_INPUT_BREADY),
    .BRESP(s_axi_INPUT_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .input_r_address0(input_r_address0),
    .input_r_ce0(input_r_ce0),
    .input_r_q0(input_r_q0)
);

neural_network_OUTPUT_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_OUTPUT_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_OUTPUT_DATA_WIDTH ))
OUTPUT_s_axi_U(
    .AWVALID(s_axi_OUTPUT_AWVALID),
    .AWREADY(s_axi_OUTPUT_AWREADY),
    .AWADDR(s_axi_OUTPUT_AWADDR),
    .WVALID(s_axi_OUTPUT_WVALID),
    .WREADY(s_axi_OUTPUT_WREADY),
    .WDATA(s_axi_OUTPUT_WDATA),
    .WSTRB(s_axi_OUTPUT_WSTRB),
    .ARVALID(s_axi_OUTPUT_ARVALID),
    .ARREADY(s_axi_OUTPUT_ARREADY),
    .ARADDR(s_axi_OUTPUT_ARADDR),
    .RVALID(s_axi_OUTPUT_RVALID),
    .RREADY(s_axi_OUTPUT_RREADY),
    .RDATA(s_axi_OUTPUT_RDATA),
    .RRESP(s_axi_OUTPUT_RRESP),
    .BVALID(s_axi_OUTPUT_BVALID),
    .BREADY(s_axi_OUTPUT_BREADY),
    .BRESP(s_axi_OUTPUT_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .output_r_address0(output_r_address0),
    .output_r_ce0(output_r_ce0),
    .output_r_we0(output_r_we0),
    .output_r_d0(output_r_d0),
    .output_r_q0(output_r_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state79)) begin
            grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start_reg <= 1'b1;
        end else if ((grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_ready == 1'b1)) begin
            grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state81)) begin
            grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start_reg <= 1'b1;
        end else if ((grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_ready == 1'b1)) begin
            grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state83)) begin
            grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start_reg <= 1'b1;
        end else if ((grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_ready == 1'b1)) begin
            grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state44)) begin
            grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start_reg <= 1'b1;
        end else if ((grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_ready == 1'b1)) begin
            grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state75)) begin
            grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start_reg <= 1'b1;
        end else if ((grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_ready == 1'b1)) begin
            grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        input_r_load_10_reg_1757 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        input_r_load_11_reg_1767 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        input_r_load_12_reg_1777 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        input_r_load_13_reg_1787 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        input_r_load_14_reg_1797 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        input_r_load_15_reg_1807 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        input_r_load_16_reg_1817 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        input_r_load_17_reg_1827 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        input_r_load_18_reg_1837 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        input_r_load_19_reg_1847 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_load_1_reg_1667 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        input_r_load_20_reg_1857 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        input_r_load_21_reg_1867 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        input_r_load_22_reg_1877 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        input_r_load_23_reg_1887 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        input_r_load_24_reg_1897 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        input_r_load_25_reg_1907 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        input_r_load_26_reg_1917 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        input_r_load_27_reg_1927 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        input_r_load_28_reg_1937 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        input_r_load_29_reg_1947 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_load_2_reg_1677 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        input_r_load_30_reg_1957 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        input_r_load_31_reg_1967 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        input_r_load_32_reg_1977 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        input_r_load_33_reg_1987 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        input_r_load_34_reg_1997 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        input_r_load_35_reg_2007 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        input_r_load_36_reg_2017 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        input_r_load_37_reg_2027 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        input_r_load_38_reg_2037 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        input_r_load_39_reg_2047 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_load_3_reg_1687 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        input_r_load_40_reg_2057 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        input_r_load_41_reg_2067 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        input_r_load_42_reg_2077 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_load_4_reg_1697 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_load_5_reg_1707 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_load_6_reg_1717 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_load_7_reg_1727 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_load_8_reg_1737 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_load_9_reg_1747 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        input_r_load_reg_1657 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        layer1_output_load_10_reg_2187 <= layer1_output_q1;
        layer1_output_load_9_reg_2182 <= layer1_output_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        layer1_output_load_11_reg_2202 <= layer1_output_q0;
        layer1_output_load_12_reg_2207 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state54)) begin
        layer1_output_load_13_reg_2222 <= layer1_output_q0;
        layer1_output_load_14_reg_2227 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        layer1_output_load_15_reg_2242 <= layer1_output_q0;
        layer1_output_load_16_reg_2247 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state56)) begin
        layer1_output_load_17_reg_2262 <= layer1_output_q0;
        layer1_output_load_18_reg_2267 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        layer1_output_load_19_reg_2282 <= layer1_output_q0;
        layer1_output_load_20_reg_2287 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state48)) begin
        layer1_output_load_1_reg_2102 <= layer1_output_q1;
        layer1_output_load_2_reg_2107 <= layer1_output_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state58)) begin
        layer1_output_load_21_reg_2302 <= layer1_output_q0;
        layer1_output_load_22_reg_2307 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        layer1_output_load_23_reg_2322 <= layer1_output_q0;
        layer1_output_load_24_reg_2327 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state60)) begin
        layer1_output_load_25_reg_2342 <= layer1_output_q0;
        layer1_output_load_26_reg_2347 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        layer1_output_load_27_reg_2362 <= layer1_output_q0;
        layer1_output_load_28_reg_2367 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state62)) begin
        layer1_output_load_29_reg_2382 <= layer1_output_q0;
        layer1_output_load_30_reg_2387 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state63)) begin
        layer1_output_load_31_reg_2402 <= layer1_output_q0;
        layer1_output_load_32_reg_2407 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state64)) begin
        layer1_output_load_33_reg_2422 <= layer1_output_q0;
        layer1_output_load_34_reg_2427 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        layer1_output_load_35_reg_2442 <= layer1_output_q0;
        layer1_output_load_36_reg_2447 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state66)) begin
        layer1_output_load_37_reg_2462 <= layer1_output_q0;
        layer1_output_load_38_reg_2467 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        layer1_output_load_39_reg_2482 <= layer1_output_q0;
        layer1_output_load_40_reg_2487 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        layer1_output_load_3_reg_2122 <= layer1_output_q0;
        layer1_output_load_4_reg_2127 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state68)) begin
        layer1_output_load_41_reg_2502 <= layer1_output_q0;
        layer1_output_load_42_reg_2507 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        layer1_output_load_43_reg_2522 <= layer1_output_q0;
        layer1_output_load_44_reg_2527 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state70)) begin
        layer1_output_load_45_reg_2542 <= layer1_output_q0;
        layer1_output_load_46_reg_2547 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state71)) begin
        layer1_output_load_47_reg_2562 <= layer1_output_q0;
        layer1_output_load_48_reg_2567 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        layer1_output_load_49_reg_2582 <= layer1_output_q0;
        layer1_output_load_50_reg_2587 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        layer1_output_load_51_reg_2602 <= layer1_output_q0;
        layer1_output_load_52_reg_2607 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        layer1_output_load_53_reg_2622 <= layer1_output_q0;
        layer1_output_load_54_reg_2627 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        layer1_output_load_55_reg_2642 <= layer1_output_q0;
        layer1_output_load_56_reg_2647 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        layer1_output_load_5_reg_2142 <= layer1_output_q0;
        layer1_output_load_6_reg_2147 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        layer1_output_load_7_reg_2162 <= layer1_output_q0;
        layer1_output_load_8_reg_2167 <= layer1_output_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        layer1_output_load_reg_2087 <= layer1_output_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state78)) begin
        max_val_reg_2657 <= layer2_output_q0;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state31_blk = 1'b0;

assign ap_ST_fsm_state32_blk = 1'b0;

assign ap_ST_fsm_state33_blk = 1'b0;

assign ap_ST_fsm_state34_blk = 1'b0;

assign ap_ST_fsm_state35_blk = 1'b0;

assign ap_ST_fsm_state36_blk = 1'b0;

assign ap_ST_fsm_state37_blk = 1'b0;

assign ap_ST_fsm_state38_blk = 1'b0;

assign ap_ST_fsm_state39_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state40_blk = 1'b0;

assign ap_ST_fsm_state41_blk = 1'b0;

assign ap_ST_fsm_state42_blk = 1'b0;

assign ap_ST_fsm_state43_blk = 1'b0;

assign ap_ST_fsm_state44_blk = 1'b0;

always @ (*) begin
    if ((grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_done == 1'b0)) begin
        ap_ST_fsm_state45_blk = 1'b1;
    end else begin
        ap_ST_fsm_state45_blk = 1'b0;
    end
end

assign ap_ST_fsm_state46_blk = 1'b0;

assign ap_ST_fsm_state47_blk = 1'b0;

assign ap_ST_fsm_state48_blk = 1'b0;

assign ap_ST_fsm_state49_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state50_blk = 1'b0;

assign ap_ST_fsm_state51_blk = 1'b0;

assign ap_ST_fsm_state52_blk = 1'b0;

assign ap_ST_fsm_state53_blk = 1'b0;

assign ap_ST_fsm_state54_blk = 1'b0;

assign ap_ST_fsm_state55_blk = 1'b0;

assign ap_ST_fsm_state56_blk = 1'b0;

assign ap_ST_fsm_state57_blk = 1'b0;

assign ap_ST_fsm_state58_blk = 1'b0;

assign ap_ST_fsm_state59_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state60_blk = 1'b0;

assign ap_ST_fsm_state61_blk = 1'b0;

assign ap_ST_fsm_state62_blk = 1'b0;

assign ap_ST_fsm_state63_blk = 1'b0;

assign ap_ST_fsm_state64_blk = 1'b0;

assign ap_ST_fsm_state65_blk = 1'b0;

assign ap_ST_fsm_state66_blk = 1'b0;

assign ap_ST_fsm_state67_blk = 1'b0;

assign ap_ST_fsm_state68_blk = 1'b0;

assign ap_ST_fsm_state69_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state70_blk = 1'b0;

assign ap_ST_fsm_state71_blk = 1'b0;

assign ap_ST_fsm_state72_blk = 1'b0;

assign ap_ST_fsm_state73_blk = 1'b0;

assign ap_ST_fsm_state74_blk = 1'b0;

assign ap_ST_fsm_state75_blk = 1'b0;

always @ (*) begin
    if ((grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_done == 1'b0)) begin
        ap_ST_fsm_state76_blk = 1'b1;
    end else begin
        ap_ST_fsm_state76_blk = 1'b0;
    end
end

assign ap_ST_fsm_state77_blk = 1'b0;

assign ap_ST_fsm_state78_blk = 1'b0;

assign ap_ST_fsm_state79_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

always @ (*) begin
    if ((grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_done == 1'b0)) begin
        ap_ST_fsm_state80_blk = 1'b1;
    end else begin
        ap_ST_fsm_state80_blk = 1'b0;
    end
end

assign ap_ST_fsm_state81_blk = 1'b0;

always @ (*) begin
    if ((grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_done == 1'b0)) begin
        ap_ST_fsm_state82_blk = 1'b1;
    end else begin
        ap_ST_fsm_state82_blk = 1'b0;
    end
end

assign ap_ST_fsm_state83_blk = 1'b0;

always @ (*) begin
    if ((grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_done == 1'b0)) begin
        ap_ST_fsm_state84_blk = 1'b1;
    end else begin
        ap_ST_fsm_state84_blk = 1'b0;
    end
end

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state84))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state84))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        input_r_address0 = 64'd42;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        input_r_address0 = 64'd41;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        input_r_address0 = 64'd40;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        input_r_address0 = 64'd39;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        input_r_address0 = 64'd38;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        input_r_address0 = 64'd37;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        input_r_address0 = 64'd36;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        input_r_address0 = 64'd35;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        input_r_address0 = 64'd34;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        input_r_address0 = 64'd33;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        input_r_address0 = 64'd32;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        input_r_address0 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        input_r_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        input_r_address0 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        input_r_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        input_r_address0 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        input_r_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        input_r_address0 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        input_r_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        input_r_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        input_r_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        input_r_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        input_r_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        input_r_address0 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        input_r_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        input_r_address0 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        input_r_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        input_r_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        input_r_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        input_r_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        input_r_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        input_r_address0 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        input_r_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        input_r_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_r_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_r_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        input_r_address0 = 64'd0;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 
    == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        layer1_output_address0 = 64'd62;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        layer1_output_address0 = 64'd59;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        layer1_output_address0 = 64'd57;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        layer1_output_address0 = 64'd55;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        layer1_output_address0 = 64'd53;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        layer1_output_address0 = 64'd51;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        layer1_output_address0 = 64'd49;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        layer1_output_address0 = 64'd46;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        layer1_output_address0 = 64'd44;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        layer1_output_address0 = 64'd42;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        layer1_output_address0 = 64'd40;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        layer1_output_address0 = 64'd38;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        layer1_output_address0 = 64'd36;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        layer1_output_address0 = 64'd34;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        layer1_output_address0 = 64'd32;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        layer1_output_address0 = 64'd30;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        layer1_output_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        layer1_output_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        layer1_output_address0 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        layer1_output_address0 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        layer1_output_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        layer1_output_address0 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        layer1_output_address0 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        layer1_output_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layer1_output_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        layer1_output_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        layer1_output_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        layer1_output_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        layer1_output_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        layer1_output_address0 = grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_address0;
    end else begin
        layer1_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state74)) begin
        layer1_output_address1 = 64'd63;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        layer1_output_address1 = 64'd61;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        layer1_output_address1 = 64'd58;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        layer1_output_address1 = 64'd56;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        layer1_output_address1 = 64'd54;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        layer1_output_address1 = 64'd52;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        layer1_output_address1 = 64'd50;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        layer1_output_address1 = 64'd48;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        layer1_output_address1 = 64'd45;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        layer1_output_address1 = 64'd43;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        layer1_output_address1 = 64'd41;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        layer1_output_address1 = 64'd39;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        layer1_output_address1 = 64'd37;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        layer1_output_address1 = 64'd35;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        layer1_output_address1 = 64'd33;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        layer1_output_address1 = 64'd31;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        layer1_output_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        layer1_output_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        layer1_output_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        layer1_output_address1 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        layer1_output_address1 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        layer1_output_address1 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        layer1_output_address1 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        layer1_output_address1 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        layer1_output_address1 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        layer1_output_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        layer1_output_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        layer1_output_address1 = 64'd1;
    end else begin
        layer1_output_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46))) begin
        layer1_output_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        layer1_output_ce0 = grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_ce0;
    end else begin
        layer1_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47))) begin
        layer1_output_ce1 = 1'b1;
    end else begin
        layer1_output_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        layer1_output_we0 = grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_we0;
    end else begin
        layer1_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        layer2_output_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        layer2_output_address0 = grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_layer2_output_address0;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        layer2_output_address0 = grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_layer2_output_address0;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        layer2_output_address0 = grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_address0;
    end else begin
        layer2_output_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        layer2_output_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        layer2_output_ce0 = grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_layer2_output_ce0;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        layer2_output_ce0 = grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_layer2_output_ce0;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        layer2_output_ce0 = grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_ce0;
    end else begin
        layer2_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        layer2_output_we0 = grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_we0;
    end else begin
        layer2_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        output_r_address0 = grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_address0;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        output_r_address0 = grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_address0;
    end else begin
        output_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        output_r_ce0 = grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_ce0;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        output_r_ce0 = grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_ce0;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        output_r_d0 = grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_d0;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        output_r_d0 = grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_d0;
    end else begin
        output_r_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        output_r_we0 = grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_we0;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        output_r_we0 = grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_we0;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            if (((grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state45))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            if (((grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            if (((grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state80))) begin
                ap_NS_fsm = ap_ST_fsm_state81;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            if (((grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state82))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            if (((grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state84))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start = grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start_reg;

assign grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start = grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start_reg;

assign grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start = grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start_reg;

assign grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start = grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start_reg;

assign grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start = grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start_reg;

endmodule //neural_network
