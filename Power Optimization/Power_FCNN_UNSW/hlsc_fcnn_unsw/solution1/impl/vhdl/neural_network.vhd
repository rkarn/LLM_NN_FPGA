-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_INPUT_ADDR_WIDTH : INTEGER := 8;
    C_S_AXI_INPUT_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_OUTPUT_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_OUTPUT_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CONTROL_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_INPUT_AWVALID : IN STD_LOGIC;
    s_axi_INPUT_AWREADY : OUT STD_LOGIC;
    s_axi_INPUT_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_ADDR_WIDTH-1 downto 0);
    s_axi_INPUT_WVALID : IN STD_LOGIC;
    s_axi_INPUT_WREADY : OUT STD_LOGIC;
    s_axi_INPUT_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH-1 downto 0);
    s_axi_INPUT_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH/8-1 downto 0);
    s_axi_INPUT_ARVALID : IN STD_LOGIC;
    s_axi_INPUT_ARREADY : OUT STD_LOGIC;
    s_axi_INPUT_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_ADDR_WIDTH-1 downto 0);
    s_axi_INPUT_RVALID : OUT STD_LOGIC;
    s_axi_INPUT_RREADY : IN STD_LOGIC;
    s_axi_INPUT_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH-1 downto 0);
    s_axi_INPUT_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_INPUT_BVALID : OUT STD_LOGIC;
    s_axi_INPUT_BREADY : IN STD_LOGIC;
    s_axi_INPUT_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_OUTPUT_AWVALID : IN STD_LOGIC;
    s_axi_OUTPUT_AWREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_ADDR_WIDTH-1 downto 0);
    s_axi_OUTPUT_WVALID : IN STD_LOGIC;
    s_axi_OUTPUT_WREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH-1 downto 0);
    s_axi_OUTPUT_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH/8-1 downto 0);
    s_axi_OUTPUT_ARVALID : IN STD_LOGIC;
    s_axi_OUTPUT_ARREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_ADDR_WIDTH-1 downto 0);
    s_axi_OUTPUT_RVALID : OUT STD_LOGIC;
    s_axi_OUTPUT_RREADY : IN STD_LOGIC;
    s_axi_OUTPUT_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH-1 downto 0);
    s_axi_OUTPUT_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_OUTPUT_BVALID : OUT STD_LOGIC;
    s_axi_OUTPUT_BREADY : IN STD_LOGIC;
    s_axi_OUTPUT_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of neural_network is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "neural_network_neural_network,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.201000,HLS_SYN_LAT=342,HLS_SYN_TPT=none,HLS_SYN_MEM=102,HLS_SYN_DSP=0,HLS_SYN_FF=6550,HLS_SYN_LUT=3551,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (83 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (83 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (83 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (83 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (83 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (83 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (83 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (83 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (83 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (83 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (83 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (83 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (83 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010100";
    constant ap_const_lv64_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010101";
    constant ap_const_lv64_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010110";
    constant ap_const_lv64_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010111";
    constant ap_const_lv64_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011000";
    constant ap_const_lv64_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011001";
    constant ap_const_lv64_1A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011010";
    constant ap_const_lv64_1B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011011";
    constant ap_const_lv64_1C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011100";
    constant ap_const_lv64_1D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011101";
    constant ap_const_lv64_1E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011110";
    constant ap_const_lv64_1F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000011111";
    constant ap_const_lv64_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000";
    constant ap_const_lv64_21 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100001";
    constant ap_const_lv64_22 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100010";
    constant ap_const_lv64_23 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100011";
    constant ap_const_lv64_24 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100100";
    constant ap_const_lv64_25 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100101";
    constant ap_const_lv64_26 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100110";
    constant ap_const_lv64_27 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000100111";
    constant ap_const_lv64_28 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101000";
    constant ap_const_lv64_29 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101001";
    constant ap_const_lv64_2A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101010";
    constant ap_const_lv64_2B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101011";
    constant ap_const_lv64_2C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101100";
    constant ap_const_lv64_2D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101101";
    constant ap_const_lv64_2E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000101110";
    constant ap_const_lv64_30 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110000";
    constant ap_const_lv64_31 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110001";
    constant ap_const_lv64_32 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110010";
    constant ap_const_lv64_33 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110011";
    constant ap_const_lv64_34 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110100";
    constant ap_const_lv64_35 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110101";
    constant ap_const_lv64_36 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110110";
    constant ap_const_lv64_37 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000110111";
    constant ap_const_lv64_38 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111000";
    constant ap_const_lv64_39 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111001";
    constant ap_const_lv64_3A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111010";
    constant ap_const_lv64_3B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111011";
    constant ap_const_lv64_3D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111101";
    constant ap_const_lv64_3E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111110";
    constant ap_const_lv64_3F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111111";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (83 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal input_r_ce0 : STD_LOGIC;
    signal input_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_r_ce0 : STD_LOGIC;
    signal output_r_we0 : STD_LOGIC;
    signal output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_r_load_reg_1657 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal input_r_load_1_reg_1667 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal input_r_load_2_reg_1677 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal input_r_load_3_reg_1687 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal input_r_load_4_reg_1697 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal input_r_load_5_reg_1707 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_r_load_6_reg_1717 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal input_r_load_7_reg_1727 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal input_r_load_8_reg_1737 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal input_r_load_9_reg_1747 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal input_r_load_10_reg_1757 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal input_r_load_11_reg_1767 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal input_r_load_12_reg_1777 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal input_r_load_13_reg_1787 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal input_r_load_14_reg_1797 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal input_r_load_15_reg_1807 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal input_r_load_16_reg_1817 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal input_r_load_17_reg_1827 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal input_r_load_18_reg_1837 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal input_r_load_19_reg_1847 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal input_r_load_20_reg_1857 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal input_r_load_21_reg_1867 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal input_r_load_22_reg_1877 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal input_r_load_23_reg_1887 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal input_r_load_24_reg_1897 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal input_r_load_25_reg_1907 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal input_r_load_26_reg_1917 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal input_r_load_27_reg_1927 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal input_r_load_28_reg_1937 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal input_r_load_29_reg_1947 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal input_r_load_30_reg_1957 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal input_r_load_31_reg_1967 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal input_r_load_32_reg_1977 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal input_r_load_33_reg_1987 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal input_r_load_34_reg_1997 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal input_r_load_35_reg_2007 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal input_r_load_36_reg_2017 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal input_r_load_37_reg_2027 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal input_r_load_38_reg_2037 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal input_r_load_39_reg_2047 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal input_r_load_40_reg_2057 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal input_r_load_41_reg_2067 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal input_r_load_42_reg_2077 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal layer1_output_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_reg_2087 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal layer1_output_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_1_reg_2102 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal layer1_output_load_2_reg_2107 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_3_reg_2122 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal layer1_output_load_4_reg_2127 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_5_reg_2142 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal layer1_output_load_6_reg_2147 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_7_reg_2162 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal layer1_output_load_8_reg_2167 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_9_reg_2182 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal layer1_output_load_10_reg_2187 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_11_reg_2202 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal layer1_output_load_12_reg_2207 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_13_reg_2222 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal layer1_output_load_14_reg_2227 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_15_reg_2242 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal layer1_output_load_16_reg_2247 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_17_reg_2262 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal layer1_output_load_18_reg_2267 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_19_reg_2282 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal layer1_output_load_20_reg_2287 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_21_reg_2302 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal layer1_output_load_22_reg_2307 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_23_reg_2322 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal layer1_output_load_24_reg_2327 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_25_reg_2342 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal layer1_output_load_26_reg_2347 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_27_reg_2362 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal layer1_output_load_28_reg_2367 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_29_reg_2382 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal layer1_output_load_30_reg_2387 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_31_reg_2402 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal layer1_output_load_32_reg_2407 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_33_reg_2422 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal layer1_output_load_34_reg_2427 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_35_reg_2442 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal layer1_output_load_36_reg_2447 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_37_reg_2462 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal layer1_output_load_38_reg_2467 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_39_reg_2482 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal layer1_output_load_40_reg_2487 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_41_reg_2502 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal layer1_output_load_42_reg_2507 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_43_reg_2522 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal layer1_output_load_44_reg_2527 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_45_reg_2542 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal layer1_output_load_46_reg_2547 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_47_reg_2562 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal layer1_output_load_48_reg_2567 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_49_reg_2582 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal layer1_output_load_50_reg_2587 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_51_reg_2602 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal layer1_output_load_52_reg_2607 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_53_reg_2622 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal layer1_output_load_54_reg_2627 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_55_reg_2642 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal layer1_output_load_56_reg_2647 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal layer2_output_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal max_val_reg_2657 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal layer1_output_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal layer1_output_ce0 : STD_LOGIC;
    signal layer1_output_we0 : STD_LOGIC;
    signal layer1_output_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal layer1_output_ce1 : STD_LOGIC;
    signal layer2_output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal layer2_output_ce0 : STD_LOGIC;
    signal layer2_output_we0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_done : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_idle : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_ready : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_ce0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_we0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_d0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_done : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_idle : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_ready : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_ce0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_we0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_done : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_idle : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_ready : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_layer2_output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_layer2_output_ce0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_max_val_1_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_max_val_1_out_ap_vld : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_done : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_idle : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_ready : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_layer2_output_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_layer2_output_ce0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_ce0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_we0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_sum_4_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_sum_4_out_ap_vld : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_done : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_idle : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_ready : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_ce0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_we0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (83 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ST_fsm_state41_blk : STD_LOGIC;
    signal ap_ST_fsm_state42_blk : STD_LOGIC;
    signal ap_ST_fsm_state43_blk : STD_LOGIC;
    signal ap_ST_fsm_state44_blk : STD_LOGIC;
    signal ap_ST_fsm_state45_blk : STD_LOGIC;
    signal ap_ST_fsm_state46_blk : STD_LOGIC;
    signal ap_ST_fsm_state47_blk : STD_LOGIC;
    signal ap_ST_fsm_state48_blk : STD_LOGIC;
    signal ap_ST_fsm_state49_blk : STD_LOGIC;
    signal ap_ST_fsm_state50_blk : STD_LOGIC;
    signal ap_ST_fsm_state51_blk : STD_LOGIC;
    signal ap_ST_fsm_state52_blk : STD_LOGIC;
    signal ap_ST_fsm_state53_blk : STD_LOGIC;
    signal ap_ST_fsm_state54_blk : STD_LOGIC;
    signal ap_ST_fsm_state55_blk : STD_LOGIC;
    signal ap_ST_fsm_state56_blk : STD_LOGIC;
    signal ap_ST_fsm_state57_blk : STD_LOGIC;
    signal ap_ST_fsm_state58_blk : STD_LOGIC;
    signal ap_ST_fsm_state59_blk : STD_LOGIC;
    signal ap_ST_fsm_state60_blk : STD_LOGIC;
    signal ap_ST_fsm_state61_blk : STD_LOGIC;
    signal ap_ST_fsm_state62_blk : STD_LOGIC;
    signal ap_ST_fsm_state63_blk : STD_LOGIC;
    signal ap_ST_fsm_state64_blk : STD_LOGIC;
    signal ap_ST_fsm_state65_blk : STD_LOGIC;
    signal ap_ST_fsm_state66_blk : STD_LOGIC;
    signal ap_ST_fsm_state67_blk : STD_LOGIC;
    signal ap_ST_fsm_state68_blk : STD_LOGIC;
    signal ap_ST_fsm_state69_blk : STD_LOGIC;
    signal ap_ST_fsm_state70_blk : STD_LOGIC;
    signal ap_ST_fsm_state71_blk : STD_LOGIC;
    signal ap_ST_fsm_state72_blk : STD_LOGIC;
    signal ap_ST_fsm_state73_blk : STD_LOGIC;
    signal ap_ST_fsm_state74_blk : STD_LOGIC;
    signal ap_ST_fsm_state75_blk : STD_LOGIC;
    signal ap_ST_fsm_state76_blk : STD_LOGIC;
    signal ap_ST_fsm_state77_blk : STD_LOGIC;
    signal ap_ST_fsm_state78_blk : STD_LOGIC;
    signal ap_ST_fsm_state79_blk : STD_LOGIC;
    signal ap_ST_fsm_state80_blk : STD_LOGIC;
    signal ap_ST_fsm_state81_blk : STD_LOGIC;
    signal ap_ST_fsm_state82_blk : STD_LOGIC;
    signal ap_ST_fsm_state83_blk : STD_LOGIC;
    signal ap_ST_fsm_state84_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component neural_network_neural_network_Pipeline_VITIS_LOOP_56_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln61 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_1 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_3 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_4 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_5 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_6 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_7 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_8 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_9 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_10 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_11 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_12 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_13 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_14 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_15 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_16 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_17 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_18 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_19 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_20 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_21 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_22 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_23 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_24 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_25 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_26 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_27 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_28 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_29 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_30 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_31 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_32 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_33 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_34 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_35 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_36 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_37 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_38 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_39 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_40 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_41 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_42 : IN STD_LOGIC_VECTOR (15 downto 0);
        layer1_output_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        layer1_output_ce0 : OUT STD_LOGIC;
        layer1_output_we0 : OUT STD_LOGIC;
        layer1_output_d0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        zext_ln73 : IN STD_LOGIC_VECTOR (14 downto 0);
        conv_i86_1_cast : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_1 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_2 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_3 : IN STD_LOGIC_VECTOR (14 downto 0);
        conv_i86_5_cast : IN STD_LOGIC_VECTOR (14 downto 0);
        conv_i86_6_cast : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_4 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_5 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_6 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_7 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_8 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_9 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_10 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_11 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_12 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_13 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_14 : IN STD_LOGIC_VECTOR (14 downto 0);
        conv_i86_22_cast : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_15 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_16 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_17 : IN STD_LOGIC_VECTOR (14 downto 0);
        conv_i86_27_cast : IN STD_LOGIC_VECTOR (14 downto 0);
        conv_i86_28_cast : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_18 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_19 : IN STD_LOGIC_VECTOR (14 downto 0);
        conv_i86_31_cast : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_20 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_21 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_22 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_23 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_24 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_25 : IN STD_LOGIC_VECTOR (14 downto 0);
        conv_i86_38_cast : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_26 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_27 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_28 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_29 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_30 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_31 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_32 : IN STD_LOGIC_VECTOR (14 downto 0);
        conv_i86_46_cast : IN STD_LOGIC_VECTOR (14 downto 0);
        conv_i86_48_cast : IN STD_LOGIC_VECTOR (14 downto 0);
        conv_i86_49_cast : IN STD_LOGIC_VECTOR (14 downto 0);
        conv_i86_50_cast : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_33 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_34 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_35 : IN STD_LOGIC_VECTOR (14 downto 0);
        conv_i86_54_cast : IN STD_LOGIC_VECTOR (14 downto 0);
        conv_i86_55_cast : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_36 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_37 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_38 : IN STD_LOGIC_VECTOR (14 downto 0);
        conv_i86_59_cast : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_39 : IN STD_LOGIC_VECTOR (14 downto 0);
        conv_i86_62_cast : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_40 : IN STD_LOGIC_VECTOR (14 downto 0);
        layer2_output_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        layer2_output_ce0 : OUT STD_LOGIC;
        layer2_output_we0 : OUT STD_LOGIC;
        layer2_output_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_22_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        max_val : IN STD_LOGIC_VECTOR (15 downto 0);
        layer2_output_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        layer2_output_ce0 : OUT STD_LOGIC;
        layer2_output_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        max_val_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        max_val_1_out_ap_vld : OUT STD_LOGIC );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_28_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        layer2_output_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        layer2_output_ce0 : OUT STD_LOGIC;
        layer2_output_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        conv_i_i13_i_i8 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        sum_4_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        sum_4_out_ap_vld : OUT STD_LOGIC );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_35_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln35 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component neural_network_layer1_output_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (14 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component neural_network_layer2_output_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component neural_network_CONTROL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component neural_network_INPUT_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r_address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        input_r_ce0 : IN STD_LOGIC;
        input_r_q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component neural_network_OUTPUT_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        output_r_address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : IN STD_LOGIC;
        output_r_we0 : IN STD_LOGIC;
        output_r_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    layer1_output_U : component neural_network_layer1_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 15,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer1_output_address0,
        ce0 => layer1_output_ce0,
        we0 => layer1_output_we0,
        d0 => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_d0,
        q0 => layer1_output_q0,
        address1 => layer1_output_address1,
        ce1 => layer1_output_ce1,
        q1 => layer1_output_q1);

    layer2_output_U : component neural_network_layer2_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer2_output_address0,
        ce0 => layer2_output_ce0,
        we0 => layer2_output_we0,
        d0 => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_d0,
        q0 => layer2_output_q0);

    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286 : component neural_network_neural_network_Pipeline_VITIS_LOOP_56_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start,
        ap_done => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_done,
        ap_idle => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_idle,
        ap_ready => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_ready,
        sext_ln61 => input_r_load_reg_1657,
        sext_ln61_1 => input_r_load_1_reg_1667,
        sext_ln61_2 => input_r_load_2_reg_1677,
        sext_ln61_3 => input_r_load_3_reg_1687,
        sext_ln61_4 => input_r_load_4_reg_1697,
        sext_ln61_5 => input_r_load_5_reg_1707,
        sext_ln61_6 => input_r_load_6_reg_1717,
        sext_ln61_7 => input_r_load_7_reg_1727,
        sext_ln61_8 => input_r_load_8_reg_1737,
        sext_ln61_9 => input_r_load_9_reg_1747,
        sext_ln61_10 => input_r_load_10_reg_1757,
        sext_ln61_11 => input_r_load_11_reg_1767,
        sext_ln61_12 => input_r_load_12_reg_1777,
        sext_ln61_13 => input_r_load_13_reg_1787,
        sext_ln61_14 => input_r_load_14_reg_1797,
        sext_ln61_15 => input_r_load_15_reg_1807,
        sext_ln61_16 => input_r_load_16_reg_1817,
        sext_ln61_17 => input_r_load_17_reg_1827,
        sext_ln61_18 => input_r_load_18_reg_1837,
        sext_ln61_19 => input_r_load_19_reg_1847,
        sext_ln61_20 => input_r_load_20_reg_1857,
        sext_ln61_21 => input_r_load_21_reg_1867,
        sext_ln61_22 => input_r_load_22_reg_1877,
        sext_ln61_23 => input_r_load_23_reg_1887,
        sext_ln61_24 => input_r_load_24_reg_1897,
        sext_ln61_25 => input_r_load_25_reg_1907,
        sext_ln61_26 => input_r_load_26_reg_1917,
        sext_ln61_27 => input_r_load_27_reg_1927,
        sext_ln61_28 => input_r_load_28_reg_1937,
        sext_ln61_29 => input_r_load_29_reg_1947,
        sext_ln61_30 => input_r_load_30_reg_1957,
        sext_ln61_31 => input_r_load_31_reg_1967,
        sext_ln61_32 => input_r_load_32_reg_1977,
        sext_ln61_33 => input_r_load_33_reg_1987,
        sext_ln61_34 => input_r_load_34_reg_1997,
        sext_ln61_35 => input_r_load_35_reg_2007,
        sext_ln61_36 => input_r_load_36_reg_2017,
        sext_ln61_37 => input_r_load_37_reg_2027,
        sext_ln61_38 => input_r_load_38_reg_2037,
        sext_ln61_39 => input_r_load_39_reg_2047,
        sext_ln61_40 => input_r_load_40_reg_2057,
        sext_ln61_41 => input_r_load_41_reg_2067,
        sext_ln61_42 => input_r_load_42_reg_2077,
        layer1_output_address0 => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_address0,
        layer1_output_ce0 => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_ce0,
        layer1_output_we0 => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_we0,
        layer1_output_d0 => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_d0);

    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423 : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start,
        ap_done => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_done,
        ap_idle => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_idle,
        ap_ready => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_ready,
        zext_ln73 => layer1_output_load_reg_2087,
        conv_i86_1_cast => layer1_output_load_1_reg_2102,
        zext_ln73_1 => layer1_output_load_2_reg_2107,
        zext_ln73_2 => layer1_output_load_3_reg_2122,
        zext_ln73_3 => layer1_output_load_4_reg_2127,
        conv_i86_5_cast => layer1_output_load_5_reg_2142,
        conv_i86_6_cast => layer1_output_load_6_reg_2147,
        zext_ln73_4 => layer1_output_load_7_reg_2162,
        zext_ln73_5 => layer1_output_load_8_reg_2167,
        zext_ln73_6 => layer1_output_load_9_reg_2182,
        zext_ln73_7 => layer1_output_load_10_reg_2187,
        zext_ln73_8 => layer1_output_load_11_reg_2202,
        zext_ln73_9 => layer1_output_load_12_reg_2207,
        zext_ln73_10 => layer1_output_load_13_reg_2222,
        zext_ln73_11 => layer1_output_load_14_reg_2227,
        zext_ln73_12 => layer1_output_load_15_reg_2242,
        zext_ln73_13 => layer1_output_load_16_reg_2247,
        zext_ln73_14 => layer1_output_load_17_reg_2262,
        conv_i86_22_cast => layer1_output_load_18_reg_2267,
        zext_ln73_15 => layer1_output_load_19_reg_2282,
        zext_ln73_16 => layer1_output_load_20_reg_2287,
        zext_ln73_17 => layer1_output_load_21_reg_2302,
        conv_i86_27_cast => layer1_output_load_22_reg_2307,
        conv_i86_28_cast => layer1_output_load_23_reg_2322,
        zext_ln73_18 => layer1_output_load_24_reg_2327,
        zext_ln73_19 => layer1_output_load_25_reg_2342,
        conv_i86_31_cast => layer1_output_load_26_reg_2347,
        zext_ln73_20 => layer1_output_load_27_reg_2362,
        zext_ln73_21 => layer1_output_load_28_reg_2367,
        zext_ln73_22 => layer1_output_load_29_reg_2382,
        zext_ln73_23 => layer1_output_load_30_reg_2387,
        zext_ln73_24 => layer1_output_load_31_reg_2402,
        zext_ln73_25 => layer1_output_load_32_reg_2407,
        conv_i86_38_cast => layer1_output_load_33_reg_2422,
        zext_ln73_26 => layer1_output_load_34_reg_2427,
        zext_ln73_27 => layer1_output_load_35_reg_2442,
        zext_ln73_28 => layer1_output_load_36_reg_2447,
        zext_ln73_29 => layer1_output_load_37_reg_2462,
        zext_ln73_30 => layer1_output_load_38_reg_2467,
        zext_ln73_31 => layer1_output_load_39_reg_2482,
        zext_ln73_32 => layer1_output_load_40_reg_2487,
        conv_i86_46_cast => layer1_output_load_41_reg_2502,
        conv_i86_48_cast => layer1_output_load_42_reg_2507,
        conv_i86_49_cast => layer1_output_load_43_reg_2522,
        conv_i86_50_cast => layer1_output_load_44_reg_2527,
        zext_ln73_33 => layer1_output_load_45_reg_2542,
        zext_ln73_34 => layer1_output_load_46_reg_2547,
        zext_ln73_35 => layer1_output_load_47_reg_2562,
        conv_i86_54_cast => layer1_output_load_48_reg_2567,
        conv_i86_55_cast => layer1_output_load_49_reg_2582,
        zext_ln73_36 => layer1_output_load_50_reg_2587,
        zext_ln73_37 => layer1_output_load_51_reg_2602,
        zext_ln73_38 => layer1_output_load_52_reg_2607,
        conv_i86_59_cast => layer1_output_load_53_reg_2622,
        zext_ln73_39 => layer1_output_load_54_reg_2627,
        conv_i86_62_cast => layer1_output_load_55_reg_2642,
        zext_ln73_40 => layer1_output_load_56_reg_2647,
        layer2_output_address0 => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_address0,
        layer2_output_ce0 => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_ce0,
        layer2_output_we0 => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_we0,
        layer2_output_d0 => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_d0);

    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603 : component neural_network_neural_network_Pipeline_VITIS_LOOP_22_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start,
        ap_done => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_done,
        ap_idle => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_idle,
        ap_ready => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_ready,
        max_val => max_val_reg_2657,
        layer2_output_address0 => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_layer2_output_address0,
        layer2_output_ce0 => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_layer2_output_ce0,
        layer2_output_q0 => layer2_output_q0,
        max_val_1_out => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_max_val_1_out,
        max_val_1_out_ap_vld => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_max_val_1_out_ap_vld);

    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610 : component neural_network_neural_network_Pipeline_VITIS_LOOP_28_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start,
        ap_done => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_done,
        ap_idle => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_idle,
        ap_ready => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_ready,
        layer2_output_address0 => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_layer2_output_address0,
        layer2_output_ce0 => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_layer2_output_ce0,
        layer2_output_q0 => layer2_output_q0,
        conv_i_i13_i_i8 => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_max_val_1_out,
        output_r_address0 => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_address0,
        output_r_ce0 => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_ce0,
        output_r_we0 => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_we0,
        output_r_d0 => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_d0,
        sum_4_out => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_sum_4_out,
        sum_4_out_ap_vld => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_sum_4_out_ap_vld);

    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625 : component neural_network_neural_network_Pipeline_VITIS_LOOP_35_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start,
        ap_done => grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_done,
        ap_idle => grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_idle,
        ap_ready => grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_ready,
        output_r_address0 => grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_address0,
        output_r_ce0 => grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_ce0,
        output_r_we0 => grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_we0,
        output_r_d0 => grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_d0,
        output_r_q0 => output_r_q0,
        sext_ln35 => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_sum_4_out);

    CONTROL_s_axi_U : component neural_network_CONTROL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_AWVALID,
        AWREADY => s_axi_CONTROL_AWREADY,
        AWADDR => s_axi_CONTROL_AWADDR,
        WVALID => s_axi_CONTROL_WVALID,
        WREADY => s_axi_CONTROL_WREADY,
        WDATA => s_axi_CONTROL_WDATA,
        WSTRB => s_axi_CONTROL_WSTRB,
        ARVALID => s_axi_CONTROL_ARVALID,
        ARREADY => s_axi_CONTROL_ARREADY,
        ARADDR => s_axi_CONTROL_ARADDR,
        RVALID => s_axi_CONTROL_RVALID,
        RREADY => s_axi_CONTROL_RREADY,
        RDATA => s_axi_CONTROL_RDATA,
        RRESP => s_axi_CONTROL_RRESP,
        BVALID => s_axi_CONTROL_BVALID,
        BREADY => s_axi_CONTROL_BREADY,
        BRESP => s_axi_CONTROL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    INPUT_s_axi_U : component neural_network_INPUT_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_INPUT_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_INPUT_DATA_WIDTH)
    port map (
        AWVALID => s_axi_INPUT_AWVALID,
        AWREADY => s_axi_INPUT_AWREADY,
        AWADDR => s_axi_INPUT_AWADDR,
        WVALID => s_axi_INPUT_WVALID,
        WREADY => s_axi_INPUT_WREADY,
        WDATA => s_axi_INPUT_WDATA,
        WSTRB => s_axi_INPUT_WSTRB,
        ARVALID => s_axi_INPUT_ARVALID,
        ARREADY => s_axi_INPUT_ARREADY,
        ARADDR => s_axi_INPUT_ARADDR,
        RVALID => s_axi_INPUT_RVALID,
        RREADY => s_axi_INPUT_RREADY,
        RDATA => s_axi_INPUT_RDATA,
        RRESP => s_axi_INPUT_RRESP,
        BVALID => s_axi_INPUT_BVALID,
        BREADY => s_axi_INPUT_BREADY,
        BRESP => s_axi_INPUT_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r_address0 => input_r_address0,
        input_r_ce0 => input_r_ce0,
        input_r_q0 => input_r_q0);

    OUTPUT_s_axi_U : component neural_network_OUTPUT_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_OUTPUT_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_OUTPUT_DATA_WIDTH)
    port map (
        AWVALID => s_axi_OUTPUT_AWVALID,
        AWREADY => s_axi_OUTPUT_AWREADY,
        AWADDR => s_axi_OUTPUT_AWADDR,
        WVALID => s_axi_OUTPUT_WVALID,
        WREADY => s_axi_OUTPUT_WREADY,
        WDATA => s_axi_OUTPUT_WDATA,
        WSTRB => s_axi_OUTPUT_WSTRB,
        ARVALID => s_axi_OUTPUT_ARVALID,
        ARREADY => s_axi_OUTPUT_ARREADY,
        ARADDR => s_axi_OUTPUT_ARADDR,
        RVALID => s_axi_OUTPUT_RVALID,
        RREADY => s_axi_OUTPUT_RREADY,
        RDATA => s_axi_OUTPUT_RDATA,
        RRESP => s_axi_OUTPUT_RRESP,
        BVALID => s_axi_OUTPUT_BVALID,
        BREADY => s_axi_OUTPUT_BREADY,
        BRESP => s_axi_OUTPUT_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        output_r_address0 => output_r_address0,
        output_r_ce0 => output_r_ce0,
        output_r_we0 => output_r_we0,
        output_r_d0 => output_r_d0,
        output_r_q0 => output_r_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_ready = ap_const_logic_1)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_ready = ap_const_logic_1)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_ready = ap_const_logic_1)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_ready = ap_const_logic_1)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_ready = ap_const_logic_1)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                input_r_load_10_reg_1757 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                input_r_load_11_reg_1767 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                input_r_load_12_reg_1777 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                input_r_load_13_reg_1787 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                input_r_load_14_reg_1797 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                input_r_load_15_reg_1807 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                input_r_load_16_reg_1817 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                input_r_load_17_reg_1827 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                input_r_load_18_reg_1837 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                input_r_load_19_reg_1847 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                input_r_load_1_reg_1667 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                input_r_load_20_reg_1857 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                input_r_load_21_reg_1867 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                input_r_load_22_reg_1877 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                input_r_load_23_reg_1887 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                input_r_load_24_reg_1897 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                input_r_load_25_reg_1907 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                input_r_load_26_reg_1917 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                input_r_load_27_reg_1927 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                input_r_load_28_reg_1937 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                input_r_load_29_reg_1947 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                input_r_load_2_reg_1677 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                input_r_load_30_reg_1957 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                input_r_load_31_reg_1967 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                input_r_load_32_reg_1977 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                input_r_load_33_reg_1987 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                input_r_load_34_reg_1997 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then
                input_r_load_35_reg_2007 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then
                input_r_load_36_reg_2017 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                input_r_load_37_reg_2027 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                input_r_load_38_reg_2037 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                input_r_load_39_reg_2047 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                input_r_load_3_reg_1687 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then
                input_r_load_40_reg_2057 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state43)) then
                input_r_load_41_reg_2067 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then
                input_r_load_42_reg_2077 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_r_load_4_reg_1697 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_r_load_5_reg_1707 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                input_r_load_6_reg_1717 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                input_r_load_7_reg_1727 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                input_r_load_8_reg_1737 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                input_r_load_9_reg_1747 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                input_r_load_reg_1657 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state52)) then
                layer1_output_load_10_reg_2187 <= layer1_output_q1;
                layer1_output_load_9_reg_2182 <= layer1_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state53)) then
                layer1_output_load_11_reg_2202 <= layer1_output_q0;
                layer1_output_load_12_reg_2207 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state54)) then
                layer1_output_load_13_reg_2222 <= layer1_output_q0;
                layer1_output_load_14_reg_2227 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state55)) then
                layer1_output_load_15_reg_2242 <= layer1_output_q0;
                layer1_output_load_16_reg_2247 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state56)) then
                layer1_output_load_17_reg_2262 <= layer1_output_q0;
                layer1_output_load_18_reg_2267 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state57)) then
                layer1_output_load_19_reg_2282 <= layer1_output_q0;
                layer1_output_load_20_reg_2287 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then
                layer1_output_load_1_reg_2102 <= layer1_output_q1;
                layer1_output_load_2_reg_2107 <= layer1_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state58)) then
                layer1_output_load_21_reg_2302 <= layer1_output_q0;
                layer1_output_load_22_reg_2307 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state59)) then
                layer1_output_load_23_reg_2322 <= layer1_output_q0;
                layer1_output_load_24_reg_2327 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state60)) then
                layer1_output_load_25_reg_2342 <= layer1_output_q0;
                layer1_output_load_26_reg_2347 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state61)) then
                layer1_output_load_27_reg_2362 <= layer1_output_q0;
                layer1_output_load_28_reg_2367 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state62)) then
                layer1_output_load_29_reg_2382 <= layer1_output_q0;
                layer1_output_load_30_reg_2387 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state63)) then
                layer1_output_load_31_reg_2402 <= layer1_output_q0;
                layer1_output_load_32_reg_2407 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state64)) then
                layer1_output_load_33_reg_2422 <= layer1_output_q0;
                layer1_output_load_34_reg_2427 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state65)) then
                layer1_output_load_35_reg_2442 <= layer1_output_q0;
                layer1_output_load_36_reg_2447 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state66)) then
                layer1_output_load_37_reg_2462 <= layer1_output_q0;
                layer1_output_load_38_reg_2467 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state67)) then
                layer1_output_load_39_reg_2482 <= layer1_output_q0;
                layer1_output_load_40_reg_2487 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state49)) then
                layer1_output_load_3_reg_2122 <= layer1_output_q0;
                layer1_output_load_4_reg_2127 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state68)) then
                layer1_output_load_41_reg_2502 <= layer1_output_q0;
                layer1_output_load_42_reg_2507 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state69)) then
                layer1_output_load_43_reg_2522 <= layer1_output_q0;
                layer1_output_load_44_reg_2527 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state70)) then
                layer1_output_load_45_reg_2542 <= layer1_output_q0;
                layer1_output_load_46_reg_2547 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state71)) then
                layer1_output_load_47_reg_2562 <= layer1_output_q0;
                layer1_output_load_48_reg_2567 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                layer1_output_load_49_reg_2582 <= layer1_output_q0;
                layer1_output_load_50_reg_2587 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                layer1_output_load_51_reg_2602 <= layer1_output_q0;
                layer1_output_load_52_reg_2607 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state74)) then
                layer1_output_load_53_reg_2622 <= layer1_output_q0;
                layer1_output_load_54_reg_2627 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then
                layer1_output_load_55_reg_2642 <= layer1_output_q0;
                layer1_output_load_56_reg_2647 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then
                layer1_output_load_5_reg_2142 <= layer1_output_q0;
                layer1_output_load_6_reg_2147 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                layer1_output_load_7_reg_2162 <= layer1_output_q0;
                layer1_output_load_8_reg_2167 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                layer1_output_load_reg_2087 <= layer1_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then
                max_val_reg_2657 <= layer2_output_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_done, grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_done, grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_done, grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_done, grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_done, ap_CS_fsm_state45, ap_CS_fsm_state76, ap_CS_fsm_state80, ap_CS_fsm_state82, ap_CS_fsm_state84)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                if (((grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state45))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                if (((grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state76))) then
                    ap_NS_fsm <= ap_ST_fsm_state77;
                else
                    ap_NS_fsm <= ap_ST_fsm_state76;
                end if;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                if (((grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state80))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_state80;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                if (((grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state82))) then
                    ap_NS_fsm <= ap_ST_fsm_state83;
                else
                    ap_NS_fsm <= ap_ST_fsm_state82;
                end if;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                if (((grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state84;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;
    ap_ST_fsm_state38_blk <= ap_const_logic_0;
    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state40_blk <= ap_const_logic_0;
    ap_ST_fsm_state41_blk <= ap_const_logic_0;
    ap_ST_fsm_state42_blk <= ap_const_logic_0;
    ap_ST_fsm_state43_blk <= ap_const_logic_0;
    ap_ST_fsm_state44_blk <= ap_const_logic_0;

    ap_ST_fsm_state45_blk_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_done)
    begin
        if ((grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state45_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state45_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state46_blk <= ap_const_logic_0;
    ap_ST_fsm_state47_blk <= ap_const_logic_0;
    ap_ST_fsm_state48_blk <= ap_const_logic_0;
    ap_ST_fsm_state49_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state50_blk <= ap_const_logic_0;
    ap_ST_fsm_state51_blk <= ap_const_logic_0;
    ap_ST_fsm_state52_blk <= ap_const_logic_0;
    ap_ST_fsm_state53_blk <= ap_const_logic_0;
    ap_ST_fsm_state54_blk <= ap_const_logic_0;
    ap_ST_fsm_state55_blk <= ap_const_logic_0;
    ap_ST_fsm_state56_blk <= ap_const_logic_0;
    ap_ST_fsm_state57_blk <= ap_const_logic_0;
    ap_ST_fsm_state58_blk <= ap_const_logic_0;
    ap_ST_fsm_state59_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state60_blk <= ap_const_logic_0;
    ap_ST_fsm_state61_blk <= ap_const_logic_0;
    ap_ST_fsm_state62_blk <= ap_const_logic_0;
    ap_ST_fsm_state63_blk <= ap_const_logic_0;
    ap_ST_fsm_state64_blk <= ap_const_logic_0;
    ap_ST_fsm_state65_blk <= ap_const_logic_0;
    ap_ST_fsm_state66_blk <= ap_const_logic_0;
    ap_ST_fsm_state67_blk <= ap_const_logic_0;
    ap_ST_fsm_state68_blk <= ap_const_logic_0;
    ap_ST_fsm_state69_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state70_blk <= ap_const_logic_0;
    ap_ST_fsm_state71_blk <= ap_const_logic_0;
    ap_ST_fsm_state72_blk <= ap_const_logic_0;
    ap_ST_fsm_state73_blk <= ap_const_logic_0;
    ap_ST_fsm_state74_blk <= ap_const_logic_0;
    ap_ST_fsm_state75_blk <= ap_const_logic_0;

    ap_ST_fsm_state76_blk_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_done)
    begin
        if ((grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state76_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state76_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state77_blk <= ap_const_logic_0;
    ap_ST_fsm_state78_blk <= ap_const_logic_0;
    ap_ST_fsm_state79_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state80_blk_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_done)
    begin
        if ((grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state80_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state80_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state81_blk <= ap_const_logic_0;

    ap_ST_fsm_state82_blk_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_done)
    begin
        if ((grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state82_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state82_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state83_blk <= ap_const_logic_0;

    ap_ST_fsm_state84_blk_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_done)
    begin
        if ((grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state84_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state84_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_done, ap_CS_fsm_state84)
    begin
        if (((grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_done, ap_CS_fsm_state84)
    begin
        if (((grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state84))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start <= grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_ap_start_reg;
    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start <= grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_ap_start_reg;
    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start <= grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_ap_start_reg;
    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start <= grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_ap_start_reg;
    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start <= grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_ap_start_reg;

    input_r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            input_r_address0 <= ap_const_lv64_2A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            input_r_address0 <= ap_const_lv64_29(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            input_r_address0 <= ap_const_lv64_28(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            input_r_address0 <= ap_const_lv64_27(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            input_r_address0 <= ap_const_lv64_26(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            input_r_address0 <= ap_const_lv64_25(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            input_r_address0 <= ap_const_lv64_24(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            input_r_address0 <= ap_const_lv64_23(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            input_r_address0 <= ap_const_lv64_22(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            input_r_address0 <= ap_const_lv64_21(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            input_r_address0 <= ap_const_lv64_20(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            input_r_address0 <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            input_r_address0 <= ap_const_lv64_1E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            input_r_address0 <= ap_const_lv64_1D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            input_r_address0 <= ap_const_lv64_1C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            input_r_address0 <= ap_const_lv64_1B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            input_r_address0 <= ap_const_lv64_1A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            input_r_address0 <= ap_const_lv64_19(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            input_r_address0 <= ap_const_lv64_18(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            input_r_address0 <= ap_const_lv64_17(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            input_r_address0 <= ap_const_lv64_16(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            input_r_address0 <= ap_const_lv64_15(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            input_r_address0 <= ap_const_lv64_14(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            input_r_address0 <= ap_const_lv64_13(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input_r_address0 <= ap_const_lv64_12(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_r_address0 <= ap_const_lv64_11(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_r_address0 <= ap_const_lv64_10(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            input_r_address0 <= ap_const_lv64_F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_r_address0 <= ap_const_lv64_E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            input_r_address0 <= ap_const_lv64_D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            input_r_address0 <= ap_const_lv64_C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_address0 <= ap_const_lv64_B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address0 <= ap_const_lv64_A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address0 <= ap_const_lv64_9(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address0 <= ap_const_lv64_8(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address0 <= ap_const_lv64_7(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address0 <= ap_const_lv64_6(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= ap_const_lv64_5(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address0 <= ap_const_lv64_4(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_address0 <= ap_const_lv64_3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_address0 <= ap_const_lv64_2(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_address0 <= ap_const_lv64_1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            input_r_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 
    = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_output_address0_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_address0, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer1_output_address0 <= ap_const_lv64_3E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            layer1_output_address0 <= ap_const_lv64_3B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            layer1_output_address0 <= ap_const_lv64_39(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            layer1_output_address0 <= ap_const_lv64_37(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            layer1_output_address0 <= ap_const_lv64_35(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer1_output_address0 <= ap_const_lv64_33(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            layer1_output_address0 <= ap_const_lv64_31(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            layer1_output_address0 <= ap_const_lv64_2E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            layer1_output_address0 <= ap_const_lv64_2C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            layer1_output_address0 <= ap_const_lv64_2A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer1_output_address0 <= ap_const_lv64_28(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            layer1_output_address0 <= ap_const_lv64_26(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            layer1_output_address0 <= ap_const_lv64_24(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            layer1_output_address0 <= ap_const_lv64_22(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            layer1_output_address0 <= ap_const_lv64_20(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer1_output_address0 <= ap_const_lv64_1E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            layer1_output_address0 <= ap_const_lv64_1C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            layer1_output_address0 <= ap_const_lv64_1A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            layer1_output_address0 <= ap_const_lv64_17(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            layer1_output_address0 <= ap_const_lv64_15(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer1_output_address0 <= ap_const_lv64_12(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layer1_output_address0 <= ap_const_lv64_F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            layer1_output_address0 <= ap_const_lv64_D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            layer1_output_address0 <= ap_const_lv64_9(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            layer1_output_address0 <= ap_const_lv64_7(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            layer1_output_address0 <= ap_const_lv64_5(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            layer1_output_address0 <= ap_const_lv64_3(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_output_address0 <= ap_const_lv64_2(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            layer1_output_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            layer1_output_address0 <= grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_address0;
        else 
            layer1_output_address0 <= "XXXXXX";
        end if; 
    end process;


    layer1_output_address1_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            layer1_output_address1 <= ap_const_lv64_3F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            layer1_output_address1 <= ap_const_lv64_3D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            layer1_output_address1 <= ap_const_lv64_3A(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            layer1_output_address1 <= ap_const_lv64_38(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            layer1_output_address1 <= ap_const_lv64_36(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            layer1_output_address1 <= ap_const_lv64_34(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            layer1_output_address1 <= ap_const_lv64_32(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            layer1_output_address1 <= ap_const_lv64_30(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            layer1_output_address1 <= ap_const_lv64_2D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            layer1_output_address1 <= ap_const_lv64_2B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            layer1_output_address1 <= ap_const_lv64_29(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            layer1_output_address1 <= ap_const_lv64_27(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            layer1_output_address1 <= ap_const_lv64_25(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            layer1_output_address1 <= ap_const_lv64_23(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            layer1_output_address1 <= ap_const_lv64_21(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            layer1_output_address1 <= ap_const_lv64_1F(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            layer1_output_address1 <= ap_const_lv64_1D(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            layer1_output_address1 <= ap_const_lv64_1B(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            layer1_output_address1 <= ap_const_lv64_19(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            layer1_output_address1 <= ap_const_lv64_16(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            layer1_output_address1 <= ap_const_lv64_14(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            layer1_output_address1 <= ap_const_lv64_10(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            layer1_output_address1 <= ap_const_lv64_E(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            layer1_output_address1 <= ap_const_lv64_C(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            layer1_output_address1 <= ap_const_lv64_8(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            layer1_output_address1 <= ap_const_lv64_6(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            layer1_output_address1 <= ap_const_lv64_4(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            layer1_output_address1 <= ap_const_lv64_1(6 - 1 downto 0);
        else 
            layer1_output_address1 <= "XXXXXX";
        end if; 
    end process;


    layer1_output_ce0_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_ce0, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 
    = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46))) then 
            layer1_output_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            layer1_output_ce0 <= grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_ce0;
        else 
            layer1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_output_ce1_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49, ap_CS_fsm_state50, ap_CS_fsm_state51, ap_CS_fsm_state52, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state52) or (ap_const_logic_1 = ap_CS_fsm_state51) or (ap_const_logic_1 
    = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            layer1_output_ce1 <= ap_const_logic_1;
        else 
            layer1_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_output_we0_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_we0, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            layer1_output_we0 <= grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_1286_layer1_output_we0;
        else 
            layer1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_output_address0_assign_proc : process(ap_CS_fsm_state77, grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_address0, grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_layer2_output_address0, grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_layer2_output_address0, ap_CS_fsm_state76, ap_CS_fsm_state80, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            layer2_output_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            layer2_output_address0 <= grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_layer2_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            layer2_output_address0 <= grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_layer2_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            layer2_output_address0 <= grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_address0;
        else 
            layer2_output_address0 <= "XXXX";
        end if; 
    end process;


    layer2_output_ce0_assign_proc : process(ap_CS_fsm_state77, grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_ce0, grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_layer2_output_ce0, grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_layer2_output_ce0, ap_CS_fsm_state76, ap_CS_fsm_state80, ap_CS_fsm_state82)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            layer2_output_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            layer2_output_ce0 <= grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_layer2_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            layer2_output_ce0 <= grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_1603_layer2_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            layer2_output_ce0 <= grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_ce0;
        else 
            layer2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_output_we0_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_we0, ap_CS_fsm_state76)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            layer2_output_we0 <= grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_1423_layer2_output_we0;
        else 
            layer2_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_address0_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_address0, grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_address0, ap_CS_fsm_state82, ap_CS_fsm_state84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            output_r_address0 <= grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            output_r_address0 <= grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_address0;
        else 
            output_r_address0 <= "XXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_ce0, grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_ce0, ap_CS_fsm_state82, ap_CS_fsm_state84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            output_r_ce0 <= grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            output_r_ce0 <= grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_ce0;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_d0, grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_d0, ap_CS_fsm_state82, ap_CS_fsm_state84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            output_r_d0 <= grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            output_r_d0 <= grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_d0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_we0, grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_we0, ap_CS_fsm_state82, ap_CS_fsm_state84)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            output_r_we0 <= grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_1625_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            output_r_we0 <= grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_1610_output_r_we0;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
