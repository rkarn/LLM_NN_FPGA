// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_56_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln61,
        sext_ln61_1,
        sext_ln61_2,
        sext_ln61_3,
        sext_ln61_4,
        sext_ln61_5,
        sext_ln61_6,
        sext_ln61_7,
        sext_ln61_8,
        sext_ln61_9,
        sext_ln61_10,
        sext_ln61_11,
        sext_ln61_12,
        sext_ln61_13,
        sext_ln61_14,
        sext_ln61_15,
        sext_ln61_16,
        sext_ln61_17,
        layer1_output_address0,
        layer1_output_ce0,
        layer1_output_we0,
        layer1_output_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] sext_ln61;
input  [15:0] sext_ln61_1;
input  [15:0] sext_ln61_2;
input  [15:0] sext_ln61_3;
input  [15:0] sext_ln61_4;
input  [15:0] sext_ln61_5;
input  [15:0] sext_ln61_6;
input  [15:0] sext_ln61_7;
input  [15:0] sext_ln61_8;
input  [15:0] sext_ln61_9;
input  [15:0] sext_ln61_10;
input  [15:0] sext_ln61_11;
input  [15:0] sext_ln61_12;
input  [15:0] sext_ln61_13;
input  [15:0] sext_ln61_14;
input  [15:0] sext_ln61_15;
input  [15:0] sext_ln61_16;
input  [15:0] sext_ln61_17;
output  [4:0] layer1_output_address0;
output   layer1_output_ce0;
output   layer1_output_we0;
output  [14:0] layer1_output_d0;

reg ap_idle;
reg layer1_output_ce0;
reg layer1_output_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln56_fu_582_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [4:0] layer1_weights_0_address0;
reg    layer1_weights_0_ce0;
wire   [9:0] layer1_weights_0_q0;
wire   [4:0] layer1_weights_1_address0;
reg    layer1_weights_1_ce0;
wire  signed [8:0] layer1_weights_1_q0;
wire   [4:0] layer1_weights_2_address0;
reg    layer1_weights_2_ce0;
wire  signed [9:0] layer1_weights_2_q0;
wire   [4:0] layer1_weights_3_address0;
reg    layer1_weights_3_ce0;
wire  signed [8:0] layer1_weights_3_q0;
wire   [4:0] layer1_weights_4_address0;
reg    layer1_weights_4_ce0;
wire  signed [9:0] layer1_weights_4_q0;
wire   [4:0] layer1_weights_5_address0;
reg    layer1_weights_5_ce0;
wire  signed [8:0] layer1_weights_5_q0;
wire   [4:0] layer1_weights_6_address0;
reg    layer1_weights_6_ce0;
wire  signed [9:0] layer1_weights_6_q0;
wire   [4:0] layer1_weights_7_address0;
reg    layer1_weights_7_ce0;
wire  signed [10:0] layer1_weights_7_q0;
wire   [4:0] layer1_weights_8_address0;
reg    layer1_weights_8_ce0;
wire  signed [9:0] layer1_weights_8_q0;
wire   [4:0] layer1_weights_9_address0;
reg    layer1_weights_9_ce0;
wire  signed [8:0] layer1_weights_9_q0;
wire   [4:0] layer1_weights_10_address0;
reg    layer1_weights_10_ce0;
wire  signed [10:0] layer1_weights_10_q0;
wire   [4:0] layer1_weights_11_address0;
reg    layer1_weights_11_ce0;
wire  signed [10:0] layer1_weights_11_q0;
wire   [4:0] layer1_weights_12_address0;
reg    layer1_weights_12_ce0;
wire  signed [10:0] layer1_weights_12_q0;
wire   [4:0] layer1_weights_13_address0;
reg    layer1_weights_13_ce0;
wire  signed [11:0] layer1_weights_13_q0;
wire   [4:0] layer1_weights_14_address0;
reg    layer1_weights_14_ce0;
wire  signed [10:0] layer1_weights_14_q0;
wire   [4:0] layer1_weights_15_address0;
reg    layer1_weights_15_ce0;
wire  signed [9:0] layer1_weights_15_q0;
wire   [4:0] layer1_weights_16_address0;
reg    layer1_weights_16_ce0;
wire  signed [9:0] layer1_weights_16_q0;
wire   [4:0] layer1_weights_17_address0;
reg    layer1_weights_17_ce0;
wire  signed [9:0] layer1_weights_17_q0;
wire   [4:0] layer1_bias_address0;
reg    layer1_bias_ce0;
wire   [9:0] layer1_bias_q0;
wire  signed [23:0] sext_ln61_17_cast_fu_502_p1;
reg  signed [23:0] sext_ln61_17_cast_reg_1165;
wire    ap_block_pp0_stage0_11001;
wire  signed [23:0] sext_ln61_16_cast_fu_506_p1;
reg  signed [23:0] sext_ln61_16_cast_reg_1170;
wire  signed [23:0] sext_ln61_15_cast_fu_510_p1;
reg  signed [23:0] sext_ln61_15_cast_reg_1175;
wire  signed [23:0] sext_ln61_14_cast_fu_514_p1;
reg  signed [23:0] sext_ln61_14_cast_reg_1180;
wire  signed [23:0] sext_ln61_13_cast_fu_518_p1;
reg  signed [23:0] sext_ln61_13_cast_reg_1185;
wire  signed [23:0] sext_ln61_12_cast_fu_522_p1;
reg  signed [23:0] sext_ln61_12_cast_reg_1190;
wire  signed [23:0] sext_ln61_11_cast_fu_526_p1;
reg  signed [23:0] sext_ln61_11_cast_reg_1195;
wire  signed [23:0] sext_ln61_10_cast_fu_530_p1;
reg  signed [23:0] sext_ln61_10_cast_reg_1200;
wire  signed [23:0] sext_ln61_9_cast_fu_534_p1;
reg  signed [23:0] sext_ln61_9_cast_reg_1205;
wire  signed [23:0] sext_ln61_8_cast_fu_538_p1;
reg  signed [23:0] sext_ln61_8_cast_reg_1210;
wire  signed [23:0] sext_ln61_7_cast_fu_542_p1;
reg  signed [23:0] sext_ln61_7_cast_reg_1215;
wire  signed [23:0] sext_ln61_6_cast_fu_546_p1;
reg  signed [23:0] sext_ln61_6_cast_reg_1220;
wire  signed [23:0] sext_ln61_5_cast_fu_550_p1;
reg  signed [23:0] sext_ln61_5_cast_reg_1225;
wire  signed [23:0] sext_ln61_4_cast_fu_554_p1;
reg  signed [23:0] sext_ln61_4_cast_reg_1230;
wire  signed [23:0] sext_ln61_3_cast_fu_558_p1;
reg  signed [23:0] sext_ln61_3_cast_reg_1235;
wire  signed [23:0] sext_ln61_2_cast_fu_562_p1;
reg  signed [23:0] sext_ln61_2_cast_reg_1240;
wire  signed [23:0] sext_ln61_1_cast_fu_566_p1;
reg  signed [23:0] sext_ln61_1_cast_reg_1245;
wire  signed [23:0] sext_ln61_cast_fu_570_p1;
reg  signed [23:0] sext_ln61_cast_reg_1250;
wire   [63:0] zext_ln56_fu_594_p1;
reg   [63:0] zext_ln56_reg_1259;
reg   [63:0] zext_ln56_reg_1259_pp0_iter1_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter2_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter3_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter4_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter5_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter6_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter7_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter8_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter9_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter10_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter11_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter12_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter13_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter14_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter15_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter16_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter17_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter18_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter19_reg;
reg   [63:0] zext_ln56_reg_1259_pp0_iter20_reg;
reg  signed [9:0] layer1_weights_0_load_reg_1291;
reg   [15:0] tmp_3_reg_1306;
wire   [15:0] sum_3_fu_996_p2;
reg   [15:0] sum_3_reg_1556;
wire   [14:0] add_ln58_fu_1002_p2;
reg   [14:0] add_ln58_reg_1561;
wire    ap_block_pp0_stage0;
reg   [4:0] i_fu_130;
wire   [4:0] add_ln56_fu_588_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_2;
wire  signed [15:0] mul_ln61_fu_612_p1;
wire   [23:0] mul_ln61_fu_612_p2;
wire  signed [23:0] tmp_4_fu_642_p1;
wire   [23:0] grp_fu_1021_p3;
wire   [15:0] tmp_4_fu_642_p4;
wire  signed [23:0] tmp_5_fu_663_p1;
wire   [23:0] grp_fu_1029_p3;
wire   [15:0] tmp_5_fu_663_p4;
wire  signed [23:0] tmp_6_fu_684_p1;
wire   [23:0] grp_fu_1037_p3;
wire   [15:0] tmp_6_fu_684_p4;
wire  signed [23:0] tmp_7_fu_705_p1;
wire   [23:0] grp_fu_1045_p3;
wire   [15:0] tmp_7_fu_705_p4;
wire  signed [23:0] tmp_8_fu_726_p1;
wire   [23:0] grp_fu_1053_p3;
wire   [15:0] tmp_8_fu_726_p4;
wire  signed [23:0] tmp_9_fu_747_p1;
wire   [23:0] grp_fu_1061_p3;
wire   [15:0] tmp_9_fu_747_p4;
wire  signed [23:0] tmp_10_fu_768_p1;
wire   [23:0] grp_fu_1069_p3;
wire   [15:0] tmp_10_fu_768_p4;
wire  signed [23:0] tmp_11_fu_789_p1;
wire   [23:0] grp_fu_1077_p3;
wire   [15:0] tmp_11_fu_789_p4;
wire  signed [23:0] tmp_12_fu_810_p1;
wire   [23:0] grp_fu_1085_p3;
wire   [15:0] tmp_12_fu_810_p4;
wire  signed [23:0] tmp_13_fu_831_p1;
wire   [23:0] grp_fu_1093_p3;
wire   [15:0] tmp_13_fu_831_p4;
wire  signed [23:0] tmp_14_fu_852_p1;
wire   [23:0] grp_fu_1101_p3;
wire   [15:0] tmp_14_fu_852_p4;
wire  signed [23:0] tmp_15_fu_873_p1;
wire   [23:0] grp_fu_1109_p3;
wire   [15:0] tmp_15_fu_873_p4;
wire  signed [23:0] tmp_16_fu_894_p1;
wire   [23:0] grp_fu_1117_p3;
wire   [15:0] tmp_16_fu_894_p4;
wire  signed [23:0] tmp_17_fu_915_p1;
wire   [23:0] grp_fu_1125_p3;
wire   [15:0] tmp_17_fu_915_p4;
wire  signed [23:0] tmp_18_fu_936_p1;
wire   [23:0] grp_fu_1133_p3;
wire   [15:0] tmp_18_fu_936_p4;
wire  signed [23:0] tmp_s_fu_953_p1;
wire   [23:0] grp_fu_1141_p3;
wire   [15:0] tmp_s_fu_953_p4;
wire  signed [23:0] sum_fu_970_p1;
wire   [23:0] grp_fu_1149_p3;
wire  signed [9:0] sext_ln63_fu_979_p0;
wire  signed [23:0] trunc_ln_fu_983_p1;
wire  signed [9:0] sext_ln63_1_fu_992_p0;
wire  signed [15:0] sext_ln63_fu_979_p1;
wire   [15:0] sum_fu_970_p4;
wire  signed [14:0] sext_ln63_1_fu_992_p1;
wire   [14:0] trunc_ln_fu_983_p4;
wire   [0:0] icmp_ln14_fu_1008_p2;
wire  signed [15:0] grp_fu_1021_p1;
wire   [23:0] grp_fu_1021_p2;
wire  signed [15:0] grp_fu_1029_p1;
wire   [23:0] grp_fu_1029_p2;
wire  signed [15:0] grp_fu_1037_p1;
wire   [23:0] grp_fu_1037_p2;
wire  signed [15:0] grp_fu_1045_p1;
wire   [23:0] grp_fu_1045_p2;
wire  signed [15:0] grp_fu_1053_p1;
wire   [23:0] grp_fu_1053_p2;
wire  signed [15:0] grp_fu_1061_p1;
wire   [23:0] grp_fu_1061_p2;
wire  signed [15:0] grp_fu_1069_p1;
wire   [23:0] grp_fu_1069_p2;
wire  signed [15:0] grp_fu_1077_p1;
wire   [23:0] grp_fu_1077_p2;
wire  signed [15:0] grp_fu_1085_p1;
wire   [23:0] grp_fu_1085_p2;
wire  signed [15:0] grp_fu_1093_p1;
wire   [23:0] grp_fu_1093_p2;
wire  signed [15:0] grp_fu_1101_p1;
wire   [23:0] grp_fu_1101_p2;
wire  signed [15:0] grp_fu_1109_p1;
wire   [23:0] grp_fu_1109_p2;
wire  signed [15:0] grp_fu_1117_p1;
wire   [23:0] grp_fu_1117_p2;
wire  signed [15:0] grp_fu_1125_p1;
wire   [23:0] grp_fu_1125_p2;
wire  signed [15:0] grp_fu_1133_p1;
wire   [23:0] grp_fu_1133_p2;
wire  signed [15:0] grp_fu_1141_p1;
wire   [23:0] grp_fu_1141_p2;
wire  signed [15:0] grp_fu_1149_p1;
wire   [23:0] grp_fu_1149_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_done_reg = 1'b0;
end

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_0_RAM_2P_BRAM_1R1W #(
    .DataWidth( 10 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_0_address0),
    .ce0(layer1_weights_0_ce0),
    .q0(layer1_weights_0_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_1_RAM_2P_BRAM_1R1W #(
    .DataWidth( 9 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_1_address0),
    .ce0(layer1_weights_1_ce0),
    .q0(layer1_weights_1_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_2_RAM_2P_BRAM_1R1W #(
    .DataWidth( 10 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_2_address0),
    .ce0(layer1_weights_2_ce0),
    .q0(layer1_weights_2_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_3_RAM_2P_BRAM_1R1W #(
    .DataWidth( 9 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_3_address0),
    .ce0(layer1_weights_3_ce0),
    .q0(layer1_weights_3_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_4_RAM_2P_BRAM_1R1W #(
    .DataWidth( 10 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_4_address0),
    .ce0(layer1_weights_4_ce0),
    .q0(layer1_weights_4_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_5_RAM_2P_BRAM_1R1W #(
    .DataWidth( 9 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_5_address0),
    .ce0(layer1_weights_5_ce0),
    .q0(layer1_weights_5_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_6_RAM_2P_BRAM_1R1W #(
    .DataWidth( 10 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_6_address0),
    .ce0(layer1_weights_6_ce0),
    .q0(layer1_weights_6_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_7_RAM_2P_BRAM_1R1W #(
    .DataWidth( 11 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_7_address0),
    .ce0(layer1_weights_7_ce0),
    .q0(layer1_weights_7_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_8_RAM_2P_BRAM_1R1W #(
    .DataWidth( 10 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_8_address0),
    .ce0(layer1_weights_8_ce0),
    .q0(layer1_weights_8_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_9_RAM_2P_BRAM_1R1W #(
    .DataWidth( 9 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_9_address0),
    .ce0(layer1_weights_9_ce0),
    .q0(layer1_weights_9_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_10_RAM_2P_BRAM_1R1W #(
    .DataWidth( 11 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_10_address0),
    .ce0(layer1_weights_10_ce0),
    .q0(layer1_weights_10_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_11_RAM_2P_BRAM_1R1W #(
    .DataWidth( 11 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_11_address0),
    .ce0(layer1_weights_11_ce0),
    .q0(layer1_weights_11_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_12_RAM_2P_BRAM_1R1W #(
    .DataWidth( 11 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_12_address0),
    .ce0(layer1_weights_12_ce0),
    .q0(layer1_weights_12_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_13_RAM_2P_BRAM_1R1W #(
    .DataWidth( 12 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_13_address0),
    .ce0(layer1_weights_13_ce0),
    .q0(layer1_weights_13_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_14_RAM_2P_BRAM_1R1W #(
    .DataWidth( 11 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_14_address0),
    .ce0(layer1_weights_14_ce0),
    .q0(layer1_weights_14_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_15_RAM_2P_BRAM_1R1W #(
    .DataWidth( 10 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_15_address0),
    .ce0(layer1_weights_15_ce0),
    .q0(layer1_weights_15_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_16_RAM_2P_BRAM_1R1W #(
    .DataWidth( 10 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_16_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_16_address0),
    .ce0(layer1_weights_16_ce0),
    .q0(layer1_weights_16_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_17_RAM_2P_BRAM_1R1W #(
    .DataWidth( 10 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_weights_17_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_17_address0),
    .ce0(layer1_weights_17_ce0),
    .q0(layer1_weights_17_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_bias_RAM_1P_BRAM_1R1W #(
    .DataWidth( 10 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_bias_address0),
    .ce0(layer1_bias_ce0),
    .q0(layer1_bias_q0)
);

neural_network_mul_10s_16s_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
mul_10s_16s_24_1_1_U1(
    .din0(layer1_weights_0_load_reg_1291),
    .din1(mul_ln61_fu_612_p1),
    .dout(mul_ln61_fu_612_p2)
);

neural_network_mac_muladd_9s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_16s_24ns_24_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_1_q0),
    .din1(grp_fu_1021_p1),
    .din2(grp_fu_1021_p2),
    .ce(1'b1),
    .dout(grp_fu_1021_p3)
);

neural_network_mac_muladd_10s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_16s_24ns_24_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_2_q0),
    .din1(grp_fu_1029_p1),
    .din2(grp_fu_1029_p2),
    .ce(1'b1),
    .dout(grp_fu_1029_p3)
);

neural_network_mac_muladd_9s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_16s_24ns_24_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_3_q0),
    .din1(grp_fu_1037_p1),
    .din2(grp_fu_1037_p2),
    .ce(1'b1),
    .dout(grp_fu_1037_p3)
);

neural_network_mac_muladd_10s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_16s_24ns_24_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_4_q0),
    .din1(grp_fu_1045_p1),
    .din2(grp_fu_1045_p2),
    .ce(1'b1),
    .dout(grp_fu_1045_p3)
);

neural_network_mac_muladd_9s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_16s_24ns_24_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_5_q0),
    .din1(grp_fu_1053_p1),
    .din2(grp_fu_1053_p2),
    .ce(1'b1),
    .dout(grp_fu_1053_p3)
);

neural_network_mac_muladd_10s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_16s_24ns_24_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_6_q0),
    .din1(grp_fu_1061_p1),
    .din2(grp_fu_1061_p2),
    .ce(1'b1),
    .dout(grp_fu_1061_p3)
);

neural_network_mac_muladd_11s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_16s_24ns_24_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_7_q0),
    .din1(grp_fu_1069_p1),
    .din2(grp_fu_1069_p2),
    .ce(1'b1),
    .dout(grp_fu_1069_p3)
);

neural_network_mac_muladd_10s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_16s_24ns_24_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_8_q0),
    .din1(grp_fu_1077_p1),
    .din2(grp_fu_1077_p2),
    .ce(1'b1),
    .dout(grp_fu_1077_p3)
);

neural_network_mac_muladd_9s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_16s_24ns_24_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_9_q0),
    .din1(grp_fu_1085_p1),
    .din2(grp_fu_1085_p2),
    .ce(1'b1),
    .dout(grp_fu_1085_p3)
);

neural_network_mac_muladd_11s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_16s_24ns_24_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_10_q0),
    .din1(grp_fu_1093_p1),
    .din2(grp_fu_1093_p2),
    .ce(1'b1),
    .dout(grp_fu_1093_p3)
);

neural_network_mac_muladd_11s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_16s_24ns_24_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_11_q0),
    .din1(grp_fu_1101_p1),
    .din2(grp_fu_1101_p2),
    .ce(1'b1),
    .dout(grp_fu_1101_p3)
);

neural_network_mac_muladd_11s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_16s_24ns_24_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_12_q0),
    .din1(grp_fu_1109_p1),
    .din2(grp_fu_1109_p2),
    .ce(1'b1),
    .dout(grp_fu_1109_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_13_q0),
    .din1(grp_fu_1117_p1),
    .din2(grp_fu_1117_p2),
    .ce(1'b1),
    .dout(grp_fu_1117_p3)
);

neural_network_mac_muladd_11s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_16s_24ns_24_4_1_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_14_q0),
    .din1(grp_fu_1125_p1),
    .din2(grp_fu_1125_p2),
    .ce(1'b1),
    .dout(grp_fu_1125_p3)
);

neural_network_mac_muladd_10s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_16s_24ns_24_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_15_q0),
    .din1(grp_fu_1133_p1),
    .din2(grp_fu_1133_p2),
    .ce(1'b1),
    .dout(grp_fu_1133_p3)
);

neural_network_mac_muladd_10s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_16s_24ns_24_4_1_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_16_q0),
    .din1(grp_fu_1141_p1),
    .din2(grp_fu_1141_p2),
    .ce(1'b1),
    .dout(grp_fu_1141_p3)
);

neural_network_mac_muladd_10s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_16s_24ns_24_4_1_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_17_q0),
    .din1(grp_fu_1149_p1),
    .din2(grp_fu_1149_p2),
    .ce(1'b1),
    .dout(grp_fu_1149_p3)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter20_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln56_fu_582_p2 == 1'd0))) begin
            i_fu_130 <= add_ln56_fu_588_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_130 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln58_reg_1561 <= add_ln58_fu_1002_p2;
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        sum_3_reg_1556 <= sum_3_fu_996_p2;
        tmp_3_reg_1306 <= {{mul_ln61_fu_612_p2[23:8]}};
        zext_ln56_reg_1259_pp0_iter10_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter9_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter11_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter10_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter12_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter11_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter13_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter12_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter14_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter13_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter15_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter14_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter16_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter15_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter17_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter16_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter18_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter17_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter19_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter18_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter20_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter19_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter2_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter1_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter3_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter2_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter4_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter3_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter5_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter4_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter6_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter5_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter7_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter6_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter8_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter7_reg[4 : 0];
        zext_ln56_reg_1259_pp0_iter9_reg[4 : 0] <= zext_ln56_reg_1259_pp0_iter8_reg[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        layer1_weights_0_load_reg_1291 <= layer1_weights_0_q0;
        sext_ln61_10_cast_reg_1200 <= sext_ln61_10_cast_fu_530_p1;
        sext_ln61_11_cast_reg_1195 <= sext_ln61_11_cast_fu_526_p1;
        sext_ln61_12_cast_reg_1190 <= sext_ln61_12_cast_fu_522_p1;
        sext_ln61_13_cast_reg_1185 <= sext_ln61_13_cast_fu_518_p1;
        sext_ln61_14_cast_reg_1180 <= sext_ln61_14_cast_fu_514_p1;
        sext_ln61_15_cast_reg_1175 <= sext_ln61_15_cast_fu_510_p1;
        sext_ln61_16_cast_reg_1170 <= sext_ln61_16_cast_fu_506_p1;
        sext_ln61_17_cast_reg_1165 <= sext_ln61_17_cast_fu_502_p1;
        sext_ln61_1_cast_reg_1245 <= sext_ln61_1_cast_fu_566_p1;
        sext_ln61_2_cast_reg_1240 <= sext_ln61_2_cast_fu_562_p1;
        sext_ln61_3_cast_reg_1235 <= sext_ln61_3_cast_fu_558_p1;
        sext_ln61_4_cast_reg_1230 <= sext_ln61_4_cast_fu_554_p1;
        sext_ln61_5_cast_reg_1225 <= sext_ln61_5_cast_fu_550_p1;
        sext_ln61_6_cast_reg_1220 <= sext_ln61_6_cast_fu_546_p1;
        sext_ln61_7_cast_reg_1215 <= sext_ln61_7_cast_fu_542_p1;
        sext_ln61_8_cast_reg_1210 <= sext_ln61_8_cast_fu_538_p1;
        sext_ln61_9_cast_reg_1205 <= sext_ln61_9_cast_fu_534_p1;
        sext_ln61_cast_reg_1250 <= sext_ln61_cast_fu_570_p1;
        zext_ln56_reg_1259_pp0_iter1_reg[4 : 0] <= zext_ln56_reg_1259[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln56_fu_582_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln56_reg_1259[4 : 0] <= zext_ln56_fu_594_p1[4 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln56_fu_582_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter20_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_130;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_bias_ce0 = 1'b1;
    end else begin
        layer1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_output_ce0 = 1'b1;
    end else begin
        layer1_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_output_we0 = 1'b1;
    end else begin
        layer1_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_0_ce0 = 1'b1;
    end else begin
        layer1_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_10_ce0 = 1'b1;
    end else begin
        layer1_weights_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_11_ce0 = 1'b1;
    end else begin
        layer1_weights_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_12_ce0 = 1'b1;
    end else begin
        layer1_weights_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_13_ce0 = 1'b1;
    end else begin
        layer1_weights_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_14_ce0 = 1'b1;
    end else begin
        layer1_weights_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_15_ce0 = 1'b1;
    end else begin
        layer1_weights_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_16_ce0 = 1'b1;
    end else begin
        layer1_weights_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_17_ce0 = 1'b1;
    end else begin
        layer1_weights_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_1_ce0 = 1'b1;
    end else begin
        layer1_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_2_ce0 = 1'b1;
    end else begin
        layer1_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_3_ce0 = 1'b1;
    end else begin
        layer1_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_4_ce0 = 1'b1;
    end else begin
        layer1_weights_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_5_ce0 = 1'b1;
    end else begin
        layer1_weights_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_6_ce0 = 1'b1;
    end else begin
        layer1_weights_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_7_ce0 = 1'b1;
    end else begin
        layer1_weights_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_8_ce0 = 1'b1;
    end else begin
        layer1_weights_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer1_weights_9_ce0 = 1'b1;
    end else begin
        layer1_weights_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln56_fu_588_p2 = (ap_sig_allocacmp_i_2 + 5'd1);

assign add_ln58_fu_1002_p2 = ($signed(sext_ln63_1_fu_992_p1) + $signed(trunc_ln_fu_983_p4));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_1021_p1 = sext_ln61_1_cast_reg_1245;

assign grp_fu_1021_p2 = {{tmp_3_reg_1306}, {8'd0}};

assign grp_fu_1029_p1 = sext_ln61_2_cast_reg_1240;

assign grp_fu_1029_p2 = {{tmp_4_fu_642_p4}, {8'd0}};

assign grp_fu_1037_p1 = sext_ln61_3_cast_reg_1235;

assign grp_fu_1037_p2 = {{tmp_5_fu_663_p4}, {8'd0}};

assign grp_fu_1045_p1 = sext_ln61_4_cast_reg_1230;

assign grp_fu_1045_p2 = {{tmp_6_fu_684_p4}, {8'd0}};

assign grp_fu_1053_p1 = sext_ln61_5_cast_reg_1225;

assign grp_fu_1053_p2 = {{tmp_7_fu_705_p4}, {8'd0}};

assign grp_fu_1061_p1 = sext_ln61_6_cast_reg_1220;

assign grp_fu_1061_p2 = {{tmp_8_fu_726_p4}, {8'd0}};

assign grp_fu_1069_p1 = sext_ln61_7_cast_reg_1215;

assign grp_fu_1069_p2 = {{tmp_9_fu_747_p4}, {8'd0}};

assign grp_fu_1077_p1 = sext_ln61_8_cast_reg_1210;

assign grp_fu_1077_p2 = {{tmp_10_fu_768_p4}, {8'd0}};

assign grp_fu_1085_p1 = sext_ln61_9_cast_reg_1205;

assign grp_fu_1085_p2 = {{tmp_11_fu_789_p4}, {8'd0}};

assign grp_fu_1093_p1 = sext_ln61_10_cast_reg_1200;

assign grp_fu_1093_p2 = {{tmp_12_fu_810_p4}, {8'd0}};

assign grp_fu_1101_p1 = sext_ln61_11_cast_reg_1195;

assign grp_fu_1101_p2 = {{tmp_13_fu_831_p4}, {8'd0}};

assign grp_fu_1109_p1 = sext_ln61_12_cast_reg_1190;

assign grp_fu_1109_p2 = {{tmp_14_fu_852_p4}, {8'd0}};

assign grp_fu_1117_p1 = sext_ln61_13_cast_reg_1185;

assign grp_fu_1117_p2 = {{tmp_15_fu_873_p4}, {8'd0}};

assign grp_fu_1125_p1 = sext_ln61_14_cast_reg_1180;

assign grp_fu_1125_p2 = {{tmp_16_fu_894_p4}, {8'd0}};

assign grp_fu_1133_p1 = sext_ln61_15_cast_reg_1175;

assign grp_fu_1133_p2 = {{tmp_17_fu_915_p4}, {8'd0}};

assign grp_fu_1141_p1 = sext_ln61_16_cast_reg_1170;

assign grp_fu_1141_p2 = {{tmp_18_fu_936_p4}, {8'd0}};

assign grp_fu_1149_p1 = sext_ln61_17_cast_reg_1165;

assign grp_fu_1149_p2 = {{tmp_s_fu_953_p4}, {8'd0}};

assign icmp_ln14_fu_1008_p2 = (($signed(sum_3_reg_1556) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln56_fu_582_p2 = ((ap_sig_allocacmp_i_2 == 5'd20) ? 1'b1 : 1'b0);

assign layer1_bias_address0 = zext_ln56_reg_1259_pp0_iter18_reg;

assign layer1_output_address0 = zext_ln56_reg_1259_pp0_iter20_reg;

assign layer1_output_d0 = ((icmp_ln14_fu_1008_p2[0:0] == 1'b1) ? add_ln58_reg_1561 : 15'd0);

assign layer1_weights_0_address0 = zext_ln56_fu_594_p1;

assign layer1_weights_10_address0 = zext_ln56_reg_1259_pp0_iter8_reg;

assign layer1_weights_11_address0 = zext_ln56_reg_1259_pp0_iter9_reg;

assign layer1_weights_12_address0 = zext_ln56_reg_1259_pp0_iter10_reg;

assign layer1_weights_13_address0 = zext_ln56_reg_1259_pp0_iter11_reg;

assign layer1_weights_14_address0 = zext_ln56_reg_1259_pp0_iter12_reg;

assign layer1_weights_15_address0 = zext_ln56_reg_1259_pp0_iter13_reg;

assign layer1_weights_16_address0 = zext_ln56_reg_1259_pp0_iter14_reg;

assign layer1_weights_17_address0 = zext_ln56_reg_1259_pp0_iter15_reg;

assign layer1_weights_1_address0 = zext_ln56_fu_594_p1;

assign layer1_weights_2_address0 = zext_ln56_reg_1259;

assign layer1_weights_3_address0 = zext_ln56_reg_1259_pp0_iter1_reg;

assign layer1_weights_4_address0 = zext_ln56_reg_1259_pp0_iter2_reg;

assign layer1_weights_5_address0 = zext_ln56_reg_1259_pp0_iter3_reg;

assign layer1_weights_6_address0 = zext_ln56_reg_1259_pp0_iter4_reg;

assign layer1_weights_7_address0 = zext_ln56_reg_1259_pp0_iter5_reg;

assign layer1_weights_8_address0 = zext_ln56_reg_1259_pp0_iter6_reg;

assign layer1_weights_9_address0 = zext_ln56_reg_1259_pp0_iter7_reg;

assign mul_ln61_fu_612_p1 = sext_ln61_cast_reg_1250;

assign sext_ln61_10_cast_fu_530_p1 = $signed(sext_ln61_10);

assign sext_ln61_11_cast_fu_526_p1 = $signed(sext_ln61_11);

assign sext_ln61_12_cast_fu_522_p1 = $signed(sext_ln61_12);

assign sext_ln61_13_cast_fu_518_p1 = $signed(sext_ln61_13);

assign sext_ln61_14_cast_fu_514_p1 = $signed(sext_ln61_14);

assign sext_ln61_15_cast_fu_510_p1 = $signed(sext_ln61_15);

assign sext_ln61_16_cast_fu_506_p1 = $signed(sext_ln61_16);

assign sext_ln61_17_cast_fu_502_p1 = $signed(sext_ln61_17);

assign sext_ln61_1_cast_fu_566_p1 = $signed(sext_ln61_1);

assign sext_ln61_2_cast_fu_562_p1 = $signed(sext_ln61_2);

assign sext_ln61_3_cast_fu_558_p1 = $signed(sext_ln61_3);

assign sext_ln61_4_cast_fu_554_p1 = $signed(sext_ln61_4);

assign sext_ln61_5_cast_fu_550_p1 = $signed(sext_ln61_5);

assign sext_ln61_6_cast_fu_546_p1 = $signed(sext_ln61_6);

assign sext_ln61_7_cast_fu_542_p1 = $signed(sext_ln61_7);

assign sext_ln61_8_cast_fu_538_p1 = $signed(sext_ln61_8);

assign sext_ln61_9_cast_fu_534_p1 = $signed(sext_ln61_9);

assign sext_ln61_cast_fu_570_p1 = $signed(sext_ln61);

assign sext_ln63_1_fu_992_p0 = layer1_bias_q0;

assign sext_ln63_1_fu_992_p1 = sext_ln63_1_fu_992_p0;

assign sext_ln63_fu_979_p0 = layer1_bias_q0;

assign sext_ln63_fu_979_p1 = sext_ln63_fu_979_p0;

assign sum_3_fu_996_p2 = ($signed(sext_ln63_fu_979_p1) + $signed(sum_fu_970_p4));

assign sum_fu_970_p1 = grp_fu_1149_p3;

assign sum_fu_970_p4 = {{sum_fu_970_p1[23:8]}};

assign tmp_10_fu_768_p1 = grp_fu_1069_p3;

assign tmp_10_fu_768_p4 = {{tmp_10_fu_768_p1[23:8]}};

assign tmp_11_fu_789_p1 = grp_fu_1077_p3;

assign tmp_11_fu_789_p4 = {{tmp_11_fu_789_p1[23:8]}};

assign tmp_12_fu_810_p1 = grp_fu_1085_p3;

assign tmp_12_fu_810_p4 = {{tmp_12_fu_810_p1[23:8]}};

assign tmp_13_fu_831_p1 = grp_fu_1093_p3;

assign tmp_13_fu_831_p4 = {{tmp_13_fu_831_p1[23:8]}};

assign tmp_14_fu_852_p1 = grp_fu_1101_p3;

assign tmp_14_fu_852_p4 = {{tmp_14_fu_852_p1[23:8]}};

assign tmp_15_fu_873_p1 = grp_fu_1109_p3;

assign tmp_15_fu_873_p4 = {{tmp_15_fu_873_p1[23:8]}};

assign tmp_16_fu_894_p1 = grp_fu_1117_p3;

assign tmp_16_fu_894_p4 = {{tmp_16_fu_894_p1[23:8]}};

assign tmp_17_fu_915_p1 = grp_fu_1125_p3;

assign tmp_17_fu_915_p4 = {{tmp_17_fu_915_p1[23:8]}};

assign tmp_18_fu_936_p1 = grp_fu_1133_p3;

assign tmp_18_fu_936_p4 = {{tmp_18_fu_936_p1[23:8]}};

assign tmp_4_fu_642_p1 = grp_fu_1021_p3;

assign tmp_4_fu_642_p4 = {{tmp_4_fu_642_p1[23:8]}};

assign tmp_5_fu_663_p1 = grp_fu_1029_p3;

assign tmp_5_fu_663_p4 = {{tmp_5_fu_663_p1[23:8]}};

assign tmp_6_fu_684_p1 = grp_fu_1037_p3;

assign tmp_6_fu_684_p4 = {{tmp_6_fu_684_p1[23:8]}};

assign tmp_7_fu_705_p1 = grp_fu_1045_p3;

assign tmp_7_fu_705_p4 = {{tmp_7_fu_705_p1[23:8]}};

assign tmp_8_fu_726_p1 = grp_fu_1053_p3;

assign tmp_8_fu_726_p4 = {{tmp_8_fu_726_p1[23:8]}};

assign tmp_9_fu_747_p1 = grp_fu_1061_p3;

assign tmp_9_fu_747_p4 = {{tmp_9_fu_747_p1[23:8]}};

assign tmp_s_fu_953_p1 = grp_fu_1141_p3;

assign tmp_s_fu_953_p4 = {{tmp_s_fu_953_p1[23:8]}};

assign trunc_ln_fu_983_p1 = grp_fu_1149_p3;

assign trunc_ln_fu_983_p4 = {{trunc_ln_fu_983_p1[22:8]}};

assign zext_ln56_fu_594_p1 = ap_sig_allocacmp_i_2;

always @ (posedge ap_clk) begin
    zext_ln56_reg_1259[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter1_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter2_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter3_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter4_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter5_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter6_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter7_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter8_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter9_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter10_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter11_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter12_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter13_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter14_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter15_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter16_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter17_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter18_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter19_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln56_reg_1259_pp0_iter20_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_56_1
