-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_INPUT_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_INPUT_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_OUTPUT_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_OUTPUT_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CONTROL_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_INPUT_AWVALID : IN STD_LOGIC;
    s_axi_INPUT_AWREADY : OUT STD_LOGIC;
    s_axi_INPUT_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_ADDR_WIDTH-1 downto 0);
    s_axi_INPUT_WVALID : IN STD_LOGIC;
    s_axi_INPUT_WREADY : OUT STD_LOGIC;
    s_axi_INPUT_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH-1 downto 0);
    s_axi_INPUT_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH/8-1 downto 0);
    s_axi_INPUT_ARVALID : IN STD_LOGIC;
    s_axi_INPUT_ARREADY : OUT STD_LOGIC;
    s_axi_INPUT_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_ADDR_WIDTH-1 downto 0);
    s_axi_INPUT_RVALID : OUT STD_LOGIC;
    s_axi_INPUT_RREADY : IN STD_LOGIC;
    s_axi_INPUT_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH-1 downto 0);
    s_axi_INPUT_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_INPUT_BVALID : OUT STD_LOGIC;
    s_axi_INPUT_BREADY : IN STD_LOGIC;
    s_axi_INPUT_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_OUTPUT_AWVALID : IN STD_LOGIC;
    s_axi_OUTPUT_AWREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_ADDR_WIDTH-1 downto 0);
    s_axi_OUTPUT_WVALID : IN STD_LOGIC;
    s_axi_OUTPUT_WREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH-1 downto 0);
    s_axi_OUTPUT_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH/8-1 downto 0);
    s_axi_OUTPUT_ARVALID : IN STD_LOGIC;
    s_axi_OUTPUT_ARREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_ADDR_WIDTH-1 downto 0);
    s_axi_OUTPUT_RVALID : OUT STD_LOGIC;
    s_axi_OUTPUT_RREADY : IN STD_LOGIC;
    s_axi_OUTPUT_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH-1 downto 0);
    s_axi_OUTPUT_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_OUTPUT_BVALID : OUT STD_LOGIC;
    s_axi_OUTPUT_BREADY : IN STD_LOGIC;
    s_axi_OUTPUT_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of neural_network is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "neural_network_neural_network,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.201000,HLS_SYN_LAT=167,HLS_SYN_TPT=none,HLS_SYN_MEM=40,HLS_SYN_DSP=0,HLS_SYN_FF=4258,HLS_SYN_LUT=2977,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal input_r_ce0 : STD_LOGIC;
    signal input_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_r_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal output_r_ce0 : STD_LOGIC;
    signal output_r_we0 : STD_LOGIC;
    signal output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_r_load_reg_730 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal input_r_load_1_reg_740 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal input_r_load_2_reg_750 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal input_r_load_3_reg_760 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal input_r_load_4_reg_770 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal input_r_load_5_reg_780 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal input_r_load_6_reg_790 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal input_r_load_7_reg_800 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal input_r_load_8_reg_810 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal input_r_load_9_reg_820 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal input_r_load_10_reg_830 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal input_r_load_11_reg_840 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal input_r_load_12_reg_850 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal input_r_load_13_reg_860 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal input_r_load_14_reg_870 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal input_r_load_15_reg_880 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal input_r_load_16_reg_890 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal input_r_load_17_reg_900 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal layer1_output_q1 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_reg_915 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal layer1_output_q0 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_1_reg_920 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_2_reg_935 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal layer1_output_load_3_reg_940 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_4_reg_955 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal layer1_output_load_5_reg_960 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_6_reg_975 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal layer1_output_load_7_reg_980 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_8_reg_995 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal layer1_output_load_9_reg_1000 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_10_reg_1015 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal layer1_output_load_11_reg_1020 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_12_reg_1035 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal layer1_output_load_13_reg_1040 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_14_reg_1055 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal layer1_output_load_15_reg_1060 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_16_reg_1075 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal layer1_output_load_17_reg_1080 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_load_18_reg_1095 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal layer1_output_load_19_reg_1100 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal layer2_output_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal max_val_reg_1110 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal layer1_output_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_output_ce0 : STD_LOGIC;
    signal layer1_output_we0 : STD_LOGIC;
    signal layer1_output_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_output_ce1 : STD_LOGIC;
    signal layer2_output_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_output_ce0 : STD_LOGIC;
    signal layer2_output_we0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_start : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_done : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_idle : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_ready : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_layer1_output_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_layer1_output_ce0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_layer1_output_we0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_layer1_output_d0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_start : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_done : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_idle : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_ready : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_layer2_output_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_layer2_output_ce0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_layer2_output_we0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_layer2_output_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_start : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_done : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_idle : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_ready : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_layer2_output_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_layer2_output_ce0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_max_val_1_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_max_val_1_out_ap_vld : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_start : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_done : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_idle : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_ready : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_layer2_output_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_layer2_output_ce0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_output_r_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_output_r_ce0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_output_r_we0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_sum_4_out : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_sum_4_out_ap_vld : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_start : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_done : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_idle : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_ready : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_output_r_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_output_r_ce0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_output_r_we0 : STD_LOGIC;
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal ap_ST_fsm_state40_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component neural_network_neural_network_Pipeline_VITIS_LOOP_56_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sext_ln61 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_1 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_3 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_4 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_5 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_6 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_7 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_8 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_9 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_10 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_11 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_12 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_13 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_14 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_15 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_16 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln61_17 : IN STD_LOGIC_VECTOR (15 downto 0);
        layer1_output_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        layer1_output_ce0 : OUT STD_LOGIC;
        layer1_output_we0 : OUT STD_LOGIC;
        layer1_output_d0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        zext_ln73 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_1 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_2 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_3 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_4 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_5 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_6 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_7 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_8 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_9 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_10 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_11 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_12 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_13 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_14 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_15 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_16 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_17 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_18 : IN STD_LOGIC_VECTOR (14 downto 0);
        zext_ln73_19 : IN STD_LOGIC_VECTOR (14 downto 0);
        layer2_output_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        layer2_output_ce0 : OUT STD_LOGIC;
        layer2_output_we0 : OUT STD_LOGIC;
        layer2_output_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_22_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        max_val : IN STD_LOGIC_VECTOR (15 downto 0);
        layer2_output_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        layer2_output_ce0 : OUT STD_LOGIC;
        layer2_output_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        max_val_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        max_val_1_out_ap_vld : OUT STD_LOGIC );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_28_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        layer2_output_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        layer2_output_ce0 : OUT STD_LOGIC;
        layer2_output_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        conv_i_i13_i_i8 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        sum_4_out : OUT STD_LOGIC_VECTOR (15 downto 0);
        sum_4_out_ap_vld : OUT STD_LOGIC );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_35_3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        sext_ln35 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component neural_network_layer1_output_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (14 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (14 downto 0);
        address1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component neural_network_layer2_output_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component neural_network_CONTROL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component neural_network_INPUT_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r_address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        input_r_ce0 : IN STD_LOGIC;
        input_r_q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component neural_network_OUTPUT_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        output_r_address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        output_r_ce0 : IN STD_LOGIC;
        output_r_we0 : IN STD_LOGIC;
        output_r_d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_r_q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    layer1_output_U : component neural_network_layer1_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 15,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer1_output_address0,
        ce0 => layer1_output_ce0,
        we0 => layer1_output_we0,
        d0 => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_layer1_output_d0,
        q0 => layer1_output_q0,
        address1 => layer1_output_address1,
        ce1 => layer1_output_ce1,
        q1 => layer1_output_q1);

    layer2_output_U : component neural_network_layer2_output_RAM_AUTO_1R1W
    generic map (
        DataWidth => 16,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => layer2_output_address0,
        ce0 => layer2_output_ce0,
        we0 => layer2_output_we0,
        d0 => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_layer2_output_d0,
        q0 => layer2_output_q0);

    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545 : component neural_network_neural_network_Pipeline_VITIS_LOOP_56_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_start,
        ap_done => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_done,
        ap_idle => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_idle,
        ap_ready => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_ready,
        sext_ln61 => input_r_load_reg_730,
        sext_ln61_1 => input_r_load_1_reg_740,
        sext_ln61_2 => input_r_load_2_reg_750,
        sext_ln61_3 => input_r_load_3_reg_760,
        sext_ln61_4 => input_r_load_4_reg_770,
        sext_ln61_5 => input_r_load_5_reg_780,
        sext_ln61_6 => input_r_load_6_reg_790,
        sext_ln61_7 => input_r_load_7_reg_800,
        sext_ln61_8 => input_r_load_8_reg_810,
        sext_ln61_9 => input_r_load_9_reg_820,
        sext_ln61_10 => input_r_load_10_reg_830,
        sext_ln61_11 => input_r_load_11_reg_840,
        sext_ln61_12 => input_r_load_12_reg_850,
        sext_ln61_13 => input_r_load_13_reg_860,
        sext_ln61_14 => input_r_load_14_reg_870,
        sext_ln61_15 => input_r_load_15_reg_880,
        sext_ln61_16 => input_r_load_16_reg_890,
        sext_ln61_17 => input_r_load_17_reg_900,
        layer1_output_address0 => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_layer1_output_address0,
        layer1_output_ce0 => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_layer1_output_ce0,
        layer1_output_we0 => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_layer1_output_we0,
        layer1_output_d0 => grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_layer1_output_d0);

    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607 : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_start,
        ap_done => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_done,
        ap_idle => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_idle,
        ap_ready => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_ready,
        zext_ln73 => layer1_output_load_reg_915,
        zext_ln73_1 => layer1_output_load_1_reg_920,
        zext_ln73_2 => layer1_output_load_2_reg_935,
        zext_ln73_3 => layer1_output_load_3_reg_940,
        zext_ln73_4 => layer1_output_load_4_reg_955,
        zext_ln73_5 => layer1_output_load_5_reg_960,
        zext_ln73_6 => layer1_output_load_6_reg_975,
        zext_ln73_7 => layer1_output_load_7_reg_980,
        zext_ln73_8 => layer1_output_load_8_reg_995,
        zext_ln73_9 => layer1_output_load_9_reg_1000,
        zext_ln73_10 => layer1_output_load_10_reg_1015,
        zext_ln73_11 => layer1_output_load_11_reg_1020,
        zext_ln73_12 => layer1_output_load_12_reg_1035,
        zext_ln73_13 => layer1_output_load_13_reg_1040,
        zext_ln73_14 => layer1_output_load_14_reg_1055,
        zext_ln73_15 => layer1_output_load_15_reg_1060,
        zext_ln73_16 => layer1_output_load_16_reg_1075,
        zext_ln73_17 => layer1_output_load_17_reg_1080,
        zext_ln73_18 => layer1_output_load_18_reg_1095,
        zext_ln73_19 => layer1_output_load_19_reg_1100,
        layer2_output_address0 => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_layer2_output_address0,
        layer2_output_ce0 => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_layer2_output_ce0,
        layer2_output_we0 => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_layer2_output_we0,
        layer2_output_d0 => grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_layer2_output_d0);

    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676 : component neural_network_neural_network_Pipeline_VITIS_LOOP_22_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_start,
        ap_done => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_done,
        ap_idle => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_idle,
        ap_ready => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_ready,
        max_val => max_val_reg_1110,
        layer2_output_address0 => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_layer2_output_address0,
        layer2_output_ce0 => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_layer2_output_ce0,
        layer2_output_q0 => layer2_output_q0,
        max_val_1_out => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_max_val_1_out,
        max_val_1_out_ap_vld => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_max_val_1_out_ap_vld);

    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683 : component neural_network_neural_network_Pipeline_VITIS_LOOP_28_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_start,
        ap_done => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_done,
        ap_idle => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_idle,
        ap_ready => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_ready,
        layer2_output_address0 => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_layer2_output_address0,
        layer2_output_ce0 => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_layer2_output_ce0,
        layer2_output_q0 => layer2_output_q0,
        conv_i_i13_i_i8 => grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_max_val_1_out,
        output_r_address0 => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_output_r_address0,
        output_r_ce0 => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_output_r_ce0,
        output_r_we0 => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_output_r_we0,
        output_r_d0 => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_output_r_d0,
        sum_4_out => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_sum_4_out,
        sum_4_out_ap_vld => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_sum_4_out_ap_vld);

    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698 : component neural_network_neural_network_Pipeline_VITIS_LOOP_35_3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_start,
        ap_done => grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_done,
        ap_idle => grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_idle,
        ap_ready => grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_ready,
        output_r_address0 => grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_output_r_address0,
        output_r_ce0 => grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_output_r_ce0,
        output_r_we0 => grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_output_r_we0,
        output_r_d0 => grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_output_r_d0,
        output_r_q0 => output_r_q0,
        sext_ln35 => grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_sum_4_out);

    CONTROL_s_axi_U : component neural_network_CONTROL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_AWVALID,
        AWREADY => s_axi_CONTROL_AWREADY,
        AWADDR => s_axi_CONTROL_AWADDR,
        WVALID => s_axi_CONTROL_WVALID,
        WREADY => s_axi_CONTROL_WREADY,
        WDATA => s_axi_CONTROL_WDATA,
        WSTRB => s_axi_CONTROL_WSTRB,
        ARVALID => s_axi_CONTROL_ARVALID,
        ARREADY => s_axi_CONTROL_ARREADY,
        ARADDR => s_axi_CONTROL_ARADDR,
        RVALID => s_axi_CONTROL_RVALID,
        RREADY => s_axi_CONTROL_RREADY,
        RDATA => s_axi_CONTROL_RDATA,
        RRESP => s_axi_CONTROL_RRESP,
        BVALID => s_axi_CONTROL_BVALID,
        BREADY => s_axi_CONTROL_BREADY,
        BRESP => s_axi_CONTROL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    INPUT_s_axi_U : component neural_network_INPUT_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_INPUT_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_INPUT_DATA_WIDTH)
    port map (
        AWVALID => s_axi_INPUT_AWVALID,
        AWREADY => s_axi_INPUT_AWREADY,
        AWADDR => s_axi_INPUT_AWADDR,
        WVALID => s_axi_INPUT_WVALID,
        WREADY => s_axi_INPUT_WREADY,
        WDATA => s_axi_INPUT_WDATA,
        WSTRB => s_axi_INPUT_WSTRB,
        ARVALID => s_axi_INPUT_ARVALID,
        ARREADY => s_axi_INPUT_ARREADY,
        ARADDR => s_axi_INPUT_ARADDR,
        RVALID => s_axi_INPUT_RVALID,
        RREADY => s_axi_INPUT_RREADY,
        RDATA => s_axi_INPUT_RDATA,
        RRESP => s_axi_INPUT_RRESP,
        BVALID => s_axi_INPUT_BVALID,
        BREADY => s_axi_INPUT_BREADY,
        BRESP => s_axi_INPUT_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r_address0 => input_r_address0,
        input_r_ce0 => input_r_ce0,
        input_r_q0 => input_r_q0);

    OUTPUT_s_axi_U : component neural_network_OUTPUT_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_OUTPUT_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_OUTPUT_DATA_WIDTH)
    port map (
        AWVALID => s_axi_OUTPUT_AWVALID,
        AWREADY => s_axi_OUTPUT_AWREADY,
        AWADDR => s_axi_OUTPUT_AWADDR,
        WVALID => s_axi_OUTPUT_WVALID,
        WREADY => s_axi_OUTPUT_WREADY,
        WDATA => s_axi_OUTPUT_WDATA,
        WSTRB => s_axi_OUTPUT_WSTRB,
        ARVALID => s_axi_OUTPUT_ARVALID,
        ARREADY => s_axi_OUTPUT_ARREADY,
        ARADDR => s_axi_OUTPUT_ARADDR,
        RVALID => s_axi_OUTPUT_RVALID,
        RREADY => s_axi_OUTPUT_RREADY,
        RDATA => s_axi_OUTPUT_RDATA,
        RRESP => s_axi_OUTPUT_RRESP,
        BVALID => s_axi_OUTPUT_BVALID,
        BREADY => s_axi_OUTPUT_BREADY,
        BRESP => s_axi_OUTPUT_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        output_r_address0 => output_r_address0,
        output_r_ce0 => output_r_ce0,
        output_r_we0 => output_r_we0,
        output_r_d0 => output_r_d0,
        output_r_q0 => output_r_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_ready = ap_const_logic_1)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_ready = ap_const_logic_1)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_ready = ap_const_logic_1)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_ready = ap_const_logic_1)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_ready = ap_const_logic_1)) then 
                    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                input_r_load_10_reg_830 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                input_r_load_11_reg_840 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                input_r_load_12_reg_850 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                input_r_load_13_reg_860 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                input_r_load_14_reg_870 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                input_r_load_15_reg_880 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                input_r_load_16_reg_890 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                input_r_load_17_reg_900 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                input_r_load_1_reg_740 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                input_r_load_2_reg_750 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                input_r_load_3_reg_760 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                input_r_load_4_reg_770 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_r_load_5_reg_780 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                input_r_load_6_reg_790 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                input_r_load_7_reg_800 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                input_r_load_8_reg_810 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                input_r_load_9_reg_820 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                input_r_load_reg_730 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                layer1_output_load_10_reg_1015 <= layer1_output_q1;
                layer1_output_load_11_reg_1020 <= layer1_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                layer1_output_load_12_reg_1035 <= layer1_output_q1;
                layer1_output_load_13_reg_1040 <= layer1_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                layer1_output_load_14_reg_1055 <= layer1_output_q1;
                layer1_output_load_15_reg_1060 <= layer1_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                layer1_output_load_16_reg_1075 <= layer1_output_q1;
                layer1_output_load_17_reg_1080 <= layer1_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                layer1_output_load_18_reg_1095 <= layer1_output_q1;
                layer1_output_load_19_reg_1100 <= layer1_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                layer1_output_load_1_reg_920 <= layer1_output_q0;
                layer1_output_load_reg_915 <= layer1_output_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                layer1_output_load_2_reg_935 <= layer1_output_q1;
                layer1_output_load_3_reg_940 <= layer1_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                layer1_output_load_4_reg_955 <= layer1_output_q1;
                layer1_output_load_5_reg_960 <= layer1_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                layer1_output_load_6_reg_975 <= layer1_output_q1;
                layer1_output_load_7_reg_980 <= layer1_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                layer1_output_load_8_reg_995 <= layer1_output_q1;
                layer1_output_load_9_reg_1000 <= layer1_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                max_val_reg_1110 <= layer2_output_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_done, grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_done, grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_done, grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_done, grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_done, ap_CS_fsm_state20, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                if (((grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state20_blk_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_done)
    begin
        if ((grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state20_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state20_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;

    ap_ST_fsm_state32_blk_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_done)
    begin
        if ((grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state32_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state32_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;

    ap_ST_fsm_state36_blk_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_done)
    begin
        if ((grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state36_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state36_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state37_blk <= ap_const_logic_0;

    ap_ST_fsm_state38_blk_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_done)
    begin
        if ((grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state39_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state40_blk_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_done)
    begin
        if ((grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state40_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state40_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_done, ap_CS_fsm_state40)
    begin
        if (((grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_done, ap_CS_fsm_state40)
    begin
        if (((grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_start <= grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_ap_start_reg;
    grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_start <= grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_ap_start_reg;
    grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_start <= grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_ap_start_reg;
    grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_start <= grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_ap_start_reg;
    grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_start <= grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_ap_start_reg;

    input_r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_r_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            input_r_address0 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            input_r_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_r_address0 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            input_r_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            input_r_address0 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            input_r_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address0 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_r_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            input_r_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address0 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address0 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_address0 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            input_r_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_output_address0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_layer1_output_address0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            layer1_output_address0 <= ap_const_lv64_13(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            layer1_output_address0 <= ap_const_lv64_11(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer1_output_address0 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_output_address0 <= ap_const_lv64_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer1_output_address0 <= ap_const_lv64_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer1_output_address0 <= ap_const_lv64_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer1_output_address0 <= ap_const_lv64_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer1_output_address0 <= ap_const_lv64_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_output_address0 <= ap_const_lv64_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer1_output_address0 <= ap_const_lv64_1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer1_output_address0 <= grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_layer1_output_address0;
        else 
            layer1_output_address0 <= "XXXXX";
        end if; 
    end process;


    layer1_output_address1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            layer1_output_address1 <= ap_const_lv64_12(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            layer1_output_address1 <= ap_const_lv64_10(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            layer1_output_address1 <= ap_const_lv64_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            layer1_output_address1 <= ap_const_lv64_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            layer1_output_address1 <= ap_const_lv64_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            layer1_output_address1 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            layer1_output_address1 <= ap_const_lv64_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            layer1_output_address1 <= ap_const_lv64_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            layer1_output_address1 <= ap_const_lv64_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            layer1_output_address1 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            layer1_output_address1 <= "XXXXX";
        end if; 
    end process;


    layer1_output_ce0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_layer1_output_ce0, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            layer1_output_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer1_output_ce0 <= grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_layer1_output_ce0;
        else 
            layer1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_output_ce1_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            layer1_output_ce1 <= ap_const_logic_1;
        else 
            layer1_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    layer1_output_we0_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_layer1_output_we0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            layer1_output_we0 <= grp_neural_network_Pipeline_VITIS_LOOP_56_1_fu_545_layer1_output_we0;
        else 
            layer1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_output_address0_assign_proc : process(ap_CS_fsm_state33, grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_layer2_output_address0, grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_layer2_output_address0, grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_layer2_output_address0, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            layer2_output_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            layer2_output_address0 <= grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_layer2_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer2_output_address0 <= grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_layer2_output_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer2_output_address0 <= grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_layer2_output_address0;
        else 
            layer2_output_address0 <= "XXX";
        end if; 
    end process;


    layer2_output_ce0_assign_proc : process(ap_CS_fsm_state33, grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_layer2_output_ce0, grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_layer2_output_ce0, grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_layer2_output_ce0, ap_CS_fsm_state32, ap_CS_fsm_state36, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            layer2_output_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            layer2_output_ce0 <= grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_layer2_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            layer2_output_ce0 <= grp_neural_network_Pipeline_VITIS_LOOP_22_1_fu_676_layer2_output_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer2_output_ce0 <= grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_layer2_output_ce0;
        else 
            layer2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    layer2_output_we0_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_layer2_output_we0, ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            layer2_output_we0 <= grp_neural_network_Pipeline_VITIS_LOOP_68_3_fu_607_layer2_output_we0;
        else 
            layer2_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_address0_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_output_r_address0, grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_output_r_address0, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_r_address0 <= grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_output_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            output_r_address0 <= grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_output_r_address0;
        else 
            output_r_address0 <= "XXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_output_r_ce0, grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_output_r_ce0, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_r_ce0 <= grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_output_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            output_r_ce0 <= grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_output_r_ce0;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_output_r_d0, grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_output_r_d0, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_r_d0 <= grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_output_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            output_r_d0 <= grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_output_r_d0;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_output_r_we0, grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_output_r_we0, ap_CS_fsm_state38, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            output_r_we0 <= grp_neural_network_Pipeline_VITIS_LOOP_35_3_fu_698_output_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            output_r_we0 <= grp_neural_network_Pipeline_VITIS_LOOP_28_2_fu_683_output_r_we0;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
