-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network_neural_network_Pipeline_VITIS_LOOP_68_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    zext_ln73 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_1 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_2 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_3 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_4 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_5 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_6 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_7 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_8 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_9 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_10 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_11 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_12 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_13 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_14 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_15 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_16 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_17 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_18 : IN STD_LOGIC_VECTOR (14 downto 0);
    zext_ln73_19 : IN STD_LOGIC_VECTOR (14 downto 0);
    layer2_output_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    layer2_output_ce0 : OUT STD_LOGIC;
    layer2_output_we0 : OUT STD_LOGIC;
    layer2_output_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of neural_network_neural_network_Pipeline_VITIS_LOOP_68_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln68_fu_628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer2_weights_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_0_ce0 : STD_LOGIC;
    signal layer2_weights_0_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_1_ce0 : STD_LOGIC;
    signal layer2_weights_1_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_2_ce0 : STD_LOGIC;
    signal layer2_weights_2_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_3_ce0 : STD_LOGIC;
    signal layer2_weights_3_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_4_ce0 : STD_LOGIC;
    signal layer2_weights_4_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer2_weights_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_5_ce0 : STD_LOGIC;
    signal layer2_weights_5_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer2_weights_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_6_ce0 : STD_LOGIC;
    signal layer2_weights_6_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer2_weights_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_7_ce0 : STD_LOGIC;
    signal layer2_weights_7_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer2_weights_8_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_8_ce0 : STD_LOGIC;
    signal layer2_weights_8_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_9_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_9_ce0 : STD_LOGIC;
    signal layer2_weights_9_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_10_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_10_ce0 : STD_LOGIC;
    signal layer2_weights_10_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_11_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_11_ce0 : STD_LOGIC;
    signal layer2_weights_11_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer2_weights_12_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_12_ce0 : STD_LOGIC;
    signal layer2_weights_12_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer2_weights_13_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_13_ce0 : STD_LOGIC;
    signal layer2_weights_13_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_14_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_14_ce0 : STD_LOGIC;
    signal layer2_weights_14_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_15_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_15_ce0 : STD_LOGIC;
    signal layer2_weights_15_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer2_weights_16_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_16_ce0 : STD_LOGIC;
    signal layer2_weights_16_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_17_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_17_ce0 : STD_LOGIC;
    signal layer2_weights_17_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_18_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_18_ce0 : STD_LOGIC;
    signal layer2_weights_18_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_19_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_19_ce0 : STD_LOGIC;
    signal layer2_weights_19_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_bias_ce0 : STD_LOGIC;
    signal layer2_bias_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln73_19_cast_fu_540_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_19_cast_reg_1236 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln73_18_cast_fu_544_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_18_cast_reg_1241 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_17_cast_fu_548_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_17_cast_reg_1246 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_16_cast_fu_552_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_16_cast_reg_1251 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_15_cast_fu_556_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_15_cast_reg_1256 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_14_cast_fu_560_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_14_cast_reg_1261 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_13_cast_fu_564_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_13_cast_reg_1266 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_12_cast_fu_568_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_12_cast_reg_1271 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_11_cast_fu_572_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_11_cast_reg_1276 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_10_cast_fu_576_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_10_cast_reg_1281 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_9_cast_fu_580_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_9_cast_reg_1286 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_8_cast_fu_584_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_8_cast_reg_1291 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_7_cast_fu_588_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_7_cast_reg_1296 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_6_cast_fu_592_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_6_cast_reg_1301 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_5_cast_fu_596_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_5_cast_reg_1306 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_4_cast_fu_600_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_4_cast_reg_1311 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_3_cast_fu_604_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_3_cast_reg_1316 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_2_cast_fu_608_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_2_cast_reg_1321 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_1_cast_fu_612_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_1_cast_reg_1326 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_cast_fu_616_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln73_cast_reg_1331 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln68_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln68_reg_1340_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal layer2_weights_0_load_reg_1374 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_reg_1389 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_bias_load_reg_1669 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_130 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln68_fu_634_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln73_fu_658_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln73_fu_658_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_688_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1077_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_688_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_709_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1085_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_fu_709_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_730_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1093_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_fu_730_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_751_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1101_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_fu_751_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_772_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1109_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_772_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_793_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1117_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_fu_793_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_814_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1125_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_7_fu_814_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_835_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1133_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_835_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_856_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1141_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_fu_856_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_877_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1149_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_fu_877_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_898_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1157_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_898_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_919_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1165_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_12_fu_919_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_940_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1173_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_fu_940_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_961_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1181_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_fu_961_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_982_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1189_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_15_fu_982_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_1003_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1197_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_16_fu_1003_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_1024_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1205_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_fu_1024_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_1041_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1213_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_fu_1041_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_1058_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1221_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_fu_1067_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_1058_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1077_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1077_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1085_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1085_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1093_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1093_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1101_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1101_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1109_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1109_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1117_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1117_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1125_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1125_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1133_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1133_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1141_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1141_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1149_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1149_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1157_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1157_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1165_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1165_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1173_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1173_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1181_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1181_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1189_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1189_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1197_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1197_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1205_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1205_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1213_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1213_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1221_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1221_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component neural_network_mul_11s_15ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_11s_15ns_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_10s_15ns_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_12s_15ns_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_0_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_1_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_2_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_3_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_4_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_5_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_6_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_7_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_8_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_9_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_10_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_11_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_12_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_13_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_14_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_15_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_16_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_17_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_18_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_19_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_bias_RAM_1P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    layer2_weights_0_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_0_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_0_address0,
        ce0 => layer2_weights_0_ce0,
        q0 => layer2_weights_0_q0);

    layer2_weights_1_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_1_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_1_address0,
        ce0 => layer2_weights_1_ce0,
        q0 => layer2_weights_1_q0);

    layer2_weights_2_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_2_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_2_address0,
        ce0 => layer2_weights_2_ce0,
        q0 => layer2_weights_2_q0);

    layer2_weights_3_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_3_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_3_address0,
        ce0 => layer2_weights_3_ce0,
        q0 => layer2_weights_3_q0);

    layer2_weights_4_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_4_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 10,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_4_address0,
        ce0 => layer2_weights_4_ce0,
        q0 => layer2_weights_4_q0);

    layer2_weights_5_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_5_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 10,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_5_address0,
        ce0 => layer2_weights_5_ce0,
        q0 => layer2_weights_5_q0);

    layer2_weights_6_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_6_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 10,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_6_address0,
        ce0 => layer2_weights_6_ce0,
        q0 => layer2_weights_6_q0);

    layer2_weights_7_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_7_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 10,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_7_address0,
        ce0 => layer2_weights_7_ce0,
        q0 => layer2_weights_7_q0);

    layer2_weights_8_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_8_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_8_address0,
        ce0 => layer2_weights_8_ce0,
        q0 => layer2_weights_8_q0);

    layer2_weights_9_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_9_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_9_address0,
        ce0 => layer2_weights_9_ce0,
        q0 => layer2_weights_9_q0);

    layer2_weights_10_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_10_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_10_address0,
        ce0 => layer2_weights_10_ce0,
        q0 => layer2_weights_10_q0);

    layer2_weights_11_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_11_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 10,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_11_address0,
        ce0 => layer2_weights_11_ce0,
        q0 => layer2_weights_11_q0);

    layer2_weights_12_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_12_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 12,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_12_address0,
        ce0 => layer2_weights_12_ce0,
        q0 => layer2_weights_12_q0);

    layer2_weights_13_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_13_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_13_address0,
        ce0 => layer2_weights_13_ce0,
        q0 => layer2_weights_13_q0);

    layer2_weights_14_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_14_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_14_address0,
        ce0 => layer2_weights_14_ce0,
        q0 => layer2_weights_14_q0);

    layer2_weights_15_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_15_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 10,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_15_address0,
        ce0 => layer2_weights_15_ce0,
        q0 => layer2_weights_15_q0);

    layer2_weights_16_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_16_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_16_address0,
        ce0 => layer2_weights_16_ce0,
        q0 => layer2_weights_16_q0);

    layer2_weights_17_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_17_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_17_address0,
        ce0 => layer2_weights_17_ce0,
        q0 => layer2_weights_17_q0);

    layer2_weights_18_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_18_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_18_address0,
        ce0 => layer2_weights_18_ce0,
        q0 => layer2_weights_18_q0);

    layer2_weights_19_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_weights_19_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_19_address0,
        ce0 => layer2_weights_19_ce0,
        q0 => layer2_weights_19_q0);

    layer2_bias_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_68_3_layer2_bias_RAM_1P_BRAM_1R1W
    generic map (
        DataWidth => 9,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_bias_address0,
        ce0 => layer2_bias_ce0,
        q0 => layer2_bias_q0);

    mul_11s_15ns_24_1_1_U62 : component neural_network_mul_11s_15ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 15,
        dout_WIDTH => 24)
    port map (
        din0 => layer2_weights_0_load_reg_1374,
        din1 => mul_ln73_fu_658_p1,
        dout => mul_ln73_fu_658_p2);

    mac_muladd_11s_15ns_24ns_24_4_1_U63 : component neural_network_mac_muladd_11s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_1_q0,
        din1 => grp_fu_1077_p1,
        din2 => grp_fu_1077_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1077_p3);

    mac_muladd_11s_15ns_24ns_24_4_1_U64 : component neural_network_mac_muladd_11s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_2_q0,
        din1 => grp_fu_1085_p1,
        din2 => grp_fu_1085_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1085_p3);

    mac_muladd_11s_15ns_24ns_24_4_1_U65 : component neural_network_mac_muladd_11s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_3_q0,
        din1 => grp_fu_1093_p1,
        din2 => grp_fu_1093_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1093_p3);

    mac_muladd_10s_15ns_24ns_24_4_1_U66 : component neural_network_mac_muladd_10s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_4_q0,
        din1 => grp_fu_1101_p1,
        din2 => grp_fu_1101_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1101_p3);

    mac_muladd_10s_15ns_24ns_24_4_1_U67 : component neural_network_mac_muladd_10s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_5_q0,
        din1 => grp_fu_1109_p1,
        din2 => grp_fu_1109_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1109_p3);

    mac_muladd_10s_15ns_24ns_24_4_1_U68 : component neural_network_mac_muladd_10s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_6_q0,
        din1 => grp_fu_1117_p1,
        din2 => grp_fu_1117_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1117_p3);

    mac_muladd_10s_15ns_24ns_24_4_1_U69 : component neural_network_mac_muladd_10s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_7_q0,
        din1 => grp_fu_1125_p1,
        din2 => grp_fu_1125_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1125_p3);

    mac_muladd_11s_15ns_24ns_24_4_1_U70 : component neural_network_mac_muladd_11s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_8_q0,
        din1 => grp_fu_1133_p1,
        din2 => grp_fu_1133_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1133_p3);

    mac_muladd_11s_15ns_24ns_24_4_1_U71 : component neural_network_mac_muladd_11s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_9_q0,
        din1 => grp_fu_1141_p1,
        din2 => grp_fu_1141_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1141_p3);

    mac_muladd_11s_15ns_24ns_24_4_1_U72 : component neural_network_mac_muladd_11s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_10_q0,
        din1 => grp_fu_1149_p1,
        din2 => grp_fu_1149_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1149_p3);

    mac_muladd_10s_15ns_24ns_24_4_1_U73 : component neural_network_mac_muladd_10s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_11_q0,
        din1 => grp_fu_1157_p1,
        din2 => grp_fu_1157_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1157_p3);

    mac_muladd_12s_15ns_24ns_24_4_1_U74 : component neural_network_mac_muladd_12s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_12_q0,
        din1 => grp_fu_1165_p1,
        din2 => grp_fu_1165_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1165_p3);

    mac_muladd_11s_15ns_24ns_24_4_1_U75 : component neural_network_mac_muladd_11s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_13_q0,
        din1 => grp_fu_1173_p1,
        din2 => grp_fu_1173_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1173_p3);

    mac_muladd_11s_15ns_24ns_24_4_1_U76 : component neural_network_mac_muladd_11s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_14_q0,
        din1 => grp_fu_1181_p1,
        din2 => grp_fu_1181_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1181_p3);

    mac_muladd_10s_15ns_24ns_24_4_1_U77 : component neural_network_mac_muladd_10s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_15_q0,
        din1 => grp_fu_1189_p1,
        din2 => grp_fu_1189_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1189_p3);

    mac_muladd_11s_15ns_24ns_24_4_1_U78 : component neural_network_mac_muladd_11s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_16_q0,
        din1 => grp_fu_1197_p1,
        din2 => grp_fu_1197_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1197_p3);

    mac_muladd_11s_15ns_24ns_24_4_1_U79 : component neural_network_mac_muladd_11s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_17_q0,
        din1 => grp_fu_1205_p1,
        din2 => grp_fu_1205_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1205_p3);

    mac_muladd_11s_15ns_24ns_24_4_1_U80 : component neural_network_mac_muladd_11s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_18_q0,
        din1 => grp_fu_1213_p1,
        din2 => grp_fu_1213_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1213_p3);

    mac_muladd_11s_15ns_24ns_24_4_1_U81 : component neural_network_mac_muladd_11s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_19_q0,
        din1 => grp_fu_1221_p1,
        din2 => grp_fu_1221_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1221_p3);

    flow_control_loop_pipe_sequential_init_U : component neural_network_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter21_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln68_fu_628_p2 = ap_const_lv1_0))) then 
                    i_fu_130 <= add_ln68_fu_634_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_130 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                layer2_bias_load_reg_1669 <= layer2_bias_q0;
                tmp_s_reg_1389 <= mul_ln73_fu_658_p2(23 downto 8);
                    zext_ln68_reg_1340_pp0_iter10_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter9_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter11_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter10_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter12_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter11_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter13_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter12_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter14_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter13_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter15_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter14_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter16_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter15_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter17_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter16_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter18_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter17_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter19_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter18_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter20_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter19_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter21_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter20_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter2_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter1_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter3_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter2_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter4_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter3_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter5_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter4_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter6_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter5_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter7_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter6_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter8_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter7_reg(2 downto 0);
                    zext_ln68_reg_1340_pp0_iter9_reg(2 downto 0) <= zext_ln68_reg_1340_pp0_iter8_reg(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                layer2_weights_0_load_reg_1374 <= layer2_weights_0_q0;
                    zext_ln68_reg_1340_pp0_iter1_reg(2 downto 0) <= zext_ln68_reg_1340(2 downto 0);
                    zext_ln73_10_cast_reg_1281(14 downto 0) <= zext_ln73_10_cast_fu_576_p1(14 downto 0);
                    zext_ln73_11_cast_reg_1276(14 downto 0) <= zext_ln73_11_cast_fu_572_p1(14 downto 0);
                    zext_ln73_12_cast_reg_1271(14 downto 0) <= zext_ln73_12_cast_fu_568_p1(14 downto 0);
                    zext_ln73_13_cast_reg_1266(14 downto 0) <= zext_ln73_13_cast_fu_564_p1(14 downto 0);
                    zext_ln73_14_cast_reg_1261(14 downto 0) <= zext_ln73_14_cast_fu_560_p1(14 downto 0);
                    zext_ln73_15_cast_reg_1256(14 downto 0) <= zext_ln73_15_cast_fu_556_p1(14 downto 0);
                    zext_ln73_16_cast_reg_1251(14 downto 0) <= zext_ln73_16_cast_fu_552_p1(14 downto 0);
                    zext_ln73_17_cast_reg_1246(14 downto 0) <= zext_ln73_17_cast_fu_548_p1(14 downto 0);
                    zext_ln73_18_cast_reg_1241(14 downto 0) <= zext_ln73_18_cast_fu_544_p1(14 downto 0);
                    zext_ln73_19_cast_reg_1236(14 downto 0) <= zext_ln73_19_cast_fu_540_p1(14 downto 0);
                    zext_ln73_1_cast_reg_1326(14 downto 0) <= zext_ln73_1_cast_fu_612_p1(14 downto 0);
                    zext_ln73_2_cast_reg_1321(14 downto 0) <= zext_ln73_2_cast_fu_608_p1(14 downto 0);
                    zext_ln73_3_cast_reg_1316(14 downto 0) <= zext_ln73_3_cast_fu_604_p1(14 downto 0);
                    zext_ln73_4_cast_reg_1311(14 downto 0) <= zext_ln73_4_cast_fu_600_p1(14 downto 0);
                    zext_ln73_5_cast_reg_1306(14 downto 0) <= zext_ln73_5_cast_fu_596_p1(14 downto 0);
                    zext_ln73_6_cast_reg_1301(14 downto 0) <= zext_ln73_6_cast_fu_592_p1(14 downto 0);
                    zext_ln73_7_cast_reg_1296(14 downto 0) <= zext_ln73_7_cast_fu_588_p1(14 downto 0);
                    zext_ln73_8_cast_reg_1291(14 downto 0) <= zext_ln73_8_cast_fu_584_p1(14 downto 0);
                    zext_ln73_9_cast_reg_1286(14 downto 0) <= zext_ln73_9_cast_fu_580_p1(14 downto 0);
                    zext_ln73_cast_reg_1331(14 downto 0) <= zext_ln73_cast_fu_616_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln68_fu_628_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln68_reg_1340(2 downto 0) <= zext_ln68_fu_640_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln73_19_cast_reg_1236(23 downto 15) <= "000000000";
    zext_ln73_18_cast_reg_1241(23 downto 15) <= "000000000";
    zext_ln73_17_cast_reg_1246(23 downto 15) <= "000000000";
    zext_ln73_16_cast_reg_1251(23 downto 15) <= "000000000";
    zext_ln73_15_cast_reg_1256(23 downto 15) <= "000000000";
    zext_ln73_14_cast_reg_1261(23 downto 15) <= "000000000";
    zext_ln73_13_cast_reg_1266(23 downto 15) <= "000000000";
    zext_ln73_12_cast_reg_1271(23 downto 15) <= "000000000";
    zext_ln73_11_cast_reg_1276(23 downto 15) <= "000000000";
    zext_ln73_10_cast_reg_1281(23 downto 15) <= "000000000";
    zext_ln73_9_cast_reg_1286(23 downto 15) <= "000000000";
    zext_ln73_8_cast_reg_1291(23 downto 15) <= "000000000";
    zext_ln73_7_cast_reg_1296(23 downto 15) <= "000000000";
    zext_ln73_6_cast_reg_1301(23 downto 15) <= "000000000";
    zext_ln73_5_cast_reg_1306(23 downto 15) <= "000000000";
    zext_ln73_4_cast_reg_1311(23 downto 15) <= "000000000";
    zext_ln73_3_cast_reg_1316(23 downto 15) <= "000000000";
    zext_ln73_2_cast_reg_1321(23 downto 15) <= "000000000";
    zext_ln73_1_cast_reg_1326(23 downto 15) <= "000000000";
    zext_ln73_cast_reg_1331(23 downto 15) <= "000000000";
    zext_ln68_reg_1340(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter2_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter3_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter4_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter5_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter6_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter7_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter8_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter9_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter10_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter11_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter12_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter13_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter14_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter15_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter16_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter17_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter18_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter19_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter20_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln68_reg_1340_pp0_iter21_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln68_fu_634_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln68_fu_628_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln68_fu_628_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter21_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter21_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_130, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_130;
        end if; 
    end process;

    grp_fu_1077_p1 <= zext_ln73_1_cast_reg_1326(15 - 1 downto 0);
    grp_fu_1077_p2 <= (tmp_s_reg_1389 & ap_const_lv8_0);
    grp_fu_1085_p1 <= zext_ln73_2_cast_reg_1321(15 - 1 downto 0);
    grp_fu_1085_p2 <= (tmp_1_fu_688_p4 & ap_const_lv8_0);
    grp_fu_1093_p1 <= zext_ln73_3_cast_reg_1316(15 - 1 downto 0);
    grp_fu_1093_p2 <= (tmp_2_fu_709_p4 & ap_const_lv8_0);
    grp_fu_1101_p1 <= zext_ln73_4_cast_reg_1311(15 - 1 downto 0);
    grp_fu_1101_p2 <= (tmp_3_fu_730_p4 & ap_const_lv8_0);
    grp_fu_1109_p1 <= zext_ln73_5_cast_reg_1306(15 - 1 downto 0);
    grp_fu_1109_p2 <= (tmp_4_fu_751_p4 & ap_const_lv8_0);
    grp_fu_1117_p1 <= zext_ln73_6_cast_reg_1301(15 - 1 downto 0);
    grp_fu_1117_p2 <= (tmp_5_fu_772_p4 & ap_const_lv8_0);
    grp_fu_1125_p1 <= zext_ln73_7_cast_reg_1296(15 - 1 downto 0);
    grp_fu_1125_p2 <= (tmp_6_fu_793_p4 & ap_const_lv8_0);
    grp_fu_1133_p1 <= zext_ln73_8_cast_reg_1291(15 - 1 downto 0);
    grp_fu_1133_p2 <= (tmp_7_fu_814_p4 & ap_const_lv8_0);
    grp_fu_1141_p1 <= zext_ln73_9_cast_reg_1286(15 - 1 downto 0);
    grp_fu_1141_p2 <= (tmp_8_fu_835_p4 & ap_const_lv8_0);
    grp_fu_1149_p1 <= zext_ln73_10_cast_reg_1281(15 - 1 downto 0);
    grp_fu_1149_p2 <= (tmp_9_fu_856_p4 & ap_const_lv8_0);
    grp_fu_1157_p1 <= zext_ln73_11_cast_reg_1276(15 - 1 downto 0);
    grp_fu_1157_p2 <= (tmp_10_fu_877_p4 & ap_const_lv8_0);
    grp_fu_1165_p1 <= zext_ln73_12_cast_reg_1271(15 - 1 downto 0);
    grp_fu_1165_p2 <= (tmp_11_fu_898_p4 & ap_const_lv8_0);
    grp_fu_1173_p1 <= zext_ln73_13_cast_reg_1266(15 - 1 downto 0);
    grp_fu_1173_p2 <= (tmp_12_fu_919_p4 & ap_const_lv8_0);
    grp_fu_1181_p1 <= zext_ln73_14_cast_reg_1261(15 - 1 downto 0);
    grp_fu_1181_p2 <= (tmp_13_fu_940_p4 & ap_const_lv8_0);
    grp_fu_1189_p1 <= zext_ln73_15_cast_reg_1256(15 - 1 downto 0);
    grp_fu_1189_p2 <= (tmp_14_fu_961_p4 & ap_const_lv8_0);
    grp_fu_1197_p1 <= zext_ln73_16_cast_reg_1251(15 - 1 downto 0);
    grp_fu_1197_p2 <= (tmp_15_fu_982_p4 & ap_const_lv8_0);
    grp_fu_1205_p1 <= zext_ln73_17_cast_reg_1246(15 - 1 downto 0);
    grp_fu_1205_p2 <= (tmp_16_fu_1003_p4 & ap_const_lv8_0);
    grp_fu_1213_p1 <= zext_ln73_18_cast_reg_1241(15 - 1 downto 0);
    grp_fu_1213_p2 <= (tmp_17_fu_1024_p4 & ap_const_lv8_0);
    grp_fu_1221_p1 <= zext_ln73_19_cast_reg_1236(15 - 1 downto 0);
    grp_fu_1221_p2 <= (tmp_18_fu_1041_p4 & ap_const_lv8_0);
    icmp_ln68_fu_628_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv3_5) else "0";
    layer2_bias_address0 <= zext_ln68_reg_1340_pp0_iter19_reg(3 - 1 downto 0);

    layer2_bias_ce0_assign_proc : process(ap_enable_reg_pp0_iter20, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_bias_ce0 <= ap_const_logic_1;
        else 
            layer2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_address0 <= zext_ln68_reg_1340_pp0_iter21_reg(3 - 1 downto 0);

    layer2_output_ce0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_output_ce0 <= ap_const_logic_1;
        else 
            layer2_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_d0 <= std_logic_vector(signed(sext_ln75_fu_1067_p1) + signed(sum_fu_1058_p4));

    layer2_output_we0_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_output_we0 <= ap_const_logic_1;
        else 
            layer2_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_0_address0 <= zext_ln68_fu_640_p1(3 - 1 downto 0);

    layer2_weights_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_0_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_10_address0 <= zext_ln68_reg_1340_pp0_iter8_reg(3 - 1 downto 0);

    layer2_weights_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_10_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_11_address0 <= zext_ln68_reg_1340_pp0_iter9_reg(3 - 1 downto 0);

    layer2_weights_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_11_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_12_address0 <= zext_ln68_reg_1340_pp0_iter10_reg(3 - 1 downto 0);

    layer2_weights_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_12_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_13_address0 <= zext_ln68_reg_1340_pp0_iter11_reg(3 - 1 downto 0);

    layer2_weights_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_13_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_14_address0 <= zext_ln68_reg_1340_pp0_iter12_reg(3 - 1 downto 0);

    layer2_weights_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_14_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_15_address0 <= zext_ln68_reg_1340_pp0_iter13_reg(3 - 1 downto 0);

    layer2_weights_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_15_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_16_address0 <= zext_ln68_reg_1340_pp0_iter14_reg(3 - 1 downto 0);

    layer2_weights_16_ce0_assign_proc : process(ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_16_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_17_address0 <= zext_ln68_reg_1340_pp0_iter15_reg(3 - 1 downto 0);

    layer2_weights_17_ce0_assign_proc : process(ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_17_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_18_address0 <= zext_ln68_reg_1340_pp0_iter16_reg(3 - 1 downto 0);

    layer2_weights_18_ce0_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_18_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_19_address0 <= zext_ln68_reg_1340_pp0_iter17_reg(3 - 1 downto 0);

    layer2_weights_19_ce0_assign_proc : process(ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_19_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_1_address0 <= zext_ln68_fu_640_p1(3 - 1 downto 0);

    layer2_weights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_1_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_2_address0 <= zext_ln68_reg_1340(3 - 1 downto 0);

    layer2_weights_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_2_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_3_address0 <= zext_ln68_reg_1340_pp0_iter1_reg(3 - 1 downto 0);

    layer2_weights_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_3_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_4_address0 <= zext_ln68_reg_1340_pp0_iter2_reg(3 - 1 downto 0);

    layer2_weights_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_4_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_5_address0 <= zext_ln68_reg_1340_pp0_iter3_reg(3 - 1 downto 0);

    layer2_weights_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_5_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_6_address0 <= zext_ln68_reg_1340_pp0_iter4_reg(3 - 1 downto 0);

    layer2_weights_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_6_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_7_address0 <= zext_ln68_reg_1340_pp0_iter5_reg(3 - 1 downto 0);

    layer2_weights_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_7_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_8_address0 <= zext_ln68_reg_1340_pp0_iter6_reg(3 - 1 downto 0);

    layer2_weights_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_8_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_9_address0 <= zext_ln68_reg_1340_pp0_iter7_reg(3 - 1 downto 0);

    layer2_weights_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_9_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln73_fu_658_p1 <= zext_ln73_cast_reg_1331(15 - 1 downto 0);
        sext_ln75_fu_1067_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(layer2_bias_load_reg_1669),16));

    sum_fu_1058_p1 <= grp_fu_1221_p3;
    sum_fu_1058_p4 <= sum_fu_1058_p1(23 downto 8);
    tmp_10_fu_877_p1 <= grp_fu_1149_p3;
    tmp_10_fu_877_p4 <= tmp_10_fu_877_p1(23 downto 8);
    tmp_11_fu_898_p1 <= grp_fu_1157_p3;
    tmp_11_fu_898_p4 <= tmp_11_fu_898_p1(23 downto 8);
    tmp_12_fu_919_p1 <= grp_fu_1165_p3;
    tmp_12_fu_919_p4 <= tmp_12_fu_919_p1(23 downto 8);
    tmp_13_fu_940_p1 <= grp_fu_1173_p3;
    tmp_13_fu_940_p4 <= tmp_13_fu_940_p1(23 downto 8);
    tmp_14_fu_961_p1 <= grp_fu_1181_p3;
    tmp_14_fu_961_p4 <= tmp_14_fu_961_p1(23 downto 8);
    tmp_15_fu_982_p1 <= grp_fu_1189_p3;
    tmp_15_fu_982_p4 <= tmp_15_fu_982_p1(23 downto 8);
    tmp_16_fu_1003_p1 <= grp_fu_1197_p3;
    tmp_16_fu_1003_p4 <= tmp_16_fu_1003_p1(23 downto 8);
    tmp_17_fu_1024_p1 <= grp_fu_1205_p3;
    tmp_17_fu_1024_p4 <= tmp_17_fu_1024_p1(23 downto 8);
    tmp_18_fu_1041_p1 <= grp_fu_1213_p3;
    tmp_18_fu_1041_p4 <= tmp_18_fu_1041_p1(23 downto 8);
    tmp_1_fu_688_p1 <= grp_fu_1077_p3;
    tmp_1_fu_688_p4 <= tmp_1_fu_688_p1(23 downto 8);
    tmp_2_fu_709_p1 <= grp_fu_1085_p3;
    tmp_2_fu_709_p4 <= tmp_2_fu_709_p1(23 downto 8);
    tmp_3_fu_730_p1 <= grp_fu_1093_p3;
    tmp_3_fu_730_p4 <= tmp_3_fu_730_p1(23 downto 8);
    tmp_4_fu_751_p1 <= grp_fu_1101_p3;
    tmp_4_fu_751_p4 <= tmp_4_fu_751_p1(23 downto 8);
    tmp_5_fu_772_p1 <= grp_fu_1109_p3;
    tmp_5_fu_772_p4 <= tmp_5_fu_772_p1(23 downto 8);
    tmp_6_fu_793_p1 <= grp_fu_1117_p3;
    tmp_6_fu_793_p4 <= tmp_6_fu_793_p1(23 downto 8);
    tmp_7_fu_814_p1 <= grp_fu_1125_p3;
    tmp_7_fu_814_p4 <= tmp_7_fu_814_p1(23 downto 8);
    tmp_8_fu_835_p1 <= grp_fu_1133_p3;
    tmp_8_fu_835_p4 <= tmp_8_fu_835_p1(23 downto 8);
    tmp_9_fu_856_p1 <= grp_fu_1141_p3;
    tmp_9_fu_856_p4 <= tmp_9_fu_856_p1(23 downto 8);
    zext_ln68_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
    zext_ln73_10_cast_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_10),24));
    zext_ln73_11_cast_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_11),24));
    zext_ln73_12_cast_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_12),24));
    zext_ln73_13_cast_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_13),24));
    zext_ln73_14_cast_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_14),24));
    zext_ln73_15_cast_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_15),24));
    zext_ln73_16_cast_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_16),24));
    zext_ln73_17_cast_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_17),24));
    zext_ln73_18_cast_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_18),24));
    zext_ln73_19_cast_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_19),24));
    zext_ln73_1_cast_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_1),24));
    zext_ln73_2_cast_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_2),24));
    zext_ln73_3_cast_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_3),24));
    zext_ln73_4_cast_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_4),24));
    zext_ln73_5_cast_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_5),24));
    zext_ln73_6_cast_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_6),24));
    zext_ln73_7_cast_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_7),24));
    zext_ln73_8_cast_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_8),24));
    zext_ln73_9_cast_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73_9),24));
    zext_ln73_cast_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln73),24));
end behav;
