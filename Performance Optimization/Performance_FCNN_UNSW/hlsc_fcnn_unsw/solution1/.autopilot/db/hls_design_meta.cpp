#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_AWADDR", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_ARADDR", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CONTROL_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_INPUT_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_INPUT_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_INPUT_AWADDR", 9, hls_in, -1, "", "", 1),
	Port_Property("s_axi_INPUT_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_INPUT_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_INPUT_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_INPUT_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_INPUT_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_INPUT_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_INPUT_ARADDR", 9, hls_in, -1, "", "", 1),
	Port_Property("s_axi_INPUT_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_INPUT_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_INPUT_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_INPUT_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_INPUT_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_INPUT_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_INPUT_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_AWADDR", 8, hls_in, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_ARADDR", 8, hls_in, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_OUTPUT_BRESP", 2, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "neural_network";
