-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_INPUT_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_INPUT_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_OUTPUT_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_OUTPUT_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CONTROL_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_INPUT_AWVALID : IN STD_LOGIC;
    s_axi_INPUT_AWREADY : OUT STD_LOGIC;
    s_axi_INPUT_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_ADDR_WIDTH-1 downto 0);
    s_axi_INPUT_WVALID : IN STD_LOGIC;
    s_axi_INPUT_WREADY : OUT STD_LOGIC;
    s_axi_INPUT_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH-1 downto 0);
    s_axi_INPUT_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH/8-1 downto 0);
    s_axi_INPUT_ARVALID : IN STD_LOGIC;
    s_axi_INPUT_ARREADY : OUT STD_LOGIC;
    s_axi_INPUT_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_INPUT_ADDR_WIDTH-1 downto 0);
    s_axi_INPUT_RVALID : OUT STD_LOGIC;
    s_axi_INPUT_RREADY : IN STD_LOGIC;
    s_axi_INPUT_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_INPUT_DATA_WIDTH-1 downto 0);
    s_axi_INPUT_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_INPUT_BVALID : OUT STD_LOGIC;
    s_axi_INPUT_BREADY : IN STD_LOGIC;
    s_axi_INPUT_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_OUTPUT_AWVALID : IN STD_LOGIC;
    s_axi_OUTPUT_AWREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_ADDR_WIDTH-1 downto 0);
    s_axi_OUTPUT_WVALID : IN STD_LOGIC;
    s_axi_OUTPUT_WREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH-1 downto 0);
    s_axi_OUTPUT_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH/8-1 downto 0);
    s_axi_OUTPUT_ARVALID : IN STD_LOGIC;
    s_axi_OUTPUT_ARREADY : OUT STD_LOGIC;
    s_axi_OUTPUT_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_ADDR_WIDTH-1 downto 0);
    s_axi_OUTPUT_RVALID : OUT STD_LOGIC;
    s_axi_OUTPUT_RREADY : IN STD_LOGIC;
    s_axi_OUTPUT_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_OUTPUT_DATA_WIDTH-1 downto 0);
    s_axi_OUTPUT_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_OUTPUT_BVALID : OUT STD_LOGIC;
    s_axi_OUTPUT_BREADY : IN STD_LOGIC;
    s_axi_OUTPUT_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of neural_network is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "neural_network_neural_network,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=6.878500,HLS_SYN_LAT=49,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=7266,HLS_SYN_LUT=6877,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv24_FFFFA3 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111110100011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv24_FFFFB1 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111110110001";
    constant ap_const_lv24_FFFF85 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111110000101";
    constant ap_const_lv24_B2 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010110010";
    constant ap_const_lv24_FFFF94 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111110010100";
    constant ap_const_lv24_FFFF8F : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111110001111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_33 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000110011";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv16_1F : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011111";
    constant ap_const_lv15_1F : STD_LOGIC_VECTOR (14 downto 0) := "000000000011111";
    constant ap_const_lv16_13 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010011";
    constant ap_const_lv16_6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000110";
    constant ap_const_lv15_33 : STD_LOGIC_VECTOR (14 downto 0) := "000000000110011";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv16_76 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001110110";
    constant ap_const_lv16_3C : STD_LOGIC_VECTOR (15 downto 0) := "0000000000111100";
    constant ap_const_lv15_3C : STD_LOGIC_VECTOR (14 downto 0) := "000000000111100";
    constant ap_const_lv16_51 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001010001";
    constant ap_const_lv15_51 : STD_LOGIC_VECTOR (14 downto 0) := "000000001010001";
    constant ap_const_lv15_13 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010011";
    constant ap_const_lv15_6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000110";
    constant ap_const_lv15_76 : STD_LOGIC_VECTOR (14 downto 0) := "000000001110110";
    constant ap_const_lv24_119 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000100011001";
    constant ap_const_lv24_FFFF6D : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111101101101";
    constant ap_const_lv23_7FFFB3 : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111110110011";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_FFE2 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111100010";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv16_7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000111";
    constant ap_const_lv16_B : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001011";
    constant ap_const_lv24_57 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001010111";
    constant ap_const_lv24_86 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000010000110";
    constant ap_const_lv24_FFFF0D : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111100001101";
    constant ap_const_lv24_FFFFA6 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111110100110";
    constant ap_const_lv24_FFFF4E : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111101001110";
    constant ap_const_lv24_FFFF73 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111101110011";
    constant ap_const_lv24_66 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001100110";
    constant ap_const_lv22_3FFFE6 : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111100110";
    constant ap_const_lv24_FFFFAE : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111110101110";
    constant ap_const_lv24_E7 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000011100111";
    constant ap_const_lv24_FFFF2D : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111100101101";
    constant ap_const_lv24_FFFF9D : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111110011101";
    constant ap_const_lv23_7FFFD4 : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111111010100";
    constant ap_const_lv24_55 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000001010101";
    constant ap_const_lv21_23 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100011";
    constant ap_const_lv23_B6 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010110110";
    constant ap_const_lv24_FFFF7A : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111101111010";
    constant ap_const_lv24_FFFF7B : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111101111011";
    constant ap_const_lv24_FFFF65 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111101100101";
    constant ap_const_lv24_FFFF74 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111101110100";
    constant ap_const_lv23_7FFFA3 : STD_LOGIC_VECTOR (22 downto 0) := "11111111111111110100011";
    constant ap_const_lv23_8E : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000010001110";
    constant ap_const_lv21_2A : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000101010";
    constant ap_const_lv21_2B : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000101011";
    constant ap_const_lv24_FFFF05 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111100000101";
    constant ap_const_lv24_FFFEC3 : STD_LOGIC_VECTOR (23 downto 0) := "111111111111111011000011";
    constant ap_const_lv23_E4 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000011100100";
    constant ap_const_lv21_1FFFE6 : STD_LOGIC_VECTOR (20 downto 0) := "111111111111111100110";
    constant ap_const_lv23_CE : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000011001110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter48 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter49 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter44 : BOOLEAN;
    signal ap_block_state46_pp0_stage0_iter45 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_state48_pp0_stage0_iter47 : BOOLEAN;
    signal ap_block_state49_pp0_stage0_iter48 : BOOLEAN;
    signal ap_block_state50_pp0_stage0_iter49 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal input_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_0_ap_vld : STD_LOGIC;
    signal output_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_1_ap_vld : STD_LOGIC;
    signal output_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal output_2_ap_vld : STD_LOGIC;
    signal input_0_read_reg_2490 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal input_0_read_reg_2490_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal input_1_read_reg_2499 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_1_read_reg_2499_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln72_3_fu_318_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal input_2_read_reg_2516 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_2_read_reg_2516_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal input_2_read_reg_2516_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal input_3_read_reg_2527 : STD_LOGIC_VECTOR (15 downto 0);
    signal input_3_read_reg_2527_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal input_3_read_reg_2527_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal input_3_read_reg_2527_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_2537 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln72_4_fu_341_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln72_6_fu_344_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln72_6_reg_2549 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln72_6_reg_2549_pp0_iter2_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_3_reg_2555 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_reg_2560 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_reg_2565 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_reg_2570 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_reg_2575 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln72_11_fu_443_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_reg_2608 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_reg_2633 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_reg_2643 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_reg_2648 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_reg_2658 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln74_3_reg_2688 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln14_3_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_3_reg_2693 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_10_reg_2703 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln74_5_reg_2708 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum_14_reg_2718 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln74_7_reg_2723 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln69_fu_1169_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln69_reg_2728 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln14_fu_1175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_2733 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln74_1_reg_2738 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln14_1_fu_1205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_1_reg_2743 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln74_2_reg_2748 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln14_2_fu_1235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_2_reg_2753 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln14_3_fu_1246_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_3_reg_2758 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_3_reg_2758_pp0_iter6_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_3_reg_2758_pp0_iter7_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_3_reg_2758_pp0_iter8_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln74_4_reg_2765 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln14_4_fu_1277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_4_reg_2770 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln14_5_fu_1299_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_5_reg_2775 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_5_reg_2775_pp0_iter6_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_5_reg_2775_pp0_iter7_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_5_reg_2775_pp0_iter8_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln74_6_reg_2782 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln14_6_fu_1331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_6_reg_2787 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln14_7_fu_1353_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_7_reg_2792 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_7_reg_2792_pp0_iter6_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_7_reg_2792_pp0_iter7_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_7_reg_2792_pp0_iter8_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_7_reg_2792_pp0_iter9_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_7_reg_2792_pp0_iter10_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_7_reg_2792_pp0_iter11_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_7_reg_2792_pp0_iter12_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_fu_1361_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_reg_2799 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_1_fu_1372_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_1_reg_2805 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_1_reg_2805_pp0_iter7_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_2_fu_1384_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_2_reg_2812 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_2_reg_2812_pp0_iter7_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_2_reg_2812_pp0_iter8_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_4_fu_1396_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_4_reg_2818 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_4_reg_2818_pp0_iter7_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_6_fu_1408_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_6_reg_2825 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_6_reg_2825_pp0_iter7_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_6_reg_2825_pp0_iter8_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_6_reg_2825_pp0_iter9_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln14_6_reg_2825_pp0_iter10_reg : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_23_reg_2848 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln85_9_fu_1449_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_30_reg_2864 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln3_reg_2869 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_29_reg_2964 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_32_fu_1987_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_32_reg_2994 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_32_reg_2994_pp0_iter14_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_33_fu_2047_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_33_reg_3001 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_33_reg_3001_pp0_iter14_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_34_fu_2079_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_34_reg_3013 : STD_LOGIC_VECTOR (15 downto 0);
    signal max_val_2_fu_2089_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal max_val_2_reg_3019 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln27_1_fu_2095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_1_reg_3024 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_exp_17_9_s_fu_285_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_22_reg_3029 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_22_reg_3029_pp0_iter21_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_exp_17_9_s_fu_296_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_reg_3035 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln_reg_3035_pp0_iter21_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_exp_17_9_s_fu_307_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln34_1_reg_3041 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln34_1_reg_3041_pp0_iter21_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_23_fu_2144_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_23_reg_3047 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln42_fu_2156_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_exp_17_9_s_fu_285_ap_start : STD_LOGIC;
    signal grp_exp_17_9_s_fu_285_ap_done : STD_LOGIC;
    signal grp_exp_17_9_s_fu_285_ap_idle : STD_LOGIC;
    signal grp_exp_17_9_s_fu_285_ap_ready : STD_LOGIC;
    signal grp_exp_17_9_s_fu_285_x_val : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_exp_17_9_s_fu_296_ap_start : STD_LOGIC;
    signal grp_exp_17_9_s_fu_296_ap_done : STD_LOGIC;
    signal grp_exp_17_9_s_fu_296_ap_idle : STD_LOGIC;
    signal grp_exp_17_9_s_fu_296_ap_ready : STD_LOGIC;
    signal grp_exp_17_9_s_fu_296_x_val : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_exp_17_9_s_fu_307_ap_start : STD_LOGIC;
    signal grp_exp_17_9_s_fu_307_ap_done : STD_LOGIC;
    signal grp_exp_17_9_s_fu_307_ap_idle : STD_LOGIC;
    signal grp_exp_17_9_s_fu_307_ap_ready : STD_LOGIC;
    signal grp_exp_17_9_s_fu_307_x_val : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_exp_17_9_s_fu_285_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_exp_17_9_s_fu_296_ap_start_reg : STD_LOGIC := '0';
    signal grp_exp_17_9_s_fu_307_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal sext_ln72_3_fu_318_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln72_fu_325_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln72_1_fu_322_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln72_fu_325_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln72_fu_325_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln72_3_fu_347_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln72_3_fu_347_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln72_3_fu_347_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln72_9_fu_363_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln72_9_fu_363_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln72_9_fu_363_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln72_10_fu_379_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln72_10_fu_379_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln72_10_fu_379_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln72_14_fu_395_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln72_14_fu_395_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln72_14_fu_395_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln72_16_fu_411_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln72_16_fu_411_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln72_16_fu_411_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln72_9_fu_453_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln72_12_fu_460_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln72_2_fu_430_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln72_1_fu_464_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal trunc_ln2_fu_470_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_fu_480_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln72_11_fu_492_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln72_12_fu_503_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln72_17_fu_510_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln72_16_fu_499_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sub_ln72_4_fu_514_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln72_13_fu_520_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln72_18_fu_527_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln72_9_fu_531_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln72_29_fu_568_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln72_28_fu_575_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln72_fu_427_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln72_7_fu_579_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln72_s_fu_585_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_20_fu_595_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln72_2_fu_610_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln72_3_fu_621_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln72_7_fu_617_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln72_8_fu_628_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_1_fu_638_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2206_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_638_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln72_fu_632_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln72_4_fu_647_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln72_9_fu_655_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln72_1_fu_659_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_fu_675_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2215_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_fu_675_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln72_2_fu_692_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_2224_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_7_fu_703_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln72_3_fu_698_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln72_s_fu_712_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln72_14_fu_720_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln72_7_fu_724_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln72_15_fu_747_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln72_19_fu_754_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln72_14_fu_740_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal shl_ln72_16_fu_764_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sub_ln72_5_fu_758_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln72_10_fu_771_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_12_fu_787_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2233_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_12_fu_787_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln72_5_fu_607_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln72_22_fu_804_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_15_fu_814_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2242_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_15_fu_814_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln72_10_fu_808_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln72_22_fu_823_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln72_23_fu_831_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln72_16_fu_835_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_fu_851_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2251_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_fu_851_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2260_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_21_fu_868_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_892_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2269_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_892_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_916_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln72_17_fu_923_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln72_20_fu_930_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln72_11_fu_934_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_6_fu_940_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_27_fu_960_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2278_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_fu_972_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln72_23_fu_989_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln72_24_fu_1000_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln72_26_fu_1011_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln72_24_fu_996_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln72_6_fu_1015_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln72_25_fu_1021_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln72_27_fu_1028_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln72_17_fu_1032_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_19_fu_1058_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2287_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_19_fu_1058_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln72_31_fu_1075_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln72_30_fu_1082_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sub_ln72_8_fu_1086_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln72_25_fu_1007_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_22_fu_1098_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2296_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_22_fu_1098_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln72_9_fu_1092_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln72_32_fu_1107_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln72_31_fu_1115_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln72_23_fu_1119_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_fu_1145_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2305_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1_fu_1154_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_fu_1145_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln1_fu_1154_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum_24_fu_1163_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_2_fu_1181_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2315_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln74_1_fu_1190_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_2_fu_1181_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_25_fu_1199_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2325_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_4_fu_1211_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_26_fu_1229_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln69_3_fu_1241_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum_8_fu_1253_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2335_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln74_4_fu_1262_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_8_fu_1253_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_28_fu_1271_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_29_fu_1283_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln14_5_fu_1293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln69_5_fu_1288_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum_12_fu_1307_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2345_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln74_6_fu_1316_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_12_fu_1307_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_30_fu_1325_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_31_fu_1337_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln14_7_fu_1347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln69_7_fu_1342_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln69_1_fu_1367_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln69_2_fu_1379_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln69_4_fu_1391_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln69_6_fu_1403_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln85_fu_1433_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln85_2_fu_1430_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln85_fu_1433_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln85_fu_1433_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln85_5_fu_1455_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln85_5_fu_1455_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln85_5_fu_1455_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal mul_ln85_11_fu_1471_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln85_11_fu_1471_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln85_11_fu_1471_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln1_fu_1493_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln85_6_fu_1500_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln85_5_fu_1490_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sub_ln85_1_fu_1504_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln85_1_fu_1510_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln85_fu_1517_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln85_fu_1521_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_24_fu_1527_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln85_3_fu_1487_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_fu_1567_p3 : STD_LOGIC_VECTOR (22 downto 0);
    signal sub_ln85_fu_1561_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln85_5_fu_1574_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln85_6_fu_1578_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln85_14_fu_1582_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_38_fu_1588_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln85_3_fu_1606_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal shl_ln85_4_fu_1617_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln85_10_fu_1613_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal zext_ln85_11_fu_1624_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_2355_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_25_fu_1634_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln85_2_fu_1628_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal shl_ln85_5_fu_1643_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln85_1_fu_1651_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln85_2_fu_1655_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_26_fu_1661_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln85_12_fu_1685_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln85_13_fu_1696_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln85_26_fu_1692_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln85_27_fu_1703_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_2364_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_31_fu_1713_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln85_3_fu_1707_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln85_14_fu_1722_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln85_3_fu_1730_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln85_8_fu_1734_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_32_fu_1740_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_fu_1758_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2373_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_39_fu_1758_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_1775_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2382_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_27_fu_1775_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_fu_1801_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2391_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_33_fu_1801_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_fu_1818_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2400_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_40_fu_1818_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln85_8_fu_1835_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln85_9_fu_1846_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln85_20_fu_1842_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln85_21_fu_1853_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_2409_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_28_fu_1863_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln85_21_fu_1857_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln85_s_fu_1872_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln85_22_fu_1880_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln85_5_fu_1884_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2418_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_34_fu_1903_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2427_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_41_fu_1920_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2436_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_35_fu_1944_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_fu_1961_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2445_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_42_fu_1961_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_16_fu_1978_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2454_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_16_fu_1978_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln85_19_fu_1993_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln85_31_fu_2000_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_2463_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_36_fu_2010_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln85_4_fu_2004_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln85_20_fu_2019_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln85_4_fu_2027_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln85_13_fu_2031_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_18_fu_2037_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2472_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_43_fu_2053_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2481_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sum_20_fu_2070_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln27_fu_2085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_val_4_fu_2101_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln34_fu_2106_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln34_1_fu_2109_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln34_2_fu_2120_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln34_3_fu_2130_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln35_fu_2140_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2159_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2159_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2172_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2172_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2185_p0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2185_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2159_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2172_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2185_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2206_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2206_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2206_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2215_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2215_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2215_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2224_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2224_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2233_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2233_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2233_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2242_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2242_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2242_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2251_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2251_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2251_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2260_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2260_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2269_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2269_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2269_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2278_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2278_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2287_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2287_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2287_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2296_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2296_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2296_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2305_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2305_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2305_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2315_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2315_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2315_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2325_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2325_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2335_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2335_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2335_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2345_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2345_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_2345_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2355_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2355_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2355_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2364_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2364_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2364_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2373_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2373_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2373_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2382_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2382_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2382_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2391_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2391_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2391_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2400_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2400_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2400_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2409_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2409_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2409_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2418_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2418_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2418_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2427_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2427_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2427_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2436_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2436_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2436_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2445_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2445_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_2445_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2454_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2454_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_2454_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2463_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2463_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2463_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2472_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2472_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_2472_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2481_p0 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_2481_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_2481_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to48 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_2355_p00 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2364_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_2373_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2382_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2409_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_2418_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_2427_p00 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2436_p00 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2445_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2454_p00 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2463_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_2472_p00 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_2481_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal mul_ln85_11_fu_1471_p00 : STD_LOGIC_VECTOR (22 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component neural_network_exp_17_9_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_val : IN STD_LOGIC_VECTOR (16 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component neural_network_mul_16s_8s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mul_16s_9ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mul_15ns_10ns_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mul_15ns_9s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mul_15ns_8s_23_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (22 downto 0) );
    end component;


    component neural_network_sdiv_24ns_16s_16_28_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component neural_network_mac_muladd_16s_7ns_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_16s_8s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_16s_8ns_22s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_16s_9s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_16s_9s_23s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (22 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_16s_6s_24s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_16s_8ns_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_16s_7s_24s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_15ns_6ns_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_15ns_8ns_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_15ns_9s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_15ns_8s_24s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_15ns_10s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_15ns_6s_24s_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_CONTROL_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component neural_network_INPUT_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_3 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component neural_network_OUTPUT_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        output_0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_0_ap_vld : IN STD_LOGIC;
        output_1 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_1_ap_vld : IN STD_LOGIC;
        output_2 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_2_ap_vld : IN STD_LOGIC );
    end component;



begin
    grp_exp_17_9_s_fu_285 : component neural_network_exp_17_9_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_exp_17_9_s_fu_285_ap_start,
        ap_done => grp_exp_17_9_s_fu_285_ap_done,
        ap_idle => grp_exp_17_9_s_fu_285_ap_idle,
        ap_ready => grp_exp_17_9_s_fu_285_ap_ready,
        x_val => grp_exp_17_9_s_fu_285_x_val,
        ap_return => grp_exp_17_9_s_fu_285_ap_return);

    grp_exp_17_9_s_fu_296 : component neural_network_exp_17_9_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_exp_17_9_s_fu_296_ap_start,
        ap_done => grp_exp_17_9_s_fu_296_ap_done,
        ap_idle => grp_exp_17_9_s_fu_296_ap_idle,
        ap_ready => grp_exp_17_9_s_fu_296_ap_ready,
        x_val => grp_exp_17_9_s_fu_296_x_val,
        ap_return => grp_exp_17_9_s_fu_296_ap_return);

    grp_exp_17_9_s_fu_307 : component neural_network_exp_17_9_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_exp_17_9_s_fu_307_ap_start,
        ap_done => grp_exp_17_9_s_fu_307_ap_done,
        ap_idle => grp_exp_17_9_s_fu_307_ap_idle,
        ap_ready => grp_exp_17_9_s_fu_307_ap_ready,
        x_val => grp_exp_17_9_s_fu_307_x_val,
        ap_return => grp_exp_17_9_s_fu_307_ap_return);

    CONTROL_s_axi_U : component neural_network_CONTROL_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_AWVALID,
        AWREADY => s_axi_CONTROL_AWREADY,
        AWADDR => s_axi_CONTROL_AWADDR,
        WVALID => s_axi_CONTROL_WVALID,
        WREADY => s_axi_CONTROL_WREADY,
        WDATA => s_axi_CONTROL_WDATA,
        WSTRB => s_axi_CONTROL_WSTRB,
        ARVALID => s_axi_CONTROL_ARVALID,
        ARREADY => s_axi_CONTROL_ARREADY,
        ARADDR => s_axi_CONTROL_ARADDR,
        RVALID => s_axi_CONTROL_RVALID,
        RREADY => s_axi_CONTROL_RREADY,
        RDATA => s_axi_CONTROL_RDATA,
        RRESP => s_axi_CONTROL_RRESP,
        BVALID => s_axi_CONTROL_BVALID,
        BREADY => s_axi_CONTROL_BREADY,
        BRESP => s_axi_CONTROL_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    INPUT_s_axi_U : component neural_network_INPUT_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_INPUT_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_INPUT_DATA_WIDTH)
    port map (
        AWVALID => s_axi_INPUT_AWVALID,
        AWREADY => s_axi_INPUT_AWREADY,
        AWADDR => s_axi_INPUT_AWADDR,
        WVALID => s_axi_INPUT_WVALID,
        WREADY => s_axi_INPUT_WREADY,
        WDATA => s_axi_INPUT_WDATA,
        WSTRB => s_axi_INPUT_WSTRB,
        ARVALID => s_axi_INPUT_ARVALID,
        ARREADY => s_axi_INPUT_ARREADY,
        ARADDR => s_axi_INPUT_ARADDR,
        RVALID => s_axi_INPUT_RVALID,
        RREADY => s_axi_INPUT_RREADY,
        RDATA => s_axi_INPUT_RDATA,
        RRESP => s_axi_INPUT_RRESP,
        BVALID => s_axi_INPUT_BVALID,
        BREADY => s_axi_INPUT_BREADY,
        BRESP => s_axi_INPUT_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_0 => input_0,
        input_1 => input_1,
        input_2 => input_2,
        input_3 => input_3);

    OUTPUT_s_axi_U : component neural_network_OUTPUT_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_OUTPUT_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_OUTPUT_DATA_WIDTH)
    port map (
        AWVALID => s_axi_OUTPUT_AWVALID,
        AWREADY => s_axi_OUTPUT_AWREADY,
        AWADDR => s_axi_OUTPUT_AWADDR,
        WVALID => s_axi_OUTPUT_WVALID,
        WREADY => s_axi_OUTPUT_WREADY,
        WDATA => s_axi_OUTPUT_WDATA,
        WSTRB => s_axi_OUTPUT_WSTRB,
        ARVALID => s_axi_OUTPUT_ARVALID,
        ARREADY => s_axi_OUTPUT_ARREADY,
        ARADDR => s_axi_OUTPUT_ARADDR,
        RVALID => s_axi_OUTPUT_RVALID,
        RREADY => s_axi_OUTPUT_RREADY,
        RDATA => s_axi_OUTPUT_RDATA,
        RRESP => s_axi_OUTPUT_RRESP,
        BVALID => s_axi_OUTPUT_BVALID,
        BREADY => s_axi_OUTPUT_BREADY,
        BRESP => s_axi_OUTPUT_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        output_0 => output_0,
        output_0_ap_vld => output_0_ap_vld,
        output_1 => output_1,
        output_1_ap_vld => output_1_ap_vld,
        output_2 => output_2,
        output_2_ap_vld => output_2_ap_vld);

    mul_16s_8s_24_1_1_U9 : component neural_network_mul_16s_8s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln72_fu_325_p0,
        din1 => mul_ln72_fu_325_p1,
        dout => mul_ln72_fu_325_p2);

    mul_16s_8s_24_1_1_U10 : component neural_network_mul_16s_8s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln72_3_fu_347_p0,
        din1 => mul_ln72_3_fu_347_p1,
        dout => mul_ln72_3_fu_347_p2);

    mul_16s_8s_24_1_1_U11 : component neural_network_mul_16s_8s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln72_9_fu_363_p0,
        din1 => mul_ln72_9_fu_363_p1,
        dout => mul_ln72_9_fu_363_p2);

    mul_16s_9ns_24_1_1_U12 : component neural_network_mul_16s_9ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln72_10_fu_379_p0,
        din1 => mul_ln72_10_fu_379_p1,
        dout => mul_ln72_10_fu_379_p2);

    mul_16s_8s_24_1_1_U13 : component neural_network_mul_16s_8s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln72_14_fu_395_p0,
        din1 => mul_ln72_14_fu_395_p1,
        dout => mul_ln72_14_fu_395_p2);

    mul_16s_8s_24_1_1_U14 : component neural_network_mul_16s_8s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln72_16_fu_411_p0,
        din1 => mul_ln72_16_fu_411_p1,
        dout => mul_ln72_16_fu_411_p2);

    mul_15ns_10ns_24_1_1_U15 : component neural_network_mul_15ns_10ns_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 10,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln85_fu_1433_p0,
        din1 => mul_ln85_fu_1433_p1,
        dout => mul_ln85_fu_1433_p2);

    mul_15ns_9s_24_1_1_U16 : component neural_network_mul_15ns_9s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 9,
        dout_WIDTH => 24)
    port map (
        din0 => mul_ln85_5_fu_1455_p0,
        din1 => mul_ln85_5_fu_1455_p1,
        dout => mul_ln85_5_fu_1455_p2);

    mul_15ns_8s_23_1_1_U17 : component neural_network_mul_15ns_8s_23_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 8,
        dout_WIDTH => 23)
    port map (
        din0 => mul_ln85_11_fu_1471_p0,
        din1 => mul_ln85_11_fu_1471_p1,
        dout => mul_ln85_11_fu_1471_p2);

    sdiv_24ns_16s_16_28_1_U18 : component neural_network_sdiv_24ns_16s_16_28_1
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 24,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2159_p0,
        din1 => grp_fu_2159_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2159_p2);

    sdiv_24ns_16s_16_28_1_U19 : component neural_network_sdiv_24ns_16s_16_28_1
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 24,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2172_p0,
        din1 => grp_fu_2172_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2172_p2);

    sdiv_24ns_16s_16_28_1_U20 : component neural_network_sdiv_24ns_16s_16_28_1
    generic map (
        ID => 1,
        NUM_STAGE => 28,
        din0_WIDTH => 24,
        din1_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2185_p0,
        din1 => grp_fu_2185_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_2185_p2);

    mac_muladd_16s_7ns_24ns_24_4_1_U21 : component neural_network_mac_muladd_16s_7ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2206_p0,
        din1 => grp_fu_2206_p1,
        din2 => grp_fu_2206_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2206_p3);

    mac_muladd_16s_8s_24ns_24_4_1_U22 : component neural_network_mac_muladd_16s_8s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2215_p0,
        din1 => grp_fu_2215_p1,
        din2 => grp_fu_2215_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2215_p3);

    mac_muladd_16s_8ns_22s_24_4_1_U23 : component neural_network_mac_muladd_16s_8ns_22s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 22,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2224_p0,
        din1 => grp_fu_2224_p1,
        din2 => tmp_6_fu_480_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_2224_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U24 : component neural_network_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2233_p0,
        din1 => grp_fu_2233_p1,
        din2 => grp_fu_2233_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2233_p3);

    mac_muladd_16s_8s_24ns_24_4_1_U25 : component neural_network_mac_muladd_16s_8s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2242_p0,
        din1 => grp_fu_2242_p1,
        din2 => grp_fu_2242_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2242_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U26 : component neural_network_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2251_p0,
        din1 => grp_fu_2251_p1,
        din2 => grp_fu_2251_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2251_p3);

    mac_muladd_16s_9s_23s_24_4_1_U27 : component neural_network_mac_muladd_16s_9s_23s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 23,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2260_p0,
        din1 => grp_fu_2260_p1,
        din2 => tmp_20_fu_595_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_2260_p3);

    mac_muladd_16s_7ns_24ns_24_4_1_U28 : component neural_network_mac_muladd_16s_7ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2269_p0,
        din1 => grp_fu_2269_p1,
        din2 => grp_fu_2269_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2269_p3);

    mac_muladd_16s_6s_24s_24_4_1_U29 : component neural_network_mac_muladd_16s_6s_24s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 6,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => input_2_read_reg_2516,
        din1 => grp_fu_2278_p1,
        din2 => grp_fu_2278_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2278_p3);

    mac_muladd_16s_8s_24ns_24_4_1_U30 : component neural_network_mac_muladd_16s_8s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2287_p0,
        din1 => grp_fu_2287_p1,
        din2 => grp_fu_2287_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2287_p3);

    mac_muladd_16s_8ns_24ns_24_4_1_U31 : component neural_network_mac_muladd_16s_8ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2296_p0,
        din1 => grp_fu_2296_p1,
        din2 => grp_fu_2296_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2296_p3);

    mac_muladd_16s_9s_24ns_24_4_1_U32 : component neural_network_mac_muladd_16s_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2305_p0,
        din1 => grp_fu_2305_p1,
        din2 => grp_fu_2305_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2305_p3);

    mac_muladd_16s_8s_24ns_24_4_1_U33 : component neural_network_mac_muladd_16s_8s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2315_p0,
        din1 => grp_fu_2315_p1,
        din2 => grp_fu_2315_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2315_p3);

    mac_muladd_16s_7s_24s_24_4_1_U34 : component neural_network_mac_muladd_16s_7s_24s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => input_3_read_reg_2527_pp0_iter1_reg,
        din1 => grp_fu_2325_p1,
        din2 => grp_fu_2325_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2325_p3);

    mac_muladd_16s_8s_24ns_24_4_1_U35 : component neural_network_mac_muladd_16s_8s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2335_p0,
        din1 => grp_fu_2335_p1,
        din2 => grp_fu_2335_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2335_p3);

    mac_muladd_16s_7ns_24ns_24_4_1_U36 : component neural_network_mac_muladd_16s_7ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 7,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2345_p0,
        din1 => grp_fu_2345_p1,
        din2 => grp_fu_2345_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2345_p3);

    mac_muladd_15ns_6ns_24ns_24_4_1_U37 : component neural_network_mac_muladd_15ns_6ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 6,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2355_p0,
        din1 => grp_fu_2355_p1,
        din2 => grp_fu_2355_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2355_p3);

    mac_muladd_15ns_8ns_24ns_24_4_1_U38 : component neural_network_mac_muladd_15ns_8ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2364_p0,
        din1 => grp_fu_2364_p1,
        din2 => grp_fu_2364_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2364_p3);

    mac_muladd_15ns_9s_24ns_24_4_1_U39 : component neural_network_mac_muladd_15ns_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2373_p0,
        din1 => grp_fu_2373_p1,
        din2 => grp_fu_2373_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2373_p3);

    mac_muladd_15ns_9s_24ns_24_4_1_U40 : component neural_network_mac_muladd_15ns_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2382_p0,
        din1 => grp_fu_2382_p1,
        din2 => grp_fu_2382_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2382_p3);

    mac_muladd_15ns_9s_24ns_24_4_1_U41 : component neural_network_mac_muladd_15ns_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2391_p0,
        din1 => grp_fu_2391_p1,
        din2 => grp_fu_2391_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2391_p3);

    mac_muladd_15ns_9s_24ns_24_4_1_U42 : component neural_network_mac_muladd_15ns_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2400_p0,
        din1 => grp_fu_2400_p1,
        din2 => grp_fu_2400_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2400_p3);

    mac_muladd_15ns_8s_24s_24_4_1_U43 : component neural_network_mac_muladd_15ns_8s_24s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2409_p0,
        din1 => grp_fu_2409_p1,
        din2 => grp_fu_2409_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2409_p3);

    mac_muladd_15ns_8ns_24ns_24_4_1_U44 : component neural_network_mac_muladd_15ns_8ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2418_p0,
        din1 => grp_fu_2418_p1,
        din2 => grp_fu_2418_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2418_p3);

    mac_muladd_15ns_6ns_24ns_24_4_1_U45 : component neural_network_mac_muladd_15ns_6ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 6,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2427_p0,
        din1 => grp_fu_2427_p1,
        din2 => grp_fu_2427_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2427_p3);

    mac_muladd_15ns_6ns_24ns_24_4_1_U46 : component neural_network_mac_muladd_15ns_6ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 6,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2436_p0,
        din1 => grp_fu_2436_p1,
        din2 => grp_fu_2436_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2436_p3);

    mac_muladd_15ns_9s_24ns_24_4_1_U47 : component neural_network_mac_muladd_15ns_9s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 9,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2445_p0,
        din1 => grp_fu_2445_p1,
        din2 => grp_fu_2445_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2445_p3);

    mac_muladd_15ns_10s_24ns_24_4_1_U48 : component neural_network_mac_muladd_15ns_10s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 10,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2454_p0,
        din1 => grp_fu_2454_p1,
        din2 => grp_fu_2454_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2454_p3);

    mac_muladd_15ns_8ns_24ns_24_4_1_U49 : component neural_network_mac_muladd_15ns_8ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2463_p0,
        din1 => grp_fu_2463_p1,
        din2 => grp_fu_2463_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2463_p3);

    mac_muladd_15ns_6s_24s_24_4_1_U50 : component neural_network_mac_muladd_15ns_6s_24s_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 6,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2472_p0,
        din1 => grp_fu_2472_p1,
        din2 => grp_fu_2472_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2472_p3);

    mac_muladd_15ns_8ns_24ns_24_4_1_U51 : component neural_network_mac_muladd_15ns_8ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 8,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_2481_p0,
        din1 => grp_fu_2481_p1,
        din2 => grp_fu_2481_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2481_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter48_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter48 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter48 <= ap_enable_reg_pp0_iter47;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter49_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter49 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter49 <= ap_enable_reg_pp0_iter48;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_17_9_s_fu_285_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_exp_17_9_s_fu_285_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_exp_17_9_s_fu_285_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_17_9_s_fu_285_ap_ready = ap_const_logic_1)) then 
                    grp_exp_17_9_s_fu_285_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_17_9_s_fu_296_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_exp_17_9_s_fu_296_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_exp_17_9_s_fu_296_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_17_9_s_fu_296_ap_ready = ap_const_logic_1)) then 
                    grp_exp_17_9_s_fu_296_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_17_9_s_fu_307_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_exp_17_9_s_fu_307_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_exp_17_9_s_fu_307_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_17_9_s_fu_307_ap_ready = ap_const_logic_1)) then 
                    grp_exp_17_9_s_fu_307_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln69_reg_2728 <= add_ln69_fu_1169_p2;
                icmp_ln14_1_reg_2743 <= icmp_ln14_1_fu_1205_p2;
                icmp_ln14_2_reg_2753 <= icmp_ln14_2_fu_1235_p2;
                icmp_ln14_3_reg_2693 <= icmp_ln14_3_fu_966_p2;
                icmp_ln14_4_reg_2770 <= icmp_ln14_4_fu_1277_p2;
                icmp_ln14_6_reg_2787 <= icmp_ln14_6_fu_1331_p2;
                icmp_ln14_reg_2733 <= icmp_ln14_fu_1175_p2;
                icmp_ln27_1_reg_3024 <= icmp_ln27_1_fu_2095_p2;
                input_2_read_reg_2516_pp0_iter2_reg <= input_2_read_reg_2516_pp0_iter1_reg;
                input_3_read_reg_2527_pp0_iter2_reg <= input_3_read_reg_2527_pp0_iter1_reg;
                input_3_read_reg_2527_pp0_iter3_reg <= input_3_read_reg_2527_pp0_iter2_reg;
                max_val_2_reg_3019 <= max_val_2_fu_2089_p3;
                select_ln14_1_reg_2805 <= select_ln14_1_fu_1372_p3;
                select_ln14_1_reg_2805_pp0_iter7_reg <= select_ln14_1_reg_2805;
                select_ln14_2_reg_2812 <= select_ln14_2_fu_1384_p3;
                select_ln14_2_reg_2812_pp0_iter7_reg <= select_ln14_2_reg_2812;
                select_ln14_2_reg_2812_pp0_iter8_reg <= select_ln14_2_reg_2812_pp0_iter7_reg;
                select_ln14_3_reg_2758 <= select_ln14_3_fu_1246_p3;
                select_ln14_3_reg_2758_pp0_iter6_reg <= select_ln14_3_reg_2758;
                select_ln14_3_reg_2758_pp0_iter7_reg <= select_ln14_3_reg_2758_pp0_iter6_reg;
                select_ln14_3_reg_2758_pp0_iter8_reg <= select_ln14_3_reg_2758_pp0_iter7_reg;
                select_ln14_4_reg_2818 <= select_ln14_4_fu_1396_p3;
                select_ln14_4_reg_2818_pp0_iter7_reg <= select_ln14_4_reg_2818;
                select_ln14_5_reg_2775 <= select_ln14_5_fu_1299_p3;
                select_ln14_5_reg_2775_pp0_iter6_reg <= select_ln14_5_reg_2775;
                select_ln14_5_reg_2775_pp0_iter7_reg <= select_ln14_5_reg_2775_pp0_iter6_reg;
                select_ln14_5_reg_2775_pp0_iter8_reg <= select_ln14_5_reg_2775_pp0_iter7_reg;
                select_ln14_6_reg_2825 <= select_ln14_6_fu_1408_p3;
                select_ln14_6_reg_2825_pp0_iter10_reg <= select_ln14_6_reg_2825_pp0_iter9_reg;
                select_ln14_6_reg_2825_pp0_iter7_reg <= select_ln14_6_reg_2825;
                select_ln14_6_reg_2825_pp0_iter8_reg <= select_ln14_6_reg_2825_pp0_iter7_reg;
                select_ln14_6_reg_2825_pp0_iter9_reg <= select_ln14_6_reg_2825_pp0_iter8_reg;
                select_ln14_7_reg_2792 <= select_ln14_7_fu_1353_p3;
                select_ln14_7_reg_2792_pp0_iter10_reg <= select_ln14_7_reg_2792_pp0_iter9_reg;
                select_ln14_7_reg_2792_pp0_iter11_reg <= select_ln14_7_reg_2792_pp0_iter10_reg;
                select_ln14_7_reg_2792_pp0_iter12_reg <= select_ln14_7_reg_2792_pp0_iter11_reg;
                select_ln14_7_reg_2792_pp0_iter6_reg <= select_ln14_7_reg_2792;
                select_ln14_7_reg_2792_pp0_iter7_reg <= select_ln14_7_reg_2792_pp0_iter6_reg;
                select_ln14_7_reg_2792_pp0_iter8_reg <= select_ln14_7_reg_2792_pp0_iter7_reg;
                select_ln14_7_reg_2792_pp0_iter9_reg <= select_ln14_7_reg_2792_pp0_iter8_reg;
                select_ln14_reg_2799 <= select_ln14_fu_1361_p3;
                sext_ln72_6_reg_2549_pp0_iter2_reg <= sext_ln72_6_reg_2549;
                sum_10_reg_2703 <= add_ln72_17_fu_1032_p2(23 downto 8);
                sum_14_reg_2718 <= add_ln72_23_fu_1119_p2(23 downto 8);
                sum_22_reg_3029 <= grp_exp_17_9_s_fu_285_ap_return;
                sum_22_reg_3029_pp0_iter21_reg <= sum_22_reg_3029;
                sum_23_reg_3047 <= sum_23_fu_2144_p2;
                sum_32_reg_2994 <= sum_32_fu_1987_p2;
                sum_32_reg_2994_pp0_iter14_reg <= sum_32_reg_2994;
                sum_33_reg_3001 <= sum_33_fu_2047_p2;
                sum_33_reg_3001_pp0_iter14_reg <= sum_33_reg_3001;
                sum_34_reg_3013 <= sum_34_fu_2079_p2;
                tmp_10_reg_2648 <= add_ln72_10_fu_771_p2(23 downto 8);
                tmp_16_reg_2658 <= add_ln72_16_fu_835_p2(23 downto 8);
                tmp_23_reg_2848 <= mul_ln85_fu_1433_p2(23 downto 8);
                tmp_29_reg_2964 <= add_ln85_5_fu_1884_p2(23 downto 8);
                tmp_2_reg_2633 <= add_ln72_1_fu_659_p2(23 downto 8);
                tmp_30_reg_2864 <= mul_ln85_5_fu_1455_p2(23 downto 8);
                tmp_8_reg_2643 <= add_ln72_7_fu_724_p2(23 downto 8);
                tmp_s_reg_2608 <= add_ln72_9_fu_531_p2(23 downto 8);
                trunc_ln34_1_reg_3041 <= grp_exp_17_9_s_fu_307_ap_return;
                trunc_ln34_1_reg_3041_pp0_iter21_reg <= trunc_ln34_1_reg_3041;
                trunc_ln3_reg_2869 <= mul_ln85_11_fu_1471_p2(22 downto 8);
                trunc_ln74_1_reg_2738 <= trunc_ln74_1_fu_1190_p1(22 downto 8);
                trunc_ln74_2_reg_2748 <= grp_fu_2325_p3(22 downto 8);
                trunc_ln74_3_reg_2688 <= add_ln72_11_fu_934_p2(22 downto 8);
                trunc_ln74_4_reg_2765 <= trunc_ln74_4_fu_1262_p1(22 downto 8);
                trunc_ln74_5_reg_2708 <= add_ln72_17_fu_1032_p2(22 downto 8);
                trunc_ln74_6_reg_2782 <= trunc_ln74_6_fu_1316_p1(22 downto 8);
                trunc_ln74_7_reg_2723 <= add_ln72_23_fu_1119_p2(22 downto 8);
                trunc_ln_reg_3035 <= grp_exp_17_9_s_fu_296_ap_return;
                trunc_ln_reg_3035_pp0_iter21_reg <= trunc_ln_reg_3035;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                input_0_read_reg_2490 <= input_0;
                input_0_read_reg_2490_pp0_iter1_reg <= input_0_read_reg_2490;
                input_1_read_reg_2499 <= input_1;
                input_1_read_reg_2499_pp0_iter1_reg <= input_1_read_reg_2499;
                input_2_read_reg_2516 <= input_2;
                input_2_read_reg_2516_pp0_iter1_reg <= input_2_read_reg_2516;
                input_3_read_reg_2527 <= input_3;
                input_3_read_reg_2527_pp0_iter1_reg <= input_3_read_reg_2527;
                sext_ln72_6_reg_2549 <= sext_ln72_6_fu_344_p1;
                tmp_11_reg_2565 <= mul_ln72_10_fu_379_p2(23 downto 8);
                tmp_14_reg_2570 <= mul_ln72_14_fu_395_p2(23 downto 8);
                tmp_17_reg_2575 <= mul_ln72_16_fu_411_p2(23 downto 8);
                tmp_3_reg_2555 <= mul_ln72_3_fu_347_p2(23 downto 8);
                tmp_9_reg_2560 <= mul_ln72_9_fu_363_p2(23 downto 8);
                tmp_reg_2537 <= mul_ln72_fu_325_p2(23 downto 8);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln35_fu_2140_p2 <= std_logic_vector(unsigned(sum_22_reg_3029) + unsigned(trunc_ln34_1_reg_3041));
    add_ln69_1_fu_1367_p2 <= std_logic_vector(unsigned(trunc_ln74_1_reg_2738) + unsigned(ap_const_lv15_13));
    add_ln69_2_fu_1379_p2 <= std_logic_vector(unsigned(trunc_ln74_2_reg_2748) + unsigned(ap_const_lv15_6));
    add_ln69_3_fu_1241_p2 <= std_logic_vector(unsigned(trunc_ln74_3_reg_2688) + unsigned(ap_const_lv15_33));
    add_ln69_4_fu_1391_p2 <= std_logic_vector(unsigned(trunc_ln74_4_reg_2765) + unsigned(ap_const_lv15_76));
    add_ln69_5_fu_1288_p2 <= std_logic_vector(unsigned(trunc_ln74_5_reg_2708) + unsigned(ap_const_lv15_3C));
    add_ln69_6_fu_1403_p2 <= std_logic_vector(unsigned(trunc_ln74_6_reg_2782) + unsigned(ap_const_lv15_13));
    add_ln69_7_fu_1342_p2 <= std_logic_vector(unsigned(trunc_ln74_7_reg_2723) + unsigned(ap_const_lv15_51));
    add_ln69_fu_1169_p2 <= std_logic_vector(unsigned(trunc_ln1_fu_1154_p4) + unsigned(ap_const_lv15_1F));
    add_ln72_10_fu_771_p2 <= std_logic_vector(unsigned(shl_ln72_16_fu_764_p3) + unsigned(sub_ln72_5_fu_758_p2));
    add_ln72_11_fu_934_p2 <= std_logic_vector(unsigned(shl_ln72_17_fu_923_p3) + unsigned(sext_ln72_20_fu_930_p1));
    add_ln72_16_fu_835_p2 <= std_logic_vector(unsigned(shl_ln72_22_fu_823_p3) + unsigned(sext_ln72_23_fu_831_p1));
    add_ln72_17_fu_1032_p2 <= std_logic_vector(unsigned(shl_ln72_25_fu_1021_p3) + unsigned(sext_ln72_27_fu_1028_p1));
    add_ln72_1_fu_659_p2 <= std_logic_vector(unsigned(shl_ln72_4_fu_647_p3) + unsigned(sext_ln72_9_fu_655_p1));
    add_ln72_23_fu_1119_p2 <= std_logic_vector(unsigned(shl_ln72_32_fu_1107_p3) + unsigned(sext_ln72_31_fu_1115_p1));
    add_ln72_7_fu_724_p2 <= std_logic_vector(unsigned(shl_ln72_s_fu_712_p3) + unsigned(sext_ln72_14_fu_720_p1));
    add_ln72_9_fu_531_p2 <= std_logic_vector(unsigned(shl_ln72_13_fu_520_p3) + unsigned(sext_ln72_18_fu_527_p1));
    add_ln85_13_fu_2031_p2 <= std_logic_vector(unsigned(shl_ln85_20_fu_2019_p3) + unsigned(sext_ln85_4_fu_2027_p1));
    add_ln85_14_fu_1582_p2 <= std_logic_vector(signed(sext_ln85_5_fu_1574_p1) + signed(sext_ln85_6_fu_1578_p1));
    add_ln85_21_fu_1857_p2 <= std_logic_vector(unsigned(zext_ln85_20_fu_1842_p1) + unsigned(zext_ln85_21_fu_1853_p1));
    add_ln85_2_fu_1655_p2 <= std_logic_vector(unsigned(shl_ln85_5_fu_1643_p3) + unsigned(sext_ln85_1_fu_1651_p1));
    add_ln85_5_fu_1884_p2 <= std_logic_vector(unsigned(shl_ln85_s_fu_1872_p3) + unsigned(zext_ln85_22_fu_1880_p1));
    add_ln85_8_fu_1734_p2 <= std_logic_vector(unsigned(shl_ln85_14_fu_1722_p3) + unsigned(sext_ln85_3_fu_1730_p1));
    add_ln85_fu_1521_p2 <= std_logic_vector(unsigned(shl_ln85_1_fu_1510_p3) + unsigned(sext_ln85_fu_1517_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter44 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage0_iter45 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter46 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state48_pp0_stage0_iter47 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp0_stage0_iter48 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state50_pp0_stage0_iter49 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter49, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter49 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48, ap_enable_reg_pp0_iter49)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter49 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to48_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47, ap_enable_reg_pp0_iter48)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter48 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0_0to48 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to48)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to48 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_exp_17_9_s_fu_285_ap_start <= grp_exp_17_9_s_fu_285_ap_start_reg;
    grp_exp_17_9_s_fu_285_x_val <= std_logic_vector(signed(sext_ln34_fu_2106_p1) - signed(sext_ln34_1_fu_2109_p1));
    grp_exp_17_9_s_fu_296_ap_start <= grp_exp_17_9_s_fu_296_ap_start_reg;
    grp_exp_17_9_s_fu_296_x_val <= std_logic_vector(signed(sext_ln34_2_fu_2120_p1) - signed(sext_ln34_1_fu_2109_p1));
    grp_exp_17_9_s_fu_307_ap_start <= grp_exp_17_9_s_fu_307_ap_start_reg;
    grp_exp_17_9_s_fu_307_x_val <= std_logic_vector(signed(sext_ln34_3_fu_2130_p1) - signed(sext_ln34_1_fu_2109_p1));
    grp_fu_2159_p0 <= (sum_22_reg_3029_pp0_iter21_reg & ap_const_lv8_0);
    grp_fu_2159_p1 <= sext_ln42_fu_2156_p1(16 - 1 downto 0);
    grp_fu_2172_p0 <= (trunc_ln_reg_3035_pp0_iter21_reg & ap_const_lv8_0);
    grp_fu_2172_p1 <= sext_ln42_fu_2156_p1(16 - 1 downto 0);
    grp_fu_2185_p0 <= (trunc_ln34_1_reg_3041_pp0_iter21_reg & ap_const_lv8_0);
    grp_fu_2185_p1 <= sext_ln42_fu_2156_p1(16 - 1 downto 0);
    grp_fu_2206_p0 <= sext_ln72_3_fu_318_p1(16 - 1 downto 0);
    grp_fu_2206_p1 <= ap_const_lv24_57(7 - 1 downto 0);
    grp_fu_2206_p2 <= (tmp_reg_2537 & ap_const_lv8_0);
    grp_fu_2215_p0 <= sext_ln72_3_fu_318_p1(16 - 1 downto 0);
    grp_fu_2215_p1 <= ap_const_lv24_FFFFB1(8 - 1 downto 0);
    grp_fu_2215_p2 <= (tmp_3_reg_2555 & ap_const_lv8_0);
    grp_fu_2224_p0 <= sext_ln72_3_fu_318_p1(16 - 1 downto 0);
    grp_fu_2224_p1 <= ap_const_lv24_86(8 - 1 downto 0);
    grp_fu_2233_p0 <= sext_ln72_3_fu_318_p1(16 - 1 downto 0);
    grp_fu_2233_p1 <= ap_const_lv24_FFFF0D(9 - 1 downto 0);
    grp_fu_2233_p2 <= (tmp_11_reg_2565 & ap_const_lv8_0);
    grp_fu_2242_p0 <= sext_ln72_3_fu_318_p1(16 - 1 downto 0);
    grp_fu_2242_p1 <= ap_const_lv24_FFFFA6(8 - 1 downto 0);
    grp_fu_2242_p2 <= (tmp_14_reg_2570 & ap_const_lv8_0);
    grp_fu_2251_p0 <= sext_ln72_3_fu_318_p1(16 - 1 downto 0);
    grp_fu_2251_p1 <= ap_const_lv24_FFFF4E(9 - 1 downto 0);
    grp_fu_2251_p2 <= (tmp_17_reg_2575 & ap_const_lv8_0);
    grp_fu_2260_p0 <= sext_ln72_3_fu_318_p1(16 - 1 downto 0);
    grp_fu_2260_p1 <= ap_const_lv24_FFFF73(9 - 1 downto 0);
    grp_fu_2269_p0 <= sext_ln72_4_fu_341_p1(16 - 1 downto 0);
    grp_fu_2269_p1 <= ap_const_lv24_66(7 - 1 downto 0);
    grp_fu_2269_p2 <= (tmp_4_fu_675_p4 & ap_const_lv8_0);
    grp_fu_2278_p1 <= ap_const_lv22_3FFFE6(6 - 1 downto 0);
    grp_fu_2278_p2 <= (tmp_12_fu_787_p4 & ap_const_lv8_0);
    grp_fu_2287_p0 <= sext_ln72_4_fu_341_p1(16 - 1 downto 0);
    grp_fu_2287_p1 <= ap_const_lv24_FFFFAE(8 - 1 downto 0);
    grp_fu_2287_p2 <= (tmp_18_fu_851_p4 & ap_const_lv8_0);
    grp_fu_2296_p0 <= sext_ln72_4_fu_341_p1(16 - 1 downto 0);
    grp_fu_2296_p1 <= ap_const_lv24_E7(8 - 1 downto 0);
    grp_fu_2296_p2 <= (tmp_21_fu_868_p4 & ap_const_lv8_0);
    grp_fu_2305_p0 <= sext_ln72_11_fu_443_p1(16 - 1 downto 0);
    grp_fu_2305_p1 <= ap_const_lv24_FFFF2D(9 - 1 downto 0);
    grp_fu_2305_p2 <= (tmp_2_reg_2633 & ap_const_lv8_0);
    grp_fu_2315_p0 <= sext_ln72_11_fu_443_p1(16 - 1 downto 0);
    grp_fu_2315_p1 <= ap_const_lv24_FFFF9D(8 - 1 downto 0);
    grp_fu_2315_p2 <= (tmp_5_fu_892_p4 & ap_const_lv8_0);
    grp_fu_2325_p1 <= ap_const_lv23_7FFFD4(7 - 1 downto 0);
    grp_fu_2325_p2 <= (tmp_8_reg_2643 & ap_const_lv8_0);
    grp_fu_2335_p0 <= sext_ln72_11_fu_443_p1(16 - 1 downto 0);
    grp_fu_2335_p1 <= ap_const_lv24_FFFFA3(8 - 1 downto 0);
    grp_fu_2335_p2 <= (tmp_13_fu_972_p4 & ap_const_lv8_0);
    grp_fu_2345_p0 <= sext_ln72_11_fu_443_p1(16 - 1 downto 0);
    grp_fu_2345_p1 <= ap_const_lv24_55(7 - 1 downto 0);
    grp_fu_2345_p2 <= (tmp_19_fu_1058_p4 & ap_const_lv8_0);
    grp_fu_2355_p0 <= grp_fu_2355_p00(15 - 1 downto 0);
    grp_fu_2355_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_2_fu_1384_p3),21));
    grp_fu_2355_p1 <= ap_const_lv21_23(6 - 1 downto 0);
    grp_fu_2355_p2 <= (tmp_24_fu_1527_p4 & ap_const_lv8_0);
    grp_fu_2364_p0 <= grp_fu_2364_p00(15 - 1 downto 0);
    grp_fu_2364_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_1_fu_1372_p3),23));
    grp_fu_2364_p1 <= ap_const_lv23_B6(8 - 1 downto 0);
    grp_fu_2364_p2 <= (tmp_30_reg_2864 & ap_const_lv8_0);
    grp_fu_2373_p0 <= grp_fu_2373_p00(15 - 1 downto 0);
    grp_fu_2373_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_2_fu_1384_p3),24));
    grp_fu_2373_p1 <= ap_const_lv24_FFFF7A(9 - 1 downto 0);
    grp_fu_2373_p2 <= (tmp_38_fu_1588_p4 & ap_const_lv8_0);
    grp_fu_2382_p0 <= grp_fu_2382_p00(15 - 1 downto 0);
    grp_fu_2382_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_4_reg_2818),24));
    grp_fu_2382_p1 <= ap_const_lv24_FFFF7B(9 - 1 downto 0);
    grp_fu_2382_p2 <= (tmp_26_fu_1661_p4 & ap_const_lv8_0);
    grp_fu_2391_p0 <= zext_ln85_9_fu_1449_p1(15 - 1 downto 0);
    grp_fu_2391_p1 <= ap_const_lv24_FFFF65(9 - 1 downto 0);
    grp_fu_2391_p2 <= (tmp_32_fu_1740_p4 & ap_const_lv8_0);
    grp_fu_2400_p0 <= zext_ln85_9_fu_1449_p1(15 - 1 downto 0);
    grp_fu_2400_p1 <= ap_const_lv24_FFFF74(9 - 1 downto 0);
    grp_fu_2400_p2 <= (tmp_39_fu_1758_p4 & ap_const_lv8_0);
    grp_fu_2409_p0 <= grp_fu_2409_p00(15 - 1 downto 0);
    grp_fu_2409_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_5_reg_2775_pp0_iter7_reg),23));
    grp_fu_2409_p1 <= ap_const_lv23_7FFFA3(8 - 1 downto 0);
    grp_fu_2409_p2 <= (tmp_27_fu_1775_p4 & ap_const_lv8_0);
    grp_fu_2418_p0 <= grp_fu_2418_p00(15 - 1 downto 0);
    grp_fu_2418_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_4_reg_2818_pp0_iter7_reg),23));
    grp_fu_2418_p1 <= ap_const_lv23_8E(8 - 1 downto 0);
    grp_fu_2418_p2 <= (tmp_33_fu_1801_p4 & ap_const_lv8_0);
    grp_fu_2427_p0 <= grp_fu_2427_p00(15 - 1 downto 0);
    grp_fu_2427_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_4_reg_2818_pp0_iter7_reg),21));
    grp_fu_2427_p1 <= ap_const_lv21_2A(6 - 1 downto 0);
    grp_fu_2427_p2 <= (tmp_40_fu_1818_p4 & ap_const_lv8_0);
    grp_fu_2436_p0 <= grp_fu_2436_p00(15 - 1 downto 0);
    grp_fu_2436_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_5_reg_2775_pp0_iter8_reg),21));
    grp_fu_2436_p1 <= ap_const_lv21_2B(6 - 1 downto 0);
    grp_fu_2436_p2 <= (tmp_34_fu_1903_p4 & ap_const_lv8_0);
    grp_fu_2445_p0 <= grp_fu_2445_p00(15 - 1 downto 0);
    grp_fu_2445_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_5_reg_2775_pp0_iter8_reg),24));
    grp_fu_2445_p1 <= ap_const_lv24_FFFF05(9 - 1 downto 0);
    grp_fu_2445_p2 <= (tmp_41_fu_1920_p4 & ap_const_lv8_0);
    grp_fu_2454_p0 <= grp_fu_2454_p00(15 - 1 downto 0);
    grp_fu_2454_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_7_reg_2792_pp0_iter9_reg),24));
    grp_fu_2454_p1 <= ap_const_lv24_FFFEC3(10 - 1 downto 0);
    grp_fu_2454_p2 <= (tmp_29_reg_2964 & ap_const_lv8_0);
    grp_fu_2463_p0 <= grp_fu_2463_p00(15 - 1 downto 0);
    grp_fu_2463_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_6_reg_2825_pp0_iter9_reg),23));
    grp_fu_2463_p1 <= ap_const_lv23_E4(8 - 1 downto 0);
    grp_fu_2463_p2 <= (tmp_35_fu_1944_p4 & ap_const_lv8_0);
    grp_fu_2472_p0 <= grp_fu_2472_p00(15 - 1 downto 0);
    grp_fu_2472_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_6_reg_2825_pp0_iter9_reg),21));
    grp_fu_2472_p1 <= ap_const_lv21_1FFFE6(6 - 1 downto 0);
    grp_fu_2472_p2 <= (tmp_42_fu_1961_p4 & ap_const_lv8_0);
    grp_fu_2481_p0 <= grp_fu_2481_p00(15 - 1 downto 0);
    grp_fu_2481_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_7_reg_2792_pp0_iter10_reg),23));
    grp_fu_2481_p1 <= ap_const_lv23_CE(8 - 1 downto 0);
    grp_fu_2481_p2 <= (tmp_43_fu_2053_p4 & ap_const_lv8_0);
    icmp_ln14_1_fu_1205_p2 <= "1" when (signed(sum_25_fu_1199_p2) > signed(ap_const_lv16_0)) else "0";
    icmp_ln14_2_fu_1235_p2 <= "1" when (signed(sum_26_fu_1229_p2) > signed(ap_const_lv16_0)) else "0";
    icmp_ln14_3_fu_966_p2 <= "1" when (signed(sum_27_fu_960_p2) > signed(ap_const_lv16_0)) else "0";
    icmp_ln14_4_fu_1277_p2 <= "1" when (signed(sum_28_fu_1271_p2) > signed(ap_const_lv16_0)) else "0";
    icmp_ln14_5_fu_1293_p2 <= "1" when (signed(sum_29_fu_1283_p2) > signed(ap_const_lv16_0)) else "0";
    icmp_ln14_6_fu_1331_p2 <= "1" when (signed(sum_30_fu_1325_p2) > signed(ap_const_lv16_0)) else "0";
    icmp_ln14_7_fu_1347_p2 <= "1" when (signed(sum_31_fu_1337_p2) > signed(ap_const_lv16_0)) else "0";
    icmp_ln14_fu_1175_p2 <= "1" when (signed(sum_24_fu_1163_p2) > signed(ap_const_lv16_0)) else "0";
    icmp_ln27_1_fu_2095_p2 <= "1" when (signed(sum_34_fu_2079_p2) > signed(max_val_2_fu_2089_p3)) else "0";
    icmp_ln27_fu_2085_p2 <= "1" when (signed(sum_33_reg_3001) > signed(sum_32_reg_2994)) else "0";
    max_val_2_fu_2089_p3 <= 
        sum_33_reg_3001 when (icmp_ln27_fu_2085_p2(0) = '1') else 
        sum_32_reg_2994;
    max_val_4_fu_2101_p3 <= 
        sum_34_reg_3013 when (icmp_ln27_1_reg_3024(0) = '1') else 
        max_val_2_reg_3019;
    mul_ln72_10_fu_379_p0 <= sext_ln72_1_fu_322_p1(16 - 1 downto 0);
    mul_ln72_10_fu_379_p1 <= ap_const_lv24_B2(9 - 1 downto 0);
    mul_ln72_14_fu_395_p0 <= sext_ln72_1_fu_322_p1(16 - 1 downto 0);
    mul_ln72_14_fu_395_p1 <= ap_const_lv24_FFFF94(8 - 1 downto 0);
    mul_ln72_16_fu_411_p0 <= sext_ln72_1_fu_322_p1(16 - 1 downto 0);
    mul_ln72_16_fu_411_p1 <= ap_const_lv24_FFFF8F(8 - 1 downto 0);
    mul_ln72_3_fu_347_p0 <= sext_ln72_1_fu_322_p1(16 - 1 downto 0);
    mul_ln72_3_fu_347_p1 <= ap_const_lv24_FFFFB1(8 - 1 downto 0);
    mul_ln72_9_fu_363_p0 <= sext_ln72_1_fu_322_p1(16 - 1 downto 0);
    mul_ln72_9_fu_363_p1 <= ap_const_lv24_FFFF85(8 - 1 downto 0);
    mul_ln72_fu_325_p0 <= sext_ln72_1_fu_322_p1(16 - 1 downto 0);
    mul_ln72_fu_325_p1 <= ap_const_lv24_FFFFA3(8 - 1 downto 0);
    mul_ln85_11_fu_1471_p0 <= mul_ln85_11_fu_1471_p00(15 - 1 downto 0);
    mul_ln85_11_fu_1471_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_reg_2799),23));
    mul_ln85_11_fu_1471_p1 <= ap_const_lv23_7FFFB3(8 - 1 downto 0);
    mul_ln85_5_fu_1455_p0 <= zext_ln85_2_fu_1430_p1(15 - 1 downto 0);
    mul_ln85_5_fu_1455_p1 <= ap_const_lv24_FFFF6D(9 - 1 downto 0);
    mul_ln85_fu_1433_p0 <= zext_ln85_2_fu_1430_p1(15 - 1 downto 0);
    mul_ln85_fu_1433_p1 <= ap_const_lv24_119(10 - 1 downto 0);
    output_0 <= grp_fu_2159_p2(16 - 1 downto 0);

    output_0_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter49, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter49 = ap_const_logic_1))) then 
            output_0_ap_vld <= ap_const_logic_1;
        else 
            output_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_1 <= grp_fu_2172_p2(16 - 1 downto 0);

    output_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter49, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter49 = ap_const_logic_1))) then 
            output_1_ap_vld <= ap_const_logic_1;
        else 
            output_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_2 <= grp_fu_2185_p2(16 - 1 downto 0);

    output_2_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter49, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter49 = ap_const_logic_1))) then 
            output_2_ap_vld <= ap_const_logic_1;
        else 
            output_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln14_1_fu_1372_p3 <= 
        add_ln69_1_fu_1367_p2 when (icmp_ln14_1_reg_2743(0) = '1') else 
        ap_const_lv15_0;
    select_ln14_2_fu_1384_p3 <= 
        add_ln69_2_fu_1379_p2 when (icmp_ln14_2_reg_2753(0) = '1') else 
        ap_const_lv15_0;
    select_ln14_3_fu_1246_p3 <= 
        add_ln69_3_fu_1241_p2 when (icmp_ln14_3_reg_2693(0) = '1') else 
        ap_const_lv15_0;
    select_ln14_4_fu_1396_p3 <= 
        add_ln69_4_fu_1391_p2 when (icmp_ln14_4_reg_2770(0) = '1') else 
        ap_const_lv15_0;
    select_ln14_5_fu_1299_p3 <= 
        add_ln69_5_fu_1288_p2 when (icmp_ln14_5_fu_1293_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln14_6_fu_1408_p3 <= 
        add_ln69_6_fu_1403_p2 when (icmp_ln14_6_reg_2787(0) = '1') else 
        ap_const_lv15_0;
    select_ln14_7_fu_1353_p3 <= 
        add_ln69_7_fu_1342_p2 when (icmp_ln14_7_fu_1347_p2(0) = '1') else 
        ap_const_lv15_0;
    select_ln14_fu_1361_p3 <= 
        add_ln69_reg_2728 when (icmp_ln14_reg_2733(0) = '1') else 
        ap_const_lv15_0;
        sext_ln34_1_fu_2109_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(max_val_4_fu_2101_p3),17));

        sext_ln34_2_fu_2120_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_33_reg_3001_pp0_iter14_reg),17));

        sext_ln34_3_fu_2130_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_34_reg_3013),17));

        sext_ln34_fu_2106_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_32_reg_2994_pp0_iter14_reg),17));

        sext_ln42_fu_2156_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sum_23_reg_3047),24));

        sext_ln72_11_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_3_read_reg_2527_pp0_iter1_reg),24));

        sext_ln72_12_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln72_9_fu_453_p3),22));

        sext_ln72_14_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln72_3_fu_698_p2),24));

        sext_ln72_16_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln72_11_fu_492_p3),22));

        sext_ln72_17_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln72_12_fu_503_p3),22));

        sext_ln72_18_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln72_4_fu_514_p2),24));

        sext_ln72_19_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln72_15_fu_747_p3),24));

        sext_ln72_1_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_0_read_reg_2490),24));

        sext_ln72_20_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_916_p3),24));

        sext_ln72_22_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln72_3_fu_621_p3),20));

        sext_ln72_23_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln72_10_fu_808_p2),24));

        sext_ln72_24_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln72_23_fu_989_p3),23));

        sext_ln72_25_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln72_24_fu_1000_p3),20));

        sext_ln72_26_fu_1011_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln72_24_fu_1000_p3),23));

        sext_ln72_27_fu_1028_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln72_6_fu_1015_p2),24));

        sext_ln72_28_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln72_29_fu_568_p3),23));

        sext_ln72_2_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_0_read_reg_2490_pp0_iter1_reg),22));

        sext_ln72_30_fu_1082_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln72_31_fu_1075_p3),20));

        sext_ln72_31_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln72_9_fu_1092_p2),24));

    sext_ln72_3_fu_318_p0 <= input_1;
        sext_ln72_3_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln72_3_fu_318_p0),24));

        sext_ln72_4_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_2_read_reg_2516),24));

        sext_ln72_5_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_2_read_reg_2516_pp0_iter2_reg),20));

        sext_ln72_6_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_2_read_reg_2516),22));

        sext_ln72_7_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln72_2_fu_610_p3),22));

        sext_ln72_8_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln72_3_fu_621_p3),22));

        sext_ln72_9_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln72_fu_632_p2),24));

        sext_ln72_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(input_0_read_reg_2490_pp0_iter1_reg),23));

        sext_ln85_1_fu_1651_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln85_2_fu_1628_p2),24));

        sext_ln85_3_fu_1730_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln85_3_fu_1707_p2),24));

        sext_ln85_4_fu_2027_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln85_4_fu_2004_p2),24));

        sext_ln85_5_fu_1574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_37_fu_1567_p3),24));

        sext_ln85_6_fu_1578_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln85_fu_1561_p2),24));

        sext_ln85_fu_1517_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln85_1_fu_1504_p2),24));

    shl_ln1_fu_1493_p3 <= (select_ln14_1_reg_2805_pp0_iter7_reg & ap_const_lv3_0);
    shl_ln72_11_fu_492_p3 <= (input_1_read_reg_2499_pp0_iter1_reg & ap_const_lv5_0);
    shl_ln72_12_fu_503_p3 <= (input_1_read_reg_2499_pp0_iter1_reg & ap_const_lv3_0);
    shl_ln72_13_fu_520_p3 <= (tmp_9_reg_2560 & ap_const_lv8_0);
    shl_ln72_14_fu_740_p3 <= (input_2_read_reg_2516_pp0_iter2_reg & ap_const_lv8_0);
    shl_ln72_15_fu_747_p3 <= (input_2_read_reg_2516_pp0_iter2_reg & ap_const_lv1_0);
    shl_ln72_16_fu_764_p3 <= (tmp_s_reg_2608 & ap_const_lv8_0);
    shl_ln72_17_fu_923_p3 <= (tmp_10_reg_2648 & ap_const_lv8_0);
    shl_ln72_22_fu_823_p3 <= (tmp_15_fu_814_p4 & ap_const_lv8_0);
    shl_ln72_23_fu_989_p3 <= (input_3_read_reg_2527_pp0_iter3_reg & ap_const_lv6_0);
    shl_ln72_24_fu_1000_p3 <= (input_3_read_reg_2527_pp0_iter3_reg & ap_const_lv1_0);
    shl_ln72_25_fu_1021_p3 <= (tmp_16_reg_2658 & ap_const_lv8_0);
    shl_ln72_29_fu_568_p3 <= (input_0_read_reg_2490_pp0_iter1_reg & ap_const_lv6_0);
    shl_ln72_2_fu_610_p3 <= (input_2_read_reg_2516_pp0_iter2_reg & ap_const_lv5_0);
    shl_ln72_31_fu_1075_p3 <= (input_3_read_reg_2527_pp0_iter3_reg & ap_const_lv3_0);
    shl_ln72_32_fu_1107_p3 <= (tmp_22_fu_1098_p4 & ap_const_lv8_0);
    shl_ln72_3_fu_621_p3 <= (input_2_read_reg_2516_pp0_iter2_reg & ap_const_lv3_0);
    shl_ln72_4_fu_647_p3 <= (tmp_1_fu_638_p4 & ap_const_lv8_0);
    shl_ln72_9_fu_453_p3 <= (input_0_read_reg_2490_pp0_iter1_reg & ap_const_lv5_0);
    shl_ln72_s_fu_712_p3 <= (tmp_7_fu_703_p4 & ap_const_lv8_0);
    shl_ln85_12_fu_1685_p3 <= (select_ln14_2_reg_2812_pp0_iter8_reg & ap_const_lv3_0);
    shl_ln85_13_fu_1696_p3 <= (select_ln14_2_reg_2812_pp0_iter8_reg & ap_const_lv1_0);
    shl_ln85_14_fu_1722_p3 <= (tmp_31_fu_1713_p4 & ap_const_lv8_0);
    shl_ln85_19_fu_1993_p3 <= (select_ln14_7_reg_2792_pp0_iter12_reg & ap_const_lv1_0);
    shl_ln85_1_fu_1510_p3 <= (tmp_23_reg_2848 & ap_const_lv8_0);
    shl_ln85_20_fu_2019_p3 <= (tmp_36_fu_2010_p4 & ap_const_lv8_0);
    shl_ln85_3_fu_1606_p3 <= (select_ln14_3_reg_2758_pp0_iter8_reg & ap_const_lv7_0);
    shl_ln85_4_fu_1617_p3 <= (select_ln14_3_reg_2758_pp0_iter8_reg & ap_const_lv4_0);
    shl_ln85_5_fu_1643_p3 <= (tmp_25_fu_1634_p4 & ap_const_lv8_0);
    shl_ln85_8_fu_1835_p3 <= (select_ln14_6_reg_2825_pp0_iter10_reg & ap_const_lv4_0);
    shl_ln85_9_fu_1846_p3 <= (select_ln14_6_reg_2825_pp0_iter10_reg & ap_const_lv2_0);
    shl_ln85_s_fu_1872_p3 <= (tmp_28_fu_1863_p4 & ap_const_lv8_0);
    shl_ln_fu_916_p3 <= (input_3_read_reg_2527_pp0_iter3_reg & ap_const_lv2_0);
    sub_ln72_10_fu_808_p2 <= std_logic_vector(signed(sext_ln72_5_fu_607_p1) - signed(sext_ln72_22_fu_804_p1));
    sub_ln72_1_fu_464_p2 <= std_logic_vector(signed(sext_ln72_12_fu_460_p1) - signed(sext_ln72_2_fu_430_p1));
    sub_ln72_2_fu_692_p2 <= std_logic_vector(unsigned(ap_const_lv22_0) - unsigned(sext_ln72_7_fu_617_p1));
    sub_ln72_3_fu_698_p2 <= std_logic_vector(unsigned(sub_ln72_2_fu_692_p2) - unsigned(sext_ln72_6_reg_2549_pp0_iter2_reg));
    sub_ln72_4_fu_514_p2 <= std_logic_vector(signed(sext_ln72_17_fu_510_p1) - signed(sext_ln72_16_fu_499_p1));
    sub_ln72_5_fu_758_p2 <= std_logic_vector(signed(sext_ln72_19_fu_754_p1) - signed(shl_ln72_14_fu_740_p3));
    sub_ln72_6_fu_1015_p2 <= std_logic_vector(signed(sext_ln72_26_fu_1011_p1) - signed(sext_ln72_24_fu_996_p1));
    sub_ln72_7_fu_579_p2 <= std_logic_vector(signed(sext_ln72_28_fu_575_p1) - signed(sext_ln72_fu_427_p1));
    sub_ln72_8_fu_1086_p2 <= std_logic_vector(unsigned(ap_const_lv20_0) - unsigned(sext_ln72_30_fu_1082_p1));
    sub_ln72_9_fu_1092_p2 <= std_logic_vector(unsigned(sub_ln72_8_fu_1086_p2) - unsigned(sext_ln72_25_fu_1007_p1));
    sub_ln72_fu_632_p2 <= std_logic_vector(signed(sext_ln72_7_fu_617_p1) - signed(sext_ln72_8_fu_628_p1));
    sub_ln85_1_fu_1504_p2 <= std_logic_vector(unsigned(zext_ln85_6_fu_1500_p1) - unsigned(zext_ln85_5_fu_1490_p1));
    sub_ln85_2_fu_1628_p2 <= std_logic_vector(unsigned(zext_ln85_10_fu_1613_p1) - unsigned(zext_ln85_11_fu_1624_p1));
    sub_ln85_3_fu_1707_p2 <= std_logic_vector(unsigned(zext_ln85_26_fu_1692_p1) - unsigned(zext_ln85_27_fu_1703_p1));
    sub_ln85_4_fu_2004_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(zext_ln85_31_fu_2000_p1));
    sub_ln85_fu_1561_p2 <= std_logic_vector(unsigned(ap_const_lv16_0) - unsigned(zext_ln85_3_fu_1487_p1));
    sum_12_fu_1307_p1 <= grp_fu_2345_p3;
    sum_12_fu_1307_p4 <= sum_12_fu_1307_p1(23 downto 8);
    sum_16_fu_1978_p1 <= grp_fu_2454_p3;
    sum_16_fu_1978_p4 <= sum_16_fu_1978_p1(23 downto 8);
    sum_18_fu_2037_p4 <= add_ln85_13_fu_2031_p2(23 downto 8);
    sum_20_fu_2070_p4 <= grp_fu_2481_p3(23 downto 8);
    sum_23_fu_2144_p2 <= std_logic_vector(unsigned(add_ln35_fu_2140_p2) + unsigned(trunc_ln_reg_3035));
    sum_24_fu_1163_p2 <= std_logic_vector(unsigned(sum_fu_1145_p4) + unsigned(ap_const_lv16_1F));
    sum_25_fu_1199_p2 <= std_logic_vector(unsigned(sum_2_fu_1181_p4) + unsigned(ap_const_lv16_13));
    sum_26_fu_1229_p2 <= std_logic_vector(unsigned(sum_4_fu_1211_p4) + unsigned(ap_const_lv16_6));
    sum_27_fu_960_p2 <= std_logic_vector(unsigned(sum_6_fu_940_p4) + unsigned(ap_const_lv16_33));
    sum_28_fu_1271_p2 <= std_logic_vector(unsigned(sum_8_fu_1253_p4) + unsigned(ap_const_lv16_76));
    sum_29_fu_1283_p2 <= std_logic_vector(unsigned(sum_10_reg_2703) + unsigned(ap_const_lv16_3C));
    sum_2_fu_1181_p1 <= grp_fu_2315_p3;
    sum_2_fu_1181_p4 <= sum_2_fu_1181_p1(23 downto 8);
    sum_30_fu_1325_p2 <= std_logic_vector(unsigned(sum_12_fu_1307_p4) + unsigned(ap_const_lv16_13));
    sum_31_fu_1337_p2 <= std_logic_vector(unsigned(sum_14_reg_2718) + unsigned(ap_const_lv16_51));
    sum_32_fu_1987_p2 <= std_logic_vector(unsigned(sum_16_fu_1978_p4) + unsigned(ap_const_lv16_FFE2));
    sum_33_fu_2047_p2 <= std_logic_vector(unsigned(sum_18_fu_2037_p4) + unsigned(ap_const_lv16_7));
    sum_34_fu_2079_p2 <= std_logic_vector(unsigned(sum_20_fu_2070_p4) + unsigned(ap_const_lv16_B));
    sum_4_fu_1211_p4 <= grp_fu_2325_p3(23 downto 8);
    sum_6_fu_940_p4 <= add_ln72_11_fu_934_p2(23 downto 8);
    sum_8_fu_1253_p1 <= grp_fu_2335_p3;
    sum_8_fu_1253_p4 <= sum_8_fu_1253_p1(23 downto 8);
    sum_fu_1145_p1 <= grp_fu_2305_p3;
    sum_fu_1145_p4 <= sum_fu_1145_p1(23 downto 8);
    tmp_12_fu_787_p1 <= grp_fu_2233_p3;
    tmp_12_fu_787_p4 <= tmp_12_fu_787_p1(23 downto 8);
    tmp_13_fu_972_p4 <= grp_fu_2278_p3(23 downto 8);
    tmp_15_fu_814_p1 <= grp_fu_2242_p3;
    tmp_15_fu_814_p4 <= tmp_15_fu_814_p1(23 downto 8);
    tmp_18_fu_851_p1 <= grp_fu_2251_p3;
    tmp_18_fu_851_p4 <= tmp_18_fu_851_p1(23 downto 8);
    tmp_19_fu_1058_p1 <= grp_fu_2287_p3;
    tmp_19_fu_1058_p4 <= tmp_19_fu_1058_p1(23 downto 8);
    tmp_1_fu_638_p1 <= grp_fu_2206_p3;
    tmp_1_fu_638_p4 <= tmp_1_fu_638_p1(23 downto 8);
    tmp_20_fu_595_p3 <= (trunc_ln72_s_fu_585_p4 & ap_const_lv8_0);
    tmp_21_fu_868_p4 <= grp_fu_2260_p3(23 downto 8);
    tmp_22_fu_1098_p1 <= grp_fu_2296_p3;
    tmp_22_fu_1098_p4 <= tmp_22_fu_1098_p1(23 downto 8);
    tmp_24_fu_1527_p4 <= add_ln85_fu_1521_p2(23 downto 8);
    tmp_25_fu_1634_p4 <= grp_fu_2355_p3(23 downto 8);
    tmp_26_fu_1661_p4 <= add_ln85_2_fu_1655_p2(23 downto 8);
    tmp_27_fu_1775_p1 <= grp_fu_2382_p3;
    tmp_27_fu_1775_p4 <= tmp_27_fu_1775_p1(23 downto 8);
    tmp_28_fu_1863_p4 <= grp_fu_2409_p3(23 downto 8);
    tmp_31_fu_1713_p4 <= grp_fu_2364_p3(23 downto 8);
    tmp_32_fu_1740_p4 <= add_ln85_8_fu_1734_p2(23 downto 8);
    tmp_33_fu_1801_p1 <= grp_fu_2391_p3;
    tmp_33_fu_1801_p4 <= tmp_33_fu_1801_p1(23 downto 8);
    tmp_34_fu_1903_p4 <= grp_fu_2418_p3(23 downto 8);
    tmp_35_fu_1944_p4 <= grp_fu_2436_p3(23 downto 8);
    tmp_36_fu_2010_p4 <= grp_fu_2463_p3(23 downto 8);
    tmp_37_fu_1567_p3 <= (trunc_ln3_reg_2869 & ap_const_lv8_0);
    tmp_38_fu_1588_p4 <= add_ln85_14_fu_1582_p2(23 downto 8);
    tmp_39_fu_1758_p1 <= grp_fu_2373_p3;
    tmp_39_fu_1758_p4 <= tmp_39_fu_1758_p1(23 downto 8);
    tmp_40_fu_1818_p1 <= grp_fu_2400_p3;
    tmp_40_fu_1818_p4 <= tmp_40_fu_1818_p1(23 downto 8);
    tmp_41_fu_1920_p4 <= grp_fu_2427_p3(23 downto 8);
    tmp_42_fu_1961_p1 <= grp_fu_2445_p3;
    tmp_42_fu_1961_p4 <= tmp_42_fu_1961_p1(23 downto 8);
    tmp_43_fu_2053_p4 <= grp_fu_2472_p3(23 downto 8);
    tmp_4_fu_675_p1 <= grp_fu_2215_p3;
    tmp_4_fu_675_p4 <= tmp_4_fu_675_p1(23 downto 8);
    tmp_5_fu_892_p1 <= grp_fu_2269_p3;
    tmp_5_fu_892_p4 <= tmp_5_fu_892_p1(23 downto 8);
    tmp_6_fu_480_p3 <= (trunc_ln2_fu_470_p4 & ap_const_lv8_0);
    tmp_7_fu_703_p4 <= grp_fu_2224_p3(23 downto 8);
    trunc_ln1_fu_1154_p1 <= grp_fu_2305_p3;
    trunc_ln1_fu_1154_p4 <= trunc_ln1_fu_1154_p1(22 downto 8);
    trunc_ln2_fu_470_p4 <= sub_ln72_1_fu_464_p2(21 downto 8);
    trunc_ln72_s_fu_585_p4 <= sub_ln72_7_fu_579_p2(22 downto 8);
    trunc_ln74_1_fu_1190_p1 <= grp_fu_2315_p3;
    trunc_ln74_4_fu_1262_p1 <= grp_fu_2335_p3;
    trunc_ln74_6_fu_1316_p1 <= grp_fu_2345_p3;
    zext_ln85_10_fu_1613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln85_3_fu_1606_p3),23));
    zext_ln85_11_fu_1624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln85_4_fu_1617_p3),23));
    zext_ln85_20_fu_1842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln85_8_fu_1835_p3),20));
    zext_ln85_21_fu_1853_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln85_9_fu_1846_p3),20));
    zext_ln85_22_fu_1880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln85_21_fu_1857_p2),24));
    zext_ln85_26_fu_1692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln85_12_fu_1685_p3),19));
    zext_ln85_27_fu_1703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln85_13_fu_1696_p3),19));
    zext_ln85_2_fu_1430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_reg_2799),24));
    zext_ln85_31_fu_2000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln85_19_fu_1993_p3),17));
    zext_ln85_3_fu_1487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_1_reg_2805_pp0_iter7_reg),16));
    zext_ln85_5_fu_1490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_1_reg_2805_pp0_iter7_reg),19));
    zext_ln85_6_fu_1500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_1493_p3),19));
    zext_ln85_9_fu_1449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln14_3_reg_2758_pp0_iter6_reg),24));
end behav;
