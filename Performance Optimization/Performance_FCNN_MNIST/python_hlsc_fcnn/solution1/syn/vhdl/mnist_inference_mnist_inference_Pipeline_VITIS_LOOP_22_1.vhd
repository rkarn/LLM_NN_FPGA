-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_22_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sum_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    sum_ce0 : OUT STD_LOGIC;
    sum_we0 : OUT STD_LOGIC;
    sum_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    grp_fu_20451_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_20451_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_20451_p_ce : OUT STD_LOGIC );
end;


architecture behav of mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_22_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln22_reg_645 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal biases_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal biases_ce0 : STD_LOGIC;
    signal biases_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_639 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln22_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_cast7074_fu_145_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast7074_reg_649 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast7074_reg_649_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast7074_reg_649_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal biases_load_reg_659 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal biases_load_reg_659_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln24_4_fu_155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_4_reg_665 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_4_reg_665_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_4_reg_665_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal biases_load_1_reg_675 : STD_LOGIC_VECTOR (31 downto 0);
    signal biases_load_1_reg_675_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln24_fu_174_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln24_reg_681 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_reg_686 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp2_reg_691 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln24_1_fu_196_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln24_1_reg_696 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln24_fu_220_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln24_reg_701 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln24_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_706 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_1_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_1_reg_713 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_1_fu_256_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln24_1_reg_718 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln24_2_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_2_reg_724 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln24_2_fu_270_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln24_2_reg_730 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln24_4_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_4_reg_736 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln24_5_fu_294_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln24_5_reg_741 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_3920_reg_746 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_65_reg_751 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln24_6_fu_316_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln24_6_reg_756 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln24_10_fu_423_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln24_10_reg_761 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln24_4_fu_451_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln24_4_reg_766 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln24_5_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_5_reg_771 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_6_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_6_reg_778 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_5_fu_487_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln24_5_reg_783 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln24_7_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_7_reg_789 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln24_7_fu_501_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln24_7_reg_795 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln24_9_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_9_reg_801 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_13_fu_624_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln24_13_reg_806 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal i_fu_82 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln22_fu_160_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_128_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln22_fu_150_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal bitcast_ln724_fu_170_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln24_1_cast_fu_203_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln24_1_fu_210_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln24_fu_214_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln24_fu_200_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln24_1_fu_232_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln24_fu_244_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln24_2_fu_250_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3919_fu_274_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln724_2_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln24_fu_320_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln24_2_fu_328_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln24_fu_332_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln724_786_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3918_fu_344_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_3_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln24_3_fu_337_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln24_14_fu_352_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln24cast_fu_368_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln24_fu_372_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln24_3_fu_377_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln24_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_8_fu_384_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln24_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_1_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_1_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_2_fu_360_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln24_9_fu_401_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln24_5_cast_fu_434_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln24_5_fu_441_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln24_3_fu_445_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln24_3_fu_431_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln24_4_fu_463_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln24_1_fu_475_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln24_5_fu_481_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3922_fu_505_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln24_2_fu_521_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln24_6_fu_529_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln24_1_fu_533_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln724_788_fu_542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3921_fu_545_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_8_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln24_8_fu_538_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln24_15_fu_553_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln24_2cast_fu_569_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln24_1_fu_573_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln24_7_fu_578_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln24_2_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_2_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_11_fu_585_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln24_1_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_3_fu_613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_3_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_6_fu_561_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln24_12_fu_602_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mnist_inference_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_22_1_biases_RAM_1P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_inference_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    biases_U : component mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_22_1_biases_RAM_1P_BRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => biases_address0,
        ce0 => biases_ce0,
        q0 => biases_q0);

    flow_control_loop_pipe_sequential_init_U : component mnist_inference_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_82 <= ap_const_lv4_0;
            elsif (((icmp_ln22_reg_645 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                i_fu_82 <= add_ln22_fu_160_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                biases_load_reg_659_pp0_iter1_reg <= biases_load_reg_659;
                icmp_ln24_5_reg_771 <= icmp_ln24_5_fu_458_p2;
                icmp_ln24_6_reg_778 <= icmp_ln24_6_fu_469_p2;
                icmp_ln24_7_reg_789 <= icmp_ln24_7_fu_495_p2;
                icmp_ln24_9_reg_801 <= icmp_ln24_9_fu_515_p2;
                select_ln24_10_reg_761 <= select_ln24_10_fu_423_p3;
                select_ln24_4_reg_766 <= select_ln24_4_fu_451_p3;
                select_ln24_5_reg_783 <= select_ln24_5_fu_487_p3;
                tmp2_reg_691 <= bitcast_ln724_fu_170_p1(62 downto 52);
                tmp_reg_686 <= bitcast_ln724_fu_170_p1(63 downto 63);
                trunc_ln24_1_reg_696 <= trunc_ln24_1_fu_196_p1;
                trunc_ln24_7_reg_795 <= trunc_ln24_7_fu_501_p1;
                trunc_ln24_reg_681 <= trunc_ln24_fu_174_p1;
                    zext_ln24_4_reg_665_pp0_iter1_reg(3 downto 1) <= zext_ln24_4_reg_665(3 downto 1);
                    zext_ln24_4_reg_665_pp0_iter2_reg(3 downto 1) <= zext_ln24_4_reg_665_pp0_iter1_reg(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                biases_load_1_reg_675 <= biases_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                biases_load_1_reg_675_pp0_iter2_reg <= biases_load_1_reg_675;
                i_2_reg_639 <= ap_sig_allocacmp_i_2;
                    i_cast7074_reg_649_pp0_iter1_reg(3 downto 0) <= i_cast7074_reg_649(3 downto 0);
                    i_cast7074_reg_649_pp0_iter2_reg(3 downto 0) <= i_cast7074_reg_649_pp0_iter1_reg(3 downto 0);
                icmp_ln22_reg_645 <= icmp_ln22_fu_139_p2;
                icmp_ln24_1_reg_713 <= icmp_ln24_1_fu_238_p2;
                icmp_ln24_2_reg_724 <= icmp_ln24_2_fu_264_p2;
                icmp_ln24_4_reg_736 <= icmp_ln24_4_fu_284_p2;
                icmp_ln24_reg_706 <= icmp_ln24_fu_227_p2;
                select_ln24_13_reg_806 <= select_ln24_13_fu_624_p3;
                select_ln24_1_reg_718 <= select_ln24_1_fu_256_p3;
                select_ln24_reg_701 <= select_ln24_fu_220_p3;
                tmp_3920_reg_746 <= bitcast_ln724_2_fu_290_p1(63 downto 63);
                tmp_65_reg_751 <= bitcast_ln724_2_fu_290_p1(62 downto 52);
                trunc_ln24_2_reg_730 <= trunc_ln24_2_fu_270_p1;
                trunc_ln24_5_reg_741 <= trunc_ln24_5_fu_294_p1;
                trunc_ln24_6_reg_756 <= trunc_ln24_6_fu_316_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_645 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                biases_load_reg_659 <= biases_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_139_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    i_cast7074_reg_649(3 downto 0) <= i_cast7074_fu_145_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_reg_645 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    zext_ln24_4_reg_665(3 downto 1) <= zext_ln24_4_fu_155_p1(3 downto 1);
            end if;
        end if;
    end process;
    i_cast7074_reg_649(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast7074_reg_649_pp0_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    i_cast7074_reg_649_pp0_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln24_4_reg_665(0) <= '1';
    zext_ln24_4_reg_665(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln24_4_reg_665_pp0_iter1_reg(0) <= '1';
    zext_ln24_4_reg_665_pp0_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln24_4_reg_665_pp0_iter2_reg(0) <= '1';
    zext_ln24_4_reg_665_pp0_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to3, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln22_fu_160_p2 <= std_logic_vector(unsigned(i_2_reg_639) + unsigned(ap_const_lv4_2));
    add_ln24_1_fu_475_p2 <= std_logic_vector(unsigned(sub_ln24_4_fu_463_p2) + unsigned(ap_const_lv12_FF8));
    add_ln24_fu_244_p2 <= std_logic_vector(unsigned(sub_ln24_1_fu_232_p2) + unsigned(ap_const_lv12_FF8));
    and_ln24_1_fu_418_p2 <= (xor_ln24_1_fu_412_p2 and icmp_ln24_1_reg_713);
    and_ln24_2_fu_597_p2 <= (xor_ln24_2_fu_592_p2 and icmp_ln24_7_reg_789);
    and_ln24_3_fu_619_p2 <= (xor_ln24_3_fu_613_p2 and icmp_ln24_6_reg_778);
    and_ln24_fu_396_p2 <= (xor_ln24_fu_391_p2 and icmp_ln24_2_reg_724);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln22_reg_645)
    begin
        if (((icmp_ln22_reg_645 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_82, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_82;
        end if; 
    end process;

    ashr_ln24_1_fu_533_p2 <= std_logic_vector(shift_right(signed(select_ln24_4_reg_766),to_integer(unsigned('0' & zext_ln24_6_fu_529_p1(31-1 downto 0)))));
    ashr_ln24_fu_332_p2 <= std_logic_vector(shift_right(signed(select_ln24_reg_701),to_integer(unsigned('0' & zext_ln24_2_fu_328_p1(31-1 downto 0)))));

    biases_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, i_cast7074_fu_145_p1, zext_ln24_4_fu_155_p1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                biases_address0 <= zext_ln24_4_fu_155_p1(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                biases_address0 <= i_cast7074_fu_145_p1(4 - 1 downto 0);
            else 
                biases_address0 <= "XXXX";
            end if;
        else 
            biases_address0 <= "XXXX";
        end if; 
    end process;


    biases_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            biases_ce0 <= ap_const_logic_1;
        else 
            biases_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln724_2_fu_290_p1 <= grp_fu_20451_p_dout0;
    bitcast_ln724_786_fu_341_p1 <= biases_load_reg_659_pp0_iter1_reg;
    bitcast_ln724_788_fu_542_p1 <= biases_load_1_reg_675_pp0_iter2_reg;
    bitcast_ln724_fu_170_p1 <= grp_fu_20451_p_dout0;

    grp_fu_128_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, biases_load_reg_659, biases_load_1_reg_675, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_128_p0 <= biases_load_1_reg_675;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_128_p0 <= biases_load_reg_659;
            else 
                grp_fu_128_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_128_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_20451_p_ce <= ap_const_logic_1;
    grp_fu_20451_p_din0 <= grp_fu_128_p0;
    i_cast7074_fu_145_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),64));
    icmp_ln22_fu_139_p2 <= "1" when (unsigned(ap_sig_allocacmp_i_2) < unsigned(ap_const_lv4_A)) else "0";
    icmp_ln24_1_fu_238_p2 <= "1" when (signed(sub_ln24_1_fu_232_p2) > signed(ap_const_lv12_8)) else "0";
    icmp_ln24_2_fu_264_p2 <= "1" when (sub_ln24_1_fu_232_p2 = ap_const_lv12_8) else "0";
    icmp_ln24_3_fu_323_p2 <= "1" when (unsigned(select_ln24_1_reg_718) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln24_4_fu_284_p2 <= "1" when (tmp_3919_fu_274_p4 = ap_const_lv8_0) else "0";
    icmp_ln24_5_fu_458_p2 <= "1" when (trunc_ln24_5_reg_741 = ap_const_lv63_0) else "0";
    icmp_ln24_6_fu_469_p2 <= "1" when (signed(sub_ln24_4_fu_463_p2) > signed(ap_const_lv12_8)) else "0";
    icmp_ln24_7_fu_495_p2 <= "1" when (sub_ln24_4_fu_463_p2 = ap_const_lv12_8) else "0";
    icmp_ln24_8_fu_524_p2 <= "1" when (unsigned(select_ln24_5_reg_783) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln24_9_fu_515_p2 <= "1" when (tmp_3922_fu_505_p4 = ap_const_lv8_0) else "0";
    icmp_ln24_fu_227_p2 <= "1" when (trunc_ln24_reg_681 = ap_const_lv63_0) else "0";
    or_ln22_fu_150_p2 <= (i_2_reg_639 or ap_const_lv4_1);
    or_ln24_1_fu_609_p2 <= (icmp_ln24_7_reg_789 or icmp_ln24_5_reg_771);
    or_ln24_fu_408_p2 <= (icmp_ln24_reg_706 or icmp_ln24_2_reg_724);
    select_ln24_10_fu_423_p3 <= 
        select_ln24_2_fu_360_p3 when (and_ln24_1_fu_418_p2(0) = '1') else 
        select_ln24_9_fu_401_p3;
    select_ln24_11_fu_585_p3 <= 
        ap_const_lv16_0 when (icmp_ln24_5_reg_771(0) = '1') else 
        select_ln24_7_fu_578_p3;
    select_ln24_12_fu_602_p3 <= 
        trunc_ln24_7_reg_795 when (and_ln24_2_fu_597_p2(0) = '1') else 
        select_ln24_11_fu_585_p3;
    select_ln24_13_fu_624_p3 <= 
        select_ln24_6_fu_561_p3 when (and_ln24_3_fu_619_p2(0) = '1') else 
        select_ln24_12_fu_602_p3;
    select_ln24_14_fu_352_p3 <= 
        ap_const_lv16_FFFF when (tmp_3918_fu_344_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln24_15_fu_553_p3 <= 
        ap_const_lv16_FFFF when (tmp_3921_fu_545_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln24_1_fu_256_p3 <= 
        add_ln24_fu_244_p2 when (icmp_ln24_1_fu_238_p2(0) = '1') else 
        sub_ln24_2_fu_250_p2;
    select_ln24_2_fu_360_p3 <= 
        trunc_ln24_3_fu_337_p1 when (icmp_ln24_3_fu_323_p2(0) = '1') else 
        select_ln24_14_fu_352_p3;
    select_ln24_3_fu_377_p3 <= 
        shl_ln24_fu_372_p2 when (icmp_ln24_4_reg_736(0) = '1') else 
        ap_const_lv16_0;
    select_ln24_4_fu_451_p3 <= 
        sub_ln24_3_fu_445_p2 when (tmp_3920_reg_746(0) = '1') else 
        zext_ln24_5_fu_441_p1;
    select_ln24_5_fu_487_p3 <= 
        add_ln24_1_fu_475_p2 when (icmp_ln24_6_fu_469_p2(0) = '1') else 
        sub_ln24_5_fu_481_p2;
    select_ln24_6_fu_561_p3 <= 
        trunc_ln24_8_fu_538_p1 when (icmp_ln24_8_fu_524_p2(0) = '1') else 
        select_ln24_15_fu_553_p3;
    select_ln24_7_fu_578_p3 <= 
        shl_ln24_1_fu_573_p2 when (icmp_ln24_9_reg_801(0) = '1') else 
        ap_const_lv16_0;
    select_ln24_8_fu_384_p3 <= 
        ap_const_lv16_0 when (icmp_ln24_reg_706(0) = '1') else 
        select_ln24_3_fu_377_p3;
    select_ln24_9_fu_401_p3 <= 
        trunc_ln24_2_reg_730 when (and_ln24_fu_396_p2(0) = '1') else 
        select_ln24_8_fu_384_p3;
    select_ln24_fu_220_p3 <= 
        sub_ln24_fu_214_p2 when (tmp_reg_686(0) = '1') else 
        zext_ln24_1_fu_210_p1;
        sext_ln24_2_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln24_5_reg_783),32));

    sext_ln24_2cast_fu_569_p1 <= sext_ln24_2_fu_521_p1(16 - 1 downto 0);
        sext_ln24_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln24_1_reg_718),32));

    sext_ln24cast_fu_368_p1 <= sext_ln24_fu_320_p1(16 - 1 downto 0);
    shl_ln24_1_fu_573_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln24_7_reg_795),to_integer(unsigned('0' & sext_ln24_2cast_fu_569_p1(16-1 downto 0)))));
    shl_ln24_fu_372_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln24_2_reg_730),to_integer(unsigned('0' & sext_ln24cast_fu_368_p1(16-1 downto 0)))));
    sub_ln24_1_fu_232_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln24_fu_200_p1));
    sub_ln24_2_fu_250_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(sub_ln24_1_fu_232_p2));
    sub_ln24_3_fu_445_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln24_5_fu_441_p1));
    sub_ln24_4_fu_463_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln24_3_fu_431_p1));
    sub_ln24_5_fu_481_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(sub_ln24_4_fu_463_p2));
    sub_ln24_fu_214_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln24_1_fu_210_p1));

    sum_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, i_cast7074_reg_649_pp0_iter2_reg, zext_ln24_4_reg_665_pp0_iter2_reg, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                sum_address0 <= zext_ln24_4_reg_665_pp0_iter2_reg(4 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                sum_address0 <= i_cast7074_reg_649_pp0_iter2_reg(4 - 1 downto 0);
            else 
                sum_address0 <= "XXXX";
            end if;
        else 
            sum_address0 <= "XXXX";
        end if; 
    end process;


    sum_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            sum_ce0 <= ap_const_logic_1;
        else 
            sum_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, select_ln24_10_reg_761, select_ln24_13_reg_806, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                sum_d0 <= select_ln24_13_reg_806;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                sum_d0 <= select_ln24_10_reg_761;
            else 
                sum_d0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            sum_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            sum_we0 <= ap_const_logic_1;
        else 
            sum_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_3918_fu_344_p3 <= bitcast_ln724_786_fu_341_p1(31 downto 31);
    tmp_3919_fu_274_p4 <= select_ln24_1_fu_256_p3(11 downto 4);
    tmp_3921_fu_545_p3 <= bitcast_ln724_788_fu_542_p1(31 downto 31);
    tmp_3922_fu_505_p4 <= select_ln24_5_fu_487_p3(11 downto 4);
    trunc_ln24_1_fu_196_p1 <= bitcast_ln724_fu_170_p1(52 - 1 downto 0);
    trunc_ln24_2_fu_270_p1 <= select_ln24_fu_220_p3(16 - 1 downto 0);
    trunc_ln24_3_fu_337_p1 <= ashr_ln24_fu_332_p2(16 - 1 downto 0);
    trunc_ln24_5_fu_294_p1 <= bitcast_ln724_2_fu_290_p1(63 - 1 downto 0);
    trunc_ln24_6_fu_316_p1 <= bitcast_ln724_2_fu_290_p1(52 - 1 downto 0);
    trunc_ln24_7_fu_501_p1 <= select_ln24_4_fu_451_p3(16 - 1 downto 0);
    trunc_ln24_8_fu_538_p1 <= ashr_ln24_1_fu_533_p2(16 - 1 downto 0);
    trunc_ln24_fu_174_p1 <= bitcast_ln724_fu_170_p1(63 - 1 downto 0);
    xor_ln24_1_fu_412_p2 <= (or_ln24_fu_408_p2 xor ap_const_lv1_1);
    xor_ln24_2_fu_592_p2 <= (icmp_ln24_5_reg_771 xor ap_const_lv1_1);
    xor_ln24_3_fu_613_p2 <= (or_ln24_1_fu_609_p2 xor ap_const_lv1_1);
    xor_ln24_fu_391_p2 <= (icmp_ln24_reg_706 xor ap_const_lv1_1);
    zext_ln24_1_cast_fu_203_p3 <= (ap_const_lv1_1 & trunc_ln24_1_reg_696);
    zext_ln24_1_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln24_1_cast_fu_203_p3),54));
    zext_ln24_2_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln24_fu_320_p1),54));
    zext_ln24_3_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_65_reg_751),12));
    zext_ln24_4_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln22_fu_150_p2),64));
    zext_ln24_5_cast_fu_434_p3 <= (ap_const_lv1_1 & trunc_ln24_6_reg_756);
    zext_ln24_5_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln24_5_cast_fu_434_p3),54));
    zext_ln24_6_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln24_2_fu_521_p1),54));
    zext_ln24_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_reg_691),12));
end behav;
