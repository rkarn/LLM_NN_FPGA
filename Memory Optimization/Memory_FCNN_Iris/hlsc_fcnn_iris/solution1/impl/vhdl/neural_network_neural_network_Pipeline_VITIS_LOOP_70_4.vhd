-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network_neural_network_Pipeline_VITIS_LOOP_70_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer1_output_3_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    layer1_output_3_ce0 : OUT STD_LOGIC;
    layer1_output_3_we0 : OUT STD_LOGIC;
    layer1_output_3_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    layer1_output_2_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    layer1_output_2_ce0 : OUT STD_LOGIC;
    layer1_output_2_we0 : OUT STD_LOGIC;
    layer1_output_2_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    layer1_output_1_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    layer1_output_1_ce0 : OUT STD_LOGIC;
    layer1_output_1_we0 : OUT STD_LOGIC;
    layer1_output_1_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    layer1_output_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    layer1_output_ce0 : OUT STD_LOGIC;
    layer1_output_we0 : OUT STD_LOGIC;
    layer1_output_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (2 downto 0);
    layer1_weight_tile_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    sext_ln74 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_1_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_1_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    sext_ln74_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_2_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_2_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    sext_ln74_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_3_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_3_q0 : IN STD_LOGIC_VECTOR (8 downto 0);
    sext_ln74_3 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of neural_network_neural_network_Pipeline_VITIS_LOOP_70_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln70_reg_500 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer1_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer1_bias_ce0 : STD_LOGIC;
    signal layer1_bias_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln74_3_cast_fu_235_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_3_cast_reg_470 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_2_cast_fu_239_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_2_cast_reg_475 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_1_cast_fu_243_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_1_cast_reg_480 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_cast_fu_247_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_cast_reg_485 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_reg_490 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_490_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln70_2_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_495 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln70_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln70_fu_278_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_504 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_504_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_504_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_504_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal layer1_weight_tile_load_reg_523 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal layer1_weight_tile_2_load_reg_533 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_8_reg_538 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_reg_563 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_563_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal layer1_bias_load_reg_583 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln72_fu_404_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln72_reg_589 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln14_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_594 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln70_fu_327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_1_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal i_1_fu_84 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln70_1_fu_272_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln14_fu_423_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal mul_ln74_fu_294_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln74_fu_294_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln70_fu_323_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_340_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_433_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_fu_340_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_357_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_441_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_357_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_374_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_449_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln3_fu_386_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln76_fu_383_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_374_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln76_1_fu_395_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln3_fu_386_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum_2_fu_398_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_433_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_433_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_441_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_441_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_449_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_449_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component neural_network_mul_9s_16s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_9s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_4_layer1_bias_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component neural_network_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    layer1_bias_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_4_layer1_bias_ROM_AUTO_1R
    generic map (
        DataWidth => 7,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_bias_address0,
        ce0 => layer1_bias_ce0,
        q0 => layer1_bias_q0);

    mul_9s_16s_24_1_1_U7 : component neural_network_mul_9s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => layer1_weight_tile_load_reg_523,
        din1 => mul_ln74_fu_294_p1,
        dout => mul_ln74_fu_294_p2);

    mac_muladd_9s_16s_24ns_24_4_1_U8 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_1_q0,
        din1 => grp_fu_433_p1,
        din2 => grp_fu_433_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_433_p3);

    mac_muladd_9s_16s_24ns_24_4_1_U9 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_2_load_reg_533,
        din1 => grp_fu_441_p1,
        din2 => grp_fu_441_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_441_p3);

    mac_muladd_9s_16s_24ns_24_4_1_U10 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_3_q0,
        din1 => grp_fu_449_p1,
        din2 => grp_fu_449_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_449_p3);

    flow_control_loop_pipe_sequential_init_U : component neural_network_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln70_fu_266_p2 = ap_const_lv1_0))) then 
                    i_1_fu_84 <= add_ln70_1_fu_272_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_84 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln72_reg_589 <= add_ln72_fu_404_p2;
                i_reg_490 <= ap_sig_allocacmp_i;
                i_reg_490_pp0_iter1_reg <= i_reg_490;
                icmp_ln14_reg_594 <= icmp_ln14_fu_410_p2;
                icmp_ln70_reg_500 <= icmp_ln70_fu_266_p2;
                sext_ln74_1_cast_reg_480 <= sext_ln74_1_cast_fu_243_p1;
                sext_ln74_2_cast_reg_475 <= sext_ln74_2_cast_fu_239_p1;
                sext_ln74_3_cast_reg_470 <= sext_ln74_3_cast_fu_235_p1;
                sext_ln74_cast_reg_485 <= sext_ln74_cast_fu_247_p1;
                tmp_8_reg_538 <= mul_ln74_fu_294_p2(23 downto 8);
                tmp_reg_563 <= add_ln70_fu_323_p2(2 downto 2);
                tmp_reg_563_pp0_iter3_reg <= tmp_reg_563;
                trunc_ln70_reg_504_pp0_iter1_reg <= trunc_ln70_reg_504;
                trunc_ln70_reg_504_pp0_iter2_reg <= trunc_ln70_reg_504_pp0_iter1_reg;
                trunc_ln70_reg_504_pp0_iter3_reg <= trunc_ln70_reg_504_pp0_iter2_reg;
                    zext_ln70_2_reg_495(2 downto 0) <= zext_ln70_2_fu_259_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                layer1_bias_load_reg_583 <= layer1_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln70_reg_500 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                layer1_weight_tile_2_load_reg_533 <= layer1_weight_tile_2_q0;
                layer1_weight_tile_load_reg_523 <= layer1_weight_tile_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln70_fu_266_p2 = ap_const_lv1_0))) then
                trunc_ln70_reg_504 <= trunc_ln70_fu_278_p1;
            end if;
        end if;
    end process;
    zext_ln70_2_reg_495(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to3, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln70_1_fu_272_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv3_1));
    add_ln70_fu_323_p2 <= std_logic_vector(unsigned(i_reg_490_pp0_iter1_reg) + unsigned(trunc_ln));
    add_ln72_fu_404_p2 <= std_logic_vector(unsigned(zext_ln76_1_fu_395_p1) + unsigned(trunc_ln3_fu_386_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln70_reg_500)
    begin
        if (((icmp_ln70_reg_500 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_1_fu_84, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_84;
        end if; 
    end process;

    grp_fu_433_p1 <= sext_ln74_1_cast_reg_480(16 - 1 downto 0);
    grp_fu_433_p2 <= (tmp_8_reg_538 & ap_const_lv8_0);
    grp_fu_441_p1 <= sext_ln74_2_cast_reg_475(16 - 1 downto 0);
    grp_fu_441_p2 <= (tmp_9_fu_340_p4 & ap_const_lv8_0);
    grp_fu_449_p1 <= sext_ln74_3_cast_reg_470(16 - 1 downto 0);
    grp_fu_449_p2 <= (tmp_s_fu_357_p4 & ap_const_lv8_0);
    icmp_ln14_fu_410_p2 <= "1" when (signed(sum_2_fu_398_p2) > signed(ap_const_lv16_0)) else "0";
    icmp_ln70_fu_266_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv3_4) else "0";
    layer1_bias_address0 <= zext_ln70_fu_327_p1(3 - 1 downto 0);

    layer1_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_bias_ce0 <= ap_const_logic_1;
        else 
            layer1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_1_address0 <= zext_ln70_1_fu_416_p1(1 - 1 downto 0);

    layer1_output_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer1_output_1_ce0 <= ap_const_logic_1;
        else 
            layer1_output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_1_d0 <= select_ln14_fu_423_p3;

    layer1_output_1_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, trunc_ln70_reg_504_pp0_iter3_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln70_reg_504_pp0_iter3_reg = ap_const_lv2_1))) then 
            layer1_output_1_we0 <= ap_const_logic_1;
        else 
            layer1_output_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_2_address0 <= zext_ln70_1_fu_416_p1(1 - 1 downto 0);

    layer1_output_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer1_output_2_ce0 <= ap_const_logic_1;
        else 
            layer1_output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_2_d0 <= select_ln14_fu_423_p3;

    layer1_output_2_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, trunc_ln70_reg_504_pp0_iter3_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln70_reg_504_pp0_iter3_reg = ap_const_lv2_2))) then 
            layer1_output_2_we0 <= ap_const_logic_1;
        else 
            layer1_output_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_3_address0 <= zext_ln70_1_fu_416_p1(1 - 1 downto 0);

    layer1_output_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer1_output_3_ce0 <= ap_const_logic_1;
        else 
            layer1_output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_3_d0 <= select_ln14_fu_423_p3;

    layer1_output_3_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, trunc_ln70_reg_504_pp0_iter3_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln70_reg_504_pp0_iter3_reg = ap_const_lv2_3))) then 
            layer1_output_3_we0 <= ap_const_logic_1;
        else 
            layer1_output_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_address0 <= zext_ln70_1_fu_416_p1(1 - 1 downto 0);

    layer1_output_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            layer1_output_ce0 <= ap_const_logic_1;
        else 
            layer1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_d0 <= select_ln14_fu_423_p3;

    layer1_output_we0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, trunc_ln70_reg_504_pp0_iter3_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (trunc_ln70_reg_504_pp0_iter3_reg = ap_const_lv2_0))) then 
            layer1_output_we0 <= ap_const_logic_1;
        else 
            layer1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_1_address0 <= zext_ln70_2_fu_259_p1(2 - 1 downto 0);

    layer1_weight_tile_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_1_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_2_address0 <= zext_ln70_2_fu_259_p1(2 - 1 downto 0);

    layer1_weight_tile_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_2_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_3_address0 <= zext_ln70_2_reg_495(2 - 1 downto 0);

    layer1_weight_tile_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_3_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_address0 <= zext_ln70_2_fu_259_p1(2 - 1 downto 0);

    layer1_weight_tile_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weight_tile_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln74_fu_294_p1 <= sext_ln74_cast_reg_485(16 - 1 downto 0);
    select_ln14_fu_423_p3 <= 
        add_ln72_reg_589 when (icmp_ln14_reg_594(0) = '1') else 
        ap_const_lv15_0;
        sext_ln74_1_cast_fu_243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_1),24));

        sext_ln74_2_cast_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_2),24));

        sext_ln74_3_cast_fu_235_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_3),24));

        sext_ln74_cast_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74),24));

    sum_2_fu_398_p2 <= std_logic_vector(unsigned(zext_ln76_fu_383_p1) + unsigned(sum_fu_374_p4));
    sum_fu_374_p1 <= grp_fu_449_p3;
    sum_fu_374_p4 <= sum_fu_374_p1(23 downto 8);
    tmp_9_fu_340_p1 <= grp_fu_433_p3;
    tmp_9_fu_340_p4 <= tmp_9_fu_340_p1(23 downto 8);
    tmp_s_fu_357_p1 <= grp_fu_441_p3;
    tmp_s_fu_357_p4 <= tmp_s_fu_357_p1(23 downto 8);
    trunc_ln3_fu_386_p1 <= grp_fu_449_p3;
    trunc_ln3_fu_386_p4 <= trunc_ln3_fu_386_p1(22 downto 8);
    trunc_ln70_fu_278_p1 <= ap_sig_allocacmp_i(2 - 1 downto 0);
    zext_ln70_1_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_reg_563_pp0_iter3_reg),64));
    zext_ln70_2_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
    zext_ln70_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_fu_323_p2),64));
    zext_ln76_1_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer1_bias_load_reg_583),15));
    zext_ln76_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer1_bias_load_reg_583),16));
end behav;
