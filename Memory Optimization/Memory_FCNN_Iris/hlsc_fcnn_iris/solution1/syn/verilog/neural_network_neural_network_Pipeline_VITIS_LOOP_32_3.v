// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_32_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_0_i,
        output_0_o,
        output_0_o_ap_vld,
        output_2_i,
        output_2_o,
        output_2_o_ap_vld,
        output_1_i,
        output_1_o,
        output_1_o_ap_vld,
        sext_ln34_1
);

parameter    ap_ST_fsm_state1 = 30'd1;
parameter    ap_ST_fsm_state2 = 30'd2;
parameter    ap_ST_fsm_state3 = 30'd4;
parameter    ap_ST_fsm_state4 = 30'd8;
parameter    ap_ST_fsm_state5 = 30'd16;
parameter    ap_ST_fsm_state6 = 30'd32;
parameter    ap_ST_fsm_state7 = 30'd64;
parameter    ap_ST_fsm_state8 = 30'd128;
parameter    ap_ST_fsm_state9 = 30'd256;
parameter    ap_ST_fsm_state10 = 30'd512;
parameter    ap_ST_fsm_state11 = 30'd1024;
parameter    ap_ST_fsm_state12 = 30'd2048;
parameter    ap_ST_fsm_state13 = 30'd4096;
parameter    ap_ST_fsm_state14 = 30'd8192;
parameter    ap_ST_fsm_state15 = 30'd16384;
parameter    ap_ST_fsm_state16 = 30'd32768;
parameter    ap_ST_fsm_state17 = 30'd65536;
parameter    ap_ST_fsm_state18 = 30'd131072;
parameter    ap_ST_fsm_state19 = 30'd262144;
parameter    ap_ST_fsm_state20 = 30'd524288;
parameter    ap_ST_fsm_state21 = 30'd1048576;
parameter    ap_ST_fsm_state22 = 30'd2097152;
parameter    ap_ST_fsm_state23 = 30'd4194304;
parameter    ap_ST_fsm_state24 = 30'd8388608;
parameter    ap_ST_fsm_state25 = 30'd16777216;
parameter    ap_ST_fsm_state26 = 30'd33554432;
parameter    ap_ST_fsm_state27 = 30'd67108864;
parameter    ap_ST_fsm_state28 = 30'd134217728;
parameter    ap_ST_fsm_state29 = 30'd268435456;
parameter    ap_ST_fsm_state30 = 30'd536870912;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] output_0_i;
output  [15:0] output_0_o;
output   output_0_o_ap_vld;
input  [15:0] output_2_i;
output  [15:0] output_2_o;
output   output_2_o_ap_vld;
input  [15:0] output_1_i;
output  [15:0] output_1_o;
output   output_1_o_ap_vld;
input  [15:0] sext_ln34_1;

reg ap_idle;
reg[15:0] output_0_o;
reg output_0_o_ap_vld;
reg[15:0] output_2_o;
reg output_2_o_ap_vld;
reg[15:0] output_1_o;
reg output_1_o_ap_vld;

(* fsm_encoding = "none" *) reg   [29:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln32_fu_110_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state30;
wire    ap_block_state30_pp0_stage29_iter0;
reg   [1:0] i_2_reg_178;
reg   [0:0] icmp_ln32_reg_182;
wire   [1:0] add_ln32_fu_116_p2;
reg   [1:0] add_ln32_reg_186;
wire   [15:0] trunc_ln34_fu_158_p1;
reg   [15:0] trunc_ln34_reg_199;
wire    ap_CS_fsm_state29;
wire    ap_block_state29_pp0_stage28_iter0;
reg   [1:0] i_fu_46;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i_2;
wire   [0:0] icmp_ln34_fu_152_p2;
wire   [15:0] tmp_5_fu_122_p5;
wire   [23:0] shl_ln3_fu_134_p3;
wire  signed [24:0] grp_fu_146_p0;
wire   [24:0] grp_fu_146_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [29:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_ST_fsm_state2_blk;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_ST_fsm_state3_blk;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_ST_fsm_state4_blk;
wire    ap_block_state5_pp0_stage4_iter0;
wire    ap_ST_fsm_state5_blk;
wire    ap_block_state6_pp0_stage5_iter0;
wire    ap_ST_fsm_state6_blk;
wire    ap_block_state7_pp0_stage6_iter0;
wire    ap_ST_fsm_state7_blk;
wire    ap_block_state8_pp0_stage7_iter0;
wire    ap_ST_fsm_state8_blk;
wire    ap_block_state9_pp0_stage8_iter0;
wire    ap_ST_fsm_state9_blk;
wire    ap_block_state10_pp0_stage9_iter0;
wire    ap_ST_fsm_state10_blk;
wire    ap_block_state11_pp0_stage10_iter0;
wire    ap_ST_fsm_state11_blk;
wire    ap_block_state12_pp0_stage11_iter0;
wire    ap_ST_fsm_state12_blk;
wire    ap_block_state13_pp0_stage12_iter0;
wire    ap_ST_fsm_state13_blk;
wire    ap_block_state14_pp0_stage13_iter0;
wire    ap_ST_fsm_state14_blk;
wire    ap_block_state15_pp0_stage14_iter0;
wire    ap_ST_fsm_state15_blk;
wire    ap_block_state16_pp0_stage15_iter0;
wire    ap_ST_fsm_state16_blk;
wire    ap_block_state17_pp0_stage16_iter0;
wire    ap_ST_fsm_state17_blk;
wire    ap_block_state18_pp0_stage17_iter0;
wire    ap_ST_fsm_state18_blk;
wire    ap_block_state19_pp0_stage18_iter0;
wire    ap_ST_fsm_state19_blk;
wire    ap_block_state20_pp0_stage19_iter0;
wire    ap_ST_fsm_state20_blk;
wire    ap_block_state21_pp0_stage20_iter0;
wire    ap_ST_fsm_state21_blk;
wire    ap_block_state22_pp0_stage21_iter0;
wire    ap_ST_fsm_state22_blk;
wire    ap_block_state23_pp0_stage22_iter0;
wire    ap_ST_fsm_state23_blk;
wire    ap_block_state24_pp0_stage23_iter0;
wire    ap_ST_fsm_state24_blk;
wire    ap_block_state25_pp0_stage24_iter0;
wire    ap_ST_fsm_state25_blk;
wire    ap_block_state26_pp0_stage25_iter0;
wire    ap_ST_fsm_state26_blk;
wire    ap_block_state27_pp0_stage26_iter0;
wire    ap_ST_fsm_state27_blk;
wire    ap_block_state28_pp0_stage27_iter0;
wire    ap_ST_fsm_state28_blk;
wire    ap_ST_fsm_state29_blk;
wire    ap_ST_fsm_state30_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 30'd1;
#0 ap_done_reg = 1'b0;
end

neural_network_mux_3_2_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_3_2_16_1_1_U78(
    .din0(output_0_i),
    .din1(output_1_i),
    .din2(output_2_i),
    .din3(ap_sig_allocacmp_i_2),
    .dout(tmp_5_fu_122_p5)
);

neural_network_sdiv_25s_16s_25_29_1 #(
    .ID( 1 ),
    .NUM_STAGE( 29 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 25 ))
sdiv_25s_16s_25_29_1_U79(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_146_p0),
    .din1(sext_ln34_1),
    .ce(1'b1),
    .dout(grp_fu_146_p2)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        i_fu_46 <= 2'd0;
    end else if (((icmp_ln32_reg_182 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
        i_fu_46 <= add_ln32_reg_186;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        add_ln32_reg_186 <= add_ln32_fu_116_p2;
        i_2_reg_178 <= ap_sig_allocacmp_i_2;
        icmp_ln32_reg_182 <= icmp_ln32_fu_110_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        trunc_ln34_reg_199 <= trunc_ln34_fu_158_p1;
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

assign ap_ST_fsm_state13_blk = 1'b0;

assign ap_ST_fsm_state14_blk = 1'b0;

assign ap_ST_fsm_state15_blk = 1'b0;

assign ap_ST_fsm_state16_blk = 1'b0;

assign ap_ST_fsm_state17_blk = 1'b0;

assign ap_ST_fsm_state18_blk = 1'b0;

assign ap_ST_fsm_state19_blk = 1'b0;

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state20_blk = 1'b0;

assign ap_ST_fsm_state21_blk = 1'b0;

assign ap_ST_fsm_state22_blk = 1'b0;

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state24_blk = 1'b0;

assign ap_ST_fsm_state25_blk = 1'b0;

assign ap_ST_fsm_state26_blk = 1'b0;

assign ap_ST_fsm_state27_blk = 1'b0;

assign ap_ST_fsm_state28_blk = 1'b0;

assign ap_ST_fsm_state29_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state30_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln32_fu_110_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_46;
    end
end

always @ (*) begin
    if ((i_2_reg_178 == 2'd0)) begin
        if (((icmp_ln32_reg_182 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
            output_0_o = trunc_ln34_reg_199;
        end else if (((1'b1 == ap_CS_fsm_state29) & (icmp_ln34_fu_152_p2 == 1'd1))) begin
            output_0_o = 16'd0;
        end else begin
            output_0_o = output_0_i;
        end
    end else begin
        output_0_o = output_0_i;
    end
end

always @ (*) begin
    if ((((icmp_ln32_reg_182 == 1'd0) & (i_2_reg_178 == 2'd0) & (1'b1 == ap_CS_fsm_state30)) | ((i_2_reg_178 == 2'd0) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln34_fu_152_p2 == 1'd1)))) begin
        output_0_o_ap_vld = 1'b1;
    end else begin
        output_0_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((i_2_reg_178 == 2'd1)) begin
        if (((icmp_ln32_reg_182 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
            output_1_o = trunc_ln34_reg_199;
        end else if (((1'b1 == ap_CS_fsm_state29) & (icmp_ln34_fu_152_p2 == 1'd1))) begin
            output_1_o = 16'd0;
        end else begin
            output_1_o = output_1_i;
        end
    end else begin
        output_1_o = output_1_i;
    end
end

always @ (*) begin
    if ((((icmp_ln32_reg_182 == 1'd0) & (i_2_reg_178 == 2'd1) & (1'b1 == ap_CS_fsm_state30)) | ((i_2_reg_178 == 2'd1) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln34_fu_152_p2 == 1'd1)))) begin
        output_1_o_ap_vld = 1'b1;
    end else begin
        output_1_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(i_2_reg_178 == 2'd0) & ~(i_2_reg_178 == 2'd1))) begin
        if (((icmp_ln32_reg_182 == 1'd0) & (1'b1 == ap_CS_fsm_state30))) begin
            output_2_o = trunc_ln34_reg_199;
        end else if (((1'b1 == ap_CS_fsm_state29) & (icmp_ln34_fu_152_p2 == 1'd1))) begin
            output_2_o = 16'd0;
        end else begin
            output_2_o = output_2_i;
        end
    end else begin
        output_2_o = output_2_i;
    end
end

always @ (*) begin
    if (((~(i_2_reg_178 == 2'd0) & ~(i_2_reg_178 == 2'd1) & (icmp_ln32_reg_182 == 1'd0) & (1'b1 == ap_CS_fsm_state30)) | (~(i_2_reg_178 == 2'd0) & ~(i_2_reg_178 == 2'd1) & (1'b1 == ap_CS_fsm_state29) & (icmp_ln34_fu_152_p2 == 1'd1)))) begin
        output_2_o_ap_vld = 1'b1;
    end else begin
        output_2_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln32_fu_110_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_fu_116_p2 = (ap_sig_allocacmp_i_2 + 2'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state20_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage25_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage26_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage27_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage28_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage29_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_146_p0 = $signed(shl_ln3_fu_134_p3);

assign icmp_ln32_fu_110_p2 = ((ap_sig_allocacmp_i_2 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_152_p2 = ((grp_fu_146_p2 == 25'd0) ? 1'b1 : 1'b0);

assign shl_ln3_fu_134_p3 = {{tmp_5_fu_122_p5}, {8'd0}};

assign trunc_ln34_fu_158_p1 = grp_fu_146_p2[15:0];

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_32_3
