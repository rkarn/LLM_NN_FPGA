// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_70_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer1_output_3_address0,
        layer1_output_3_ce0,
        layer1_output_3_we0,
        layer1_output_3_d0,
        layer1_output_2_address0,
        layer1_output_2_ce0,
        layer1_output_2_we0,
        layer1_output_2_d0,
        layer1_output_1_address0,
        layer1_output_1_ce0,
        layer1_output_1_we0,
        layer1_output_1_d0,
        layer1_output_address0,
        layer1_output_ce0,
        layer1_output_we0,
        layer1_output_d0,
        trunc_ln,
        layer1_weight_tile_address0,
        layer1_weight_tile_ce0,
        layer1_weight_tile_q0,
        sext_ln74,
        layer1_weight_tile_1_address0,
        layer1_weight_tile_1_ce0,
        layer1_weight_tile_1_q0,
        sext_ln74_1,
        layer1_weight_tile_2_address0,
        layer1_weight_tile_2_ce0,
        layer1_weight_tile_2_q0,
        sext_ln74_2,
        layer1_weight_tile_3_address0,
        layer1_weight_tile_3_ce0,
        layer1_weight_tile_3_q0,
        sext_ln74_3
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [0:0] layer1_output_3_address0;
output   layer1_output_3_ce0;
output   layer1_output_3_we0;
output  [14:0] layer1_output_3_d0;
output  [0:0] layer1_output_2_address0;
output   layer1_output_2_ce0;
output   layer1_output_2_we0;
output  [14:0] layer1_output_2_d0;
output  [0:0] layer1_output_1_address0;
output   layer1_output_1_ce0;
output   layer1_output_1_we0;
output  [14:0] layer1_output_1_d0;
output  [0:0] layer1_output_address0;
output   layer1_output_ce0;
output   layer1_output_we0;
output  [14:0] layer1_output_d0;
input  [2:0] trunc_ln;
output  [1:0] layer1_weight_tile_address0;
output   layer1_weight_tile_ce0;
input  [8:0] layer1_weight_tile_q0;
input  [15:0] sext_ln74;
output  [1:0] layer1_weight_tile_1_address0;
output   layer1_weight_tile_1_ce0;
input  [8:0] layer1_weight_tile_1_q0;
input  [15:0] sext_ln74_1;
output  [1:0] layer1_weight_tile_2_address0;
output   layer1_weight_tile_2_ce0;
input  [8:0] layer1_weight_tile_2_q0;
input  [15:0] sext_ln74_2;
output  [1:0] layer1_weight_tile_3_address0;
output   layer1_weight_tile_3_ce0;
input  [8:0] layer1_weight_tile_3_q0;
input  [15:0] sext_ln74_3;

reg ap_idle;
reg layer1_output_3_ce0;
reg layer1_output_3_we0;
reg layer1_output_2_ce0;
reg layer1_output_2_we0;
reg layer1_output_1_ce0;
reg layer1_output_1_we0;
reg layer1_output_ce0;
reg layer1_output_we0;
reg layer1_weight_tile_ce0;
reg layer1_weight_tile_1_ce0;
reg layer1_weight_tile_2_ce0;
reg layer1_weight_tile_3_ce0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln70_reg_500;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [2:0] layer1_bias_address0;
reg    layer1_bias_ce0;
wire   [6:0] layer1_bias_q0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire  signed [23:0] sext_ln74_3_cast_fu_235_p1;
reg  signed [23:0] sext_ln74_3_cast_reg_470;
wire  signed [23:0] sext_ln74_2_cast_fu_239_p1;
reg  signed [23:0] sext_ln74_2_cast_reg_475;
wire  signed [23:0] sext_ln74_1_cast_fu_243_p1;
reg  signed [23:0] sext_ln74_1_cast_reg_480;
wire  signed [23:0] sext_ln74_cast_fu_247_p1;
reg  signed [23:0] sext_ln74_cast_reg_485;
reg   [2:0] i_reg_490;
reg   [2:0] i_reg_490_pp0_iter1_reg;
wire   [63:0] zext_ln70_2_fu_259_p1;
reg   [63:0] zext_ln70_2_reg_495;
wire   [0:0] icmp_ln70_fu_266_p2;
wire   [1:0] trunc_ln70_fu_278_p1;
reg   [1:0] trunc_ln70_reg_504;
reg   [1:0] trunc_ln70_reg_504_pp0_iter1_reg;
reg   [1:0] trunc_ln70_reg_504_pp0_iter2_reg;
reg   [1:0] trunc_ln70_reg_504_pp0_iter3_reg;
reg  signed [8:0] layer1_weight_tile_load_reg_523;
wire    ap_block_pp0_stage1_11001;
reg  signed [8:0] layer1_weight_tile_2_load_reg_533;
reg   [15:0] tmp_8_reg_538;
reg   [0:0] tmp_reg_563;
reg   [0:0] tmp_reg_563_pp0_iter3_reg;
reg   [6:0] layer1_bias_load_reg_583;
wire   [14:0] add_ln72_fu_404_p2;
reg   [14:0] add_ln72_reg_589;
wire   [0:0] icmp_ln14_fu_410_p2;
reg   [0:0] icmp_ln14_reg_594;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln70_fu_327_p1;
wire   [63:0] zext_ln70_1_fu_416_p1;
wire    ap_block_pp0_stage1;
reg   [2:0] i_1_fu_84;
wire   [2:0] add_ln70_1_fu_272_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i;
wire   [14:0] select_ln14_fu_423_p3;
wire  signed [15:0] mul_ln74_fu_294_p1;
wire   [23:0] mul_ln74_fu_294_p2;
wire   [2:0] add_ln70_fu_323_p2;
wire  signed [23:0] tmp_9_fu_340_p1;
wire   [23:0] grp_fu_433_p3;
wire   [15:0] tmp_9_fu_340_p4;
wire  signed [23:0] tmp_s_fu_357_p1;
wire   [23:0] grp_fu_441_p3;
wire   [15:0] tmp_s_fu_357_p4;
wire  signed [23:0] sum_fu_374_p1;
wire   [23:0] grp_fu_449_p3;
wire  signed [23:0] trunc_ln3_fu_386_p1;
wire   [15:0] zext_ln76_fu_383_p1;
wire   [15:0] sum_fu_374_p4;
wire   [14:0] zext_ln76_1_fu_395_p1;
wire   [14:0] trunc_ln3_fu_386_p4;
wire   [15:0] sum_2_fu_398_p2;
wire  signed [15:0] grp_fu_433_p1;
wire   [23:0] grp_fu_433_p2;
wire  signed [15:0] grp_fu_441_p1;
wire   [23:0] grp_fu_441_p2;
wire  signed [15:0] grp_fu_449_p1;
wire   [23:0] grp_fu_449_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

neural_network_neural_network_Pipeline_VITIS_LOOP_70_4_layer1_bias_ROM_AUTO_1R #(
    .DataWidth( 7 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
layer1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_bias_address0),
    .ce0(layer1_bias_ce0),
    .q0(layer1_bias_q0)
);

neural_network_mul_9s_16s_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
mul_9s_16s_24_1_1_U7(
    .din0(layer1_weight_tile_load_reg_523),
    .din1(mul_ln74_fu_294_p1),
    .dout(mul_ln74_fu_294_p2)
);

neural_network_mac_muladd_9s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_16s_24ns_24_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_1_q0),
    .din1(grp_fu_433_p1),
    .din2(grp_fu_433_p2),
    .ce(1'b1),
    .dout(grp_fu_433_p3)
);

neural_network_mac_muladd_9s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_16s_24ns_24_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_2_load_reg_533),
    .din1(grp_fu_441_p1),
    .din2(grp_fu_441_p2),
    .ce(1'b1),
    .dout(grp_fu_441_p3)
);

neural_network_mac_muladd_9s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_16s_24ns_24_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_3_q0),
    .din1(grp_fu_449_p1),
    .din2(grp_fu_449_p2),
    .ce(1'b1),
    .dout(grp_fu_449_p3)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln70_fu_266_p2 == 1'd0))) begin
            i_1_fu_84 <= add_ln70_1_fu_272_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_84 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln72_reg_589 <= add_ln72_fu_404_p2;
        i_reg_490 <= ap_sig_allocacmp_i;
        i_reg_490_pp0_iter1_reg <= i_reg_490;
        icmp_ln14_reg_594 <= icmp_ln14_fu_410_p2;
        icmp_ln70_reg_500 <= icmp_ln70_fu_266_p2;
        sext_ln74_1_cast_reg_480 <= sext_ln74_1_cast_fu_243_p1;
        sext_ln74_2_cast_reg_475 <= sext_ln74_2_cast_fu_239_p1;
        sext_ln74_3_cast_reg_470 <= sext_ln74_3_cast_fu_235_p1;
        sext_ln74_cast_reg_485 <= sext_ln74_cast_fu_247_p1;
        tmp_8_reg_538 <= {{mul_ln74_fu_294_p2[23:8]}};
        tmp_reg_563 <= add_ln70_fu_323_p2[32'd2];
        tmp_reg_563_pp0_iter3_reg <= tmp_reg_563;
        trunc_ln70_reg_504_pp0_iter1_reg <= trunc_ln70_reg_504;
        trunc_ln70_reg_504_pp0_iter2_reg <= trunc_ln70_reg_504_pp0_iter1_reg;
        trunc_ln70_reg_504_pp0_iter3_reg <= trunc_ln70_reg_504_pp0_iter2_reg;
        zext_ln70_2_reg_495[2 : 0] <= zext_ln70_2_fu_259_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        layer1_bias_load_reg_583 <= layer1_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_reg_500 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_2_load_reg_533 <= layer1_weight_tile_2_q0;
        layer1_weight_tile_load_reg_523 <= layer1_weight_tile_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln70_fu_266_p2 == 1'd0))) begin
        trunc_ln70_reg_504 <= trunc_ln70_fu_278_p1;
    end
end

always @ (*) begin
    if (((icmp_ln70_reg_500 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 3'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_bias_ce0 = 1'b1;
    end else begin
        layer1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_output_1_ce0 = 1'b1;
    end else begin
        layer1_output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln70_reg_504_pp0_iter3_reg == 2'd1))) begin
        layer1_output_1_we0 = 1'b1;
    end else begin
        layer1_output_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_output_2_ce0 = 1'b1;
    end else begin
        layer1_output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln70_reg_504_pp0_iter3_reg == 2'd2))) begin
        layer1_output_2_we0 = 1'b1;
    end else begin
        layer1_output_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_output_3_ce0 = 1'b1;
    end else begin
        layer1_output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln70_reg_504_pp0_iter3_reg == 2'd3))) begin
        layer1_output_3_we0 = 1'b1;
    end else begin
        layer1_output_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_output_ce0 = 1'b1;
    end else begin
        layer1_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (trunc_ln70_reg_504_pp0_iter3_reg == 2'd0))) begin
        layer1_output_we0 = 1'b1;
    end else begin
        layer1_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_1_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_2_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_3_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln70_1_fu_272_p2 = (ap_sig_allocacmp_i + 3'd1);

assign add_ln70_fu_323_p2 = (i_reg_490_pp0_iter1_reg + trunc_ln);

assign add_ln72_fu_404_p2 = (zext_ln76_1_fu_395_p1 + trunc_ln3_fu_386_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign grp_fu_433_p1 = sext_ln74_1_cast_reg_480;

assign grp_fu_433_p2 = {{tmp_8_reg_538}, {8'd0}};

assign grp_fu_441_p1 = sext_ln74_2_cast_reg_475;

assign grp_fu_441_p2 = {{tmp_9_fu_340_p4}, {8'd0}};

assign grp_fu_449_p1 = sext_ln74_3_cast_reg_470;

assign grp_fu_449_p2 = {{tmp_s_fu_357_p4}, {8'd0}};

assign icmp_ln14_fu_410_p2 = (($signed(sum_2_fu_398_p2) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_266_p2 = ((ap_sig_allocacmp_i == 3'd4) ? 1'b1 : 1'b0);

assign layer1_bias_address0 = zext_ln70_fu_327_p1;

assign layer1_output_1_address0 = zext_ln70_1_fu_416_p1;

assign layer1_output_1_d0 = select_ln14_fu_423_p3;

assign layer1_output_2_address0 = zext_ln70_1_fu_416_p1;

assign layer1_output_2_d0 = select_ln14_fu_423_p3;

assign layer1_output_3_address0 = zext_ln70_1_fu_416_p1;

assign layer1_output_3_d0 = select_ln14_fu_423_p3;

assign layer1_output_address0 = zext_ln70_1_fu_416_p1;

assign layer1_output_d0 = select_ln14_fu_423_p3;

assign layer1_weight_tile_1_address0 = zext_ln70_2_fu_259_p1;

assign layer1_weight_tile_2_address0 = zext_ln70_2_fu_259_p1;

assign layer1_weight_tile_3_address0 = zext_ln70_2_reg_495;

assign layer1_weight_tile_address0 = zext_ln70_2_fu_259_p1;

assign mul_ln74_fu_294_p1 = sext_ln74_cast_reg_485;

assign select_ln14_fu_423_p3 = ((icmp_ln14_reg_594[0:0] == 1'b1) ? add_ln72_reg_589 : 15'd0);

assign sext_ln74_1_cast_fu_243_p1 = $signed(sext_ln74_1);

assign sext_ln74_2_cast_fu_239_p1 = $signed(sext_ln74_2);

assign sext_ln74_3_cast_fu_235_p1 = $signed(sext_ln74_3);

assign sext_ln74_cast_fu_247_p1 = $signed(sext_ln74);

assign sum_2_fu_398_p2 = (zext_ln76_fu_383_p1 + sum_fu_374_p4);

assign sum_fu_374_p1 = grp_fu_449_p3;

assign sum_fu_374_p4 = {{sum_fu_374_p1[23:8]}};

assign tmp_9_fu_340_p1 = grp_fu_433_p3;

assign tmp_9_fu_340_p4 = {{tmp_9_fu_340_p1[23:8]}};

assign tmp_s_fu_357_p1 = grp_fu_441_p3;

assign tmp_s_fu_357_p4 = {{tmp_s_fu_357_p1[23:8]}};

assign trunc_ln3_fu_386_p1 = grp_fu_449_p3;

assign trunc_ln3_fu_386_p4 = {{trunc_ln3_fu_386_p1[22:8]}};

assign trunc_ln70_fu_278_p1 = ap_sig_allocacmp_i[1:0];

assign zext_ln70_1_fu_416_p1 = tmp_reg_563_pp0_iter3_reg;

assign zext_ln70_2_fu_259_p1 = ap_sig_allocacmp_i;

assign zext_ln70_fu_327_p1 = add_ln70_fu_323_p2;

assign zext_ln76_1_fu_395_p1 = layer1_bias_load_reg_583;

assign zext_ln76_fu_383_p1 = layer1_bias_load_reg_583;

always @ (posedge ap_clk) begin
    zext_ln70_2_reg_495[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_70_4
