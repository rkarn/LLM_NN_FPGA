// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_26_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_0,
        output_0_ap_vld,
        output_2,
        output_2_ap_vld,
        output_1,
        output_1_ap_vld,
        conv_i_i_le8_lcssa15,
        conv_i_i_le10_lcssa17,
        conv_i_i_le12_lcssa19,
        conv_i_i13_i_i10,
        sum_2_out,
        sum_2_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] output_0;
output   output_0_ap_vld;
output  [15:0] output_2;
output   output_2_ap_vld;
output  [15:0] output_1;
output   output_1_ap_vld;
input  [15:0] conv_i_i_le8_lcssa15;
input  [15:0] conv_i_i_le10_lcssa17;
input  [15:0] conv_i_i_le12_lcssa19;
input  [15:0] conv_i_i13_i_i10;
output  [15:0] sum_2_out;
output   sum_2_out_ap_vld;

reg ap_idle;
reg output_0_ap_vld;
reg output_2_ap_vld;
reg output_1_ap_vld;
reg sum_2_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln26_fu_260_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [4:0] f_x_lsb_table_address0;
reg    f_x_lsb_table_ce0;
wire   [10:0] f_x_lsb_table_q0;
wire   [4:0] exp_x_msb_2_m_1_table_address0;
reg    exp_x_msb_2_m_1_table_ce0;
wire   [24:0] exp_x_msb_2_m_1_table_q0;
wire   [4:0] exp_x_msb_1_table_address0;
reg    exp_x_msb_1_table_ce0;
wire   [24:0] exp_x_msb_1_table_q0;
wire    ap_block_pp0_stage0_11001;
reg   [1:0] i_3_reg_698;
reg   [1:0] i_3_reg_698_pp0_iter1_reg;
reg   [1:0] i_3_reg_698_pp0_iter2_reg;
reg   [1:0] i_3_reg_698_pp0_iter3_reg;
reg   [1:0] i_3_reg_698_pp0_iter4_reg;
reg   [0:0] icmp_ln26_reg_702;
reg   [0:0] icmp_ln26_reg_702_pp0_iter1_reg;
reg   [0:0] icmp_ln26_reg_702_pp0_iter2_reg;
reg   [0:0] icmp_ln26_reg_702_pp0_iter3_reg;
reg   [0:0] icmp_ln26_reg_702_pp0_iter4_reg;
wire   [0:0] tmp_fu_316_p3;
reg   [0:0] tmp_reg_706;
reg   [0:0] tmp_reg_706_pp0_iter1_reg;
reg   [0:0] tmp_reg_706_pp0_iter2_reg;
reg   [0:0] tmp_reg_706_pp0_iter3_reg;
reg   [0:0] tmp_reg_706_pp0_iter4_reg;
reg   [3:0] tmp_6_reg_712;
reg   [3:0] tmp_6_reg_712_pp0_iter1_reg;
wire   [1:0] trunc_ln217_fu_432_p1;
reg   [1:0] trunc_ln217_reg_717;
reg   [1:0] trunc_ln217_reg_717_pp0_iter1_reg;
reg   [1:0] trunc_ln217_reg_717_pp0_iter2_reg;
wire   [0:0] or_ln202_4_fu_478_p2;
reg   [0:0] or_ln202_4_reg_733;
reg   [0:0] or_ln202_4_reg_733_pp0_iter1_reg;
reg   [0:0] or_ln202_4_reg_733_pp0_iter2_reg;
reg   [0:0] or_ln202_4_reg_733_pp0_iter3_reg;
reg   [0:0] or_ln202_4_reg_733_pp0_iter4_reg;
reg   [10:0] f_x_lsb_reg_738;
reg   [10:0] f_x_lsb_reg_738_pp0_iter2_reg;
reg   [24:0] exp_x_msb_2_m_1_reg_744;
reg   [24:0] exp_x_msb_2_m_1_reg_744_pp0_iter2_reg;
reg   [18:0] trunc_ln6_reg_750;
wire   [24:0] exp_x_msb_2_lsb_m_1_fu_558_p2;
reg   [24:0] exp_x_msb_2_lsb_m_1_reg_760;
reg   [24:0] exp_x_msb_1_reg_765;
reg   [24:0] exp_x_msb_1_reg_765_pp0_iter4_reg;
reg   [24:0] y_lo_s_reg_771;
wire   [15:0] select_ln274_fu_655_p3;
reg   [15:0] select_ln274_reg_776;
wire   [63:0] zext_ln230_fu_444_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln245_fu_449_p1;
wire   [63:0] zext_ln261_fu_526_p1;
reg   [15:0] sum_2_fu_140;
wire   [15:0] sum_fu_669_p2;
wire    ap_loop_init;
reg   [1:0] i_fu_144;
wire   [1:0] add_ln26_fu_266_p2;
reg   [1:0] ap_sig_allocacmp_i_3;
wire    ap_block_pp0_stage0_01001;
wire   [24:0] y_lo_fu_239_p0;
wire   [24:0] y_lo_fu_239_p1;
wire   [15:0] tmp_1_fu_272_p5;
wire  signed [16:0] sext_ln28_fu_284_p1;
wire  signed [16:0] conv_i_i13_i_i10_cast_fu_243_p1;
wire   [16:0] x_fu_288_p2;
wire   [7:0] trunc_ln194_fu_304_p1;
wire   [0:0] tmp_2_fu_324_p3;
wire   [0:0] tmp_3_fu_338_p3;
wire   [0:0] tmp_4_fu_352_p3;
wire   [0:0] tmp_5_fu_366_p3;
wire   [0:0] tmp_7_fu_380_p3;
wire   [3:0] x_l_int_fu_294_p4;
wire   [10:0] x_l_fract_fu_308_p3;
wire   [0:0] icmp_ln202_fu_394_p2;
wire   [0:0] icmp_ln202_1_fu_400_p2;
wire   [4:0] x_lsb_ind_fu_436_p3;
wire   [4:0] x_msb_ind_2_fu_422_p4;
wire   [0:0] xor_ln198_fu_346_p2;
wire   [0:0] overf_fu_332_p2;
wire   [0:0] xor_ln198_1_fu_360_p2;
wire   [0:0] xor_ln198_2_fu_374_p2;
wire   [0:0] or_ln202_1_fu_460_p2;
wire   [0:0] or_ln202_fu_454_p2;
wire   [0:0] and_ln202_fu_406_p2;
wire   [0:0] xor_ln198_3_fu_388_p2;
wire   [0:0] or_ln202_3_fu_472_p2;
wire   [0:0] or_ln202_2_fu_466_p2;
wire   [17:0] exp_x_lsb_m_1_fu_495_p4;
wire   [24:0] f_x_msb_2_lsb_fu_510_p0;
wire   [17:0] f_x_msb_2_lsb_fu_510_p1;
wire   [42:0] f_x_msb_2_lsb_fu_510_p2;
wire   [4:0] x_msb_ind_1_fu_489_p3;
wire   [18:0] shl_ln1_fu_534_p5;
wire   [19:0] zext_ln249_1_fu_544_p1;
wire   [19:0] zext_ln249_fu_531_p1;
wire   [19:0] add_ln249_fu_548_p2;
wire   [24:0] zext_ln249_2_fu_554_p1;
wire   [49:0] y_lo_fu_239_p2;
wire   [0:0] y_fu_581_p2;
wire   [24:0] y_l_fu_594_p2;
wire   [21:0] select_ln190_fu_586_p3;
wire   [21:0] y_1_fu_598_p4;
wire   [21:0] y_2_fu_608_p3;
wire   [1:0] tmp_8_fu_615_p4;
wire   [0:0] tmp_9_fu_631_p3;
wire   [0:0] overf_1_fu_625_p2;
wire   [0:0] overf_2_fu_639_p2;
wire   [15:0] tmp_s_fu_645_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [42:0] f_x_msb_2_lsb_fu_510_p00;
wire   [42:0] f_x_msb_2_lsb_fu_510_p10;
wire   [49:0] y_lo_fu_239_p00;
wire   [49:0] y_lo_fu_239_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_done_reg = 1'b0;
end

neural_network_neural_network_Pipeline_VITIS_LOOP_26_2_f_x_lsb_table_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
f_x_lsb_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(f_x_lsb_table_address0),
    .ce0(f_x_lsb_table_ce0),
    .q0(f_x_lsb_table_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_26_2_exp_x_msb_2_m_1_table_ROM_AUTO_1R #(
    .DataWidth( 25 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
exp_x_msb_2_m_1_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_2_m_1_table_address0),
    .ce0(exp_x_msb_2_m_1_table_ce0),
    .q0(exp_x_msb_2_m_1_table_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_26_2_exp_x_msb_1_table_ROM_AUTO_1R #(
    .DataWidth( 25 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
exp_x_msb_1_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_1_table_address0),
    .ce0(exp_x_msb_1_table_ce0),
    .q0(exp_x_msb_1_table_q0)
);

neural_network_mul_25ns_25ns_50_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 50 ))
mul_25ns_25ns_50_1_1_U62(
    .din0(y_lo_fu_239_p0),
    .din1(y_lo_fu_239_p1),
    .dout(y_lo_fu_239_p2)
);

neural_network_mux_3_2_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_3_2_16_1_1_U63(
    .din0(conv_i_i_le8_lcssa15),
    .din1(conv_i_i_le10_lcssa17),
    .din2(conv_i_i_le12_lcssa19),
    .din3(ap_sig_allocacmp_i_3),
    .dout(tmp_1_fu_272_p5)
);

neural_network_mul_25ns_18ns_43_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 43 ))
mul_25ns_18ns_43_1_1_U64(
    .din0(f_x_msb_2_lsb_fu_510_p0),
    .din1(f_x_msb_2_lsb_fu_510_p1),
    .dout(f_x_msb_2_lsb_fu_510_p2)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln26_fu_260_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_144 <= add_ln26_fu_266_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_144 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            sum_2_fu_140 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            sum_2_fu_140 <= sum_fu_669_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        exp_x_msb_2_m_1_reg_744 <= exp_x_msb_2_m_1_table_q0;
        f_x_lsb_reg_738 <= f_x_lsb_table_q0;
        i_3_reg_698 <= ap_sig_allocacmp_i_3;
        i_3_reg_698_pp0_iter1_reg <= i_3_reg_698;
        icmp_ln26_reg_702 <= icmp_ln26_fu_260_p2;
        icmp_ln26_reg_702_pp0_iter1_reg <= icmp_ln26_reg_702;
        or_ln202_4_reg_733_pp0_iter1_reg <= or_ln202_4_reg_733;
        tmp_6_reg_712_pp0_iter1_reg <= tmp_6_reg_712;
        tmp_reg_706_pp0_iter1_reg <= tmp_reg_706;
        trunc_ln217_reg_717_pp0_iter1_reg <= trunc_ln217_reg_717;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        exp_x_msb_1_reg_765_pp0_iter4_reg <= exp_x_msb_1_reg_765;
        exp_x_msb_2_m_1_reg_744_pp0_iter2_reg <= exp_x_msb_2_m_1_reg_744;
        f_x_lsb_reg_738_pp0_iter2_reg <= f_x_lsb_reg_738;
        i_3_reg_698_pp0_iter2_reg <= i_3_reg_698_pp0_iter1_reg;
        i_3_reg_698_pp0_iter3_reg <= i_3_reg_698_pp0_iter2_reg;
        i_3_reg_698_pp0_iter4_reg <= i_3_reg_698_pp0_iter3_reg;
        icmp_ln26_reg_702_pp0_iter2_reg <= icmp_ln26_reg_702_pp0_iter1_reg;
        icmp_ln26_reg_702_pp0_iter3_reg <= icmp_ln26_reg_702_pp0_iter2_reg;
        icmp_ln26_reg_702_pp0_iter4_reg <= icmp_ln26_reg_702_pp0_iter3_reg;
        or_ln202_4_reg_733_pp0_iter2_reg <= or_ln202_4_reg_733_pp0_iter1_reg;
        or_ln202_4_reg_733_pp0_iter3_reg <= or_ln202_4_reg_733_pp0_iter2_reg;
        or_ln202_4_reg_733_pp0_iter4_reg <= or_ln202_4_reg_733_pp0_iter3_reg;
        select_ln274_reg_776 <= select_ln274_fu_655_p3;
        tmp_reg_706_pp0_iter2_reg <= tmp_reg_706_pp0_iter1_reg;
        tmp_reg_706_pp0_iter3_reg <= tmp_reg_706_pp0_iter2_reg;
        tmp_reg_706_pp0_iter4_reg <= tmp_reg_706_pp0_iter3_reg;
        trunc_ln217_reg_717_pp0_iter2_reg <= trunc_ln217_reg_717_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln202_4_reg_733_pp0_iter2_reg == 1'd0))) begin
        exp_x_msb_1_reg_765 <= exp_x_msb_1_table_q0;
        exp_x_msb_2_lsb_m_1_reg_760 <= exp_x_msb_2_lsb_m_1_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln26_fu_260_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln202_4_reg_733 <= or_ln202_4_fu_478_p2;
        tmp_6_reg_712 <= {{x_fu_288_p2[10:7]}};
        tmp_reg_706 <= x_fu_288_p2[32'd16];
        trunc_ln217_reg_717 <= trunc_ln217_fu_432_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln202_4_reg_733_pp0_iter1_reg == 1'd0))) begin
        trunc_ln6_reg_750 <= {{f_x_msb_2_lsb_fu_510_p2[42:24]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln202_4_reg_733_pp0_iter3_reg == 1'd0))) begin
        y_lo_s_reg_771 <= {{y_lo_fu_239_p2[49:25]}};
    end
end

always @ (*) begin
    if (((icmp_ln26_fu_260_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_3 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_3 = i_fu_144;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_x_msb_1_table_ce0 = 1'b1;
    end else begin
        exp_x_msb_1_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_x_msb_2_m_1_table_ce0 = 1'b1;
    end else begin
        exp_x_msb_2_m_1_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_x_lsb_table_ce0 = 1'b1;
    end else begin
        f_x_lsb_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (i_3_reg_698_pp0_iter4_reg == 2'd0))) begin
        output_0_ap_vld = 1'b1;
    end else begin
        output_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (i_3_reg_698_pp0_iter4_reg == 2'd1))) begin
        output_1_ap_vld = 1'b1;
    end else begin
        output_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~(i_3_reg_698_pp0_iter4_reg == 2'd0) & ~(i_3_reg_698_pp0_iter4_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        output_2_ap_vld = 1'b1;
    end else begin
        output_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln26_reg_702_pp0_iter4_reg == 1'd1))) begin
        sum_2_out_ap_vld = 1'b1;
    end else begin
        sum_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln249_fu_548_p2 = (zext_ln249_1_fu_544_p1 + zext_ln249_fu_531_p1);

assign add_ln26_fu_266_p2 = (ap_sig_allocacmp_i_3 + 2'd1);

assign and_ln202_fu_406_p2 = (icmp_ln202_fu_394_p2 & icmp_ln202_1_fu_400_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv_i_i13_i_i10_cast_fu_243_p1 = $signed(conv_i_i13_i_i10);

assign exp_x_lsb_m_1_fu_495_p4 = {{{trunc_ln217_reg_717_pp0_iter1_reg}, {5'd0}}, {f_x_lsb_reg_738}};

assign exp_x_msb_1_table_address0 = zext_ln261_fu_526_p1;

assign exp_x_msb_2_lsb_m_1_fu_558_p2 = (exp_x_msb_2_m_1_reg_744_pp0_iter2_reg + zext_ln249_2_fu_554_p1);

assign exp_x_msb_2_m_1_table_address0 = zext_ln245_fu_449_p1;

assign f_x_lsb_table_address0 = zext_ln230_fu_444_p1;

assign f_x_msb_2_lsb_fu_510_p0 = f_x_msb_2_lsb_fu_510_p00;

assign f_x_msb_2_lsb_fu_510_p00 = exp_x_msb_2_m_1_reg_744;

assign f_x_msb_2_lsb_fu_510_p1 = f_x_msb_2_lsb_fu_510_p10;

assign f_x_msb_2_lsb_fu_510_p10 = exp_x_lsb_m_1_fu_495_p4;

assign icmp_ln202_1_fu_400_p2 = ((x_l_fract_fu_308_p3 > 11'd1280) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_394_p2 = ((x_l_int_fu_294_p4 == 4'd7) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_260_p2 = ((ap_sig_allocacmp_i_3 == 2'd3) ? 1'b1 : 1'b0);

assign or_ln202_1_fu_460_p2 = (xor_ln198_2_fu_374_p2 | xor_ln198_1_fu_360_p2);

assign or_ln202_2_fu_466_p2 = (or_ln202_fu_454_p2 | or_ln202_1_fu_460_p2);

assign or_ln202_3_fu_472_p2 = (xor_ln198_3_fu_388_p2 | and_ln202_fu_406_p2);

assign or_ln202_4_fu_478_p2 = (or_ln202_3_fu_472_p2 | or_ln202_2_fu_466_p2);

assign or_ln202_fu_454_p2 = (xor_ln198_fu_346_p2 | overf_fu_332_p2);

assign output_0 = select_ln274_fu_655_p3;

assign output_1 = select_ln274_fu_655_p3;

assign output_2 = select_ln274_fu_655_p3;

assign overf_1_fu_625_p2 = ((tmp_8_fu_615_p4 != 2'd0) ? 1'b1 : 1'b0);

assign overf_2_fu_639_p2 = (tmp_9_fu_631_p3 | overf_1_fu_625_p2);

assign overf_fu_332_p2 = (tmp_fu_316_p3 ^ tmp_2_fu_324_p3);

assign select_ln190_fu_586_p3 = ((y_fu_581_p2[0:0] == 1'b1) ? 22'd4194303 : 22'd0);

assign select_ln274_fu_655_p3 = ((overf_2_fu_639_p2[0:0] == 1'b1) ? 16'd65535 : tmp_s_fu_645_p4);

assign sext_ln28_fu_284_p1 = $signed(tmp_1_fu_272_p5);

assign shl_ln1_fu_534_p5 = {{{{trunc_ln217_reg_717_pp0_iter2_reg}, {5'd0}}, {f_x_lsb_reg_738_pp0_iter2_reg}}, {1'd0}};

assign sum_2_out = sum_2_fu_140;

assign sum_fu_669_p2 = (select_ln274_reg_776 + sum_2_fu_140);

assign tmp_2_fu_324_p3 = x_fu_288_p2[32'd11];

assign tmp_3_fu_338_p3 = x_fu_288_p2[32'd12];

assign tmp_4_fu_352_p3 = x_fu_288_p2[32'd13];

assign tmp_5_fu_366_p3 = x_fu_288_p2[32'd14];

assign tmp_7_fu_380_p3 = x_fu_288_p2[32'd15];

assign tmp_8_fu_615_p4 = {{y_2_fu_608_p3[21:20]}};

assign tmp_9_fu_631_p3 = y_2_fu_608_p3[32'd19];

assign tmp_fu_316_p3 = x_fu_288_p2[32'd16];

assign tmp_s_fu_645_p4 = {{y_2_fu_608_p3[18:3]}};

assign trunc_ln194_fu_304_p1 = x_fu_288_p2[7:0];

assign trunc_ln217_fu_432_p1 = x_fu_288_p2[1:0];

assign x_fu_288_p2 = ($signed(sext_ln28_fu_284_p1) - $signed(conv_i_i13_i_i10_cast_fu_243_p1));

assign x_l_fract_fu_308_p3 = {{trunc_ln194_fu_304_p1}, {3'd0}};

assign x_l_int_fu_294_p4 = {{x_fu_288_p2[11:8]}};

assign x_lsb_ind_fu_436_p3 = {{trunc_ln217_fu_432_p1}, {3'd0}};

assign x_msb_ind_1_fu_489_p3 = {{tmp_reg_706_pp0_iter1_reg}, {tmp_6_reg_712_pp0_iter1_reg}};

assign x_msb_ind_2_fu_422_p4 = {{x_fu_288_p2[6:2]}};

assign xor_ln198_1_fu_360_p2 = (tmp_fu_316_p3 ^ tmp_4_fu_352_p3);

assign xor_ln198_2_fu_374_p2 = (tmp_fu_316_p3 ^ tmp_5_fu_366_p3);

assign xor_ln198_3_fu_388_p2 = (tmp_fu_316_p3 ^ tmp_7_fu_380_p3);

assign xor_ln198_fu_346_p2 = (tmp_fu_316_p3 ^ tmp_3_fu_338_p3);

assign y_1_fu_598_p4 = {{y_l_fu_594_p2[24:3]}};

assign y_2_fu_608_p3 = ((or_ln202_4_reg_733_pp0_iter4_reg[0:0] == 1'b1) ? select_ln190_fu_586_p3 : y_1_fu_598_p4);

assign y_fu_581_p2 = (tmp_reg_706_pp0_iter4_reg ^ 1'd1);

assign y_l_fu_594_p2 = (exp_x_msb_1_reg_765_pp0_iter4_reg + y_lo_s_reg_771);

assign y_lo_fu_239_p0 = y_lo_fu_239_p00;

assign y_lo_fu_239_p00 = exp_x_msb_2_lsb_m_1_reg_760;

assign y_lo_fu_239_p1 = y_lo_fu_239_p10;

assign y_lo_fu_239_p10 = exp_x_msb_1_reg_765;

assign zext_ln230_fu_444_p1 = x_lsb_ind_fu_436_p3;

assign zext_ln245_fu_449_p1 = x_msb_ind_2_fu_422_p4;

assign zext_ln249_1_fu_544_p1 = shl_ln1_fu_534_p5;

assign zext_ln249_2_fu_554_p1 = add_ln249_fu_548_p2;

assign zext_ln249_fu_531_p1 = trunc_ln6_reg_750;

assign zext_ln261_fu_526_p1 = x_msb_ind_1_fu_489_p3;

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_26_2
