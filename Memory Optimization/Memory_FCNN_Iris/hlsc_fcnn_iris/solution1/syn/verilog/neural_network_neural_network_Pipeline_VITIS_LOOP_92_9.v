// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_92_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_i_i_le8_lcssa15,
        layer2_weight_tile_address0,
        layer2_weight_tile_ce0,
        layer2_weight_tile_q0,
        layer2_weight_tile_1_address0,
        layer2_weight_tile_1_ce0,
        layer2_weight_tile_1_q0,
        layer2_weight_tile_2_address0,
        layer2_weight_tile_2_ce0,
        layer2_weight_tile_2_q0,
        layer2_weight_tile_3_address0,
        layer2_weight_tile_3_ce0,
        layer2_weight_tile_3_q0,
        tile_1,
        layer1_output_address0,
        layer1_output_ce0,
        layer1_output_q0,
        layer1_output_1_address0,
        layer1_output_1_ce0,
        layer1_output_1_q0,
        layer1_output_2_address0,
        layer1_output_2_ce0,
        layer1_output_2_q0,
        layer1_output_3_address0,
        layer1_output_3_ce0,
        layer1_output_3_q0,
        cmp131,
        conv_i_i_le13_out_i,
        conv_i_i_le13_out_o,
        conv_i_i_le13_out_o_ap_vld,
        conv_i_i_le11_out_i,
        conv_i_i_le11_out_o,
        conv_i_i_le11_out_o_ap_vld,
        conv_i_i_le9_out,
        conv_i_i_le9_out_ap_vld,
        p_0_0_0114_i3_out_i,
        p_0_0_0114_i3_out_o,
        p_0_0_0114_i3_out_o_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] conv_i_i_le8_lcssa15;
output  [1:0] layer2_weight_tile_address0;
output   layer2_weight_tile_ce0;
input  [9:0] layer2_weight_tile_q0;
output  [1:0] layer2_weight_tile_1_address0;
output   layer2_weight_tile_1_ce0;
input  [9:0] layer2_weight_tile_1_q0;
output  [1:0] layer2_weight_tile_2_address0;
output   layer2_weight_tile_2_ce0;
input  [9:0] layer2_weight_tile_2_q0;
output  [1:0] layer2_weight_tile_3_address0;
output   layer2_weight_tile_3_ce0;
input  [9:0] layer2_weight_tile_3_q0;
input  [2:0] tile_1;
output  [0:0] layer1_output_address0;
output   layer1_output_ce0;
input  [14:0] layer1_output_q0;
output  [0:0] layer1_output_1_address0;
output   layer1_output_1_ce0;
input  [14:0] layer1_output_1_q0;
output  [0:0] layer1_output_2_address0;
output   layer1_output_2_ce0;
input  [14:0] layer1_output_2_q0;
output  [0:0] layer1_output_3_address0;
output   layer1_output_3_ce0;
input  [14:0] layer1_output_3_q0;
input  [0:0] cmp131;
input  [15:0] conv_i_i_le13_out_i;
output  [15:0] conv_i_i_le13_out_o;
output   conv_i_i_le13_out_o_ap_vld;
input  [15:0] conv_i_i_le11_out_i;
output  [15:0] conv_i_i_le11_out_o;
output   conv_i_i_le11_out_o_ap_vld;
output  [15:0] conv_i_i_le9_out;
output   conv_i_i_le9_out_ap_vld;
input  [15:0] p_0_0_0114_i3_out_i;
output  [15:0] p_0_0_0114_i3_out_o;
output   p_0_0_0114_i3_out_o_ap_vld;

reg ap_idle;
reg layer2_weight_tile_ce0;
reg layer2_weight_tile_1_ce0;
reg layer2_weight_tile_2_ce0;
reg layer2_weight_tile_3_ce0;
reg layer1_output_ce0;
reg layer1_output_1_ce0;
reg layer1_output_2_ce0;
reg layer1_output_3_ce0;
reg[15:0] conv_i_i_le13_out_o;
reg conv_i_i_le13_out_o_ap_vld;
reg[15:0] conv_i_i_le11_out_o;
reg conv_i_i_le11_out_o_ap_vld;
reg conv_i_i_le9_out_ap_vld;
reg[15:0] p_0_0_0114_i3_out_o;
reg p_0_0_0114_i3_out_o_ap_vld;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state4_pp0_stage3_iter0;
wire    ap_block_state8_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [0:0] icmp_ln92_reg_567;
reg    ap_condition_exit_pp0_iter0_stage3;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] cmp131_read_reg_555;
reg   [1:0] i_1_reg_559;
reg   [1:0] i_1_reg_559_pp0_iter1_reg;
wire   [0:0] icmp_ln92_fu_236_p2;
reg  signed [9:0] layer2_weight_tile_1_load_reg_611;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg  signed [9:0] layer2_weight_tile_2_load_reg_616;
reg  signed [9:0] layer2_weight_tile_3_load_reg_621;
reg   [14:0] layer1_output_1_load_reg_626;
reg   [14:0] layer1_output_2_load_reg_631;
reg   [14:0] layer1_output_3_load_reg_636;
wire  signed [15:0] sext_ln94_fu_298_p1;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state3_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [15:0] layer2_output_3_load_reg_666;
wire    ap_block_pp0_stage3_11001;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [15:0] ap_phi_mux_partial_sum_phi_fu_217_p4;
reg   [15:0] ap_phi_reg_pp0_iter0_partial_sum_reg_214;
wire   [15:0] tmp_4_fu_319_p5;
wire   [63:0] zext_ln92_fu_248_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln96_fu_264_p1;
wire   [15:0] layer2_output_fu_445_p3;
wire    ap_block_pp0_stage3;
reg   [15:0] ap_sig_allocacmp_conv_i_i_le13_out_load;
wire   [15:0] layer2_output_4_fu_453_p3;
reg   [15:0] ap_sig_allocacmp_conv_i_i_le11_out_load;
wire   [15:0] max_val_fu_468_p3;
reg   [1:0] i_fu_84;
wire   [1:0] add_ln92_fu_242_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i_1;
reg   [15:0] layer2_output_3_fu_88;
wire   [15:0] layer2_output_5_fu_461_p3;
reg   [15:0] ap_sig_allocacmp_layer2_output_3_load;
wire   [0:0] tmp_fu_256_p3;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire   [5:0] merge_i_fu_285_p6;
wire  signed [23:0] tmp_s_fu_351_p1;
wire   [23:0] grp_fu_505_p3;
wire   [15:0] tmp_s_fu_351_p4;
wire  signed [23:0] tmp_1_fu_374_p1;
wire   [23:0] grp_fu_514_p3;
wire   [15:0] tmp_1_fu_374_p4;
wire  signed [23:0] tmp_2_fu_391_p1;
wire   [23:0] grp_fu_523_p3;
wire   [15:0] tmp_2_fu_391_p4;
wire  signed [23:0] trunc_ln96_3_fu_420_p1;
wire   [23:0] grp_fu_532_p3;
wire   [0:0] icmp_ln98_fu_429_p2;
wire   [0:0] icmp_ln98_1_fu_434_p2;
wire   [0:0] or_ln98_fu_439_p2;
wire   [15:0] trunc_ln96_3_fu_420_p4;
wire   [14:0] grp_fu_505_p1;
wire   [23:0] grp_fu_505_p2;
wire   [14:0] grp_fu_514_p1;
wire   [23:0] grp_fu_514_p2;
wire   [14:0] grp_fu_523_p1;
wire   [23:0] grp_fu_523_p2;
wire   [14:0] grp_fu_532_p1;
wire   [23:0] grp_fu_532_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [23:0] grp_fu_505_p10;
wire   [23:0] grp_fu_514_p10;
wire   [23:0] grp_fu_523_p10;
wire   [23:0] grp_fu_532_p10;
reg    ap_condition_504;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

neural_network_mux_4_2_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 6 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mux_4_2_6_1_1_U33(
    .din0(6'd34),
    .din1(6'd7),
    .din2(6'd11),
    .din3(6'd11),
    .din4(i_1_reg_559),
    .dout(merge_i_fu_285_p6)
);

neural_network_mux_3_2_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_3_2_16_1_1_U34(
    .din0(ap_sig_allocacmp_layer2_output_3_load),
    .din1(ap_sig_allocacmp_conv_i_i_le11_out_load),
    .din2(ap_sig_allocacmp_conv_i_i_le13_out_load),
    .din3(i_1_reg_559),
    .dout(tmp_4_fu_319_p5)
);

neural_network_mac_muladd_10s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_15ns_24ns_24_4_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weight_tile_q0),
    .din1(grp_fu_505_p1),
    .din2(grp_fu_505_p2),
    .ce(1'b1),
    .dout(grp_fu_505_p3)
);

neural_network_mac_muladd_10s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_15ns_24ns_24_4_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weight_tile_1_load_reg_611),
    .din1(grp_fu_514_p1),
    .din2(grp_fu_514_p2),
    .ce(1'b1),
    .dout(grp_fu_514_p3)
);

neural_network_mac_muladd_10s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_15ns_24ns_24_4_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weight_tile_2_load_reg_616),
    .din1(grp_fu_523_p1),
    .din2(grp_fu_523_p2),
    .ce(1'b1),
    .dout(grp_fu_523_p3)
);

neural_network_mac_muladd_10s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_15ns_24ns_24_4_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weight_tile_3_load_reg_621),
    .din1(grp_fu_532_p1),
    .din2(grp_fu_532_p2),
    .ce(1'b1),
    .dout(grp_fu_532_p3)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage3),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage3)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln92_fu_236_p2 == 1'd0))) begin
            i_fu_84 <= add_ln92_fu_242_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_84 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_output_3_fu_88 <= conv_i_i_le8_lcssa15;
    end else if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        layer2_output_3_fu_88 <= layer2_output_5_fu_461_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_567 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (cmp131_read_reg_555 == 1'd1))) begin
        ap_phi_reg_pp0_iter0_partial_sum_reg_214 <= sext_ln94_fu_298_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_559 <= ap_sig_allocacmp_i_1;
        i_1_reg_559_pp0_iter1_reg <= i_1_reg_559;
        icmp_ln92_reg_567 <= icmp_ln92_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln92_reg_567 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_output_1_load_reg_626 <= layer1_output_1_q0;
        layer1_output_2_load_reg_631 <= layer1_output_2_q0;
        layer1_output_3_load_reg_636 <= layer1_output_3_q0;
        layer2_weight_tile_1_load_reg_611 <= layer2_weight_tile_1_q0;
        layer2_weight_tile_2_load_reg_616 <= layer2_weight_tile_2_q0;
        layer2_weight_tile_3_load_reg_621 <= layer2_weight_tile_3_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        layer2_output_3_load_reg_666 <= ap_sig_allocacmp_layer2_output_3_load;
    end
end

always @ (*) begin
    if (((icmp_ln92_reg_567 == 1'd1) & (1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage3 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln92_reg_567 == 1'd0) & (cmp131_read_reg_555 == 1'd0))) begin
        ap_phi_mux_partial_sum_phi_fu_217_p4 = tmp_4_fu_319_p5;
    end else begin
        ap_phi_mux_partial_sum_phi_fu_217_p4 = ap_phi_reg_pp0_iter0_partial_sum_reg_214;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_sig_allocacmp_conv_i_i_le11_out_load = layer2_output_4_fu_453_p3;
    end else begin
        ap_sig_allocacmp_conv_i_i_le11_out_load = conv_i_i_le11_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_sig_allocacmp_conv_i_i_le13_out_load = layer2_output_fu_445_p3;
    end else begin
        ap_sig_allocacmp_conv_i_i_le13_out_load = conv_i_i_le13_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_84;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_sig_allocacmp_layer2_output_3_load = layer2_output_5_fu_461_p3;
    end else begin
        ap_sig_allocacmp_layer2_output_3_load = layer2_output_3_fu_88;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        conv_i_i_le11_out_o = layer2_output_4_fu_453_p3;
    end else begin
        conv_i_i_le11_out_o = conv_i_i_le11_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        conv_i_i_le11_out_o_ap_vld = 1'b1;
    end else begin
        conv_i_i_le11_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        conv_i_i_le13_out_o = layer2_output_fu_445_p3;
    end else begin
        conv_i_i_le13_out_o = conv_i_i_le13_out_i;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        conv_i_i_le13_out_o_ap_vld = 1'b1;
    end else begin
        conv_i_i_le13_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln92_reg_567 == 1'd1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        conv_i_i_le9_out_ap_vld = 1'b1;
    end else begin
        conv_i_i_le9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_output_1_ce0 = 1'b1;
    end else begin
        layer1_output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_output_2_ce0 = 1'b1;
    end else begin
        layer1_output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_output_3_ce0 = 1'b1;
    end else begin
        layer1_output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_output_ce0 = 1'b1;
    end else begin
        layer1_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_weight_tile_1_ce0 = 1'b1;
    end else begin
        layer2_weight_tile_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_weight_tile_2_ce0 = 1'b1;
    end else begin
        layer2_weight_tile_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_weight_tile_3_ce0 = 1'b1;
    end else begin
        layer2_weight_tile_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_weight_tile_ce0 = 1'b1;
    end else begin
        layer2_weight_tile_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        if ((1'b1 == ap_condition_504)) begin
            p_0_0_0114_i3_out_o = ap_sig_allocacmp_layer2_output_3_load;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            p_0_0_0114_i3_out_o = max_val_fu_468_p3;
        end else begin
            p_0_0_0114_i3_out_o = p_0_0_0114_i3_out_i;
        end
    end else begin
        p_0_0_0114_i3_out_o = p_0_0_0114_i3_out_i;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln92_reg_567 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (cmp131_read_reg_555 == 1'd0)))) begin
        p_0_0_0114_i3_out_o_ap_vld = 1'b1;
    end else begin
        p_0_0_0114_i3_out_o_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln92_fu_242_p2 = (ap_sig_allocacmp_i_1 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_504 = ((icmp_ln92_reg_567 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (cmp131_read_reg_555 == 1'd0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage3;

assign cmp131_read_reg_555 = cmp131;

assign conv_i_i_le9_out = ap_sig_allocacmp_layer2_output_3_load;

assign grp_fu_505_p1 = grp_fu_505_p10;

assign grp_fu_505_p10 = layer1_output_q0;

assign grp_fu_505_p2 = {{ap_phi_mux_partial_sum_phi_fu_217_p4}, {8'd0}};

assign grp_fu_514_p1 = grp_fu_514_p10;

assign grp_fu_514_p10 = layer1_output_1_load_reg_626;

assign grp_fu_514_p2 = {{tmp_s_fu_351_p4}, {8'd0}};

assign grp_fu_523_p1 = grp_fu_523_p10;

assign grp_fu_523_p10 = layer1_output_2_load_reg_631;

assign grp_fu_523_p2 = {{tmp_1_fu_374_p4}, {8'd0}};

assign grp_fu_532_p1 = grp_fu_532_p10;

assign grp_fu_532_p10 = layer1_output_3_load_reg_636;

assign grp_fu_532_p2 = {{tmp_2_fu_391_p4}, {8'd0}};

assign icmp_ln92_fu_236_p2 = ((ap_sig_allocacmp_i_1 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln98_1_fu_434_p2 = ((i_1_reg_559_pp0_iter1_reg == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln98_fu_429_p2 = ((i_1_reg_559_pp0_iter1_reg == 2'd0) ? 1'b1 : 1'b0);

assign layer1_output_1_address0 = zext_ln96_fu_264_p1;

assign layer1_output_2_address0 = zext_ln96_fu_264_p1;

assign layer1_output_3_address0 = zext_ln96_fu_264_p1;

assign layer1_output_address0 = zext_ln96_fu_264_p1;

assign layer2_output_4_fu_453_p3 = ((icmp_ln98_1_fu_434_p2[0:0] == 1'b1) ? trunc_ln96_3_fu_420_p4 : conv_i_i_le11_out_i);

assign layer2_output_5_fu_461_p3 = ((icmp_ln98_fu_429_p2[0:0] == 1'b1) ? trunc_ln96_3_fu_420_p4 : layer2_output_3_load_reg_666);

assign layer2_output_fu_445_p3 = ((or_ln98_fu_439_p2[0:0] == 1'b1) ? conv_i_i_le13_out_i : trunc_ln96_3_fu_420_p4);

assign layer2_weight_tile_1_address0 = zext_ln92_fu_248_p1;

assign layer2_weight_tile_2_address0 = zext_ln92_fu_248_p1;

assign layer2_weight_tile_3_address0 = zext_ln92_fu_248_p1;

assign layer2_weight_tile_address0 = zext_ln92_fu_248_p1;

assign max_val_fu_468_p3 = ((icmp_ln98_fu_429_p2[0:0] == 1'b1) ? trunc_ln96_3_fu_420_p4 : p_0_0_0114_i3_out_i);

assign or_ln98_fu_439_p2 = (icmp_ln98_fu_429_p2 | icmp_ln98_1_fu_434_p2);

assign sext_ln94_fu_298_p1 = $signed(merge_i_fu_285_p6);

assign tmp_1_fu_374_p1 = grp_fu_514_p3;

assign tmp_1_fu_374_p4 = {{tmp_1_fu_374_p1[23:8]}};

assign tmp_2_fu_391_p1 = grp_fu_523_p3;

assign tmp_2_fu_391_p4 = {{tmp_2_fu_391_p1[23:8]}};

assign tmp_fu_256_p3 = tile_1[32'd2];

assign tmp_s_fu_351_p1 = grp_fu_505_p3;

assign tmp_s_fu_351_p4 = {{tmp_s_fu_351_p1[23:8]}};

assign trunc_ln96_3_fu_420_p1 = grp_fu_532_p3;

assign trunc_ln96_3_fu_420_p4 = {{trunc_ln96_3_fu_420_p1[23:8]}};

assign zext_ln92_fu_248_p1 = ap_sig_allocacmp_i_1;

assign zext_ln96_fu_264_p1 = tmp_fu_256_p3;

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_92_9
