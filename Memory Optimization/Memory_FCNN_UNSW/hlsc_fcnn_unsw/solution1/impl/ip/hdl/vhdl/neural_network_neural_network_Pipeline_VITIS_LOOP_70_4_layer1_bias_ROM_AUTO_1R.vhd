-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity neural_network_neural_network_Pipeline_VITIS_LOOP_70_4_layer1_bias_ROM_AUTO_1R is 
    generic(
             DataWidth     : integer := 11; 
             AddressWidth     : integer := 6; 
             AddressRange    : integer := 64
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of neural_network_neural_network_Pipeline_VITIS_LOOP_70_4_layer1_bias_ROM_AUTO_1R is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "00001110111", 1 => "11111100010", 2 => "11111000111", 3 => "00000011110", 
    4 => "00000000011", 5 => "11111010111", 6 => "00000010110", 7 => "11101001001", 
    8 => "00100000110", 9 => "11110110110", 10 => "00000001111", 11 => "11111001011", 
    12 => "00010101010", 13 => "11011111110", 14 => "00110000110", 15 => "00000111100", 
    16 => "11110011101", 17 => "00000001111", 18 => "00011100100", 19 => "11111110000", 
    20 => "11010110011", 21 => "00100110010", 22 => "11111000110", 23 => "00000001001", 
    24 => "11111110000", 25 => "11111011111", 26 => "00000001010", 27 => "00000000000", 
    28 => "11111101010", 29 => "11101101111", 30 => "00010000000", 31 => "11111111100", 
    32 => "00010111010", 33 => "00011001110", 34 => "00010100100", 35 => "00011010010", 
    36 => "00001010001", 37 => "01011101101", 38 => "11111011110", 39 => "00001010110", 
    40 => "11101100110", 41 => "00010110101", 42 => "11111110001", 43 => "11100010011", 
    44 => "00010010010", 45 => "00100110011", 46 => "00101101001", 47 => "11111110000", 
    48 => "00000001010", 49 => "11111100100", 50 => "11111100001", 51 => "11110001100", 
    52 => "00010110001", 53 => "00001011001", 54 => "11111110001", 55 => "11111100000", 
    56 => "00001111111", 57 => "00001000010", 58 => "00010111010", 59 => "11111011010", 
    60 => "00000001111", 61 => "11111111111", 62 => "11111101010", 63 => "00100100001");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

