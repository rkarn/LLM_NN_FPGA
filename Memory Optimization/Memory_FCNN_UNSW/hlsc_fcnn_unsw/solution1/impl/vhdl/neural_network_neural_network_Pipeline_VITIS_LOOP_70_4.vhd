-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network_neural_network_Pipeline_VITIS_LOOP_70_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer1_output_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    layer1_output_3_ce0 : OUT STD_LOGIC;
    layer1_output_3_we0 : OUT STD_LOGIC;
    layer1_output_3_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    layer1_output_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    layer1_output_2_ce0 : OUT STD_LOGIC;
    layer1_output_2_we0 : OUT STD_LOGIC;
    layer1_output_2_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    layer1_output_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    layer1_output_1_ce0 : OUT STD_LOGIC;
    layer1_output_1_we0 : OUT STD_LOGIC;
    layer1_output_1_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    layer1_output_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    layer1_output_ce0 : OUT STD_LOGIC;
    layer1_output_we0 : OUT STD_LOGIC;
    layer1_output_d0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    trunc_ln : IN STD_LOGIC_VECTOR (5 downto 0);
    layer1_weight_tile_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_1_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_1_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_1_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_2_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_2_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_2_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_3_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_3_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_3_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_4_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_4_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_4_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_5_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_5_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_5_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_6_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_6_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_6_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_7_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_7_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_7_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_8_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_8_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_8_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_9_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_9_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_9_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_10_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_10_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_10_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_11_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_11_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_11_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_12_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_12_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_12_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_13_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_13_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_13_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_14_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_14_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_14_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_15_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_15_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_15_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_16_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_16_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_16_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_16 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_17_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_17_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_17_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_17 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_18_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_18_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_18_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_18 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_19_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_19_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_19_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_19 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_20_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_20_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_20_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_20 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_21_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_21_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_21_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_21 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_22_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_22_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_22_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_22 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_23_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_23_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_23_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_23 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_24_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_24_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_24_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_24 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_25_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_25_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_25_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_25 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_26_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_26_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_26_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_26 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_27_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_27_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_27_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_27 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_28_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_28_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_28_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_28 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_29_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_29_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_29_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_29 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_30_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_30_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_30_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_30 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_31_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_31_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_31_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_31 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_32_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_32_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_32_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_32 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_33_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_33_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_33_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_33 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_34_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_34_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_34_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_34 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_35_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_35_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_35_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_35 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_36_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_36_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_36_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_36 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_37_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_37_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_37_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_37 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_38_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_38_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_38_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_38 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_39_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_39_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_39_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_39 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_40_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_40_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_40_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_40 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_41_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_41_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_41_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_41 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_weight_tile_42_address0 : OUT STD_LOGIC_VECTOR (1 downto 0);
    layer1_weight_tile_42_ce0 : OUT STD_LOGIC;
    layer1_weight_tile_42_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    sext_ln74_42 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of neural_network_neural_network_Pipeline_VITIS_LOOP_70_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state14_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state22_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state26_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_state32_pp0_stage1_iter15 : BOOLEAN;
    signal ap_block_state34_pp0_stage1_iter16 : BOOLEAN;
    signal ap_block_state36_pp0_stage1_iter17 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter18 : BOOLEAN;
    signal ap_block_state40_pp0_stage1_iter19 : BOOLEAN;
    signal ap_block_state42_pp0_stage1_iter20 : BOOLEAN;
    signal ap_block_state44_pp0_stage1_iter21 : BOOLEAN;
    signal ap_block_state46_pp0_stage1_iter22 : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal icmp_ln70_reg_2908 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage1 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer1_bias_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal layer1_bias_ce0 : STD_LOGIC;
    signal layer1_bias_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state45_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state47_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln74_42_cast_fu_1134_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_42_cast_reg_2644 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_41_cast_fu_1138_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_41_cast_reg_2649 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_40_cast_fu_1142_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_40_cast_reg_2654 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_39_cast_fu_1146_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_39_cast_reg_2659 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_38_cast_fu_1150_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_38_cast_reg_2664 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_37_cast_fu_1154_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_37_cast_reg_2669 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_36_cast_fu_1158_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_36_cast_reg_2674 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_35_cast_fu_1162_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_35_cast_reg_2679 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_34_cast_fu_1166_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_34_cast_reg_2684 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_33_cast_fu_1170_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_33_cast_reg_2689 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_32_cast_fu_1174_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_32_cast_reg_2694 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_31_cast_fu_1178_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_31_cast_reg_2699 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_30_cast_fu_1182_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_30_cast_reg_2704 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_29_cast_fu_1186_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_29_cast_reg_2709 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_28_cast_fu_1190_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_28_cast_reg_2714 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_27_cast_fu_1194_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_27_cast_reg_2719 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_26_cast_fu_1198_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_26_cast_reg_2724 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_25_cast_fu_1202_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_25_cast_reg_2729 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_24_cast_fu_1206_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_24_cast_reg_2734 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_23_cast_fu_1210_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_23_cast_reg_2739 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_22_cast_fu_1214_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_22_cast_reg_2744 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_21_cast_fu_1218_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_21_cast_reg_2749 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_20_cast_fu_1222_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_20_cast_reg_2754 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_19_cast_fu_1226_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_19_cast_reg_2759 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_18_cast_fu_1230_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_18_cast_reg_2764 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_17_cast_fu_1234_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_17_cast_reg_2769 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_16_cast_fu_1238_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_16_cast_reg_2774 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_15_cast_fu_1242_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_15_cast_reg_2779 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_14_cast_fu_1246_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_14_cast_reg_2784 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_13_cast_fu_1250_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_13_cast_reg_2789 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_12_cast_fu_1254_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_12_cast_reg_2794 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_11_cast_fu_1258_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_11_cast_reg_2799 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_10_cast_fu_1262_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_10_cast_reg_2804 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_9_cast_fu_1266_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_9_cast_reg_2809 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_8_cast_fu_1270_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_8_cast_reg_2814 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_7_cast_fu_1274_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_7_cast_reg_2819 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_6_cast_fu_1278_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_6_cast_reg_2824 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_5_cast_fu_1282_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_5_cast_reg_2829 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_4_cast_fu_1286_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_4_cast_reg_2834 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_3_cast_fu_1290_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_3_cast_reg_2839 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_2_cast_fu_1294_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_2_cast_reg_2844 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_1_cast_fu_1298_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_1_cast_reg_2849 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_cast_fu_1302_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln74_cast_reg_2854 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_reg_2859 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_2859_pp0_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln70_2_fu_1314_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_2_reg_2864_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln70_fu_1321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_2908_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln70_fu_1333_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter11_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter12_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter13_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter14_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter15_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter16_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter17_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter18_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter19_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter20_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter21_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln70_reg_2912_pp0_iter22_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal layer1_weight_tile_load_reg_2931 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal layer1_weight_tile_2_load_reg_2941 : STD_LOGIC_VECTOR (14 downto 0);
    signal tmp_7_reg_2946 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_weight_tile_4_load_reg_2976 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_6_load_reg_3011 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_8_load_reg_3046 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_10_load_reg_3081 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_12_load_reg_3116 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_14_load_reg_3151 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_16_load_reg_3186 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_18_load_reg_3221 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_20_load_reg_3256 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_22_load_reg_3291 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_24_load_reg_3326 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_26_load_reg_3361 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_28_load_reg_3396 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_30_load_reg_3431 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_32_load_reg_3466 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_34_load_reg_3501 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_36_load_reg_3536 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_38_load_reg_3571 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_40_load_reg_3606 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_weight_tile_42_load_reg_3641 : STD_LOGIC_VECTOR (14 downto 0);
    signal lshr_ln_reg_3661 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln72_fu_2266_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln72_reg_3676 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln14_fu_2272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_3681 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln70_fu_2202_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_1_fu_2278_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_fu_242 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln70_1_fu_1327_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln14_fu_2285_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal mul_ln74_fu_1349_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln74_fu_1349_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_1378_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2295_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_1378_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_1398_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2303_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_fu_1398_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_1419_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2311_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_1419_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_1439_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2319_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_fu_1439_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_1460_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2327_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_fu_1460_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_1480_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2335_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_1480_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_1501_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2343_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_fu_1501_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_1521_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2351_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_fu_1521_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_1542_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2359_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_1542_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_1562_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2367_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_12_fu_1562_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_1583_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2375_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_fu_1583_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_1603_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2383_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_fu_1603_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_1624_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2391_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_15_fu_1624_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_1644_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2399_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_16_fu_1644_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_1665_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2407_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_fu_1665_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_1685_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2415_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_fu_1685_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_1706_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2423_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_19_fu_1706_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_1726_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2431_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_20_fu_1726_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_1747_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2439_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_21_fu_1747_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_22_fu_1767_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2447_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_22_fu_1767_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_23_fu_1788_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2455_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_23_fu_1788_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_24_fu_1808_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2463_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_24_fu_1808_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_25_fu_1829_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2471_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_25_fu_1829_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_26_fu_1849_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2479_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_26_fu_1849_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_1870_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2487_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_27_fu_1870_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_28_fu_1890_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2495_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_28_fu_1890_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_29_fu_1911_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2503_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_29_fu_1911_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_30_fu_1931_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2511_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_30_fu_1931_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_31_fu_1952_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2519_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_31_fu_1952_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_32_fu_1972_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2527_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_32_fu_1972_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_33_fu_1993_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2535_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_33_fu_1993_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_34_fu_2013_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2543_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_34_fu_2013_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_35_fu_2034_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2551_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_35_fu_2034_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_36_fu_2054_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2559_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_36_fu_2054_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_37_fu_2075_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2567_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_37_fu_2075_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_38_fu_2095_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2575_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_38_fu_2095_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_39_fu_2116_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2583_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_39_fu_2116_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_40_fu_2136_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2591_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_40_fu_2136_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_41_fu_2157_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2599_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_41_fu_2157_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_42_fu_2177_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2607_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_42_fu_2177_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln70_3_fu_2194_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln70_fu_2197_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_43_fu_2217_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2615_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_43_fu_2217_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_2234_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2623_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln76_fu_2243_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln2_fu_2247_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln76_1_fu_2256_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln76_fu_2243_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_2234_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln76_1_fu_2256_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln2_fu_2247_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum_2_fu_2260_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2295_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2295_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2303_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2303_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2311_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2311_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2319_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2319_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2327_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2327_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2335_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2335_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2343_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2343_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2351_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2351_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2359_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2359_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2367_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2367_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2375_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2375_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2383_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2383_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2391_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2391_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2399_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2399_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2407_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2407_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2415_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2415_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2423_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2423_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2431_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2431_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2439_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2439_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2447_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2447_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2455_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2455_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2463_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2463_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2471_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2471_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2479_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2479_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2487_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2487_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2495_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2495_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2503_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2503_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2511_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2511_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2519_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2519_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2527_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2527_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2535_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2535_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2543_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2543_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2551_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2551_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2559_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2559_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2567_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2567_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2575_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2575_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2583_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2583_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2591_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2591_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2599_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2599_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2607_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2607_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2615_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2615_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_2623_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_2623_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter22_stage0 : STD_LOGIC;
    signal ap_idle_pp0_0to21 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_idle_pp0_1to23 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component neural_network_mul_15s_16s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_15s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (14 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_4_layer1_bias_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    layer1_bias_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_4_layer1_bias_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_bias_address0,
        ce0 => layer1_bias_ce0,
        q0 => layer1_bias_q0);

    mul_15s_16s_24_1_1_U48 : component neural_network_mul_15s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => layer1_weight_tile_load_reg_2931,
        din1 => mul_ln74_fu_1349_p1,
        dout => mul_ln74_fu_1349_p2);

    mac_muladd_15s_16s_24ns_24_4_1_U49 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_1_q0,
        din1 => grp_fu_2295_p1,
        din2 => grp_fu_2295_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2295_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U50 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_2_load_reg_2941,
        din1 => grp_fu_2303_p1,
        din2 => grp_fu_2303_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2303_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U51 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_3_q0,
        din1 => grp_fu_2311_p1,
        din2 => grp_fu_2311_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2311_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U52 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_4_load_reg_2976,
        din1 => grp_fu_2319_p1,
        din2 => grp_fu_2319_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2319_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U53 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_5_q0,
        din1 => grp_fu_2327_p1,
        din2 => grp_fu_2327_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2327_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U54 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_6_load_reg_3011,
        din1 => grp_fu_2335_p1,
        din2 => grp_fu_2335_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2335_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U55 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_7_q0,
        din1 => grp_fu_2343_p1,
        din2 => grp_fu_2343_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2343_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U56 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_8_load_reg_3046,
        din1 => grp_fu_2351_p1,
        din2 => grp_fu_2351_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2351_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U57 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_9_q0,
        din1 => grp_fu_2359_p1,
        din2 => grp_fu_2359_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2359_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U58 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_10_load_reg_3081,
        din1 => grp_fu_2367_p1,
        din2 => grp_fu_2367_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2367_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U59 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_11_q0,
        din1 => grp_fu_2375_p1,
        din2 => grp_fu_2375_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2375_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U60 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_12_load_reg_3116,
        din1 => grp_fu_2383_p1,
        din2 => grp_fu_2383_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2383_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U61 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_13_q0,
        din1 => grp_fu_2391_p1,
        din2 => grp_fu_2391_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2391_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U62 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_14_load_reg_3151,
        din1 => grp_fu_2399_p1,
        din2 => grp_fu_2399_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2399_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U63 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_15_q0,
        din1 => grp_fu_2407_p1,
        din2 => grp_fu_2407_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2407_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U64 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_16_load_reg_3186,
        din1 => grp_fu_2415_p1,
        din2 => grp_fu_2415_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2415_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U65 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_17_q0,
        din1 => grp_fu_2423_p1,
        din2 => grp_fu_2423_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2423_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U66 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_18_load_reg_3221,
        din1 => grp_fu_2431_p1,
        din2 => grp_fu_2431_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2431_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U67 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_19_q0,
        din1 => grp_fu_2439_p1,
        din2 => grp_fu_2439_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2439_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U68 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_20_load_reg_3256,
        din1 => grp_fu_2447_p1,
        din2 => grp_fu_2447_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2447_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U69 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_21_q0,
        din1 => grp_fu_2455_p1,
        din2 => grp_fu_2455_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2455_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U70 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_22_load_reg_3291,
        din1 => grp_fu_2463_p1,
        din2 => grp_fu_2463_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2463_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U71 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_23_q0,
        din1 => grp_fu_2471_p1,
        din2 => grp_fu_2471_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2471_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U72 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_24_load_reg_3326,
        din1 => grp_fu_2479_p1,
        din2 => grp_fu_2479_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2479_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U73 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_25_q0,
        din1 => grp_fu_2487_p1,
        din2 => grp_fu_2487_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2487_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U74 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_26_load_reg_3361,
        din1 => grp_fu_2495_p1,
        din2 => grp_fu_2495_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2495_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U75 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_27_q0,
        din1 => grp_fu_2503_p1,
        din2 => grp_fu_2503_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2503_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U76 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_28_load_reg_3396,
        din1 => grp_fu_2511_p1,
        din2 => grp_fu_2511_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2511_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U77 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_29_q0,
        din1 => grp_fu_2519_p1,
        din2 => grp_fu_2519_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2519_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U78 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_30_load_reg_3431,
        din1 => grp_fu_2527_p1,
        din2 => grp_fu_2527_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2527_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U79 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_31_q0,
        din1 => grp_fu_2535_p1,
        din2 => grp_fu_2535_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2535_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U80 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_32_load_reg_3466,
        din1 => grp_fu_2543_p1,
        din2 => grp_fu_2543_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2543_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U81 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_33_q0,
        din1 => grp_fu_2551_p1,
        din2 => grp_fu_2551_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2551_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U82 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_34_load_reg_3501,
        din1 => grp_fu_2559_p1,
        din2 => grp_fu_2559_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2559_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U83 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_35_q0,
        din1 => grp_fu_2567_p1,
        din2 => grp_fu_2567_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2567_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U84 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_36_load_reg_3536,
        din1 => grp_fu_2575_p1,
        din2 => grp_fu_2575_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2575_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U85 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_37_q0,
        din1 => grp_fu_2583_p1,
        din2 => grp_fu_2583_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2583_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U86 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_38_load_reg_3571,
        din1 => grp_fu_2591_p1,
        din2 => grp_fu_2591_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2591_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U87 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_39_q0,
        din1 => grp_fu_2599_p1,
        din2 => grp_fu_2599_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2599_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U88 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_40_load_reg_3606,
        din1 => grp_fu_2607_p1,
        din2 => grp_fu_2607_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2607_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U89 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_41_q0,
        din1 => grp_fu_2615_p1,
        din2 => grp_fu_2615_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2615_p3);

    mac_muladd_15s_16s_24ns_24_4_1_U90 : component neural_network_mac_muladd_15s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 15,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weight_tile_42_load_reg_3641,
        din1 => grp_fu_2623_p1,
        din2 => grp_fu_2623_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_2623_p3);

    flow_control_loop_pipe_sequential_init_U : component neural_network_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage1,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter22_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter10_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter11_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter12_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter13_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter14_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter15_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter16_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter17_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter17_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter18_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter18_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter19_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter19_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter20_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter20_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter21_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter21_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter22_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter22_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter6_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter7_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter8_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter9_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_const_logic_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
            end if; 
        end if;
    end process;

    i_1_fu_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln70_fu_1321_p2 = ap_const_lv1_0))) then 
                    i_1_fu_242 <= add_ln70_1_fu_1327_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_242 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln72_reg_3676 <= add_ln72_fu_2266_p2;
                icmp_ln14_reg_3681 <= icmp_ln14_fu_2272_p2;
                layer1_weight_tile_10_load_reg_3081 <= layer1_weight_tile_10_q0;
                layer1_weight_tile_12_load_reg_3116 <= layer1_weight_tile_12_q0;
                layer1_weight_tile_14_load_reg_3151 <= layer1_weight_tile_14_q0;
                layer1_weight_tile_16_load_reg_3186 <= layer1_weight_tile_16_q0;
                layer1_weight_tile_18_load_reg_3221 <= layer1_weight_tile_18_q0;
                layer1_weight_tile_20_load_reg_3256 <= layer1_weight_tile_20_q0;
                layer1_weight_tile_22_load_reg_3291 <= layer1_weight_tile_22_q0;
                layer1_weight_tile_24_load_reg_3326 <= layer1_weight_tile_24_q0;
                layer1_weight_tile_26_load_reg_3361 <= layer1_weight_tile_26_q0;
                layer1_weight_tile_28_load_reg_3396 <= layer1_weight_tile_28_q0;
                layer1_weight_tile_30_load_reg_3431 <= layer1_weight_tile_30_q0;
                layer1_weight_tile_32_load_reg_3466 <= layer1_weight_tile_32_q0;
                layer1_weight_tile_34_load_reg_3501 <= layer1_weight_tile_34_q0;
                layer1_weight_tile_36_load_reg_3536 <= layer1_weight_tile_36_q0;
                layer1_weight_tile_38_load_reg_3571 <= layer1_weight_tile_38_q0;
                layer1_weight_tile_40_load_reg_3606 <= layer1_weight_tile_40_q0;
                layer1_weight_tile_42_load_reg_3641 <= layer1_weight_tile_42_q0;
                layer1_weight_tile_4_load_reg_2976 <= layer1_weight_tile_4_q0;
                layer1_weight_tile_6_load_reg_3011 <= layer1_weight_tile_6_q0;
                layer1_weight_tile_8_load_reg_3046 <= layer1_weight_tile_8_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                i_reg_2859 <= ap_sig_allocacmp_i;
                i_reg_2859_pp0_iter10_reg <= i_reg_2859_pp0_iter9_reg;
                i_reg_2859_pp0_iter11_reg <= i_reg_2859_pp0_iter10_reg;
                i_reg_2859_pp0_iter12_reg <= i_reg_2859_pp0_iter11_reg;
                i_reg_2859_pp0_iter13_reg <= i_reg_2859_pp0_iter12_reg;
                i_reg_2859_pp0_iter14_reg <= i_reg_2859_pp0_iter13_reg;
                i_reg_2859_pp0_iter15_reg <= i_reg_2859_pp0_iter14_reg;
                i_reg_2859_pp0_iter16_reg <= i_reg_2859_pp0_iter15_reg;
                i_reg_2859_pp0_iter17_reg <= i_reg_2859_pp0_iter16_reg;
                i_reg_2859_pp0_iter18_reg <= i_reg_2859_pp0_iter17_reg;
                i_reg_2859_pp0_iter19_reg <= i_reg_2859_pp0_iter18_reg;
                i_reg_2859_pp0_iter1_reg <= i_reg_2859;
                i_reg_2859_pp0_iter20_reg <= i_reg_2859_pp0_iter19_reg;
                i_reg_2859_pp0_iter21_reg <= i_reg_2859_pp0_iter20_reg;
                i_reg_2859_pp0_iter2_reg <= i_reg_2859_pp0_iter1_reg;
                i_reg_2859_pp0_iter3_reg <= i_reg_2859_pp0_iter2_reg;
                i_reg_2859_pp0_iter4_reg <= i_reg_2859_pp0_iter3_reg;
                i_reg_2859_pp0_iter5_reg <= i_reg_2859_pp0_iter4_reg;
                i_reg_2859_pp0_iter6_reg <= i_reg_2859_pp0_iter5_reg;
                i_reg_2859_pp0_iter7_reg <= i_reg_2859_pp0_iter6_reg;
                i_reg_2859_pp0_iter8_reg <= i_reg_2859_pp0_iter7_reg;
                i_reg_2859_pp0_iter9_reg <= i_reg_2859_pp0_iter8_reg;
                icmp_ln70_reg_2908 <= icmp_ln70_fu_1321_p2;
                icmp_ln70_reg_2908_pp0_iter10_reg <= icmp_ln70_reg_2908_pp0_iter9_reg;
                icmp_ln70_reg_2908_pp0_iter11_reg <= icmp_ln70_reg_2908_pp0_iter10_reg;
                icmp_ln70_reg_2908_pp0_iter12_reg <= icmp_ln70_reg_2908_pp0_iter11_reg;
                icmp_ln70_reg_2908_pp0_iter13_reg <= icmp_ln70_reg_2908_pp0_iter12_reg;
                icmp_ln70_reg_2908_pp0_iter14_reg <= icmp_ln70_reg_2908_pp0_iter13_reg;
                icmp_ln70_reg_2908_pp0_iter15_reg <= icmp_ln70_reg_2908_pp0_iter14_reg;
                icmp_ln70_reg_2908_pp0_iter16_reg <= icmp_ln70_reg_2908_pp0_iter15_reg;
                icmp_ln70_reg_2908_pp0_iter17_reg <= icmp_ln70_reg_2908_pp0_iter16_reg;
                icmp_ln70_reg_2908_pp0_iter18_reg <= icmp_ln70_reg_2908_pp0_iter17_reg;
                icmp_ln70_reg_2908_pp0_iter19_reg <= icmp_ln70_reg_2908_pp0_iter18_reg;
                icmp_ln70_reg_2908_pp0_iter1_reg <= icmp_ln70_reg_2908;
                icmp_ln70_reg_2908_pp0_iter20_reg <= icmp_ln70_reg_2908_pp0_iter19_reg;
                icmp_ln70_reg_2908_pp0_iter21_reg <= icmp_ln70_reg_2908_pp0_iter20_reg;
                icmp_ln70_reg_2908_pp0_iter2_reg <= icmp_ln70_reg_2908_pp0_iter1_reg;
                icmp_ln70_reg_2908_pp0_iter3_reg <= icmp_ln70_reg_2908_pp0_iter2_reg;
                icmp_ln70_reg_2908_pp0_iter4_reg <= icmp_ln70_reg_2908_pp0_iter3_reg;
                icmp_ln70_reg_2908_pp0_iter5_reg <= icmp_ln70_reg_2908_pp0_iter4_reg;
                icmp_ln70_reg_2908_pp0_iter6_reg <= icmp_ln70_reg_2908_pp0_iter5_reg;
                icmp_ln70_reg_2908_pp0_iter7_reg <= icmp_ln70_reg_2908_pp0_iter6_reg;
                icmp_ln70_reg_2908_pp0_iter8_reg <= icmp_ln70_reg_2908_pp0_iter7_reg;
                icmp_ln70_reg_2908_pp0_iter9_reg <= icmp_ln70_reg_2908_pp0_iter8_reg;
                lshr_ln_reg_3661 <= add_ln70_fu_2197_p2(5 downto 2);
                sext_ln74_10_cast_reg_2804 <= sext_ln74_10_cast_fu_1262_p1;
                sext_ln74_11_cast_reg_2799 <= sext_ln74_11_cast_fu_1258_p1;
                sext_ln74_12_cast_reg_2794 <= sext_ln74_12_cast_fu_1254_p1;
                sext_ln74_13_cast_reg_2789 <= sext_ln74_13_cast_fu_1250_p1;
                sext_ln74_14_cast_reg_2784 <= sext_ln74_14_cast_fu_1246_p1;
                sext_ln74_15_cast_reg_2779 <= sext_ln74_15_cast_fu_1242_p1;
                sext_ln74_16_cast_reg_2774 <= sext_ln74_16_cast_fu_1238_p1;
                sext_ln74_17_cast_reg_2769 <= sext_ln74_17_cast_fu_1234_p1;
                sext_ln74_18_cast_reg_2764 <= sext_ln74_18_cast_fu_1230_p1;
                sext_ln74_19_cast_reg_2759 <= sext_ln74_19_cast_fu_1226_p1;
                sext_ln74_1_cast_reg_2849 <= sext_ln74_1_cast_fu_1298_p1;
                sext_ln74_20_cast_reg_2754 <= sext_ln74_20_cast_fu_1222_p1;
                sext_ln74_21_cast_reg_2749 <= sext_ln74_21_cast_fu_1218_p1;
                sext_ln74_22_cast_reg_2744 <= sext_ln74_22_cast_fu_1214_p1;
                sext_ln74_23_cast_reg_2739 <= sext_ln74_23_cast_fu_1210_p1;
                sext_ln74_24_cast_reg_2734 <= sext_ln74_24_cast_fu_1206_p1;
                sext_ln74_25_cast_reg_2729 <= sext_ln74_25_cast_fu_1202_p1;
                sext_ln74_26_cast_reg_2724 <= sext_ln74_26_cast_fu_1198_p1;
                sext_ln74_27_cast_reg_2719 <= sext_ln74_27_cast_fu_1194_p1;
                sext_ln74_28_cast_reg_2714 <= sext_ln74_28_cast_fu_1190_p1;
                sext_ln74_29_cast_reg_2709 <= sext_ln74_29_cast_fu_1186_p1;
                sext_ln74_2_cast_reg_2844 <= sext_ln74_2_cast_fu_1294_p1;
                sext_ln74_30_cast_reg_2704 <= sext_ln74_30_cast_fu_1182_p1;
                sext_ln74_31_cast_reg_2699 <= sext_ln74_31_cast_fu_1178_p1;
                sext_ln74_32_cast_reg_2694 <= sext_ln74_32_cast_fu_1174_p1;
                sext_ln74_33_cast_reg_2689 <= sext_ln74_33_cast_fu_1170_p1;
                sext_ln74_34_cast_reg_2684 <= sext_ln74_34_cast_fu_1166_p1;
                sext_ln74_35_cast_reg_2679 <= sext_ln74_35_cast_fu_1162_p1;
                sext_ln74_36_cast_reg_2674 <= sext_ln74_36_cast_fu_1158_p1;
                sext_ln74_37_cast_reg_2669 <= sext_ln74_37_cast_fu_1154_p1;
                sext_ln74_38_cast_reg_2664 <= sext_ln74_38_cast_fu_1150_p1;
                sext_ln74_39_cast_reg_2659 <= sext_ln74_39_cast_fu_1146_p1;
                sext_ln74_3_cast_reg_2839 <= sext_ln74_3_cast_fu_1290_p1;
                sext_ln74_40_cast_reg_2654 <= sext_ln74_40_cast_fu_1142_p1;
                sext_ln74_41_cast_reg_2649 <= sext_ln74_41_cast_fu_1138_p1;
                sext_ln74_42_cast_reg_2644 <= sext_ln74_42_cast_fu_1134_p1;
                sext_ln74_4_cast_reg_2834 <= sext_ln74_4_cast_fu_1286_p1;
                sext_ln74_5_cast_reg_2829 <= sext_ln74_5_cast_fu_1282_p1;
                sext_ln74_6_cast_reg_2824 <= sext_ln74_6_cast_fu_1278_p1;
                sext_ln74_7_cast_reg_2819 <= sext_ln74_7_cast_fu_1274_p1;
                sext_ln74_8_cast_reg_2814 <= sext_ln74_8_cast_fu_1270_p1;
                sext_ln74_9_cast_reg_2809 <= sext_ln74_9_cast_fu_1266_p1;
                sext_ln74_cast_reg_2854 <= sext_ln74_cast_fu_1302_p1;
                tmp_7_reg_2946 <= mul_ln74_fu_1349_p2(23 downto 8);
                trunc_ln70_reg_2912_pp0_iter10_reg <= trunc_ln70_reg_2912_pp0_iter9_reg;
                trunc_ln70_reg_2912_pp0_iter11_reg <= trunc_ln70_reg_2912_pp0_iter10_reg;
                trunc_ln70_reg_2912_pp0_iter12_reg <= trunc_ln70_reg_2912_pp0_iter11_reg;
                trunc_ln70_reg_2912_pp0_iter13_reg <= trunc_ln70_reg_2912_pp0_iter12_reg;
                trunc_ln70_reg_2912_pp0_iter14_reg <= trunc_ln70_reg_2912_pp0_iter13_reg;
                trunc_ln70_reg_2912_pp0_iter15_reg <= trunc_ln70_reg_2912_pp0_iter14_reg;
                trunc_ln70_reg_2912_pp0_iter16_reg <= trunc_ln70_reg_2912_pp0_iter15_reg;
                trunc_ln70_reg_2912_pp0_iter17_reg <= trunc_ln70_reg_2912_pp0_iter16_reg;
                trunc_ln70_reg_2912_pp0_iter18_reg <= trunc_ln70_reg_2912_pp0_iter17_reg;
                trunc_ln70_reg_2912_pp0_iter19_reg <= trunc_ln70_reg_2912_pp0_iter18_reg;
                trunc_ln70_reg_2912_pp0_iter1_reg <= trunc_ln70_reg_2912;
                trunc_ln70_reg_2912_pp0_iter20_reg <= trunc_ln70_reg_2912_pp0_iter19_reg;
                trunc_ln70_reg_2912_pp0_iter21_reg <= trunc_ln70_reg_2912_pp0_iter20_reg;
                trunc_ln70_reg_2912_pp0_iter22_reg <= trunc_ln70_reg_2912_pp0_iter21_reg;
                trunc_ln70_reg_2912_pp0_iter2_reg <= trunc_ln70_reg_2912_pp0_iter1_reg;
                trunc_ln70_reg_2912_pp0_iter3_reg <= trunc_ln70_reg_2912_pp0_iter2_reg;
                trunc_ln70_reg_2912_pp0_iter4_reg <= trunc_ln70_reg_2912_pp0_iter3_reg;
                trunc_ln70_reg_2912_pp0_iter5_reg <= trunc_ln70_reg_2912_pp0_iter4_reg;
                trunc_ln70_reg_2912_pp0_iter6_reg <= trunc_ln70_reg_2912_pp0_iter5_reg;
                trunc_ln70_reg_2912_pp0_iter7_reg <= trunc_ln70_reg_2912_pp0_iter6_reg;
                trunc_ln70_reg_2912_pp0_iter8_reg <= trunc_ln70_reg_2912_pp0_iter7_reg;
                trunc_ln70_reg_2912_pp0_iter9_reg <= trunc_ln70_reg_2912_pp0_iter8_reg;
                    zext_ln70_2_reg_2864(2 downto 0) <= zext_ln70_2_fu_1314_p1(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter10_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter9_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter11_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter10_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter12_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter11_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter13_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter12_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter14_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter13_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter15_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter14_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter16_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter15_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter17_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter16_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter18_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter17_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter19_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter18_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter1_reg(2 downto 0) <= zext_ln70_2_reg_2864(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter2_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter1_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter3_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter2_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter4_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter3_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter5_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter4_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter6_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter5_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter7_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter6_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter8_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter7_reg(2 downto 0);
                    zext_ln70_2_reg_2864_pp0_iter9_reg(2 downto 0) <= zext_ln70_2_reg_2864_pp0_iter8_reg(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln70_reg_2908 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                layer1_weight_tile_2_load_reg_2941 <= layer1_weight_tile_2_q0;
                layer1_weight_tile_load_reg_2931 <= layer1_weight_tile_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln70_fu_1321_p2 = ap_const_lv1_0))) then
                trunc_ln70_reg_2912 <= trunc_ln70_fu_1333_p1;
            end if;
        end if;
    end process;
    zext_ln70_2_reg_2864(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter2_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter3_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter4_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter5_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter6_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter7_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter8_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter9_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter10_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter11_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter12_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter13_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter14_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter15_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter16_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter17_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter18_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_2_reg_2864_pp0_iter19_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter22_stage0, ap_idle_pp0_0to21, ap_idle_pp0_1to23, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter22_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to23 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    add_ln70_1_fu_1327_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv3_1));
    add_ln70_fu_2197_p2 <= std_logic_vector(unsigned(zext_ln70_3_fu_2194_p1) + unsigned(trunc_ln));
    add_ln72_fu_2266_p2 <= std_logic_vector(signed(sext_ln76_1_fu_2256_p1) + signed(trunc_ln2_fu_2247_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage1_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage1_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage1_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage1_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage1_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage1_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage1_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state47_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, icmp_ln70_reg_2908)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln70_reg_2908 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter22_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter22, icmp_ln70_reg_2908_pp0_iter21_reg, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln70_reg_2908_pp0_iter21_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter22_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter22_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter22_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter22_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to21_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to21 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to23_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to23 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to23 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage1;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_1_fu_242, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_242;
        end if; 
    end process;

    grp_fu_2295_p1 <= sext_ln74_1_cast_reg_2849(16 - 1 downto 0);
    grp_fu_2295_p2 <= (tmp_7_reg_2946 & ap_const_lv8_0);
    grp_fu_2303_p1 <= sext_ln74_2_cast_reg_2844(16 - 1 downto 0);
    grp_fu_2303_p2 <= (tmp_8_fu_1378_p4 & ap_const_lv8_0);
    grp_fu_2311_p1 <= sext_ln74_3_cast_reg_2839(16 - 1 downto 0);
    grp_fu_2311_p2 <= (tmp_9_fu_1398_p4 & ap_const_lv8_0);
    grp_fu_2319_p1 <= sext_ln74_4_cast_reg_2834(16 - 1 downto 0);
    grp_fu_2319_p2 <= (tmp_s_fu_1419_p4 & ap_const_lv8_0);
    grp_fu_2327_p1 <= sext_ln74_5_cast_reg_2829(16 - 1 downto 0);
    grp_fu_2327_p2 <= (tmp_3_fu_1439_p4 & ap_const_lv8_0);
    grp_fu_2335_p1 <= sext_ln74_6_cast_reg_2824(16 - 1 downto 0);
    grp_fu_2335_p2 <= (tmp_4_fu_1460_p4 & ap_const_lv8_0);
    grp_fu_2343_p1 <= sext_ln74_7_cast_reg_2819(16 - 1 downto 0);
    grp_fu_2343_p2 <= (tmp_5_fu_1480_p4 & ap_const_lv8_0);
    grp_fu_2351_p1 <= sext_ln74_8_cast_reg_2814(16 - 1 downto 0);
    grp_fu_2351_p2 <= (tmp_6_fu_1501_p4 & ap_const_lv8_0);
    grp_fu_2359_p1 <= sext_ln74_9_cast_reg_2809(16 - 1 downto 0);
    grp_fu_2359_p2 <= (tmp_10_fu_1521_p4 & ap_const_lv8_0);
    grp_fu_2367_p1 <= sext_ln74_10_cast_reg_2804(16 - 1 downto 0);
    grp_fu_2367_p2 <= (tmp_11_fu_1542_p4 & ap_const_lv8_0);
    grp_fu_2375_p1 <= sext_ln74_11_cast_reg_2799(16 - 1 downto 0);
    grp_fu_2375_p2 <= (tmp_12_fu_1562_p4 & ap_const_lv8_0);
    grp_fu_2383_p1 <= sext_ln74_12_cast_reg_2794(16 - 1 downto 0);
    grp_fu_2383_p2 <= (tmp_13_fu_1583_p4 & ap_const_lv8_0);
    grp_fu_2391_p1 <= sext_ln74_13_cast_reg_2789(16 - 1 downto 0);
    grp_fu_2391_p2 <= (tmp_14_fu_1603_p4 & ap_const_lv8_0);
    grp_fu_2399_p1 <= sext_ln74_14_cast_reg_2784(16 - 1 downto 0);
    grp_fu_2399_p2 <= (tmp_15_fu_1624_p4 & ap_const_lv8_0);
    grp_fu_2407_p1 <= sext_ln74_15_cast_reg_2779(16 - 1 downto 0);
    grp_fu_2407_p2 <= (tmp_16_fu_1644_p4 & ap_const_lv8_0);
    grp_fu_2415_p1 <= sext_ln74_16_cast_reg_2774(16 - 1 downto 0);
    grp_fu_2415_p2 <= (tmp_17_fu_1665_p4 & ap_const_lv8_0);
    grp_fu_2423_p1 <= sext_ln74_17_cast_reg_2769(16 - 1 downto 0);
    grp_fu_2423_p2 <= (tmp_18_fu_1685_p4 & ap_const_lv8_0);
    grp_fu_2431_p1 <= sext_ln74_18_cast_reg_2764(16 - 1 downto 0);
    grp_fu_2431_p2 <= (tmp_19_fu_1706_p4 & ap_const_lv8_0);
    grp_fu_2439_p1 <= sext_ln74_19_cast_reg_2759(16 - 1 downto 0);
    grp_fu_2439_p2 <= (tmp_20_fu_1726_p4 & ap_const_lv8_0);
    grp_fu_2447_p1 <= sext_ln74_20_cast_reg_2754(16 - 1 downto 0);
    grp_fu_2447_p2 <= (tmp_21_fu_1747_p4 & ap_const_lv8_0);
    grp_fu_2455_p1 <= sext_ln74_21_cast_reg_2749(16 - 1 downto 0);
    grp_fu_2455_p2 <= (tmp_22_fu_1767_p4 & ap_const_lv8_0);
    grp_fu_2463_p1 <= sext_ln74_22_cast_reg_2744(16 - 1 downto 0);
    grp_fu_2463_p2 <= (tmp_23_fu_1788_p4 & ap_const_lv8_0);
    grp_fu_2471_p1 <= sext_ln74_23_cast_reg_2739(16 - 1 downto 0);
    grp_fu_2471_p2 <= (tmp_24_fu_1808_p4 & ap_const_lv8_0);
    grp_fu_2479_p1 <= sext_ln74_24_cast_reg_2734(16 - 1 downto 0);
    grp_fu_2479_p2 <= (tmp_25_fu_1829_p4 & ap_const_lv8_0);
    grp_fu_2487_p1 <= sext_ln74_25_cast_reg_2729(16 - 1 downto 0);
    grp_fu_2487_p2 <= (tmp_26_fu_1849_p4 & ap_const_lv8_0);
    grp_fu_2495_p1 <= sext_ln74_26_cast_reg_2724(16 - 1 downto 0);
    grp_fu_2495_p2 <= (tmp_27_fu_1870_p4 & ap_const_lv8_0);
    grp_fu_2503_p1 <= sext_ln74_27_cast_reg_2719(16 - 1 downto 0);
    grp_fu_2503_p2 <= (tmp_28_fu_1890_p4 & ap_const_lv8_0);
    grp_fu_2511_p1 <= sext_ln74_28_cast_reg_2714(16 - 1 downto 0);
    grp_fu_2511_p2 <= (tmp_29_fu_1911_p4 & ap_const_lv8_0);
    grp_fu_2519_p1 <= sext_ln74_29_cast_reg_2709(16 - 1 downto 0);
    grp_fu_2519_p2 <= (tmp_30_fu_1931_p4 & ap_const_lv8_0);
    grp_fu_2527_p1 <= sext_ln74_30_cast_reg_2704(16 - 1 downto 0);
    grp_fu_2527_p2 <= (tmp_31_fu_1952_p4 & ap_const_lv8_0);
    grp_fu_2535_p1 <= sext_ln74_31_cast_reg_2699(16 - 1 downto 0);
    grp_fu_2535_p2 <= (tmp_32_fu_1972_p4 & ap_const_lv8_0);
    grp_fu_2543_p1 <= sext_ln74_32_cast_reg_2694(16 - 1 downto 0);
    grp_fu_2543_p2 <= (tmp_33_fu_1993_p4 & ap_const_lv8_0);
    grp_fu_2551_p1 <= sext_ln74_33_cast_reg_2689(16 - 1 downto 0);
    grp_fu_2551_p2 <= (tmp_34_fu_2013_p4 & ap_const_lv8_0);
    grp_fu_2559_p1 <= sext_ln74_34_cast_reg_2684(16 - 1 downto 0);
    grp_fu_2559_p2 <= (tmp_35_fu_2034_p4 & ap_const_lv8_0);
    grp_fu_2567_p1 <= sext_ln74_35_cast_reg_2679(16 - 1 downto 0);
    grp_fu_2567_p2 <= (tmp_36_fu_2054_p4 & ap_const_lv8_0);
    grp_fu_2575_p1 <= sext_ln74_36_cast_reg_2674(16 - 1 downto 0);
    grp_fu_2575_p2 <= (tmp_37_fu_2075_p4 & ap_const_lv8_0);
    grp_fu_2583_p1 <= sext_ln74_37_cast_reg_2669(16 - 1 downto 0);
    grp_fu_2583_p2 <= (tmp_38_fu_2095_p4 & ap_const_lv8_0);
    grp_fu_2591_p1 <= sext_ln74_38_cast_reg_2664(16 - 1 downto 0);
    grp_fu_2591_p2 <= (tmp_39_fu_2116_p4 & ap_const_lv8_0);
    grp_fu_2599_p1 <= sext_ln74_39_cast_reg_2659(16 - 1 downto 0);
    grp_fu_2599_p2 <= (tmp_40_fu_2136_p4 & ap_const_lv8_0);
    grp_fu_2607_p1 <= sext_ln74_40_cast_reg_2654(16 - 1 downto 0);
    grp_fu_2607_p2 <= (tmp_41_fu_2157_p4 & ap_const_lv8_0);
    grp_fu_2615_p1 <= sext_ln74_41_cast_reg_2649(16 - 1 downto 0);
    grp_fu_2615_p2 <= (tmp_42_fu_2177_p4 & ap_const_lv8_0);
    grp_fu_2623_p1 <= sext_ln74_42_cast_reg_2644(16 - 1 downto 0);
    grp_fu_2623_p2 <= (tmp_43_fu_2217_p4 & ap_const_lv8_0);
    icmp_ln14_fu_2272_p2 <= "1" when (signed(sum_2_fu_2260_p2) > signed(ap_const_lv16_0)) else "0";
    icmp_ln70_fu_1321_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv3_4) else "0";
    layer1_bias_address0 <= zext_ln70_fu_2202_p1(6 - 1 downto 0);

    layer1_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_bias_ce0 <= ap_const_logic_1;
        else 
            layer1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_1_address0 <= zext_ln70_1_fu_2278_p1(4 - 1 downto 0);

    layer1_output_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_1_ce0 <= ap_const_logic_1;
        else 
            layer1_output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_1_d0 <= select_ln14_fu_2285_p3;

    layer1_output_1_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001, trunc_ln70_reg_2912_pp0_iter22_reg)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln70_reg_2912_pp0_iter22_reg = ap_const_lv2_1))) then 
            layer1_output_1_we0 <= ap_const_logic_1;
        else 
            layer1_output_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_2_address0 <= zext_ln70_1_fu_2278_p1(4 - 1 downto 0);

    layer1_output_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_2_ce0 <= ap_const_logic_1;
        else 
            layer1_output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_2_d0 <= select_ln14_fu_2285_p3;

    layer1_output_2_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001, trunc_ln70_reg_2912_pp0_iter22_reg)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln70_reg_2912_pp0_iter22_reg = ap_const_lv2_2))) then 
            layer1_output_2_we0 <= ap_const_logic_1;
        else 
            layer1_output_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_3_address0 <= zext_ln70_1_fu_2278_p1(4 - 1 downto 0);

    layer1_output_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_3_ce0 <= ap_const_logic_1;
        else 
            layer1_output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_3_d0 <= select_ln14_fu_2285_p3;

    layer1_output_3_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001, trunc_ln70_reg_2912_pp0_iter22_reg)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln70_reg_2912_pp0_iter22_reg = ap_const_lv2_3))) then 
            layer1_output_3_we0 <= ap_const_logic_1;
        else 
            layer1_output_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_address0 <= zext_ln70_1_fu_2278_p1(4 - 1 downto 0);

    layer1_output_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_ce0 <= ap_const_logic_1;
        else 
            layer1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_d0 <= select_ln14_fu_2285_p3;

    layer1_output_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter23, ap_block_pp0_stage0_11001, trunc_ln70_reg_2912_pp0_iter22_reg)
    begin
        if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (trunc_ln70_reg_2912_pp0_iter22_reg = ap_const_lv2_0))) then 
            layer1_output_we0 <= ap_const_logic_1;
        else 
            layer1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_10_address0 <= zext_ln70_2_reg_2864_pp0_iter3_reg(2 - 1 downto 0);

    layer1_weight_tile_10_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_10_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_11_address0 <= zext_ln70_2_reg_2864_pp0_iter4_reg(2 - 1 downto 0);

    layer1_weight_tile_11_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_11_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_12_address0 <= zext_ln70_2_reg_2864_pp0_iter4_reg(2 - 1 downto 0);

    layer1_weight_tile_12_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_12_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_13_address0 <= zext_ln70_2_reg_2864_pp0_iter5_reg(2 - 1 downto 0);

    layer1_weight_tile_13_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_13_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_14_address0 <= zext_ln70_2_reg_2864_pp0_iter5_reg(2 - 1 downto 0);

    layer1_weight_tile_14_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_14_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_15_address0 <= zext_ln70_2_reg_2864_pp0_iter6_reg(2 - 1 downto 0);

    layer1_weight_tile_15_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_15_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_16_address0 <= zext_ln70_2_reg_2864_pp0_iter6_reg(2 - 1 downto 0);

    layer1_weight_tile_16_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_16_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_17_address0 <= zext_ln70_2_reg_2864_pp0_iter7_reg(2 - 1 downto 0);

    layer1_weight_tile_17_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_17_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_18_address0 <= zext_ln70_2_reg_2864_pp0_iter7_reg(2 - 1 downto 0);

    layer1_weight_tile_18_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_18_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_19_address0 <= zext_ln70_2_reg_2864_pp0_iter8_reg(2 - 1 downto 0);

    layer1_weight_tile_19_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_19_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_1_address0 <= zext_ln70_2_fu_1314_p1(2 - 1 downto 0);

    layer1_weight_tile_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_1_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_20_address0 <= zext_ln70_2_reg_2864_pp0_iter8_reg(2 - 1 downto 0);

    layer1_weight_tile_20_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_20_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_20_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_21_address0 <= zext_ln70_2_reg_2864_pp0_iter9_reg(2 - 1 downto 0);

    layer1_weight_tile_21_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_21_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_22_address0 <= zext_ln70_2_reg_2864_pp0_iter9_reg(2 - 1 downto 0);

    layer1_weight_tile_22_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_22_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_23_address0 <= zext_ln70_2_reg_2864_pp0_iter10_reg(2 - 1 downto 0);

    layer1_weight_tile_23_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_23_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_24_address0 <= zext_ln70_2_reg_2864_pp0_iter10_reg(2 - 1 downto 0);

    layer1_weight_tile_24_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_24_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_25_address0 <= zext_ln70_2_reg_2864_pp0_iter11_reg(2 - 1 downto 0);

    layer1_weight_tile_25_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_25_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_26_address0 <= zext_ln70_2_reg_2864_pp0_iter11_reg(2 - 1 downto 0);

    layer1_weight_tile_26_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_26_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_27_address0 <= zext_ln70_2_reg_2864_pp0_iter12_reg(2 - 1 downto 0);

    layer1_weight_tile_27_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_27_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_27_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_28_address0 <= zext_ln70_2_reg_2864_pp0_iter12_reg(2 - 1 downto 0);

    layer1_weight_tile_28_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_28_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_28_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_29_address0 <= zext_ln70_2_reg_2864_pp0_iter13_reg(2 - 1 downto 0);

    layer1_weight_tile_29_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_29_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_29_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_2_address0 <= zext_ln70_2_fu_1314_p1(2 - 1 downto 0);

    layer1_weight_tile_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_2_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_30_address0 <= zext_ln70_2_reg_2864_pp0_iter13_reg(2 - 1 downto 0);

    layer1_weight_tile_30_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_30_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_30_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_31_address0 <= zext_ln70_2_reg_2864_pp0_iter14_reg(2 - 1 downto 0);

    layer1_weight_tile_31_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_31_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_31_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_32_address0 <= zext_ln70_2_reg_2864_pp0_iter14_reg(2 - 1 downto 0);

    layer1_weight_tile_32_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter15, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_32_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_32_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_33_address0 <= zext_ln70_2_reg_2864_pp0_iter15_reg(2 - 1 downto 0);

    layer1_weight_tile_33_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_33_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_33_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_34_address0 <= zext_ln70_2_reg_2864_pp0_iter15_reg(2 - 1 downto 0);

    layer1_weight_tile_34_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter16, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_34_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_34_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_35_address0 <= zext_ln70_2_reg_2864_pp0_iter16_reg(2 - 1 downto 0);

    layer1_weight_tile_35_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_35_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_35_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_36_address0 <= zext_ln70_2_reg_2864_pp0_iter16_reg(2 - 1 downto 0);

    layer1_weight_tile_36_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_36_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_36_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_37_address0 <= zext_ln70_2_reg_2864_pp0_iter17_reg(2 - 1 downto 0);

    layer1_weight_tile_37_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_37_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_37_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_38_address0 <= zext_ln70_2_reg_2864_pp0_iter17_reg(2 - 1 downto 0);

    layer1_weight_tile_38_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter18, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_38_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_38_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_39_address0 <= zext_ln70_2_reg_2864_pp0_iter18_reg(2 - 1 downto 0);

    layer1_weight_tile_39_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_39_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_39_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_3_address0 <= zext_ln70_2_reg_2864(2 - 1 downto 0);

    layer1_weight_tile_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_3_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_40_address0 <= zext_ln70_2_reg_2864_pp0_iter18_reg(2 - 1 downto 0);

    layer1_weight_tile_40_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter19, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_40_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_40_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_41_address0 <= zext_ln70_2_reg_2864_pp0_iter19_reg(2 - 1 downto 0);

    layer1_weight_tile_41_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter20, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_41_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_41_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_42_address0 <= zext_ln70_2_reg_2864_pp0_iter19_reg(2 - 1 downto 0);

    layer1_weight_tile_42_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter20, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_42_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_42_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_4_address0 <= zext_ln70_2_reg_2864(2 - 1 downto 0);

    layer1_weight_tile_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_4_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_5_address0 <= zext_ln70_2_reg_2864_pp0_iter1_reg(2 - 1 downto 0);

    layer1_weight_tile_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_5_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_6_address0 <= zext_ln70_2_reg_2864_pp0_iter1_reg(2 - 1 downto 0);

    layer1_weight_tile_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_6_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_7_address0 <= zext_ln70_2_reg_2864_pp0_iter2_reg(2 - 1 downto 0);

    layer1_weight_tile_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_7_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_8_address0 <= zext_ln70_2_reg_2864_pp0_iter2_reg(2 - 1 downto 0);

    layer1_weight_tile_8_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_8_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_9_address0 <= zext_ln70_2_reg_2864_pp0_iter3_reg(2 - 1 downto 0);

    layer1_weight_tile_9_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_9_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weight_tile_address0 <= zext_ln70_2_fu_1314_p1(2 - 1 downto 0);

    layer1_weight_tile_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weight_tile_ce0 <= ap_const_logic_1;
        else 
            layer1_weight_tile_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln74_fu_1349_p1 <= sext_ln74_cast_reg_2854(16 - 1 downto 0);
    select_ln14_fu_2285_p3 <= 
        add_ln72_reg_3676 when (icmp_ln14_reg_3681(0) = '1') else 
        ap_const_lv15_0;
        sext_ln74_10_cast_fu_1262_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_10),24));

        sext_ln74_11_cast_fu_1258_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_11),24));

        sext_ln74_12_cast_fu_1254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_12),24));

        sext_ln74_13_cast_fu_1250_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_13),24));

        sext_ln74_14_cast_fu_1246_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_14),24));

        sext_ln74_15_cast_fu_1242_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_15),24));

        sext_ln74_16_cast_fu_1238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_16),24));

        sext_ln74_17_cast_fu_1234_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_17),24));

        sext_ln74_18_cast_fu_1230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_18),24));

        sext_ln74_19_cast_fu_1226_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_19),24));

        sext_ln74_1_cast_fu_1298_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_1),24));

        sext_ln74_20_cast_fu_1222_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_20),24));

        sext_ln74_21_cast_fu_1218_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_21),24));

        sext_ln74_22_cast_fu_1214_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_22),24));

        sext_ln74_23_cast_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_23),24));

        sext_ln74_24_cast_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_24),24));

        sext_ln74_25_cast_fu_1202_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_25),24));

        sext_ln74_26_cast_fu_1198_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_26),24));

        sext_ln74_27_cast_fu_1194_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_27),24));

        sext_ln74_28_cast_fu_1190_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_28),24));

        sext_ln74_29_cast_fu_1186_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_29),24));

        sext_ln74_2_cast_fu_1294_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_2),24));

        sext_ln74_30_cast_fu_1182_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_30),24));

        sext_ln74_31_cast_fu_1178_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_31),24));

        sext_ln74_32_cast_fu_1174_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_32),24));

        sext_ln74_33_cast_fu_1170_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_33),24));

        sext_ln74_34_cast_fu_1166_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_34),24));

        sext_ln74_35_cast_fu_1162_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_35),24));

        sext_ln74_36_cast_fu_1158_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_36),24));

        sext_ln74_37_cast_fu_1154_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_37),24));

        sext_ln74_38_cast_fu_1150_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_38),24));

        sext_ln74_39_cast_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_39),24));

        sext_ln74_3_cast_fu_1290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_3),24));

        sext_ln74_40_cast_fu_1142_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_40),24));

        sext_ln74_41_cast_fu_1138_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_41),24));

        sext_ln74_42_cast_fu_1134_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_42),24));

        sext_ln74_4_cast_fu_1286_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_4),24));

        sext_ln74_5_cast_fu_1282_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_5),24));

        sext_ln74_6_cast_fu_1278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_6),24));

        sext_ln74_7_cast_fu_1274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_7),24));

        sext_ln74_8_cast_fu_1270_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_8),24));

        sext_ln74_9_cast_fu_1266_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74_9),24));

        sext_ln74_cast_fu_1302_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln74),24));

    sext_ln76_1_fu_2256_p0 <= layer1_bias_q0;
        sext_ln76_1_fu_2256_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln76_1_fu_2256_p0),15));

    sext_ln76_fu_2243_p0 <= layer1_bias_q0;
        sext_ln76_fu_2243_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln76_fu_2243_p0),16));

    sum_2_fu_2260_p2 <= std_logic_vector(signed(sext_ln76_fu_2243_p1) + signed(sum_fu_2234_p4));
    sum_fu_2234_p1 <= grp_fu_2623_p3;
    sum_fu_2234_p4 <= sum_fu_2234_p1(23 downto 8);
    tmp_10_fu_1521_p1 <= grp_fu_2351_p3;
    tmp_10_fu_1521_p4 <= tmp_10_fu_1521_p1(23 downto 8);
    tmp_11_fu_1542_p1 <= grp_fu_2359_p3;
    tmp_11_fu_1542_p4 <= tmp_11_fu_1542_p1(23 downto 8);
    tmp_12_fu_1562_p1 <= grp_fu_2367_p3;
    tmp_12_fu_1562_p4 <= tmp_12_fu_1562_p1(23 downto 8);
    tmp_13_fu_1583_p1 <= grp_fu_2375_p3;
    tmp_13_fu_1583_p4 <= tmp_13_fu_1583_p1(23 downto 8);
    tmp_14_fu_1603_p1 <= grp_fu_2383_p3;
    tmp_14_fu_1603_p4 <= tmp_14_fu_1603_p1(23 downto 8);
    tmp_15_fu_1624_p1 <= grp_fu_2391_p3;
    tmp_15_fu_1624_p4 <= tmp_15_fu_1624_p1(23 downto 8);
    tmp_16_fu_1644_p1 <= grp_fu_2399_p3;
    tmp_16_fu_1644_p4 <= tmp_16_fu_1644_p1(23 downto 8);
    tmp_17_fu_1665_p1 <= grp_fu_2407_p3;
    tmp_17_fu_1665_p4 <= tmp_17_fu_1665_p1(23 downto 8);
    tmp_18_fu_1685_p1 <= grp_fu_2415_p3;
    tmp_18_fu_1685_p4 <= tmp_18_fu_1685_p1(23 downto 8);
    tmp_19_fu_1706_p1 <= grp_fu_2423_p3;
    tmp_19_fu_1706_p4 <= tmp_19_fu_1706_p1(23 downto 8);
    tmp_20_fu_1726_p1 <= grp_fu_2431_p3;
    tmp_20_fu_1726_p4 <= tmp_20_fu_1726_p1(23 downto 8);
    tmp_21_fu_1747_p1 <= grp_fu_2439_p3;
    tmp_21_fu_1747_p4 <= tmp_21_fu_1747_p1(23 downto 8);
    tmp_22_fu_1767_p1 <= grp_fu_2447_p3;
    tmp_22_fu_1767_p4 <= tmp_22_fu_1767_p1(23 downto 8);
    tmp_23_fu_1788_p1 <= grp_fu_2455_p3;
    tmp_23_fu_1788_p4 <= tmp_23_fu_1788_p1(23 downto 8);
    tmp_24_fu_1808_p1 <= grp_fu_2463_p3;
    tmp_24_fu_1808_p4 <= tmp_24_fu_1808_p1(23 downto 8);
    tmp_25_fu_1829_p1 <= grp_fu_2471_p3;
    tmp_25_fu_1829_p4 <= tmp_25_fu_1829_p1(23 downto 8);
    tmp_26_fu_1849_p1 <= grp_fu_2479_p3;
    tmp_26_fu_1849_p4 <= tmp_26_fu_1849_p1(23 downto 8);
    tmp_27_fu_1870_p1 <= grp_fu_2487_p3;
    tmp_27_fu_1870_p4 <= tmp_27_fu_1870_p1(23 downto 8);
    tmp_28_fu_1890_p1 <= grp_fu_2495_p3;
    tmp_28_fu_1890_p4 <= tmp_28_fu_1890_p1(23 downto 8);
    tmp_29_fu_1911_p1 <= grp_fu_2503_p3;
    tmp_29_fu_1911_p4 <= tmp_29_fu_1911_p1(23 downto 8);
    tmp_30_fu_1931_p1 <= grp_fu_2511_p3;
    tmp_30_fu_1931_p4 <= tmp_30_fu_1931_p1(23 downto 8);
    tmp_31_fu_1952_p1 <= grp_fu_2519_p3;
    tmp_31_fu_1952_p4 <= tmp_31_fu_1952_p1(23 downto 8);
    tmp_32_fu_1972_p1 <= grp_fu_2527_p3;
    tmp_32_fu_1972_p4 <= tmp_32_fu_1972_p1(23 downto 8);
    tmp_33_fu_1993_p1 <= grp_fu_2535_p3;
    tmp_33_fu_1993_p4 <= tmp_33_fu_1993_p1(23 downto 8);
    tmp_34_fu_2013_p1 <= grp_fu_2543_p3;
    tmp_34_fu_2013_p4 <= tmp_34_fu_2013_p1(23 downto 8);
    tmp_35_fu_2034_p1 <= grp_fu_2551_p3;
    tmp_35_fu_2034_p4 <= tmp_35_fu_2034_p1(23 downto 8);
    tmp_36_fu_2054_p1 <= grp_fu_2559_p3;
    tmp_36_fu_2054_p4 <= tmp_36_fu_2054_p1(23 downto 8);
    tmp_37_fu_2075_p1 <= grp_fu_2567_p3;
    tmp_37_fu_2075_p4 <= tmp_37_fu_2075_p1(23 downto 8);
    tmp_38_fu_2095_p1 <= grp_fu_2575_p3;
    tmp_38_fu_2095_p4 <= tmp_38_fu_2095_p1(23 downto 8);
    tmp_39_fu_2116_p1 <= grp_fu_2583_p3;
    tmp_39_fu_2116_p4 <= tmp_39_fu_2116_p1(23 downto 8);
    tmp_3_fu_1439_p1 <= grp_fu_2319_p3;
    tmp_3_fu_1439_p4 <= tmp_3_fu_1439_p1(23 downto 8);
    tmp_40_fu_2136_p1 <= grp_fu_2591_p3;
    tmp_40_fu_2136_p4 <= tmp_40_fu_2136_p1(23 downto 8);
    tmp_41_fu_2157_p1 <= grp_fu_2599_p3;
    tmp_41_fu_2157_p4 <= tmp_41_fu_2157_p1(23 downto 8);
    tmp_42_fu_2177_p1 <= grp_fu_2607_p3;
    tmp_42_fu_2177_p4 <= tmp_42_fu_2177_p1(23 downto 8);
    tmp_43_fu_2217_p1 <= grp_fu_2615_p3;
    tmp_43_fu_2217_p4 <= tmp_43_fu_2217_p1(23 downto 8);
    tmp_4_fu_1460_p1 <= grp_fu_2327_p3;
    tmp_4_fu_1460_p4 <= tmp_4_fu_1460_p1(23 downto 8);
    tmp_5_fu_1480_p1 <= grp_fu_2335_p3;
    tmp_5_fu_1480_p4 <= tmp_5_fu_1480_p1(23 downto 8);
    tmp_6_fu_1501_p1 <= grp_fu_2343_p3;
    tmp_6_fu_1501_p4 <= tmp_6_fu_1501_p1(23 downto 8);
    tmp_8_fu_1378_p1 <= grp_fu_2295_p3;
    tmp_8_fu_1378_p4 <= tmp_8_fu_1378_p1(23 downto 8);
    tmp_9_fu_1398_p1 <= grp_fu_2303_p3;
    tmp_9_fu_1398_p4 <= tmp_9_fu_1398_p1(23 downto 8);
    tmp_s_fu_1419_p1 <= grp_fu_2311_p3;
    tmp_s_fu_1419_p4 <= tmp_s_fu_1419_p1(23 downto 8);
    trunc_ln2_fu_2247_p1 <= grp_fu_2623_p3;
    trunc_ln2_fu_2247_p4 <= trunc_ln2_fu_2247_p1(22 downto 8);
    trunc_ln70_fu_1333_p1 <= ap_sig_allocacmp_i(2 - 1 downto 0);
    zext_ln70_1_fu_2278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_3661),64));
    zext_ln70_2_fu_1314_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i),64));
    zext_ln70_3_fu_2194_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_2859_pp0_iter21_reg),6));
    zext_ln70_fu_2202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln70_fu_2197_p2),64));
end behav;
