// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_70_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer1_output_3_address0,
        layer1_output_3_ce0,
        layer1_output_3_we0,
        layer1_output_3_d0,
        layer1_output_2_address0,
        layer1_output_2_ce0,
        layer1_output_2_we0,
        layer1_output_2_d0,
        layer1_output_1_address0,
        layer1_output_1_ce0,
        layer1_output_1_we0,
        layer1_output_1_d0,
        layer1_output_address0,
        layer1_output_ce0,
        layer1_output_we0,
        layer1_output_d0,
        tile,
        layer1_weight_tile_address0,
        layer1_weight_tile_ce0,
        layer1_weight_tile_q0,
        sext_ln74,
        layer1_weight_tile_1_address0,
        layer1_weight_tile_1_ce0,
        layer1_weight_tile_1_q0,
        sext_ln74_1,
        layer1_weight_tile_2_address0,
        layer1_weight_tile_2_ce0,
        layer1_weight_tile_2_q0,
        sext_ln74_2,
        layer1_weight_tile_3_address0,
        layer1_weight_tile_3_ce0,
        layer1_weight_tile_3_q0,
        sext_ln74_3,
        layer1_weight_tile_4_address0,
        layer1_weight_tile_4_ce0,
        layer1_weight_tile_4_q0,
        sext_ln74_4,
        layer1_weight_tile_5_address0,
        layer1_weight_tile_5_ce0,
        layer1_weight_tile_5_q0,
        sext_ln74_5,
        layer1_weight_tile_6_address0,
        layer1_weight_tile_6_ce0,
        layer1_weight_tile_6_q0,
        sext_ln74_6,
        layer1_weight_tile_7_address0,
        layer1_weight_tile_7_ce0,
        layer1_weight_tile_7_q0,
        sext_ln74_7,
        layer1_weight_tile_8_address0,
        layer1_weight_tile_8_ce0,
        layer1_weight_tile_8_q0,
        sext_ln74_8,
        layer1_weight_tile_9_address0,
        layer1_weight_tile_9_ce0,
        layer1_weight_tile_9_q0,
        sext_ln74_9,
        layer1_weight_tile_10_address0,
        layer1_weight_tile_10_ce0,
        layer1_weight_tile_10_q0,
        sext_ln74_10,
        layer1_weight_tile_11_address0,
        layer1_weight_tile_11_ce0,
        layer1_weight_tile_11_q0,
        sext_ln74_11,
        layer1_weight_tile_12_address0,
        layer1_weight_tile_12_ce0,
        layer1_weight_tile_12_q0,
        sext_ln74_12,
        layer1_weight_tile_13_address0,
        layer1_weight_tile_13_ce0,
        layer1_weight_tile_13_q0,
        sext_ln74_13,
        layer1_weight_tile_14_address0,
        layer1_weight_tile_14_ce0,
        layer1_weight_tile_14_q0,
        sext_ln74_14,
        layer1_weight_tile_15_address0,
        layer1_weight_tile_15_ce0,
        layer1_weight_tile_15_q0,
        sext_ln74_15,
        layer1_weight_tile_16_address0,
        layer1_weight_tile_16_ce0,
        layer1_weight_tile_16_q0,
        sext_ln74_16,
        layer1_weight_tile_17_address0,
        layer1_weight_tile_17_ce0,
        layer1_weight_tile_17_q0,
        sext_ln74_17
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [2:0] layer1_output_3_address0;
output   layer1_output_3_ce0;
output   layer1_output_3_we0;
output  [14:0] layer1_output_3_d0;
output  [2:0] layer1_output_2_address0;
output   layer1_output_2_ce0;
output   layer1_output_2_we0;
output  [14:0] layer1_output_2_d0;
output  [2:0] layer1_output_1_address0;
output   layer1_output_1_ce0;
output   layer1_output_1_we0;
output  [14:0] layer1_output_1_d0;
output  [2:0] layer1_output_address0;
output   layer1_output_ce0;
output   layer1_output_we0;
output  [14:0] layer1_output_d0;
input  [4:0] tile;
output  [1:0] layer1_weight_tile_address0;
output   layer1_weight_tile_ce0;
input  [11:0] layer1_weight_tile_q0;
input  [15:0] sext_ln74;
output  [1:0] layer1_weight_tile_1_address0;
output   layer1_weight_tile_1_ce0;
input  [11:0] layer1_weight_tile_1_q0;
input  [15:0] sext_ln74_1;
output  [1:0] layer1_weight_tile_2_address0;
output   layer1_weight_tile_2_ce0;
input  [11:0] layer1_weight_tile_2_q0;
input  [15:0] sext_ln74_2;
output  [1:0] layer1_weight_tile_3_address0;
output   layer1_weight_tile_3_ce0;
input  [11:0] layer1_weight_tile_3_q0;
input  [15:0] sext_ln74_3;
output  [1:0] layer1_weight_tile_4_address0;
output   layer1_weight_tile_4_ce0;
input  [11:0] layer1_weight_tile_4_q0;
input  [15:0] sext_ln74_4;
output  [1:0] layer1_weight_tile_5_address0;
output   layer1_weight_tile_5_ce0;
input  [11:0] layer1_weight_tile_5_q0;
input  [15:0] sext_ln74_5;
output  [1:0] layer1_weight_tile_6_address0;
output   layer1_weight_tile_6_ce0;
input  [11:0] layer1_weight_tile_6_q0;
input  [15:0] sext_ln74_6;
output  [1:0] layer1_weight_tile_7_address0;
output   layer1_weight_tile_7_ce0;
input  [11:0] layer1_weight_tile_7_q0;
input  [15:0] sext_ln74_7;
output  [1:0] layer1_weight_tile_8_address0;
output   layer1_weight_tile_8_ce0;
input  [11:0] layer1_weight_tile_8_q0;
input  [15:0] sext_ln74_8;
output  [1:0] layer1_weight_tile_9_address0;
output   layer1_weight_tile_9_ce0;
input  [11:0] layer1_weight_tile_9_q0;
input  [15:0] sext_ln74_9;
output  [1:0] layer1_weight_tile_10_address0;
output   layer1_weight_tile_10_ce0;
input  [11:0] layer1_weight_tile_10_q0;
input  [15:0] sext_ln74_10;
output  [1:0] layer1_weight_tile_11_address0;
output   layer1_weight_tile_11_ce0;
input  [11:0] layer1_weight_tile_11_q0;
input  [15:0] sext_ln74_11;
output  [1:0] layer1_weight_tile_12_address0;
output   layer1_weight_tile_12_ce0;
input  [11:0] layer1_weight_tile_12_q0;
input  [15:0] sext_ln74_12;
output  [1:0] layer1_weight_tile_13_address0;
output   layer1_weight_tile_13_ce0;
input  [11:0] layer1_weight_tile_13_q0;
input  [15:0] sext_ln74_13;
output  [1:0] layer1_weight_tile_14_address0;
output   layer1_weight_tile_14_ce0;
input  [11:0] layer1_weight_tile_14_q0;
input  [15:0] sext_ln74_14;
output  [1:0] layer1_weight_tile_15_address0;
output   layer1_weight_tile_15_ce0;
input  [11:0] layer1_weight_tile_15_q0;
input  [15:0] sext_ln74_15;
output  [1:0] layer1_weight_tile_16_address0;
output   layer1_weight_tile_16_ce0;
input  [11:0] layer1_weight_tile_16_q0;
input  [15:0] sext_ln74_16;
output  [1:0] layer1_weight_tile_17_address0;
output   layer1_weight_tile_17_ce0;
input  [11:0] layer1_weight_tile_17_q0;
input  [15:0] sext_ln74_17;

reg ap_idle;
reg layer1_output_3_ce0;
reg layer1_output_3_we0;
reg layer1_output_2_ce0;
reg layer1_output_2_we0;
reg layer1_output_1_ce0;
reg layer1_output_1_we0;
reg layer1_output_ce0;
reg layer1_output_we0;
reg layer1_weight_tile_ce0;
reg layer1_weight_tile_1_ce0;
reg layer1_weight_tile_2_ce0;
reg layer1_weight_tile_3_ce0;
reg layer1_weight_tile_4_ce0;
reg layer1_weight_tile_5_ce0;
reg layer1_weight_tile_6_ce0;
reg layer1_weight_tile_7_ce0;
reg layer1_weight_tile_8_ce0;
reg layer1_weight_tile_9_ce0;
reg layer1_weight_tile_10_ce0;
reg layer1_weight_tile_11_ce0;
reg layer1_weight_tile_12_ce0;
reg layer1_weight_tile_13_ce0;
reg layer1_weight_tile_14_ce0;
reg layer1_weight_tile_15_ce0;
reg layer1_weight_tile_16_ce0;
reg layer1_weight_tile_17_ce0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_state10_pp0_stage1_iter4;
wire    ap_block_state12_pp0_stage1_iter5;
wire    ap_block_state14_pp0_stage1_iter6;
wire    ap_block_state16_pp0_stage1_iter7;
wire    ap_block_state18_pp0_stage1_iter8;
wire    ap_block_state20_pp0_stage1_iter9;
wire    ap_block_state22_pp0_stage1_iter10;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln70_reg_1369;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [4:0] layer1_bias_address0;
reg    layer1_bias_ce0;
wire   [9:0] layer1_bias_q0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_state9_pp0_stage0_iter4;
wire    ap_block_state11_pp0_stage0_iter5;
wire    ap_block_state13_pp0_stage0_iter6;
wire    ap_block_state15_pp0_stage0_iter7;
wire    ap_block_state17_pp0_stage0_iter8;
wire    ap_block_state19_pp0_stage0_iter9;
wire    ap_block_state21_pp0_stage0_iter10;
wire    ap_block_pp0_stage0_11001;
wire  signed [23:0] sext_ln74_17_cast_fu_559_p1;
reg  signed [23:0] sext_ln74_17_cast_reg_1255;
wire  signed [23:0] sext_ln74_16_cast_fu_563_p1;
reg  signed [23:0] sext_ln74_16_cast_reg_1260;
wire  signed [23:0] sext_ln74_15_cast_fu_567_p1;
reg  signed [23:0] sext_ln74_15_cast_reg_1265;
wire  signed [23:0] sext_ln74_14_cast_fu_571_p1;
reg  signed [23:0] sext_ln74_14_cast_reg_1270;
wire  signed [23:0] sext_ln74_13_cast_fu_575_p1;
reg  signed [23:0] sext_ln74_13_cast_reg_1275;
wire  signed [23:0] sext_ln74_12_cast_fu_579_p1;
reg  signed [23:0] sext_ln74_12_cast_reg_1280;
wire  signed [23:0] sext_ln74_11_cast_fu_583_p1;
reg  signed [23:0] sext_ln74_11_cast_reg_1285;
wire  signed [23:0] sext_ln74_10_cast_fu_587_p1;
reg  signed [23:0] sext_ln74_10_cast_reg_1290;
wire  signed [23:0] sext_ln74_9_cast_fu_591_p1;
reg  signed [23:0] sext_ln74_9_cast_reg_1295;
wire  signed [23:0] sext_ln74_8_cast_fu_595_p1;
reg  signed [23:0] sext_ln74_8_cast_reg_1300;
wire  signed [23:0] sext_ln74_7_cast_fu_599_p1;
reg  signed [23:0] sext_ln74_7_cast_reg_1305;
wire  signed [23:0] sext_ln74_6_cast_fu_603_p1;
reg  signed [23:0] sext_ln74_6_cast_reg_1310;
wire  signed [23:0] sext_ln74_5_cast_fu_607_p1;
reg  signed [23:0] sext_ln74_5_cast_reg_1315;
wire  signed [23:0] sext_ln74_4_cast_fu_611_p1;
reg  signed [23:0] sext_ln74_4_cast_reg_1320;
wire  signed [23:0] sext_ln74_3_cast_fu_615_p1;
reg  signed [23:0] sext_ln74_3_cast_reg_1325;
wire  signed [23:0] sext_ln74_2_cast_fu_619_p1;
reg  signed [23:0] sext_ln74_2_cast_reg_1330;
wire  signed [23:0] sext_ln74_1_cast_fu_623_p1;
reg  signed [23:0] sext_ln74_1_cast_reg_1335;
wire  signed [23:0] sext_ln74_cast_fu_627_p1;
reg  signed [23:0] sext_ln74_cast_reg_1340;
reg   [2:0] i_reg_1345;
reg   [2:0] i_reg_1345_pp0_iter1_reg;
reg   [2:0] i_reg_1345_pp0_iter2_reg;
reg   [2:0] i_reg_1345_pp0_iter3_reg;
reg   [2:0] i_reg_1345_pp0_iter4_reg;
reg   [2:0] i_reg_1345_pp0_iter5_reg;
reg   [2:0] i_reg_1345_pp0_iter6_reg;
reg   [2:0] i_reg_1345_pp0_iter7_reg;
reg   [2:0] i_reg_1345_pp0_iter8_reg;
wire   [63:0] zext_ln70_2_fu_639_p1;
reg   [63:0] zext_ln70_2_reg_1350;
reg   [63:0] zext_ln70_2_reg_1350_pp0_iter1_reg;
reg   [63:0] zext_ln70_2_reg_1350_pp0_iter2_reg;
reg   [63:0] zext_ln70_2_reg_1350_pp0_iter3_reg;
reg   [63:0] zext_ln70_2_reg_1350_pp0_iter4_reg;
reg   [63:0] zext_ln70_2_reg_1350_pp0_iter5_reg;
reg   [63:0] zext_ln70_2_reg_1350_pp0_iter6_reg;
reg   [63:0] zext_ln70_2_reg_1350_pp0_iter7_reg;
wire   [0:0] icmp_ln70_fu_646_p2;
wire   [1:0] trunc_ln70_fu_658_p1;
reg   [1:0] trunc_ln70_reg_1373;
reg   [1:0] trunc_ln70_reg_1373_pp0_iter1_reg;
reg   [1:0] trunc_ln70_reg_1373_pp0_iter2_reg;
reg   [1:0] trunc_ln70_reg_1373_pp0_iter3_reg;
reg   [1:0] trunc_ln70_reg_1373_pp0_iter4_reg;
reg   [1:0] trunc_ln70_reg_1373_pp0_iter5_reg;
reg   [1:0] trunc_ln70_reg_1373_pp0_iter6_reg;
reg   [1:0] trunc_ln70_reg_1373_pp0_iter7_reg;
reg   [1:0] trunc_ln70_reg_1373_pp0_iter8_reg;
reg   [1:0] trunc_ln70_reg_1373_pp0_iter9_reg;
reg   [1:0] trunc_ln70_reg_1373_pp0_iter10_reg;
reg  signed [11:0] layer1_weight_tile_load_reg_1392;
wire    ap_block_pp0_stage1_11001;
reg  signed [11:0] layer1_weight_tile_2_load_reg_1402;
reg   [15:0] tmp_9_reg_1407;
reg  signed [11:0] layer1_weight_tile_4_load_reg_1437;
reg  signed [11:0] layer1_weight_tile_6_load_reg_1472;
reg  signed [11:0] layer1_weight_tile_8_load_reg_1507;
reg  signed [11:0] layer1_weight_tile_10_load_reg_1542;
reg  signed [11:0] layer1_weight_tile_12_load_reg_1577;
reg  signed [11:0] layer1_weight_tile_14_load_reg_1612;
reg  signed [11:0] layer1_weight_tile_16_load_reg_1647;
reg   [2:0] lshr_ln_reg_1677;
reg   [2:0] lshr_ln_reg_1677_pp0_iter10_reg;
reg  signed [9:0] layer1_bias_load_reg_1697;
wire   [14:0] add_ln72_fu_1077_p2;
reg   [14:0] add_ln72_reg_1703;
wire   [0:0] icmp_ln14_fu_1083_p2;
reg   [0:0] icmp_ln14_reg_1708;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln70_fu_998_p1;
wire   [63:0] zext_ln70_1_fu_1089_p1;
wire    ap_block_pp0_stage1;
reg   [2:0] i_1_fu_142;
wire   [2:0] add_ln70_1_fu_652_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i;
wire   [14:0] select_ln14_fu_1096_p3;
wire  signed [15:0] mul_ln74_fu_674_p1;
wire   [23:0] mul_ln74_fu_674_p2;
wire  signed [23:0] tmp_s_fu_703_p1;
wire   [23:0] grp_fu_1106_p3;
wire   [15:0] tmp_s_fu_703_p4;
wire  signed [23:0] tmp_4_fu_723_p1;
wire   [23:0] grp_fu_1114_p3;
wire   [15:0] tmp_4_fu_723_p4;
wire  signed [23:0] tmp_5_fu_744_p1;
wire   [23:0] grp_fu_1122_p3;
wire   [15:0] tmp_5_fu_744_p4;
wire  signed [23:0] tmp_6_fu_764_p1;
wire   [23:0] grp_fu_1130_p3;
wire   [15:0] tmp_6_fu_764_p4;
wire  signed [23:0] tmp_7_fu_785_p1;
wire   [23:0] grp_fu_1138_p3;
wire   [15:0] tmp_7_fu_785_p4;
wire  signed [23:0] tmp_8_fu_805_p1;
wire   [23:0] grp_fu_1146_p3;
wire   [15:0] tmp_8_fu_805_p4;
wire  signed [23:0] tmp_10_fu_826_p1;
wire   [23:0] grp_fu_1154_p3;
wire   [15:0] tmp_10_fu_826_p4;
wire  signed [23:0] tmp_11_fu_846_p1;
wire   [23:0] grp_fu_1162_p3;
wire   [15:0] tmp_11_fu_846_p4;
wire  signed [23:0] tmp_12_fu_867_p1;
wire   [23:0] grp_fu_1170_p3;
wire   [15:0] tmp_12_fu_867_p4;
wire  signed [23:0] tmp_13_fu_887_p1;
wire   [23:0] grp_fu_1178_p3;
wire   [15:0] tmp_13_fu_887_p4;
wire  signed [23:0] tmp_14_fu_908_p1;
wire   [23:0] grp_fu_1186_p3;
wire   [15:0] tmp_14_fu_908_p4;
wire  signed [23:0] tmp_15_fu_928_p1;
wire   [23:0] grp_fu_1194_p3;
wire   [15:0] tmp_15_fu_928_p4;
wire  signed [23:0] tmp_16_fu_949_p1;
wire   [23:0] grp_fu_1202_p3;
wire   [15:0] tmp_16_fu_949_p4;
wire  signed [23:0] tmp_17_fu_969_p1;
wire   [23:0] grp_fu_1210_p3;
wire   [15:0] tmp_17_fu_969_p4;
wire   [4:0] zext_ln70_3_fu_990_p1;
wire   [4:0] add_ln70_fu_993_p2;
wire  signed [23:0] tmp_18_fu_1013_p1;
wire   [23:0] grp_fu_1218_p3;
wire   [15:0] tmp_18_fu_1013_p4;
wire  signed [23:0] tmp_19_fu_1030_p1;
wire   [23:0] grp_fu_1226_p3;
wire   [15:0] tmp_19_fu_1030_p4;
wire  signed [23:0] sum_fu_1047_p1;
wire   [23:0] grp_fu_1234_p3;
wire  signed [23:0] trunc_ln1_fu_1059_p1;
wire  signed [15:0] sext_ln76_fu_1056_p1;
wire   [15:0] sum_fu_1047_p4;
wire  signed [14:0] sext_ln76_1_fu_1068_p1;
wire   [14:0] trunc_ln1_fu_1059_p4;
wire   [15:0] sum_2_fu_1071_p2;
wire  signed [15:0] grp_fu_1106_p1;
wire   [23:0] grp_fu_1106_p2;
wire  signed [15:0] grp_fu_1114_p1;
wire   [23:0] grp_fu_1114_p2;
wire  signed [15:0] grp_fu_1122_p1;
wire   [23:0] grp_fu_1122_p2;
wire  signed [15:0] grp_fu_1130_p1;
wire   [23:0] grp_fu_1130_p2;
wire  signed [15:0] grp_fu_1138_p1;
wire   [23:0] grp_fu_1138_p2;
wire  signed [15:0] grp_fu_1146_p1;
wire   [23:0] grp_fu_1146_p2;
wire  signed [15:0] grp_fu_1154_p1;
wire   [23:0] grp_fu_1154_p2;
wire  signed [15:0] grp_fu_1162_p1;
wire   [23:0] grp_fu_1162_p2;
wire  signed [15:0] grp_fu_1170_p1;
wire   [23:0] grp_fu_1170_p2;
wire  signed [15:0] grp_fu_1178_p1;
wire   [23:0] grp_fu_1178_p2;
wire  signed [15:0] grp_fu_1186_p1;
wire   [23:0] grp_fu_1186_p2;
wire  signed [15:0] grp_fu_1194_p1;
wire   [23:0] grp_fu_1194_p2;
wire  signed [15:0] grp_fu_1202_p1;
wire   [23:0] grp_fu_1202_p2;
wire  signed [15:0] grp_fu_1210_p1;
wire   [23:0] grp_fu_1210_p2;
wire  signed [15:0] grp_fu_1218_p1;
wire   [23:0] grp_fu_1218_p2;
wire  signed [15:0] grp_fu_1226_p1;
wire   [23:0] grp_fu_1226_p2;
wire  signed [15:0] grp_fu_1234_p1;
wire   [23:0] grp_fu_1234_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to10;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

neural_network_neural_network_Pipeline_VITIS_LOOP_70_4_layer1_bias_ROM_AUTO_1R #(
    .DataWidth( 10 ),
    .AddressRange( 20 ),
    .AddressWidth( 5 ))
layer1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_bias_address0),
    .ce0(layer1_bias_ce0),
    .q0(layer1_bias_q0)
);

neural_network_mul_12s_16s_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
mul_12s_16s_24_1_1_U21(
    .din0(layer1_weight_tile_load_reg_1392),
    .din1(mul_ln74_fu_674_p1),
    .dout(mul_ln74_fu_674_p2)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_1_q0),
    .din1(grp_fu_1106_p1),
    .din2(grp_fu_1106_p2),
    .ce(1'b1),
    .dout(grp_fu_1106_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_2_load_reg_1402),
    .din1(grp_fu_1114_p1),
    .din2(grp_fu_1114_p2),
    .ce(1'b1),
    .dout(grp_fu_1114_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U24(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_3_q0),
    .din1(grp_fu_1122_p1),
    .din2(grp_fu_1122_p2),
    .ce(1'b1),
    .dout(grp_fu_1122_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U25(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_4_load_reg_1437),
    .din1(grp_fu_1130_p1),
    .din2(grp_fu_1130_p2),
    .ce(1'b1),
    .dout(grp_fu_1130_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_5_q0),
    .din1(grp_fu_1138_p1),
    .din2(grp_fu_1138_p2),
    .ce(1'b1),
    .dout(grp_fu_1138_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U27(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_6_load_reg_1472),
    .din1(grp_fu_1146_p1),
    .din2(grp_fu_1146_p2),
    .ce(1'b1),
    .dout(grp_fu_1146_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U28(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_7_q0),
    .din1(grp_fu_1154_p1),
    .din2(grp_fu_1154_p2),
    .ce(1'b1),
    .dout(grp_fu_1154_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U29(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_8_load_reg_1507),
    .din1(grp_fu_1162_p1),
    .din2(grp_fu_1162_p2),
    .ce(1'b1),
    .dout(grp_fu_1162_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U30(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_9_q0),
    .din1(grp_fu_1170_p1),
    .din2(grp_fu_1170_p2),
    .ce(1'b1),
    .dout(grp_fu_1170_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_10_load_reg_1542),
    .din1(grp_fu_1178_p1),
    .din2(grp_fu_1178_p2),
    .ce(1'b1),
    .dout(grp_fu_1178_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_11_q0),
    .din1(grp_fu_1186_p1),
    .din2(grp_fu_1186_p2),
    .ce(1'b1),
    .dout(grp_fu_1186_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_12_load_reg_1577),
    .din1(grp_fu_1194_p1),
    .din2(grp_fu_1194_p2),
    .ce(1'b1),
    .dout(grp_fu_1194_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_13_q0),
    .din1(grp_fu_1202_p1),
    .din2(grp_fu_1202_p2),
    .ce(1'b1),
    .dout(grp_fu_1202_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_14_load_reg_1612),
    .din1(grp_fu_1210_p1),
    .din2(grp_fu_1210_p2),
    .ce(1'b1),
    .dout(grp_fu_1210_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_15_q0),
    .din1(grp_fu_1218_p1),
    .din2(grp_fu_1218_p2),
    .ce(1'b1),
    .dout(grp_fu_1218_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_16_load_reg_1647),
    .din1(grp_fu_1226_p1),
    .din2(grp_fu_1226_p2),
    .ce(1'b1),
    .dout(grp_fu_1226_p3)
);

neural_network_mac_muladd_12s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_16s_24ns_24_4_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weight_tile_17_q0),
    .din1(grp_fu_1234_p1),
    .din2(grp_fu_1234_p2),
    .ce(1'b1),
    .dout(grp_fu_1234_p3)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln70_fu_646_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_1_fu_142 <= add_ln70_1_fu_652_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_142 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln72_reg_1703 <= add_ln72_fu_1077_p2;
        i_reg_1345 <= ap_sig_allocacmp_i;
        i_reg_1345_pp0_iter1_reg <= i_reg_1345;
        i_reg_1345_pp0_iter2_reg <= i_reg_1345_pp0_iter1_reg;
        i_reg_1345_pp0_iter3_reg <= i_reg_1345_pp0_iter2_reg;
        i_reg_1345_pp0_iter4_reg <= i_reg_1345_pp0_iter3_reg;
        i_reg_1345_pp0_iter5_reg <= i_reg_1345_pp0_iter4_reg;
        i_reg_1345_pp0_iter6_reg <= i_reg_1345_pp0_iter5_reg;
        i_reg_1345_pp0_iter7_reg <= i_reg_1345_pp0_iter6_reg;
        i_reg_1345_pp0_iter8_reg <= i_reg_1345_pp0_iter7_reg;
        icmp_ln14_reg_1708 <= icmp_ln14_fu_1083_p2;
        icmp_ln70_reg_1369 <= icmp_ln70_fu_646_p2;
        lshr_ln_reg_1677 <= {{add_ln70_fu_993_p2[4:2]}};
        lshr_ln_reg_1677_pp0_iter10_reg <= lshr_ln_reg_1677;
        sext_ln74_10_cast_reg_1290 <= sext_ln74_10_cast_fu_587_p1;
        sext_ln74_11_cast_reg_1285 <= sext_ln74_11_cast_fu_583_p1;
        sext_ln74_12_cast_reg_1280 <= sext_ln74_12_cast_fu_579_p1;
        sext_ln74_13_cast_reg_1275 <= sext_ln74_13_cast_fu_575_p1;
        sext_ln74_14_cast_reg_1270 <= sext_ln74_14_cast_fu_571_p1;
        sext_ln74_15_cast_reg_1265 <= sext_ln74_15_cast_fu_567_p1;
        sext_ln74_16_cast_reg_1260 <= sext_ln74_16_cast_fu_563_p1;
        sext_ln74_17_cast_reg_1255 <= sext_ln74_17_cast_fu_559_p1;
        sext_ln74_1_cast_reg_1335 <= sext_ln74_1_cast_fu_623_p1;
        sext_ln74_2_cast_reg_1330 <= sext_ln74_2_cast_fu_619_p1;
        sext_ln74_3_cast_reg_1325 <= sext_ln74_3_cast_fu_615_p1;
        sext_ln74_4_cast_reg_1320 <= sext_ln74_4_cast_fu_611_p1;
        sext_ln74_5_cast_reg_1315 <= sext_ln74_5_cast_fu_607_p1;
        sext_ln74_6_cast_reg_1310 <= sext_ln74_6_cast_fu_603_p1;
        sext_ln74_7_cast_reg_1305 <= sext_ln74_7_cast_fu_599_p1;
        sext_ln74_8_cast_reg_1300 <= sext_ln74_8_cast_fu_595_p1;
        sext_ln74_9_cast_reg_1295 <= sext_ln74_9_cast_fu_591_p1;
        sext_ln74_cast_reg_1340 <= sext_ln74_cast_fu_627_p1;
        tmp_9_reg_1407 <= {{mul_ln74_fu_674_p2[23:8]}};
        trunc_ln70_reg_1373_pp0_iter10_reg <= trunc_ln70_reg_1373_pp0_iter9_reg;
        trunc_ln70_reg_1373_pp0_iter1_reg <= trunc_ln70_reg_1373;
        trunc_ln70_reg_1373_pp0_iter2_reg <= trunc_ln70_reg_1373_pp0_iter1_reg;
        trunc_ln70_reg_1373_pp0_iter3_reg <= trunc_ln70_reg_1373_pp0_iter2_reg;
        trunc_ln70_reg_1373_pp0_iter4_reg <= trunc_ln70_reg_1373_pp0_iter3_reg;
        trunc_ln70_reg_1373_pp0_iter5_reg <= trunc_ln70_reg_1373_pp0_iter4_reg;
        trunc_ln70_reg_1373_pp0_iter6_reg <= trunc_ln70_reg_1373_pp0_iter5_reg;
        trunc_ln70_reg_1373_pp0_iter7_reg <= trunc_ln70_reg_1373_pp0_iter6_reg;
        trunc_ln70_reg_1373_pp0_iter8_reg <= trunc_ln70_reg_1373_pp0_iter7_reg;
        trunc_ln70_reg_1373_pp0_iter9_reg <= trunc_ln70_reg_1373_pp0_iter8_reg;
        zext_ln70_2_reg_1350[2 : 0] <= zext_ln70_2_fu_639_p1[2 : 0];
        zext_ln70_2_reg_1350_pp0_iter1_reg[2 : 0] <= zext_ln70_2_reg_1350[2 : 0];
        zext_ln70_2_reg_1350_pp0_iter2_reg[2 : 0] <= zext_ln70_2_reg_1350_pp0_iter1_reg[2 : 0];
        zext_ln70_2_reg_1350_pp0_iter3_reg[2 : 0] <= zext_ln70_2_reg_1350_pp0_iter2_reg[2 : 0];
        zext_ln70_2_reg_1350_pp0_iter4_reg[2 : 0] <= zext_ln70_2_reg_1350_pp0_iter3_reg[2 : 0];
        zext_ln70_2_reg_1350_pp0_iter5_reg[2 : 0] <= zext_ln70_2_reg_1350_pp0_iter4_reg[2 : 0];
        zext_ln70_2_reg_1350_pp0_iter6_reg[2 : 0] <= zext_ln70_2_reg_1350_pp0_iter5_reg[2 : 0];
        zext_ln70_2_reg_1350_pp0_iter7_reg[2 : 0] <= zext_ln70_2_reg_1350_pp0_iter6_reg[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        layer1_bias_load_reg_1697 <= layer1_bias_q0;
        layer1_weight_tile_10_load_reg_1542 <= layer1_weight_tile_10_q0;
        layer1_weight_tile_12_load_reg_1577 <= layer1_weight_tile_12_q0;
        layer1_weight_tile_14_load_reg_1612 <= layer1_weight_tile_14_q0;
        layer1_weight_tile_16_load_reg_1647 <= layer1_weight_tile_16_q0;
        layer1_weight_tile_4_load_reg_1437 <= layer1_weight_tile_4_q0;
        layer1_weight_tile_6_load_reg_1472 <= layer1_weight_tile_6_q0;
        layer1_weight_tile_8_load_reg_1507 <= layer1_weight_tile_8_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_reg_1369 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_2_load_reg_1402 <= layer1_weight_tile_2_q0;
        layer1_weight_tile_load_reg_1392 <= layer1_weight_tile_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln70_fu_646_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln70_reg_1373 <= trunc_ln70_fu_658_p1;
    end
end

always @ (*) begin
    if (((icmp_ln70_reg_1369 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready_pp0_iter9_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to10 = 1'b1;
    end else begin
        ap_idle_pp0_1to10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 3'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_142;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_bias_ce0 = 1'b1;
    end else begin
        layer1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_output_1_ce0 = 1'b1;
    end else begin
        layer1_output_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln70_reg_1373_pp0_iter10_reg == 2'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_output_1_we0 = 1'b1;
    end else begin
        layer1_output_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_output_2_ce0 = 1'b1;
    end else begin
        layer1_output_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln70_reg_1373_pp0_iter10_reg == 2'd2) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_output_2_we0 = 1'b1;
    end else begin
        layer1_output_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_output_3_ce0 = 1'b1;
    end else begin
        layer1_output_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln70_reg_1373_pp0_iter10_reg == 2'd3) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_output_3_we0 = 1'b1;
    end else begin
        layer1_output_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_output_ce0 = 1'b1;
    end else begin
        layer1_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter10 == 1'b1) & (trunc_ln70_reg_1373_pp0_iter10_reg == 2'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_output_we0 = 1'b1;
    end else begin
        layer1_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_10_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_11_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_12_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_13_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_14_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_15_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_16_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_17_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_1_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_2_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_3_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_4_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_5_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_6_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_7_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_8_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_9_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weight_tile_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to10 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln70_1_fu_652_p2 = (ap_sig_allocacmp_i + 3'd1);

assign add_ln70_fu_993_p2 = (zext_ln70_3_fu_990_p1 + tile);

assign add_ln72_fu_1077_p2 = ($signed(sext_ln76_1_fu_1068_p1) + $signed(trunc_ln1_fu_1059_p4));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage1_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage1_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign grp_fu_1106_p1 = sext_ln74_1_cast_reg_1335;

assign grp_fu_1106_p2 = {{tmp_9_reg_1407}, {8'd0}};

assign grp_fu_1114_p1 = sext_ln74_2_cast_reg_1330;

assign grp_fu_1114_p2 = {{tmp_s_fu_703_p4}, {8'd0}};

assign grp_fu_1122_p1 = sext_ln74_3_cast_reg_1325;

assign grp_fu_1122_p2 = {{tmp_4_fu_723_p4}, {8'd0}};

assign grp_fu_1130_p1 = sext_ln74_4_cast_reg_1320;

assign grp_fu_1130_p2 = {{tmp_5_fu_744_p4}, {8'd0}};

assign grp_fu_1138_p1 = sext_ln74_5_cast_reg_1315;

assign grp_fu_1138_p2 = {{tmp_6_fu_764_p4}, {8'd0}};

assign grp_fu_1146_p1 = sext_ln74_6_cast_reg_1310;

assign grp_fu_1146_p2 = {{tmp_7_fu_785_p4}, {8'd0}};

assign grp_fu_1154_p1 = sext_ln74_7_cast_reg_1305;

assign grp_fu_1154_p2 = {{tmp_8_fu_805_p4}, {8'd0}};

assign grp_fu_1162_p1 = sext_ln74_8_cast_reg_1300;

assign grp_fu_1162_p2 = {{tmp_10_fu_826_p4}, {8'd0}};

assign grp_fu_1170_p1 = sext_ln74_9_cast_reg_1295;

assign grp_fu_1170_p2 = {{tmp_11_fu_846_p4}, {8'd0}};

assign grp_fu_1178_p1 = sext_ln74_10_cast_reg_1290;

assign grp_fu_1178_p2 = {{tmp_12_fu_867_p4}, {8'd0}};

assign grp_fu_1186_p1 = sext_ln74_11_cast_reg_1285;

assign grp_fu_1186_p2 = {{tmp_13_fu_887_p4}, {8'd0}};

assign grp_fu_1194_p1 = sext_ln74_12_cast_reg_1280;

assign grp_fu_1194_p2 = {{tmp_14_fu_908_p4}, {8'd0}};

assign grp_fu_1202_p1 = sext_ln74_13_cast_reg_1275;

assign grp_fu_1202_p2 = {{tmp_15_fu_928_p4}, {8'd0}};

assign grp_fu_1210_p1 = sext_ln74_14_cast_reg_1270;

assign grp_fu_1210_p2 = {{tmp_16_fu_949_p4}, {8'd0}};

assign grp_fu_1218_p1 = sext_ln74_15_cast_reg_1265;

assign grp_fu_1218_p2 = {{tmp_17_fu_969_p4}, {8'd0}};

assign grp_fu_1226_p1 = sext_ln74_16_cast_reg_1260;

assign grp_fu_1226_p2 = {{tmp_18_fu_1013_p4}, {8'd0}};

assign grp_fu_1234_p1 = sext_ln74_17_cast_reg_1255;

assign grp_fu_1234_p2 = {{tmp_19_fu_1030_p4}, {8'd0}};

assign icmp_ln14_fu_1083_p2 = (($signed(sum_2_fu_1071_p2) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_646_p2 = ((ap_sig_allocacmp_i == 3'd4) ? 1'b1 : 1'b0);

assign layer1_bias_address0 = zext_ln70_fu_998_p1;

assign layer1_output_1_address0 = zext_ln70_1_fu_1089_p1;

assign layer1_output_1_d0 = select_ln14_fu_1096_p3;

assign layer1_output_2_address0 = zext_ln70_1_fu_1089_p1;

assign layer1_output_2_d0 = select_ln14_fu_1096_p3;

assign layer1_output_3_address0 = zext_ln70_1_fu_1089_p1;

assign layer1_output_3_d0 = select_ln14_fu_1096_p3;

assign layer1_output_address0 = zext_ln70_1_fu_1089_p1;

assign layer1_output_d0 = select_ln14_fu_1096_p3;

assign layer1_weight_tile_10_address0 = zext_ln70_2_reg_1350_pp0_iter3_reg;

assign layer1_weight_tile_11_address0 = zext_ln70_2_reg_1350_pp0_iter4_reg;

assign layer1_weight_tile_12_address0 = zext_ln70_2_reg_1350_pp0_iter4_reg;

assign layer1_weight_tile_13_address0 = zext_ln70_2_reg_1350_pp0_iter5_reg;

assign layer1_weight_tile_14_address0 = zext_ln70_2_reg_1350_pp0_iter5_reg;

assign layer1_weight_tile_15_address0 = zext_ln70_2_reg_1350_pp0_iter6_reg;

assign layer1_weight_tile_16_address0 = zext_ln70_2_reg_1350_pp0_iter6_reg;

assign layer1_weight_tile_17_address0 = zext_ln70_2_reg_1350_pp0_iter7_reg;

assign layer1_weight_tile_1_address0 = zext_ln70_2_fu_639_p1;

assign layer1_weight_tile_2_address0 = zext_ln70_2_fu_639_p1;

assign layer1_weight_tile_3_address0 = zext_ln70_2_reg_1350;

assign layer1_weight_tile_4_address0 = zext_ln70_2_reg_1350;

assign layer1_weight_tile_5_address0 = zext_ln70_2_reg_1350_pp0_iter1_reg;

assign layer1_weight_tile_6_address0 = zext_ln70_2_reg_1350_pp0_iter1_reg;

assign layer1_weight_tile_7_address0 = zext_ln70_2_reg_1350_pp0_iter2_reg;

assign layer1_weight_tile_8_address0 = zext_ln70_2_reg_1350_pp0_iter2_reg;

assign layer1_weight_tile_9_address0 = zext_ln70_2_reg_1350_pp0_iter3_reg;

assign layer1_weight_tile_address0 = zext_ln70_2_fu_639_p1;

assign mul_ln74_fu_674_p1 = sext_ln74_cast_reg_1340;

assign select_ln14_fu_1096_p3 = ((icmp_ln14_reg_1708[0:0] == 1'b1) ? add_ln72_reg_1703 : 15'd0);

assign sext_ln74_10_cast_fu_587_p1 = $signed(sext_ln74_10);

assign sext_ln74_11_cast_fu_583_p1 = $signed(sext_ln74_11);

assign sext_ln74_12_cast_fu_579_p1 = $signed(sext_ln74_12);

assign sext_ln74_13_cast_fu_575_p1 = $signed(sext_ln74_13);

assign sext_ln74_14_cast_fu_571_p1 = $signed(sext_ln74_14);

assign sext_ln74_15_cast_fu_567_p1 = $signed(sext_ln74_15);

assign sext_ln74_16_cast_fu_563_p1 = $signed(sext_ln74_16);

assign sext_ln74_17_cast_fu_559_p1 = $signed(sext_ln74_17);

assign sext_ln74_1_cast_fu_623_p1 = $signed(sext_ln74_1);

assign sext_ln74_2_cast_fu_619_p1 = $signed(sext_ln74_2);

assign sext_ln74_3_cast_fu_615_p1 = $signed(sext_ln74_3);

assign sext_ln74_4_cast_fu_611_p1 = $signed(sext_ln74_4);

assign sext_ln74_5_cast_fu_607_p1 = $signed(sext_ln74_5);

assign sext_ln74_6_cast_fu_603_p1 = $signed(sext_ln74_6);

assign sext_ln74_7_cast_fu_599_p1 = $signed(sext_ln74_7);

assign sext_ln74_8_cast_fu_595_p1 = $signed(sext_ln74_8);

assign sext_ln74_9_cast_fu_591_p1 = $signed(sext_ln74_9);

assign sext_ln74_cast_fu_627_p1 = $signed(sext_ln74);

assign sext_ln76_1_fu_1068_p1 = layer1_bias_load_reg_1697;

assign sext_ln76_fu_1056_p1 = layer1_bias_load_reg_1697;

assign sum_2_fu_1071_p2 = ($signed(sext_ln76_fu_1056_p1) + $signed(sum_fu_1047_p4));

assign sum_fu_1047_p1 = grp_fu_1234_p3;

assign sum_fu_1047_p4 = {{sum_fu_1047_p1[23:8]}};

assign tmp_10_fu_826_p1 = grp_fu_1154_p3;

assign tmp_10_fu_826_p4 = {{tmp_10_fu_826_p1[23:8]}};

assign tmp_11_fu_846_p1 = grp_fu_1162_p3;

assign tmp_11_fu_846_p4 = {{tmp_11_fu_846_p1[23:8]}};

assign tmp_12_fu_867_p1 = grp_fu_1170_p3;

assign tmp_12_fu_867_p4 = {{tmp_12_fu_867_p1[23:8]}};

assign tmp_13_fu_887_p1 = grp_fu_1178_p3;

assign tmp_13_fu_887_p4 = {{tmp_13_fu_887_p1[23:8]}};

assign tmp_14_fu_908_p1 = grp_fu_1186_p3;

assign tmp_14_fu_908_p4 = {{tmp_14_fu_908_p1[23:8]}};

assign tmp_15_fu_928_p1 = grp_fu_1194_p3;

assign tmp_15_fu_928_p4 = {{tmp_15_fu_928_p1[23:8]}};

assign tmp_16_fu_949_p1 = grp_fu_1202_p3;

assign tmp_16_fu_949_p4 = {{tmp_16_fu_949_p1[23:8]}};

assign tmp_17_fu_969_p1 = grp_fu_1210_p3;

assign tmp_17_fu_969_p4 = {{tmp_17_fu_969_p1[23:8]}};

assign tmp_18_fu_1013_p1 = grp_fu_1218_p3;

assign tmp_18_fu_1013_p4 = {{tmp_18_fu_1013_p1[23:8]}};

assign tmp_19_fu_1030_p1 = grp_fu_1226_p3;

assign tmp_19_fu_1030_p4 = {{tmp_19_fu_1030_p1[23:8]}};

assign tmp_4_fu_723_p1 = grp_fu_1114_p3;

assign tmp_4_fu_723_p4 = {{tmp_4_fu_723_p1[23:8]}};

assign tmp_5_fu_744_p1 = grp_fu_1122_p3;

assign tmp_5_fu_744_p4 = {{tmp_5_fu_744_p1[23:8]}};

assign tmp_6_fu_764_p1 = grp_fu_1130_p3;

assign tmp_6_fu_764_p4 = {{tmp_6_fu_764_p1[23:8]}};

assign tmp_7_fu_785_p1 = grp_fu_1138_p3;

assign tmp_7_fu_785_p4 = {{tmp_7_fu_785_p1[23:8]}};

assign tmp_8_fu_805_p1 = grp_fu_1146_p3;

assign tmp_8_fu_805_p4 = {{tmp_8_fu_805_p1[23:8]}};

assign tmp_s_fu_703_p1 = grp_fu_1106_p3;

assign tmp_s_fu_703_p4 = {{tmp_s_fu_703_p1[23:8]}};

assign trunc_ln1_fu_1059_p1 = grp_fu_1234_p3;

assign trunc_ln1_fu_1059_p4 = {{trunc_ln1_fu_1059_p1[22:8]}};

assign trunc_ln70_fu_658_p1 = ap_sig_allocacmp_i[1:0];

assign zext_ln70_1_fu_1089_p1 = lshr_ln_reg_1677_pp0_iter10_reg;

assign zext_ln70_2_fu_639_p1 = ap_sig_allocacmp_i;

assign zext_ln70_3_fu_990_p1 = i_reg_1345_pp0_iter8_reg;

assign zext_ln70_fu_998_p1 = add_ln70_fu_993_p2;

always @ (posedge ap_clk) begin
    zext_ln70_2_reg_1350[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln70_2_reg_1350_pp0_iter1_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln70_2_reg_1350_pp0_iter2_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln70_2_reg_1350_pp0_iter3_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln70_2_reg_1350_pp0_iter4_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln70_2_reg_1350_pp0_iter5_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln70_2_reg_1350_pp0_iter6_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln70_2_reg_1350_pp0_iter7_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_70_4
