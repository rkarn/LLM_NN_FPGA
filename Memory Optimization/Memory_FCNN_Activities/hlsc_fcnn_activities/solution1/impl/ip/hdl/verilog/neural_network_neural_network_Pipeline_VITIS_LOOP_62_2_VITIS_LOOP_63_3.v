// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_62_2_VITIS_LOOP_63_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer1_weight_tile_address0,
        layer1_weight_tile_ce0,
        layer1_weight_tile_we0,
        layer1_weight_tile_d0,
        tile,
        layer1_weight_tile_17_address0,
        layer1_weight_tile_17_ce0,
        layer1_weight_tile_17_we0,
        layer1_weight_tile_17_d0,
        layer1_weight_tile_16_address0,
        layer1_weight_tile_16_ce0,
        layer1_weight_tile_16_we0,
        layer1_weight_tile_16_d0,
        layer1_weight_tile_15_address0,
        layer1_weight_tile_15_ce0,
        layer1_weight_tile_15_we0,
        layer1_weight_tile_15_d0,
        layer1_weight_tile_14_address0,
        layer1_weight_tile_14_ce0,
        layer1_weight_tile_14_we0,
        layer1_weight_tile_14_d0,
        layer1_weight_tile_13_address0,
        layer1_weight_tile_13_ce0,
        layer1_weight_tile_13_we0,
        layer1_weight_tile_13_d0,
        layer1_weight_tile_12_address0,
        layer1_weight_tile_12_ce0,
        layer1_weight_tile_12_we0,
        layer1_weight_tile_12_d0,
        layer1_weight_tile_11_address0,
        layer1_weight_tile_11_ce0,
        layer1_weight_tile_11_we0,
        layer1_weight_tile_11_d0,
        layer1_weight_tile_10_address0,
        layer1_weight_tile_10_ce0,
        layer1_weight_tile_10_we0,
        layer1_weight_tile_10_d0,
        layer1_weight_tile_9_address0,
        layer1_weight_tile_9_ce0,
        layer1_weight_tile_9_we0,
        layer1_weight_tile_9_d0,
        layer1_weight_tile_8_address0,
        layer1_weight_tile_8_ce0,
        layer1_weight_tile_8_we0,
        layer1_weight_tile_8_d0,
        layer1_weight_tile_7_address0,
        layer1_weight_tile_7_ce0,
        layer1_weight_tile_7_we0,
        layer1_weight_tile_7_d0,
        layer1_weight_tile_6_address0,
        layer1_weight_tile_6_ce0,
        layer1_weight_tile_6_we0,
        layer1_weight_tile_6_d0,
        layer1_weight_tile_5_address0,
        layer1_weight_tile_5_ce0,
        layer1_weight_tile_5_we0,
        layer1_weight_tile_5_d0,
        layer1_weight_tile_4_address0,
        layer1_weight_tile_4_ce0,
        layer1_weight_tile_4_we0,
        layer1_weight_tile_4_d0,
        layer1_weight_tile_3_address0,
        layer1_weight_tile_3_ce0,
        layer1_weight_tile_3_we0,
        layer1_weight_tile_3_d0,
        layer1_weight_tile_2_address0,
        layer1_weight_tile_2_ce0,
        layer1_weight_tile_2_we0,
        layer1_weight_tile_2_d0,
        layer1_weight_tile_1_address0,
        layer1_weight_tile_1_ce0,
        layer1_weight_tile_1_we0,
        layer1_weight_tile_1_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] layer1_weight_tile_address0;
output   layer1_weight_tile_ce0;
output   layer1_weight_tile_we0;
output  [11:0] layer1_weight_tile_d0;
input  [4:0] tile;
output  [1:0] layer1_weight_tile_17_address0;
output   layer1_weight_tile_17_ce0;
output   layer1_weight_tile_17_we0;
output  [11:0] layer1_weight_tile_17_d0;
output  [1:0] layer1_weight_tile_16_address0;
output   layer1_weight_tile_16_ce0;
output   layer1_weight_tile_16_we0;
output  [11:0] layer1_weight_tile_16_d0;
output  [1:0] layer1_weight_tile_15_address0;
output   layer1_weight_tile_15_ce0;
output   layer1_weight_tile_15_we0;
output  [11:0] layer1_weight_tile_15_d0;
output  [1:0] layer1_weight_tile_14_address0;
output   layer1_weight_tile_14_ce0;
output   layer1_weight_tile_14_we0;
output  [11:0] layer1_weight_tile_14_d0;
output  [1:0] layer1_weight_tile_13_address0;
output   layer1_weight_tile_13_ce0;
output   layer1_weight_tile_13_we0;
output  [11:0] layer1_weight_tile_13_d0;
output  [1:0] layer1_weight_tile_12_address0;
output   layer1_weight_tile_12_ce0;
output   layer1_weight_tile_12_we0;
output  [11:0] layer1_weight_tile_12_d0;
output  [1:0] layer1_weight_tile_11_address0;
output   layer1_weight_tile_11_ce0;
output   layer1_weight_tile_11_we0;
output  [11:0] layer1_weight_tile_11_d0;
output  [1:0] layer1_weight_tile_10_address0;
output   layer1_weight_tile_10_ce0;
output   layer1_weight_tile_10_we0;
output  [11:0] layer1_weight_tile_10_d0;
output  [1:0] layer1_weight_tile_9_address0;
output   layer1_weight_tile_9_ce0;
output   layer1_weight_tile_9_we0;
output  [11:0] layer1_weight_tile_9_d0;
output  [1:0] layer1_weight_tile_8_address0;
output   layer1_weight_tile_8_ce0;
output   layer1_weight_tile_8_we0;
output  [11:0] layer1_weight_tile_8_d0;
output  [1:0] layer1_weight_tile_7_address0;
output   layer1_weight_tile_7_ce0;
output   layer1_weight_tile_7_we0;
output  [11:0] layer1_weight_tile_7_d0;
output  [1:0] layer1_weight_tile_6_address0;
output   layer1_weight_tile_6_ce0;
output   layer1_weight_tile_6_we0;
output  [11:0] layer1_weight_tile_6_d0;
output  [1:0] layer1_weight_tile_5_address0;
output   layer1_weight_tile_5_ce0;
output   layer1_weight_tile_5_we0;
output  [11:0] layer1_weight_tile_5_d0;
output  [1:0] layer1_weight_tile_4_address0;
output   layer1_weight_tile_4_ce0;
output   layer1_weight_tile_4_we0;
output  [11:0] layer1_weight_tile_4_d0;
output  [1:0] layer1_weight_tile_3_address0;
output   layer1_weight_tile_3_ce0;
output   layer1_weight_tile_3_we0;
output  [11:0] layer1_weight_tile_3_d0;
output  [1:0] layer1_weight_tile_2_address0;
output   layer1_weight_tile_2_ce0;
output   layer1_weight_tile_2_we0;
output  [11:0] layer1_weight_tile_2_d0;
output  [1:0] layer1_weight_tile_1_address0;
output   layer1_weight_tile_1_ce0;
output   layer1_weight_tile_1_we0;
output  [11:0] layer1_weight_tile_1_d0;

reg ap_idle;
reg layer1_weight_tile_ce0;
reg layer1_weight_tile_we0;
reg layer1_weight_tile_17_ce0;
reg layer1_weight_tile_17_we0;
reg layer1_weight_tile_16_ce0;
reg layer1_weight_tile_16_we0;
reg layer1_weight_tile_15_ce0;
reg layer1_weight_tile_15_we0;
reg layer1_weight_tile_14_ce0;
reg layer1_weight_tile_14_we0;
reg layer1_weight_tile_13_ce0;
reg layer1_weight_tile_13_we0;
reg layer1_weight_tile_12_ce0;
reg layer1_weight_tile_12_we0;
reg layer1_weight_tile_11_ce0;
reg layer1_weight_tile_11_we0;
reg layer1_weight_tile_10_ce0;
reg layer1_weight_tile_10_we0;
reg layer1_weight_tile_9_ce0;
reg layer1_weight_tile_9_we0;
reg layer1_weight_tile_8_ce0;
reg layer1_weight_tile_8_we0;
reg layer1_weight_tile_7_ce0;
reg layer1_weight_tile_7_we0;
reg layer1_weight_tile_6_ce0;
reg layer1_weight_tile_6_we0;
reg layer1_weight_tile_5_ce0;
reg layer1_weight_tile_5_we0;
reg layer1_weight_tile_4_ce0;
reg layer1_weight_tile_4_we0;
reg layer1_weight_tile_3_ce0;
reg layer1_weight_tile_3_we0;
reg layer1_weight_tile_2_ce0;
reg layer1_weight_tile_2_we0;
reg layer1_weight_tile_1_ce0;
reg layer1_weight_tile_1_we0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
wire   [0:0] icmp_ln62_fu_417_p2;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [8:0] layer1_weights_address0;
reg    layer1_weights_ce0;
wire   [11:0] layer1_weights_q0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln62_reg_554;
wire    ap_block_pp0_stage1_11001;
wire   [6:0] add_ln62_2_fu_423_p2;
reg   [6:0] add_ln62_2_reg_558;
wire   [4:0] select_ln62_fu_447_p3;
reg   [4:0] select_ln62_reg_563;
wire   [63:0] select_ln62_1_fu_455_p3;
reg   [63:0] select_ln62_1_reg_569;
wire   [4:0] add_ln62_1_fu_467_p2;
reg   [4:0] add_ln62_1_reg_592;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln65_2_fu_505_p1;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
reg   [4:0] j_fu_116;
wire   [4:0] add_ln63_fu_510_p2;
wire    ap_loop_init;
reg   [63:0] i_fu_120;
reg   [6:0] indvar_flatten_fu_124;
wire   [0:0] icmp_ln63_fu_441_p2;
wire   [63:0] add_ln62_fu_435_p2;
wire   [4:0] trunc_ln62_fu_463_p1;
wire   [5:0] tmp_8_fu_479_p3;
wire   [8:0] tmp_7_fu_472_p3;
wire   [8:0] zext_ln65_fu_486_p1;
wire   [8:0] add_ln65_fu_490_p2;
wire   [8:0] zext_ln65_1_fu_496_p1;
wire   [8:0] add_ln65_1_fu_499_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

neural_network_neural_network_Pipeline_VITIS_LOOP_62_2_VITIS_LOOP_63_3_layer1_weights_ROM_AUbkb #(
    .DataWidth( 12 ),
    .AddressRange( 360 ),
    .AddressWidth( 9 ))
layer1_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_address0),
    .ce0(layer1_weights_ce0),
    .q0(layer1_weights_q0)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_120 <= 64'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln62_reg_554 == 1'd0))) begin
            i_fu_120 <= select_ln62_1_reg_569;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_124 <= 7'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln62_reg_554 == 1'd0))) begin
            indvar_flatten_fu_124 <= add_ln62_2_reg_558;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_116 <= 5'd0;
        end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln62_reg_554 == 1'd0))) begin
            j_fu_116 <= add_ln63_fu_510_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln62_fu_417_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln62_1_reg_592 <= add_ln62_1_fu_467_p2;
        select_ln62_1_reg_569 <= select_ln62_1_fu_455_p3;
        select_ln62_reg_563 <= select_ln62_fu_447_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln62_2_reg_558 <= add_ln62_2_fu_423_p2;
        icmp_ln62_reg_554 <= icmp_ln62_fu_417_p2;
    end
end

always @ (*) begin
    if (((icmp_ln62_fu_417_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_10_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd10) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_10_we0 = 1'b1;
    end else begin
        layer1_weight_tile_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_11_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd11) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_11_we0 = 1'b1;
    end else begin
        layer1_weight_tile_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_12_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd12) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_12_we0 = 1'b1;
    end else begin
        layer1_weight_tile_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_13_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd13) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_13_we0 = 1'b1;
    end else begin
        layer1_weight_tile_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_14_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd14) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_14_we0 = 1'b1;
    end else begin
        layer1_weight_tile_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_15_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd15) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_15_we0 = 1'b1;
    end else begin
        layer1_weight_tile_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_16_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd16) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_16_we0 = 1'b1;
    end else begin
        layer1_weight_tile_16_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_17_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & ((select_ln62_reg_563 == 5'd17) | ((select_ln62_reg_563 == 5'd18) | ((select_ln62_reg_563 == 5'd19) | ((select_ln62_reg_563 == 5'd20) | ((select_ln62_reg_563 == 5'd21) | ((select_ln62_reg_563 == 5'd22) | ((select_ln62_reg_563 == 5'd23) | ((select_ln62_reg_563 == 5'd24) | ((select_ln62_reg_563 == 5'd25) | ((select_ln62_reg_563 == 5'd26) | ((select_ln62_reg_563 == 5'd27) | ((select_ln62_reg_563 == 5'd28) | ((select_ln62_reg_563 == 5'd29) | ((select_ln62_reg_563 == 5'd30) | (select_ln62_reg_563 == 5'd31))))))))))))))))) begin
        layer1_weight_tile_17_we0 = 1'b1;
    end else begin
        layer1_weight_tile_17_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_1_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_1_we0 = 1'b1;
    end else begin
        layer1_weight_tile_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_2_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd2) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_2_we0 = 1'b1;
    end else begin
        layer1_weight_tile_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_3_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd3) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_3_we0 = 1'b1;
    end else begin
        layer1_weight_tile_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_4_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd4) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_4_we0 = 1'b1;
    end else begin
        layer1_weight_tile_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_5_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd5) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_5_we0 = 1'b1;
    end else begin
        layer1_weight_tile_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_6_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd6) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_6_we0 = 1'b1;
    end else begin
        layer1_weight_tile_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_7_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd7) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_7_we0 = 1'b1;
    end else begin
        layer1_weight_tile_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_8_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd8) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_8_we0 = 1'b1;
    end else begin
        layer1_weight_tile_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_9_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd9) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_9_we0 = 1'b1;
    end else begin
        layer1_weight_tile_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_ce0 = 1'b1;
    end else begin
        layer1_weight_tile_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (select_ln62_reg_563 == 5'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        layer1_weight_tile_we0 = 1'b1;
    end else begin
        layer1_weight_tile_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weights_ce0 = 1'b1;
    end else begin
        layer1_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln62_1_fu_467_p2 = (trunc_ln62_fu_463_p1 + tile);

assign add_ln62_2_fu_423_p2 = (indvar_flatten_fu_124 + 7'd1);

assign add_ln62_fu_435_p2 = (i_fu_120 + 64'd1);

assign add_ln63_fu_510_p2 = (select_ln62_reg_563 + 5'd1);

assign add_ln65_1_fu_499_p2 = (add_ln65_fu_490_p2 + zext_ln65_1_fu_496_p1);

assign add_ln65_fu_490_p2 = (tmp_7_fu_472_p3 + zext_ln65_fu_486_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign icmp_ln62_fu_417_p2 = ((indvar_flatten_fu_124 == 7'd72) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_441_p2 = ((j_fu_116 == 5'd18) ? 1'b1 : 1'b0);

assign layer1_weight_tile_10_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_10_d0 = layer1_weights_q0;

assign layer1_weight_tile_11_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_11_d0 = layer1_weights_q0;

assign layer1_weight_tile_12_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_12_d0 = layer1_weights_q0;

assign layer1_weight_tile_13_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_13_d0 = layer1_weights_q0;

assign layer1_weight_tile_14_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_14_d0 = layer1_weights_q0;

assign layer1_weight_tile_15_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_15_d0 = layer1_weights_q0;

assign layer1_weight_tile_16_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_16_d0 = layer1_weights_q0;

assign layer1_weight_tile_17_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_17_d0 = layer1_weights_q0;

assign layer1_weight_tile_1_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_1_d0 = layer1_weights_q0;

assign layer1_weight_tile_2_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_2_d0 = layer1_weights_q0;

assign layer1_weight_tile_3_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_3_d0 = layer1_weights_q0;

assign layer1_weight_tile_4_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_4_d0 = layer1_weights_q0;

assign layer1_weight_tile_5_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_5_d0 = layer1_weights_q0;

assign layer1_weight_tile_6_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_6_d0 = layer1_weights_q0;

assign layer1_weight_tile_7_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_7_d0 = layer1_weights_q0;

assign layer1_weight_tile_8_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_8_d0 = layer1_weights_q0;

assign layer1_weight_tile_9_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_9_d0 = layer1_weights_q0;

assign layer1_weight_tile_address0 = select_ln62_1_reg_569;

assign layer1_weight_tile_d0 = layer1_weights_q0;

assign layer1_weights_address0 = zext_ln65_2_fu_505_p1;

assign select_ln62_1_fu_455_p3 = ((icmp_ln63_fu_441_p2[0:0] == 1'b1) ? add_ln62_fu_435_p2 : i_fu_120);

assign select_ln62_fu_447_p3 = ((icmp_ln63_fu_441_p2[0:0] == 1'b1) ? 5'd0 : j_fu_116);

assign tmp_7_fu_472_p3 = {{add_ln62_1_reg_592}, {4'd0}};

assign tmp_8_fu_479_p3 = {{add_ln62_1_reg_592}, {1'd0}};

assign trunc_ln62_fu_463_p1 = select_ln62_1_fu_455_p3[4:0];

assign zext_ln65_1_fu_496_p1 = select_ln62_reg_563;

assign zext_ln65_2_fu_505_p1 = add_ln65_1_fu_499_p2;

assign zext_ln65_fu_486_p1 = tmp_8_fu_479_p3;

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_62_2_VITIS_LOOP_63_3
