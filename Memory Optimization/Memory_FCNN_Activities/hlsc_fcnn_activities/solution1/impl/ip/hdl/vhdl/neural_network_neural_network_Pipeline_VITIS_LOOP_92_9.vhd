-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network_neural_network_Pipeline_VITIS_LOOP_92_9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cmp131 : IN STD_LOGIC_VECTOR (0 downto 0);
    layer2_weight_tile_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    layer2_weight_tile_ce0 : OUT STD_LOGIC;
    layer2_weight_tile_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    layer2_weight_tile_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    layer2_weight_tile_1_ce0 : OUT STD_LOGIC;
    layer2_weight_tile_1_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    layer2_weight_tile_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    layer2_weight_tile_2_ce0 : OUT STD_LOGIC;
    layer2_weight_tile_2_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    layer2_weight_tile_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    layer2_weight_tile_3_ce0 : OUT STD_LOGIC;
    layer2_weight_tile_3_q0 : IN STD_LOGIC_VECTOR (11 downto 0);
    tile_1 : IN STD_LOGIC_VECTOR (4 downto 0);
    layer1_output_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    layer1_output_ce0 : OUT STD_LOGIC;
    layer1_output_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    layer1_output_1_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    layer1_output_1_ce0 : OUT STD_LOGIC;
    layer1_output_1_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    layer1_output_2_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    layer1_output_2_ce0 : OUT STD_LOGIC;
    layer1_output_2_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    layer1_output_3_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    layer1_output_3_ce0 : OUT STD_LOGIC;
    layer1_output_3_q0 : IN STD_LOGIC_VECTOR (14 downto 0);
    conv_i_i_le19_out_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_le19_out_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_le19_out_o_ap_vld : OUT STD_LOGIC;
    conv_i_i_le17_out_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_le17_out_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_le17_out_o_ap_vld : OUT STD_LOGIC;
    conv_i_i_le15_out_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_le15_out_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_le15_out_o_ap_vld : OUT STD_LOGIC;
    conv_i_i_le13_out_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_le13_out_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_le13_out_o_ap_vld : OUT STD_LOGIC;
    conv_i_i_le11_out_i : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_le11_out_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i_le11_out_o_ap_vld : OUT STD_LOGIC;
    p_0_0_0114_i3_out_i : IN STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_0114_i3_out_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    p_0_0_0114_i3_out_o_ap_vld : OUT STD_LOGIC );
end;


architecture behav of neural_network_neural_network_Pipeline_VITIS_LOOP_92_9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal icmp_ln92_reg_593 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage3 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer2_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_bias_ce0 : STD_LOGIC;
    signal layer2_bias_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal cmp131_read_reg_578 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_reg_584 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_584_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln92_fu_225_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal layer2_bias_load_reg_642 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal layer2_weight_tile_1_load_reg_647 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer2_weight_tile_2_load_reg_652 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer2_weight_tile_3_load_reg_657 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer1_output_1_load_reg_662 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_2_load_reg_667 : STD_LOGIC_VECTOR (14 downto 0);
    signal layer1_output_3_load_reg_672 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal conv_i_i_le11_out_load_reg_697 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal conv_i_i_le13_out_load_reg_703 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i_le15_out_load_reg_708 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i_le17_out_load_reg_713 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_i_i_le19_out_load_reg_718 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln92_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln96_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal layer2_output_fu_456_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_sig_allocacmp_conv_i_i_le19_out_load : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_2_fu_463_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_conv_i_i_le17_out_load : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_3_fu_470_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_conv_i_i_le15_out_load : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_4_fu_477_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_conv_i_i_le13_out_load : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_5_fu_484_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_sig_allocacmp_conv_i_i_le11_out_load : STD_LOGIC_VECTOR (15 downto 0);
    signal max_val_fu_491_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_84 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln92_fu_231_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal lshr_ln1_fu_246_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal sext_ln94_fu_303_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_306_p7 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_fu_321_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_342_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_535_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_342_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_365_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_544_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_365_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_382_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_553_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_fu_382_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln96_3_fu_409_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_562_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln98_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_1_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_2_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln98_3_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln98_1_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln98_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln98_2_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln96_3_fu_409_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_1_fu_403_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_535_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_535_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_544_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_544_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_553_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_553_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_562_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_562_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_535_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_544_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_553_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_562_p10 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component neural_network_mux_5_3_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component neural_network_mac_muladd_12s_15ns_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_92_9_layer2_bias_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    layer2_bias_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_92_9_layer2_bias_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_bias_address0,
        ce0 => layer2_bias_ce0,
        q0 => layer2_bias_q0);

    mux_5_3_16_1_1_U89 : component neural_network_mux_5_3_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => ap_sig_allocacmp_conv_i_i_le11_out_load,
        din1 => ap_sig_allocacmp_conv_i_i_le13_out_load,
        din2 => ap_sig_allocacmp_conv_i_i_le15_out_load,
        din3 => ap_sig_allocacmp_conv_i_i_le17_out_load,
        din4 => ap_sig_allocacmp_conv_i_i_le19_out_load,
        din5 => i_1_reg_584,
        dout => tmp_4_fu_306_p7);

    mac_muladd_12s_15ns_24ns_24_4_1_U90 : component neural_network_mac_muladd_12s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weight_tile_q0,
        din1 => grp_fu_535_p1,
        din2 => grp_fu_535_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_535_p3);

    mac_muladd_12s_15ns_24ns_24_4_1_U91 : component neural_network_mac_muladd_12s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weight_tile_1_load_reg_647,
        din1 => grp_fu_544_p1,
        din2 => grp_fu_544_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_544_p3);

    mac_muladd_12s_15ns_24ns_24_4_1_U92 : component neural_network_mac_muladd_12s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weight_tile_2_load_reg_652,
        din1 => grp_fu_553_p1,
        din2 => grp_fu_553_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_553_p3);

    mac_muladd_12s_15ns_24ns_24_4_1_U93 : component neural_network_mac_muladd_12s_15ns_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 15,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weight_tile_3_load_reg_657,
        din1 => grp_fu_562_p1,
        din2 => grp_fu_562_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_562_p3);

    flow_control_loop_pipe_sequential_init_U : component neural_network_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage3,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage3)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln92_fu_225_p2 = ap_const_lv1_0))) then 
                    i_fu_84 <= add_ln92_fu_231_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_84 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_593 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                conv_i_i_le11_out_load_reg_697 <= ap_sig_allocacmp_conv_i_i_le11_out_load;
                conv_i_i_le13_out_load_reg_703 <= ap_sig_allocacmp_conv_i_i_le13_out_load;
                conv_i_i_le15_out_load_reg_708 <= ap_sig_allocacmp_conv_i_i_le15_out_load;
                conv_i_i_le17_out_load_reg_713 <= ap_sig_allocacmp_conv_i_i_le17_out_load;
                conv_i_i_le19_out_load_reg_718 <= ap_sig_allocacmp_conv_i_i_le19_out_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_1_reg_584 <= ap_sig_allocacmp_i_1;
                i_1_reg_584_pp0_iter1_reg <= i_1_reg_584;
                icmp_ln92_reg_593 <= icmp_ln92_fu_225_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_593 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                layer1_output_1_load_reg_662 <= layer1_output_1_q0;
                layer1_output_2_load_reg_667 <= layer1_output_2_q0;
                layer1_output_3_load_reg_672 <= layer1_output_3_q0;
                layer2_weight_tile_1_load_reg_647 <= layer2_weight_tile_1_q0;
                layer2_weight_tile_2_load_reg_652 <= layer2_weight_tile_2_q0;
                layer2_weight_tile_3_load_reg_657 <= layer2_weight_tile_3_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln92_reg_593 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (cmp131_read_reg_578 = ap_const_lv1_1))) then
                layer2_bias_load_reg_642 <= layer2_bias_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln92_fu_231_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, icmp_ln92_reg_593)
    begin
        if (((icmp_ln92_reg_593 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage3;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_conv_i_i_le11_out_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, conv_i_i_le11_out_i, ap_block_pp0_stage3, layer2_output_5_fu_484_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_sig_allocacmp_conv_i_i_le11_out_load <= layer2_output_5_fu_484_p3;
        else 
            ap_sig_allocacmp_conv_i_i_le11_out_load <= conv_i_i_le11_out_i;
        end if; 
    end process;


    ap_sig_allocacmp_conv_i_i_le13_out_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, conv_i_i_le13_out_i, ap_block_pp0_stage3, layer2_output_4_fu_477_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_sig_allocacmp_conv_i_i_le13_out_load <= layer2_output_4_fu_477_p3;
        else 
            ap_sig_allocacmp_conv_i_i_le13_out_load <= conv_i_i_le13_out_i;
        end if; 
    end process;


    ap_sig_allocacmp_conv_i_i_le15_out_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, conv_i_i_le15_out_i, ap_block_pp0_stage3, layer2_output_3_fu_470_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_sig_allocacmp_conv_i_i_le15_out_load <= layer2_output_3_fu_470_p3;
        else 
            ap_sig_allocacmp_conv_i_i_le15_out_load <= conv_i_i_le15_out_i;
        end if; 
    end process;


    ap_sig_allocacmp_conv_i_i_le17_out_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, conv_i_i_le17_out_i, ap_block_pp0_stage3, layer2_output_2_fu_463_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_sig_allocacmp_conv_i_i_le17_out_load <= layer2_output_2_fu_463_p3;
        else 
            ap_sig_allocacmp_conv_i_i_le17_out_load <= conv_i_i_le17_out_i;
        end if; 
    end process;


    ap_sig_allocacmp_conv_i_i_le19_out_load_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, conv_i_i_le19_out_i, layer2_output_fu_456_p3, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_sig_allocacmp_conv_i_i_le19_out_load <= layer2_output_fu_456_p3;
        else 
            ap_sig_allocacmp_conv_i_i_le19_out_load <= conv_i_i_le19_out_i;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_84, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_84;
        end if; 
    end process;

    cmp131_read_reg_578 <= cmp131;

    conv_i_i_le11_out_o_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, conv_i_i_le11_out_i, ap_block_pp0_stage3, layer2_output_5_fu_484_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            conv_i_i_le11_out_o <= layer2_output_5_fu_484_p3;
        else 
            conv_i_i_le11_out_o <= conv_i_i_le11_out_i;
        end if; 
    end process;


    conv_i_i_le11_out_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            conv_i_i_le11_out_o_ap_vld <= ap_const_logic_1;
        else 
            conv_i_i_le11_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    conv_i_i_le13_out_o_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, conv_i_i_le13_out_i, ap_block_pp0_stage3, layer2_output_4_fu_477_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            conv_i_i_le13_out_o <= layer2_output_4_fu_477_p3;
        else 
            conv_i_i_le13_out_o <= conv_i_i_le13_out_i;
        end if; 
    end process;


    conv_i_i_le13_out_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            conv_i_i_le13_out_o_ap_vld <= ap_const_logic_1;
        else 
            conv_i_i_le13_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    conv_i_i_le15_out_o_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, conv_i_i_le15_out_i, ap_block_pp0_stage3, layer2_output_3_fu_470_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            conv_i_i_le15_out_o <= layer2_output_3_fu_470_p3;
        else 
            conv_i_i_le15_out_o <= conv_i_i_le15_out_i;
        end if; 
    end process;


    conv_i_i_le15_out_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            conv_i_i_le15_out_o_ap_vld <= ap_const_logic_1;
        else 
            conv_i_i_le15_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    conv_i_i_le17_out_o_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, conv_i_i_le17_out_i, ap_block_pp0_stage3, layer2_output_2_fu_463_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            conv_i_i_le17_out_o <= layer2_output_2_fu_463_p3;
        else 
            conv_i_i_le17_out_o <= conv_i_i_le17_out_i;
        end if; 
    end process;


    conv_i_i_le17_out_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            conv_i_i_le17_out_o_ap_vld <= ap_const_logic_1;
        else 
            conv_i_i_le17_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    conv_i_i_le19_out_o_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, conv_i_i_le19_out_i, layer2_output_fu_456_p3, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            conv_i_i_le19_out_o <= layer2_output_fu_456_p3;
        else 
            conv_i_i_le19_out_o <= conv_i_i_le19_out_i;
        end if; 
    end process;


    conv_i_i_le19_out_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            conv_i_i_le19_out_o_ap_vld <= ap_const_logic_1;
        else 
            conv_i_i_le19_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_321_p3 <= 
        sext_ln94_fu_303_p1 when (cmp131(0) = '1') else 
        tmp_4_fu_306_p7;
    grp_fu_535_p1 <= grp_fu_535_p10(15 - 1 downto 0);
    grp_fu_535_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer1_output_q0),24));
    grp_fu_535_p2 <= (empty_fu_321_p3 & ap_const_lv8_0);
    grp_fu_544_p1 <= grp_fu_544_p10(15 - 1 downto 0);
    grp_fu_544_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer1_output_1_load_reg_662),24));
    grp_fu_544_p2 <= (tmp_s_fu_342_p4 & ap_const_lv8_0);
    grp_fu_553_p1 <= grp_fu_553_p10(15 - 1 downto 0);
    grp_fu_553_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer1_output_2_load_reg_667),24));
    grp_fu_553_p2 <= (tmp_1_fu_365_p4 & ap_const_lv8_0);
    grp_fu_562_p1 <= grp_fu_562_p10(15 - 1 downto 0);
    grp_fu_562_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer1_output_3_load_reg_672),24));
    grp_fu_562_p2 <= (tmp_2_fu_382_p4 & ap_const_lv8_0);
    icmp_ln92_fu_225_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv3_5) else "0";
    icmp_ln98_1_fu_423_p2 <= "1" when (i_1_reg_584_pp0_iter1_reg = ap_const_lv3_1) else "0";
    icmp_ln98_2_fu_428_p2 <= "1" when (i_1_reg_584_pp0_iter1_reg = ap_const_lv3_2) else "0";
    icmp_ln98_3_fu_433_p2 <= "1" when (i_1_reg_584_pp0_iter1_reg = ap_const_lv3_3) else "0";
    icmp_ln98_fu_418_p2 <= "1" when (i_1_reg_584_pp0_iter1_reg = ap_const_lv3_0) else "0";
    layer1_output_1_address0 <= zext_ln96_fu_256_p1(3 - 1 downto 0);

    layer1_output_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_1_ce0 <= ap_const_logic_1;
        else 
            layer1_output_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_2_address0 <= zext_ln96_fu_256_p1(3 - 1 downto 0);

    layer1_output_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_2_ce0 <= ap_const_logic_1;
        else 
            layer1_output_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_3_address0 <= zext_ln96_fu_256_p1(3 - 1 downto 0);

    layer1_output_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_3_ce0 <= ap_const_logic_1;
        else 
            layer1_output_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_address0 <= zext_ln96_fu_256_p1(3 - 1 downto 0);

    layer1_output_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_output_ce0 <= ap_const_logic_1;
        else 
            layer1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_bias_address0 <= zext_ln92_fu_237_p1(3 - 1 downto 0);

    layer2_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_bias_ce0 <= ap_const_logic_1;
        else 
            layer2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_1_fu_403_p3 <= 
        p_0_0_0114_i3_out_i when (cmp131(0) = '1') else 
        conv_i_i_le11_out_load_reg_697;
    layer2_output_2_fu_463_p3 <= 
        trunc_ln96_3_fu_409_p4 when (icmp_ln98_3_fu_433_p2(0) = '1') else 
        conv_i_i_le17_out_load_reg_713;
    layer2_output_3_fu_470_p3 <= 
        trunc_ln96_3_fu_409_p4 when (icmp_ln98_2_fu_428_p2(0) = '1') else 
        conv_i_i_le15_out_load_reg_708;
    layer2_output_4_fu_477_p3 <= 
        trunc_ln96_3_fu_409_p4 when (icmp_ln98_1_fu_423_p2(0) = '1') else 
        conv_i_i_le13_out_load_reg_703;
    layer2_output_5_fu_484_p3 <= 
        trunc_ln96_3_fu_409_p4 when (icmp_ln98_fu_418_p2(0) = '1') else 
        conv_i_i_le11_out_load_reg_697;
    layer2_output_fu_456_p3 <= 
        conv_i_i_le19_out_load_reg_718 when (or_ln98_2_fu_450_p2(0) = '1') else 
        trunc_ln96_3_fu_409_p4;
    layer2_weight_tile_1_address0 <= zext_ln92_fu_237_p1(3 - 1 downto 0);

    layer2_weight_tile_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_weight_tile_1_ce0 <= ap_const_logic_1;
        else 
            layer2_weight_tile_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weight_tile_2_address0 <= zext_ln92_fu_237_p1(3 - 1 downto 0);

    layer2_weight_tile_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_weight_tile_2_ce0 <= ap_const_logic_1;
        else 
            layer2_weight_tile_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weight_tile_3_address0 <= zext_ln92_fu_237_p1(3 - 1 downto 0);

    layer2_weight_tile_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_weight_tile_3_ce0 <= ap_const_logic_1;
        else 
            layer2_weight_tile_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weight_tile_address0 <= zext_ln92_fu_237_p1(3 - 1 downto 0);

    layer2_weight_tile_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer2_weight_tile_ce0 <= ap_const_logic_1;
        else 
            layer2_weight_tile_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln1_fu_246_p4 <= tile_1(4 downto 2);
    max_val_fu_491_p3 <= 
        trunc_ln96_3_fu_409_p4 when (icmp_ln98_fu_418_p2(0) = '1') else 
        layer2_output_1_fu_403_p3;
    or_ln98_1_fu_444_p2 <= (icmp_ln98_3_fu_433_p2 or icmp_ln98_2_fu_428_p2);
    or_ln98_2_fu_450_p2 <= (or_ln98_fu_438_p2 or or_ln98_1_fu_444_p2);
    or_ln98_fu_438_p2 <= (icmp_ln98_fu_418_p2 or icmp_ln98_1_fu_423_p2);

    p_0_0_0114_i3_out_o_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, p_0_0_0114_i3_out_i, ap_block_pp0_stage3, max_val_fu_491_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_0_0_0114_i3_out_o <= max_val_fu_491_p3;
        else 
            p_0_0_0114_i3_out_o <= p_0_0_0114_i3_out_i;
        end if; 
    end process;


    p_0_0_0114_i3_out_o_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            p_0_0_0114_i3_out_o_ap_vld <= ap_const_logic_1;
        else 
            p_0_0_0114_i3_out_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln94_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(layer2_bias_load_reg_642),16));

    tmp_1_fu_365_p1 <= grp_fu_544_p3;
    tmp_1_fu_365_p4 <= tmp_1_fu_365_p1(23 downto 8);
    tmp_2_fu_382_p1 <= grp_fu_553_p3;
    tmp_2_fu_382_p4 <= tmp_2_fu_382_p1(23 downto 8);
    tmp_s_fu_342_p1 <= grp_fu_535_p3;
    tmp_s_fu_342_p4 <= tmp_s_fu_342_p1(23 downto 8);
    trunc_ln96_3_fu_409_p1 <= grp_fu_562_p3;
    trunc_ln96_3_fu_409_p4 <= trunc_ln96_3_fu_409_p1(23 downto 8);
    zext_ln92_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
    zext_ln96_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_fu_246_p4),64));
end behav;
