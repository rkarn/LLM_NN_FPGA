-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network_neural_network_Pipeline_VITIS_LOOP_36_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_0_i : IN STD_LOGIC_VECTOR (15 downto 0);
    output_0_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_0_o_ap_vld : OUT STD_LOGIC;
    output_2_i : IN STD_LOGIC_VECTOR (15 downto 0);
    output_2_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_2_o_ap_vld : OUT STD_LOGIC;
    output_1_i : IN STD_LOGIC_VECTOR (15 downto 0);
    output_1_o : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_1_o_ap_vld : OUT STD_LOGIC;
    sext_ln38_1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of neural_network_neural_network_Pipeline_VITIS_LOOP_36_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (29 downto 0) := "000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (29 downto 0) := "000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (29 downto 0) := "000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (29 downto 0) := "000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (29 downto 0) := "000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (29 downto 0) := "000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (29 downto 0) := "000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (29 downto 0) := "000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (29 downto 0) := "000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (29 downto 0) := "000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (29 downto 0) := "001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (29 downto 0) := "010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (29 downto 0) := "100000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (29 downto 0) := "000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln36_fu_110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_state30_pp0_stage29_iter0 : BOOLEAN;
    signal i_3_reg_178 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln36_reg_182 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln36_fu_116_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln36_reg_186 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln38_fu_158_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln38_reg_199 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_block_state29_pp0_stage28_iter0 : BOOLEAN;
    signal i_fu_46 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln38_fu_152_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_122_p5 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln3_fu_134_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_146_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal grp_fu_146_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_block_state9_pp0_stage8_iter0 : BOOLEAN;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_block_state17_pp0_stage16_iter0 : BOOLEAN;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_block_state18_pp0_stage17_iter0 : BOOLEAN;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_block_state19_pp0_stage18_iter0 : BOOLEAN;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_block_state20_pp0_stage19_iter0 : BOOLEAN;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_block_state21_pp0_stage20_iter0 : BOOLEAN;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_block_state22_pp0_stage21_iter0 : BOOLEAN;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_block_state23_pp0_stage22_iter0 : BOOLEAN;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_block_state24_pp0_stage23_iter0 : BOOLEAN;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_block_state25_pp0_stage24_iter0 : BOOLEAN;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_block_state26_pp0_stage25_iter0 : BOOLEAN;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_block_state27_pp0_stage26_iter0 : BOOLEAN;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_block_state28_pp0_stage27_iter0 : BOOLEAN;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component neural_network_mux_3_2_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component neural_network_sdiv_25s_16s_25_29_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component neural_network_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_3_2_16_1_1_U83 : component neural_network_mux_3_2_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 2,
        dout_WIDTH => 16)
    port map (
        din0 => output_0_i,
        din1 => output_1_i,
        din2 => output_2_i,
        din3 => ap_sig_allocacmp_i_3,
        dout => tmp_4_fu_122_p5);

    sdiv_25s_16s_25_29_1_U84 : component neural_network_sdiv_25s_16s_25_29_1
    generic map (
        ID => 1,
        NUM_STAGE => 29,
        din0_WIDTH => 25,
        din1_WIDTH => 16,
        dout_WIDTH => 25)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_146_p0,
        din1 => sext_ln38_1,
        ce => ap_const_logic_1,
        dout => grp_fu_146_p2);

    flow_control_loop_pipe_sequential_init_U : component neural_network_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_46_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
                i_fu_46 <= ap_const_lv2_0;
            elsif (((icmp_ln36_reg_182 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                i_fu_46 <= add_ln36_reg_186;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                add_ln36_reg_186 <= add_ln36_fu_116_p2;
                i_3_reg_178 <= ap_sig_allocacmp_i_3;
                icmp_ln36_reg_182 <= icmp_ln36_fu_110_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then
                trunc_ln38_reg_199 <= trunc_ln38_fu_158_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln36_fu_110_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln36_fu_110_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln36_fu_116_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;
        ap_block_state10_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state20_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage23_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage24_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage25_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage26_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage27_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage28_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage29_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln36_fu_110_p2, ap_start_int)
    begin
        if (((icmp_ln36_fu_110_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_state1, i_fu_46, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_46;
        end if; 
    end process;

        grp_fu_146_p0 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln3_fu_134_p3),25));

    icmp_ln36_fu_110_p2 <= "1" when (ap_sig_allocacmp_i_3 = ap_const_lv2_3) else "0";
    icmp_ln38_fu_152_p2 <= "1" when (grp_fu_146_p2 = ap_const_lv25_0) else "0";

    output_0_o_assign_proc : process(ap_CS_fsm_state30, output_0_i, i_3_reg_178, icmp_ln36_reg_182, trunc_ln38_reg_199, ap_CS_fsm_state29, icmp_ln38_fu_152_p2)
    begin
        if ((i_3_reg_178 = ap_const_lv2_0)) then
            if (((icmp_ln36_reg_182 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                output_0_o <= trunc_ln38_reg_199;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln38_fu_152_p2 = ap_const_lv1_1))) then 
                output_0_o <= ap_const_lv16_0;
            else 
                output_0_o <= output_0_i;
            end if;
        else 
            output_0_o <= output_0_i;
        end if; 
    end process;


    output_0_o_ap_vld_assign_proc : process(ap_CS_fsm_state30, i_3_reg_178, icmp_ln36_reg_182, ap_CS_fsm_state29, icmp_ln38_fu_152_p2)
    begin
        if ((((icmp_ln36_reg_182 = ap_const_lv1_0) and (i_3_reg_178 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((i_3_reg_178 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln38_fu_152_p2 = ap_const_lv1_1)))) then 
            output_0_o_ap_vld <= ap_const_logic_1;
        else 
            output_0_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output_1_o_assign_proc : process(ap_CS_fsm_state30, output_1_i, i_3_reg_178, icmp_ln36_reg_182, trunc_ln38_reg_199, ap_CS_fsm_state29, icmp_ln38_fu_152_p2)
    begin
        if ((i_3_reg_178 = ap_const_lv2_1)) then
            if (((icmp_ln36_reg_182 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                output_1_o <= trunc_ln38_reg_199;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln38_fu_152_p2 = ap_const_lv1_1))) then 
                output_1_o <= ap_const_lv16_0;
            else 
                output_1_o <= output_1_i;
            end if;
        else 
            output_1_o <= output_1_i;
        end if; 
    end process;


    output_1_o_ap_vld_assign_proc : process(ap_CS_fsm_state30, i_3_reg_178, icmp_ln36_reg_182, ap_CS_fsm_state29, icmp_ln38_fu_152_p2)
    begin
        if ((((icmp_ln36_reg_182 = ap_const_lv1_0) and (i_3_reg_178 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state30)) or ((i_3_reg_178 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln38_fu_152_p2 = ap_const_lv1_1)))) then 
            output_1_o_ap_vld <= ap_const_logic_1;
        else 
            output_1_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    output_2_o_assign_proc : process(ap_CS_fsm_state30, output_2_i, i_3_reg_178, icmp_ln36_reg_182, trunc_ln38_reg_199, ap_CS_fsm_state29, icmp_ln38_fu_152_p2)
    begin
        if ((not((i_3_reg_178 = ap_const_lv2_0)) and not((i_3_reg_178 = ap_const_lv2_1)))) then
            if (((icmp_ln36_reg_182 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                output_2_o <= trunc_ln38_reg_199;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln38_fu_152_p2 = ap_const_lv1_1))) then 
                output_2_o <= ap_const_lv16_0;
            else 
                output_2_o <= output_2_i;
            end if;
        else 
            output_2_o <= output_2_i;
        end if; 
    end process;


    output_2_o_ap_vld_assign_proc : process(ap_CS_fsm_state30, i_3_reg_178, icmp_ln36_reg_182, ap_CS_fsm_state29, icmp_ln38_fu_152_p2)
    begin
        if (((not((i_3_reg_178 = ap_const_lv2_0)) and not((i_3_reg_178 = ap_const_lv2_1)) and (icmp_ln36_reg_182 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state30)) or (not((i_3_reg_178 = ap_const_lv2_0)) and not((i_3_reg_178 = ap_const_lv2_1)) and (ap_const_logic_1 = ap_CS_fsm_state29) and (icmp_ln38_fu_152_p2 = ap_const_lv1_1)))) then 
            output_2_o_ap_vld <= ap_const_logic_1;
        else 
            output_2_o_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln3_fu_134_p3 <= (tmp_4_fu_122_p5 & ap_const_lv8_0);
    trunc_ln38_fu_158_p1 <= grp_fu_146_p2(16 - 1 downto 0);
end behav;
