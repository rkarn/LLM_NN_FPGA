-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network_neural_network_Pipeline_VITIS_LOOP_70_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln75 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_2_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_2_out_ap_vld : OUT STD_LOGIC;
    layer2_output_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_1_out_ap_vld : OUT STD_LOGIC;
    layer2_output_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of neural_network_neural_network_Pipeline_VITIS_LOOP_70_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv9_7 : STD_LOGIC_VECTOR (8 downto 0) := "000000111";
    constant ap_const_lv9_B6 : STD_LOGIC_VECTOR (8 downto 0) := "010110110";
    constant ap_const_lv9_1FF : STD_LOGIC_VECTOR (8 downto 0) := "111111111";
    constant ap_const_lv10_119 : STD_LOGIC_VECTOR (9 downto 0) := "0100011001";
    constant ap_const_lv10_36D : STD_LOGIC_VECTOR (9 downto 0) := "1101101101";
    constant ap_const_lv10_3B3 : STD_LOGIC_VECTOR (9 downto 0) := "1110110011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv9_23 : STD_LOGIC_VECTOR (8 downto 0) := "000100011";
    constant ap_const_lv9_6 : STD_LOGIC_VECTOR (8 downto 0) := "000000110";
    constant ap_const_lv9_17A : STD_LOGIC_VECTOR (8 downto 0) := "101111010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv9_70 : STD_LOGIC_VECTOR (8 downto 0) := "001110000";
    constant ap_const_lv9_165 : STD_LOGIC_VECTOR (8 downto 0) := "101100101";
    constant ap_const_lv9_174 : STD_LOGIC_VECTOR (8 downto 0) := "101110100";
    constant ap_const_lv9_17B : STD_LOGIC_VECTOR (8 downto 0) := "101111011";
    constant ap_const_lv9_8E : STD_LOGIC_VECTOR (8 downto 0) := "010001110";
    constant ap_const_lv9_2A : STD_LOGIC_VECTOR (8 downto 0) := "000101010";
    constant ap_const_lv9_1A3 : STD_LOGIC_VECTOR (8 downto 0) := "110100011";
    constant ap_const_lv9_2B : STD_LOGIC_VECTOR (8 downto 0) := "000101011";
    constant ap_const_lv9_105 : STD_LOGIC_VECTOR (8 downto 0) := "100000101";
    constant ap_const_lv9_14 : STD_LOGIC_VECTOR (8 downto 0) := "000010100";
    constant ap_const_lv9_E4 : STD_LOGIC_VECTOR (8 downto 0) := "011100100";
    constant ap_const_lv9_1E6 : STD_LOGIC_VECTOR (8 downto 0) := "111100110";
    constant ap_const_lv10_2C3 : STD_LOGIC_VECTOR (9 downto 0) := "1011000011";
    constant ap_const_lv10_3FE : STD_LOGIC_VECTOR (9 downto 0) := "1111111110";
    constant ap_const_lv10_CE : STD_LOGIC_VECTOR (9 downto 0) := "0011001110";
    constant ap_const_lv6_22 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_B : STD_LOGIC_VECTOR (5 downto 0) := "001011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln70_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln75_7_cast_fu_203_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_7_cast_reg_644 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_6_cast_fu_207_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_6_cast_reg_649 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_5_cast_fu_211_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_5_cast_reg_654 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_4_cast_fu_215_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_4_cast_reg_659 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_3_cast_fu_219_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_3_cast_reg_664 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_2_cast_fu_223_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_2_cast_reg_669 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_cast_fu_231_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_cast_reg_679 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_1_reg_684 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_684_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_684_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_684_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_684_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_684_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_684_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_684_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal i_1_reg_684_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln70_reg_696 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_696_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_696_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_696_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_696_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_696_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_696_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_696_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_705 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_fu_118 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln70_fu_249_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer2_output_fu_122 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_4_fu_529_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_1_fu_126 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_2_fu_130 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_3_fu_255_p5 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_276_p5 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln75_fu_291_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln75_fu_291_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_fu_306_p5 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_328_p5 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_343_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_562_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_343_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_360_p5 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_fu_375_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_571_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_fu_375_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_392_p5 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_5_fu_407_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_579_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_407_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_424_p5 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_439_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_587_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_12_fu_439_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_456_p5 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_fu_471_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_595_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_fu_471_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_488_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_603_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_15_fu_488_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_505_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_611_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_fu_514_p5 : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_fu_505_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln77_fu_525_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_562_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_571_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_571_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_579_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_579_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_587_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_587_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_595_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_595_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_603_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_603_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_611_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_611_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component neural_network_mux_3_2_9_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (8 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_mux_3_2_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_mul_10s_16s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mux_3_2_6_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (5 downto 0);
        din3 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component neural_network_mac_muladd_9s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_10s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mux_3_2_9_1_1_U24 : component neural_network_mux_3_2_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        din3_WIDTH => 2,
        dout_WIDTH => 9)
    port map (
        din0 => ap_const_lv9_7,
        din1 => ap_const_lv9_B6,
        din2 => ap_const_lv9_1FF,
        din3 => ap_sig_allocacmp_i_1,
        dout => tmp_3_fu_255_p5);

    mux_3_2_10_1_1_U25 : component neural_network_mux_3_2_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_119,
        din1 => ap_const_lv10_36D,
        din2 => ap_const_lv10_3B3,
        din3 => i_1_reg_684,
        dout => tmp_2_fu_276_p5);

    mul_10s_16s_24_1_1_U26 : component neural_network_mul_10s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => tmp_2_fu_276_p5,
        din1 => mul_ln75_fu_291_p1,
        dout => mul_ln75_fu_291_p2);

    mux_3_2_9_1_1_U27 : component neural_network_mux_3_2_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        din3_WIDTH => 2,
        dout_WIDTH => 9)
    port map (
        din0 => ap_const_lv9_23,
        din1 => ap_const_lv9_6,
        din2 => ap_const_lv9_17A,
        din3 => i_1_reg_684,
        dout => tmp_6_fu_306_p5);

    mux_3_2_9_1_1_U28 : component neural_network_mux_3_2_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        din3_WIDTH => 2,
        dout_WIDTH => 9)
    port map (
        din0 => ap_const_lv9_70,
        din1 => ap_const_lv9_165,
        din2 => ap_const_lv9_174,
        din3 => i_1_reg_684_pp0_iter1_reg,
        dout => tmp_7_fu_328_p5);

    mux_3_2_9_1_1_U29 : component neural_network_mux_3_2_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        din3_WIDTH => 2,
        dout_WIDTH => 9)
    port map (
        din0 => ap_const_lv9_17B,
        din1 => ap_const_lv9_8E,
        din2 => ap_const_lv9_2A,
        din3 => i_1_reg_684_pp0_iter2_reg,
        dout => tmp_8_fu_360_p5);

    mux_3_2_9_1_1_U30 : component neural_network_mux_3_2_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        din3_WIDTH => 2,
        dout_WIDTH => 9)
    port map (
        din0 => ap_const_lv9_1A3,
        din1 => ap_const_lv9_2B,
        din2 => ap_const_lv9_105,
        din3 => i_1_reg_684_pp0_iter3_reg,
        dout => tmp_9_fu_392_p5);

    mux_3_2_9_1_1_U31 : component neural_network_mux_3_2_9_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 9,
        din2_WIDTH => 9,
        din3_WIDTH => 2,
        dout_WIDTH => 9)
    port map (
        din0 => ap_const_lv9_14,
        din1 => ap_const_lv9_E4,
        din2 => ap_const_lv9_1E6,
        din3 => i_1_reg_684_pp0_iter4_reg,
        dout => tmp_10_fu_424_p5);

    mux_3_2_10_1_1_U32 : component neural_network_mux_3_2_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        din3_WIDTH => 2,
        dout_WIDTH => 10)
    port map (
        din0 => ap_const_lv10_2C3,
        din1 => ap_const_lv10_3FE,
        din2 => ap_const_lv10_CE,
        din3 => i_1_reg_684_pp0_iter5_reg,
        dout => tmp_11_fu_456_p5);

    mux_3_2_6_1_1_U33 : component neural_network_mux_3_2_6_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 6,
        din2_WIDTH => 6,
        din3_WIDTH => 2,
        dout_WIDTH => 6)
    port map (
        din0 => ap_const_lv6_22,
        din1 => ap_const_lv6_7,
        din2 => ap_const_lv6_B,
        din3 => i_1_reg_684_pp0_iter8_reg,
        dout => tmp_14_fu_514_p5);

    mac_muladd_9s_16s_24ns_24_4_1_U34 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_3_fu_255_p5,
        din1 => sext_ln75_1,
        din2 => grp_fu_562_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_562_p3);

    mac_muladd_9s_16s_24ns_24_4_1_U35 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_6_fu_306_p5,
        din1 => grp_fu_571_p1,
        din2 => grp_fu_571_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_571_p3);

    mac_muladd_9s_16s_24ns_24_4_1_U36 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_7_fu_328_p5,
        din1 => grp_fu_579_p1,
        din2 => grp_fu_579_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_579_p3);

    mac_muladd_9s_16s_24ns_24_4_1_U37 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_8_fu_360_p5,
        din1 => grp_fu_587_p1,
        din2 => grp_fu_587_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_587_p3);

    mac_muladd_9s_16s_24ns_24_4_1_U38 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_fu_392_p5,
        din1 => grp_fu_595_p1,
        din2 => grp_fu_595_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_595_p3);

    mac_muladd_9s_16s_24ns_24_4_1_U39 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_10_fu_424_p5,
        din1 => grp_fu_603_p1,
        din2 => grp_fu_603_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_603_p3);

    mac_muladd_10s_16s_24ns_24_4_1_U40 : component neural_network_mac_muladd_10s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_11_fu_456_p5,
        din1 => grp_fu_611_p1,
        din2 => grp_fu_611_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_611_p3);

    flow_control_loop_pipe_sequential_init_U : component neural_network_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln70_fu_243_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_118 <= add_ln70_fu_249_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_118 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_1_reg_684 <= ap_sig_allocacmp_i_1;
                i_1_reg_684_pp0_iter1_reg <= i_1_reg_684;
                icmp_ln70_reg_696 <= icmp_ln70_fu_243_p2;
                icmp_ln70_reg_696_pp0_iter1_reg <= icmp_ln70_reg_696;
                sext_ln75_2_cast_reg_669 <= sext_ln75_2_cast_fu_223_p1;
                sext_ln75_3_cast_reg_664 <= sext_ln75_3_cast_fu_219_p1;
                sext_ln75_4_cast_reg_659 <= sext_ln75_4_cast_fu_215_p1;
                sext_ln75_5_cast_reg_654 <= sext_ln75_5_cast_fu_211_p1;
                sext_ln75_6_cast_reg_649 <= sext_ln75_6_cast_fu_207_p1;
                sext_ln75_7_cast_reg_644 <= sext_ln75_7_cast_fu_203_p1;
                sext_ln75_cast_reg_679 <= sext_ln75_cast_fu_231_p1;
                tmp_s_reg_705 <= mul_ln75_fu_291_p2(23 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                i_1_reg_684_pp0_iter2_reg <= i_1_reg_684_pp0_iter1_reg;
                i_1_reg_684_pp0_iter3_reg <= i_1_reg_684_pp0_iter2_reg;
                i_1_reg_684_pp0_iter4_reg <= i_1_reg_684_pp0_iter3_reg;
                i_1_reg_684_pp0_iter5_reg <= i_1_reg_684_pp0_iter4_reg;
                i_1_reg_684_pp0_iter6_reg <= i_1_reg_684_pp0_iter5_reg;
                i_1_reg_684_pp0_iter7_reg <= i_1_reg_684_pp0_iter6_reg;
                i_1_reg_684_pp0_iter8_reg <= i_1_reg_684_pp0_iter7_reg;
                icmp_ln70_reg_696_pp0_iter2_reg <= icmp_ln70_reg_696_pp0_iter1_reg;
                icmp_ln70_reg_696_pp0_iter3_reg <= icmp_ln70_reg_696_pp0_iter2_reg;
                icmp_ln70_reg_696_pp0_iter4_reg <= icmp_ln70_reg_696_pp0_iter3_reg;
                icmp_ln70_reg_696_pp0_iter5_reg <= icmp_ln70_reg_696_pp0_iter4_reg;
                icmp_ln70_reg_696_pp0_iter6_reg <= icmp_ln70_reg_696_pp0_iter5_reg;
                icmp_ln70_reg_696_pp0_iter7_reg <= icmp_ln70_reg_696_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (i_1_reg_684_pp0_iter8_reg = ap_const_lv2_1))) then
                layer2_output_1_fu_126 <= layer2_output_4_fu_529_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_1_reg_684_pp0_iter8_reg = ap_const_lv2_1)) and not((i_1_reg_684_pp0_iter8_reg = ap_const_lv2_0)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then
                layer2_output_2_fu_130 <= layer2_output_4_fu_529_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (i_1_reg_684_pp0_iter8_reg = ap_const_lv2_0))) then
                layer2_output_fu_122 <= layer2_output_4_fu_529_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln70_fu_249_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv2_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln70_fu_243_p2)
    begin
        if (((icmp_ln70_fu_243_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, i_fu_118, ap_loop_init, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_118;
        end if; 
    end process;

    grp_fu_562_p2 <= (tmp_s_reg_705 & ap_const_lv8_0);
    grp_fu_571_p1 <= sext_ln75_2_cast_reg_669(16 - 1 downto 0);
    grp_fu_571_p2 <= (tmp_1_fu_343_p4 & ap_const_lv8_0);
    grp_fu_579_p1 <= sext_ln75_3_cast_reg_664(16 - 1 downto 0);
    grp_fu_579_p2 <= (tmp_4_fu_375_p4 & ap_const_lv8_0);
    grp_fu_587_p1 <= sext_ln75_4_cast_reg_659(16 - 1 downto 0);
    grp_fu_587_p2 <= (tmp_5_fu_407_p4 & ap_const_lv8_0);
    grp_fu_595_p1 <= sext_ln75_5_cast_reg_654(16 - 1 downto 0);
    grp_fu_595_p2 <= (tmp_12_fu_439_p4 & ap_const_lv8_0);
    grp_fu_603_p1 <= sext_ln75_6_cast_reg_649(16 - 1 downto 0);
    grp_fu_603_p2 <= (tmp_13_fu_471_p4 & ap_const_lv8_0);
    grp_fu_611_p1 <= sext_ln75_7_cast_reg_644(16 - 1 downto 0);
    grp_fu_611_p2 <= (tmp_15_fu_488_p4 & ap_const_lv8_0);
    icmp_ln70_fu_243_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv2_3) else "0";
    layer2_output_1_out <= layer2_output_1_fu_126;

    layer2_output_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln70_reg_696_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln70_reg_696_pp0_iter7_reg = ap_const_lv1_1))) then 
            layer2_output_1_out_ap_vld <= ap_const_logic_1;
        else 
            layer2_output_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_2_out <= layer2_output_2_fu_130;

    layer2_output_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln70_reg_696_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln70_reg_696_pp0_iter7_reg = ap_const_lv1_1))) then 
            layer2_output_2_out_ap_vld <= ap_const_logic_1;
        else 
            layer2_output_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_4_fu_529_p2 <= std_logic_vector(unsigned(sum_fu_505_p4) + unsigned(sext_ln77_fu_525_p1));
    layer2_output_out <= layer2_output_fu_122;

    layer2_output_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln70_reg_696_pp0_iter7_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln70_reg_696_pp0_iter7_reg = ap_const_lv1_1))) then 
            layer2_output_out_ap_vld <= ap_const_logic_1;
        else 
            layer2_output_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln75_fu_291_p1 <= sext_ln75_cast_reg_679(16 - 1 downto 0);
        sext_ln75_2_cast_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_2),24));

        sext_ln75_3_cast_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_3),24));

        sext_ln75_4_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_4),24));

        sext_ln75_5_cast_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_5),24));

        sext_ln75_6_cast_fu_207_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_6),24));

        sext_ln75_7_cast_fu_203_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_7),24));

        sext_ln75_cast_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75),24));

        sext_ln77_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_514_p5),16));

    sum_fu_505_p1 <= grp_fu_611_p3;
    sum_fu_505_p4 <= sum_fu_505_p1(23 downto 8);
    tmp_12_fu_439_p1 <= grp_fu_587_p3;
    tmp_12_fu_439_p4 <= tmp_12_fu_439_p1(23 downto 8);
    tmp_13_fu_471_p1 <= grp_fu_595_p3;
    tmp_13_fu_471_p4 <= tmp_13_fu_471_p1(23 downto 8);
    tmp_15_fu_488_p1 <= grp_fu_603_p3;
    tmp_15_fu_488_p4 <= tmp_15_fu_488_p1(23 downto 8);
    tmp_1_fu_343_p1 <= grp_fu_562_p3;
    tmp_1_fu_343_p4 <= tmp_1_fu_343_p1(23 downto 8);
    tmp_4_fu_375_p1 <= grp_fu_571_p3;
    tmp_4_fu_375_p4 <= tmp_4_fu_375_p1(23 downto 8);
    tmp_5_fu_407_p1 <= grp_fu_579_p3;
    tmp_5_fu_407_p4 <= tmp_5_fu_407_p1(23 downto 8);
end behav;
