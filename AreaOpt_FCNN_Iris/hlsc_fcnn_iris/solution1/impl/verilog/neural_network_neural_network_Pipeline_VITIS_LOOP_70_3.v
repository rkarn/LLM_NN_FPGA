// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_70_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln75,
        sext_ln75_1,
        sext_ln75_2,
        sext_ln75_3,
        sext_ln75_4,
        sext_ln75_5,
        sext_ln75_6,
        sext_ln75_7,
        layer2_output_2_out,
        layer2_output_2_out_ap_vld,
        layer2_output_1_out,
        layer2_output_1_out_ap_vld,
        layer2_output_out,
        layer2_output_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] sext_ln75;
input  [15:0] sext_ln75_1;
input  [15:0] sext_ln75_2;
input  [15:0] sext_ln75_3;
input  [15:0] sext_ln75_4;
input  [15:0] sext_ln75_5;
input  [15:0] sext_ln75_6;
input  [15:0] sext_ln75_7;
output  [15:0] layer2_output_2_out;
output   layer2_output_2_out_ap_vld;
output  [15:0] layer2_output_1_out;
output   layer2_output_1_out_ap_vld;
output  [15:0] layer2_output_out;
output   layer2_output_out_ap_vld;

reg ap_idle;
reg layer2_output_2_out_ap_vld;
reg layer2_output_1_out_ap_vld;
reg layer2_output_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln70_fu_243_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [23:0] sext_ln75_7_cast_fu_203_p1;
reg  signed [23:0] sext_ln75_7_cast_reg_644;
wire  signed [23:0] sext_ln75_6_cast_fu_207_p1;
reg  signed [23:0] sext_ln75_6_cast_reg_649;
wire  signed [23:0] sext_ln75_5_cast_fu_211_p1;
reg  signed [23:0] sext_ln75_5_cast_reg_654;
wire  signed [23:0] sext_ln75_4_cast_fu_215_p1;
reg  signed [23:0] sext_ln75_4_cast_reg_659;
wire  signed [23:0] sext_ln75_3_cast_fu_219_p1;
reg  signed [23:0] sext_ln75_3_cast_reg_664;
wire  signed [23:0] sext_ln75_2_cast_fu_223_p1;
reg  signed [23:0] sext_ln75_2_cast_reg_669;
wire  signed [23:0] sext_ln75_cast_fu_231_p1;
reg  signed [23:0] sext_ln75_cast_reg_679;
reg   [1:0] i_1_reg_684;
reg   [1:0] i_1_reg_684_pp0_iter1_reg;
reg   [1:0] i_1_reg_684_pp0_iter2_reg;
reg   [1:0] i_1_reg_684_pp0_iter3_reg;
reg   [1:0] i_1_reg_684_pp0_iter4_reg;
reg   [1:0] i_1_reg_684_pp0_iter5_reg;
reg   [1:0] i_1_reg_684_pp0_iter6_reg;
reg   [1:0] i_1_reg_684_pp0_iter7_reg;
reg   [1:0] i_1_reg_684_pp0_iter8_reg;
reg   [0:0] icmp_ln70_reg_696;
reg   [0:0] icmp_ln70_reg_696_pp0_iter1_reg;
reg   [0:0] icmp_ln70_reg_696_pp0_iter2_reg;
reg   [0:0] icmp_ln70_reg_696_pp0_iter3_reg;
reg   [0:0] icmp_ln70_reg_696_pp0_iter4_reg;
reg   [0:0] icmp_ln70_reg_696_pp0_iter5_reg;
reg   [0:0] icmp_ln70_reg_696_pp0_iter6_reg;
reg   [0:0] icmp_ln70_reg_696_pp0_iter7_reg;
reg   [15:0] tmp_s_reg_705;
reg   [1:0] i_fu_118;
wire   [1:0] add_ln70_fu_249_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i_1;
wire    ap_block_pp0_stage0;
reg   [15:0] layer2_output_fu_122;
wire   [15:0] layer2_output_4_fu_529_p2;
reg   [15:0] layer2_output_1_fu_126;
reg   [15:0] layer2_output_2_fu_130;
wire    ap_block_pp0_stage0_01001;
wire  signed [8:0] tmp_3_fu_255_p5;
wire  signed [9:0] tmp_2_fu_276_p5;
wire  signed [15:0] mul_ln75_fu_291_p1;
wire   [23:0] mul_ln75_fu_291_p2;
wire  signed [8:0] tmp_6_fu_306_p5;
wire  signed [8:0] tmp_7_fu_328_p5;
wire  signed [23:0] tmp_1_fu_343_p1;
wire   [23:0] grp_fu_562_p3;
wire   [15:0] tmp_1_fu_343_p4;
wire  signed [8:0] tmp_8_fu_360_p5;
wire  signed [23:0] tmp_4_fu_375_p1;
wire   [23:0] grp_fu_571_p3;
wire   [15:0] tmp_4_fu_375_p4;
wire  signed [8:0] tmp_9_fu_392_p5;
wire  signed [23:0] tmp_5_fu_407_p1;
wire   [23:0] grp_fu_579_p3;
wire   [15:0] tmp_5_fu_407_p4;
wire  signed [8:0] tmp_10_fu_424_p5;
wire  signed [23:0] tmp_12_fu_439_p1;
wire   [23:0] grp_fu_587_p3;
wire   [15:0] tmp_12_fu_439_p4;
wire  signed [9:0] tmp_11_fu_456_p5;
wire  signed [23:0] tmp_13_fu_471_p1;
wire   [23:0] grp_fu_595_p3;
wire   [15:0] tmp_13_fu_471_p4;
wire  signed [23:0] tmp_15_fu_488_p1;
wire   [23:0] grp_fu_603_p3;
wire   [15:0] tmp_15_fu_488_p4;
wire  signed [23:0] sum_fu_505_p1;
wire   [23:0] grp_fu_611_p3;
wire   [5:0] tmp_14_fu_514_p5;
wire   [15:0] sum_fu_505_p4;
wire  signed [15:0] sext_ln77_fu_525_p1;
wire   [23:0] grp_fu_562_p2;
wire  signed [15:0] grp_fu_571_p1;
wire   [23:0] grp_fu_571_p2;
wire  signed [15:0] grp_fu_579_p1;
wire   [23:0] grp_fu_579_p2;
wire  signed [15:0] grp_fu_587_p1;
wire   [23:0] grp_fu_587_p2;
wire  signed [15:0] grp_fu_595_p1;
wire   [23:0] grp_fu_595_p2;
wire  signed [15:0] grp_fu_603_p1;
wire   [23:0] grp_fu_603_p2;
wire  signed [15:0] grp_fu_611_p1;
wire   [23:0] grp_fu_611_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_done_reg = 1'b0;
end

neural_network_mux_3_2_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 9 ))
mux_3_2_9_1_1_U24(
    .din0(9'd7),
    .din1(9'd182),
    .din2(9'd511),
    .din3(ap_sig_allocacmp_i_1),
    .dout(tmp_3_fu_255_p5)
);

neural_network_mux_3_2_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
mux_3_2_10_1_1_U25(
    .din0(10'd281),
    .din1(10'd877),
    .din2(10'd947),
    .din3(i_1_reg_684),
    .dout(tmp_2_fu_276_p5)
);

neural_network_mul_10s_16s_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
mul_10s_16s_24_1_1_U26(
    .din0(tmp_2_fu_276_p5),
    .din1(mul_ln75_fu_291_p1),
    .dout(mul_ln75_fu_291_p2)
);

neural_network_mux_3_2_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 9 ))
mux_3_2_9_1_1_U27(
    .din0(9'd35),
    .din1(9'd6),
    .din2(9'd378),
    .din3(i_1_reg_684),
    .dout(tmp_6_fu_306_p5)
);

neural_network_mux_3_2_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 9 ))
mux_3_2_9_1_1_U28(
    .din0(9'd112),
    .din1(9'd357),
    .din2(9'd372),
    .din3(i_1_reg_684_pp0_iter1_reg),
    .dout(tmp_7_fu_328_p5)
);

neural_network_mux_3_2_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 9 ))
mux_3_2_9_1_1_U29(
    .din0(9'd379),
    .din1(9'd142),
    .din2(9'd42),
    .din3(i_1_reg_684_pp0_iter2_reg),
    .dout(tmp_8_fu_360_p5)
);

neural_network_mux_3_2_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 9 ))
mux_3_2_9_1_1_U30(
    .din0(9'd419),
    .din1(9'd43),
    .din2(9'd261),
    .din3(i_1_reg_684_pp0_iter3_reg),
    .dout(tmp_9_fu_392_p5)
);

neural_network_mux_3_2_9_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 9 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 9 ))
mux_3_2_9_1_1_U31(
    .din0(9'd20),
    .din1(9'd228),
    .din2(9'd486),
    .din3(i_1_reg_684_pp0_iter4_reg),
    .dout(tmp_10_fu_424_p5)
);

neural_network_mux_3_2_10_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 10 ))
mux_3_2_10_1_1_U32(
    .din0(10'd707),
    .din1(10'd1022),
    .din2(10'd206),
    .din3(i_1_reg_684_pp0_iter5_reg),
    .dout(tmp_11_fu_456_p5)
);

neural_network_mux_3_2_6_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 6 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 6 ))
mux_3_2_6_1_1_U33(
    .din0(6'd34),
    .din1(6'd7),
    .din2(6'd11),
    .din3(i_1_reg_684_pp0_iter8_reg),
    .dout(tmp_14_fu_514_p5)
);

neural_network_mac_muladd_9s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_16s_24ns_24_4_1_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_3_fu_255_p5),
    .din1(sext_ln75_1),
    .din2(grp_fu_562_p2),
    .ce(1'b1),
    .dout(grp_fu_562_p3)
);

neural_network_mac_muladd_9s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_16s_24ns_24_4_1_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_6_fu_306_p5),
    .din1(grp_fu_571_p1),
    .din2(grp_fu_571_p2),
    .ce(1'b1),
    .dout(grp_fu_571_p3)
);

neural_network_mac_muladd_9s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_16s_24ns_24_4_1_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_7_fu_328_p5),
    .din1(grp_fu_579_p1),
    .din2(grp_fu_579_p2),
    .ce(1'b1),
    .dout(grp_fu_579_p3)
);

neural_network_mac_muladd_9s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_16s_24ns_24_4_1_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_8_fu_360_p5),
    .din1(grp_fu_587_p1),
    .din2(grp_fu_587_p2),
    .ce(1'b1),
    .dout(grp_fu_587_p3)
);

neural_network_mac_muladd_9s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_16s_24ns_24_4_1_U38(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_9_fu_392_p5),
    .din1(grp_fu_595_p1),
    .din2(grp_fu_595_p2),
    .ce(1'b1),
    .dout(grp_fu_595_p3)
);

neural_network_mac_muladd_9s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_16s_24ns_24_4_1_U39(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_10_fu_424_p5),
    .din1(grp_fu_603_p1),
    .din2(grp_fu_603_p2),
    .ce(1'b1),
    .dout(grp_fu_603_p3)
);

neural_network_mac_muladd_10s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_16s_24ns_24_4_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_11_fu_456_p5),
    .din1(grp_fu_611_p1),
    .din2(grp_fu_611_p2),
    .ce(1'b1),
    .dout(grp_fu_611_p3)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln70_fu_243_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_118 <= add_ln70_fu_249_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_118 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_1_reg_684 <= ap_sig_allocacmp_i_1;
        i_1_reg_684_pp0_iter1_reg <= i_1_reg_684;
        icmp_ln70_reg_696 <= icmp_ln70_fu_243_p2;
        icmp_ln70_reg_696_pp0_iter1_reg <= icmp_ln70_reg_696;
        sext_ln75_2_cast_reg_669 <= sext_ln75_2_cast_fu_223_p1;
        sext_ln75_3_cast_reg_664 <= sext_ln75_3_cast_fu_219_p1;
        sext_ln75_4_cast_reg_659 <= sext_ln75_4_cast_fu_215_p1;
        sext_ln75_5_cast_reg_654 <= sext_ln75_5_cast_fu_211_p1;
        sext_ln75_6_cast_reg_649 <= sext_ln75_6_cast_fu_207_p1;
        sext_ln75_7_cast_reg_644 <= sext_ln75_7_cast_fu_203_p1;
        sext_ln75_cast_reg_679 <= sext_ln75_cast_fu_231_p1;
        tmp_s_reg_705 <= {{mul_ln75_fu_291_p2[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        i_1_reg_684_pp0_iter2_reg <= i_1_reg_684_pp0_iter1_reg;
        i_1_reg_684_pp0_iter3_reg <= i_1_reg_684_pp0_iter2_reg;
        i_1_reg_684_pp0_iter4_reg <= i_1_reg_684_pp0_iter3_reg;
        i_1_reg_684_pp0_iter5_reg <= i_1_reg_684_pp0_iter4_reg;
        i_1_reg_684_pp0_iter6_reg <= i_1_reg_684_pp0_iter5_reg;
        i_1_reg_684_pp0_iter7_reg <= i_1_reg_684_pp0_iter6_reg;
        i_1_reg_684_pp0_iter8_reg <= i_1_reg_684_pp0_iter7_reg;
        icmp_ln70_reg_696_pp0_iter2_reg <= icmp_ln70_reg_696_pp0_iter1_reg;
        icmp_ln70_reg_696_pp0_iter3_reg <= icmp_ln70_reg_696_pp0_iter2_reg;
        icmp_ln70_reg_696_pp0_iter4_reg <= icmp_ln70_reg_696_pp0_iter3_reg;
        icmp_ln70_reg_696_pp0_iter5_reg <= icmp_ln70_reg_696_pp0_iter4_reg;
        icmp_ln70_reg_696_pp0_iter6_reg <= icmp_ln70_reg_696_pp0_iter5_reg;
        icmp_ln70_reg_696_pp0_iter7_reg <= icmp_ln70_reg_696_pp0_iter6_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (i_1_reg_684_pp0_iter8_reg == 2'd1))) begin
        layer2_output_1_fu_126 <= layer2_output_4_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(i_1_reg_684_pp0_iter8_reg == 2'd1) & ~(i_1_reg_684_pp0_iter8_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        layer2_output_2_fu_130 <= layer2_output_4_fu_529_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1) & (i_1_reg_684_pp0_iter8_reg == 2'd0))) begin
        layer2_output_fu_122 <= layer2_output_4_fu_529_p2;
    end
end

always @ (*) begin
    if (((icmp_ln70_fu_243_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 2'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_118;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln70_reg_696_pp0_iter7_reg == 1'd1))) begin
        layer2_output_1_out_ap_vld = 1'b1;
    end else begin
        layer2_output_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln70_reg_696_pp0_iter7_reg == 1'd1))) begin
        layer2_output_2_out_ap_vld = 1'b1;
    end else begin
        layer2_output_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln70_reg_696_pp0_iter7_reg == 1'd1))) begin
        layer2_output_out_ap_vld = 1'b1;
    end else begin
        layer2_output_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln70_fu_249_p2 = (ap_sig_allocacmp_i_1 + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_562_p2 = {{tmp_s_reg_705}, {8'd0}};

assign grp_fu_571_p1 = sext_ln75_2_cast_reg_669;

assign grp_fu_571_p2 = {{tmp_1_fu_343_p4}, {8'd0}};

assign grp_fu_579_p1 = sext_ln75_3_cast_reg_664;

assign grp_fu_579_p2 = {{tmp_4_fu_375_p4}, {8'd0}};

assign grp_fu_587_p1 = sext_ln75_4_cast_reg_659;

assign grp_fu_587_p2 = {{tmp_5_fu_407_p4}, {8'd0}};

assign grp_fu_595_p1 = sext_ln75_5_cast_reg_654;

assign grp_fu_595_p2 = {{tmp_12_fu_439_p4}, {8'd0}};

assign grp_fu_603_p1 = sext_ln75_6_cast_reg_649;

assign grp_fu_603_p2 = {{tmp_13_fu_471_p4}, {8'd0}};

assign grp_fu_611_p1 = sext_ln75_7_cast_reg_644;

assign grp_fu_611_p2 = {{tmp_15_fu_488_p4}, {8'd0}};

assign icmp_ln70_fu_243_p2 = ((ap_sig_allocacmp_i_1 == 2'd3) ? 1'b1 : 1'b0);

assign layer2_output_1_out = layer2_output_1_fu_126;

assign layer2_output_2_out = layer2_output_2_fu_130;

assign layer2_output_4_fu_529_p2 = ($signed(sum_fu_505_p4) + $signed(sext_ln77_fu_525_p1));

assign layer2_output_out = layer2_output_fu_122;

assign mul_ln75_fu_291_p1 = sext_ln75_cast_reg_679;

assign sext_ln75_2_cast_fu_223_p1 = $signed(sext_ln75_2);

assign sext_ln75_3_cast_fu_219_p1 = $signed(sext_ln75_3);

assign sext_ln75_4_cast_fu_215_p1 = $signed(sext_ln75_4);

assign sext_ln75_5_cast_fu_211_p1 = $signed(sext_ln75_5);

assign sext_ln75_6_cast_fu_207_p1 = $signed(sext_ln75_6);

assign sext_ln75_7_cast_fu_203_p1 = $signed(sext_ln75_7);

assign sext_ln75_cast_fu_231_p1 = $signed(sext_ln75);

assign sext_ln77_fu_525_p1 = $signed(tmp_14_fu_514_p5);

assign sum_fu_505_p1 = grp_fu_611_p3;

assign sum_fu_505_p4 = {{sum_fu_505_p1[23:8]}};

assign tmp_12_fu_439_p1 = grp_fu_587_p3;

assign tmp_12_fu_439_p4 = {{tmp_12_fu_439_p1[23:8]}};

assign tmp_13_fu_471_p1 = grp_fu_595_p3;

assign tmp_13_fu_471_p4 = {{tmp_13_fu_471_p1[23:8]}};

assign tmp_15_fu_488_p1 = grp_fu_603_p3;

assign tmp_15_fu_488_p4 = {{tmp_15_fu_488_p1[23:8]}};

assign tmp_1_fu_343_p1 = grp_fu_562_p3;

assign tmp_1_fu_343_p4 = {{tmp_1_fu_343_p1[23:8]}};

assign tmp_4_fu_375_p1 = grp_fu_571_p3;

assign tmp_4_fu_375_p4 = {{tmp_4_fu_375_p1[23:8]}};

assign tmp_5_fu_407_p1 = grp_fu_579_p3;

assign tmp_5_fu_407_p4 = {{tmp_5_fu_407_p1[23:8]}};

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_70_3
