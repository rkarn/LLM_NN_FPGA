-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network_neural_network_Pipeline_VITIS_LOOP_58_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln63 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_7_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_7_out_ap_vld : OUT STD_LOGIC;
    layer1_output_6_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_6_out_ap_vld : OUT STD_LOGIC;
    layer1_output_5_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_5_out_ap_vld : OUT STD_LOGIC;
    layer1_output_4_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_4_out_ap_vld : OUT STD_LOGIC;
    layer1_output_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_3_out_ap_vld : OUT STD_LOGIC;
    layer1_output_2_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_2_out_ap_vld : OUT STD_LOGIC;
    layer1_output_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_1_out_ap_vld : OUT STD_LOGIC;
    layer1_output_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of neural_network_neural_network_Pipeline_VITIS_LOOP_58_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln58_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer1_weights_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer1_weights_0_ce0 : STD_LOGIC;
    signal layer1_weights_0_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer1_weights_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer1_weights_1_ce0 : STD_LOGIC;
    signal layer1_weights_1_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer1_weights_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer1_weights_2_ce0 : STD_LOGIC;
    signal layer1_weights_2_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer1_weights_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer1_weights_3_ce0 : STD_LOGIC;
    signal layer1_weights_3_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer1_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer1_bias_ce0 : STD_LOGIC;
    signal layer1_bias_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln63_3_cast_fu_275_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_3_cast_reg_602 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_2_cast_fu_279_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_2_cast_reg_607 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_1_cast_fu_283_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_1_cast_reg_612 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_cast_fu_287_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_cast_reg_617 : STD_LOGIC_VECTOR (23 downto 0);
    signal icmp_ln58_reg_622 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_622_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_622_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_622_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_622_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_622_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln58_fu_320_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln58_reg_626 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln58_reg_626_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln58_reg_626_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln58_reg_626_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln58_reg_626_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln58_reg_626_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln58_reg_626_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal layer1_weights_0_load_reg_655 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer1_weights_2_load_reg_665 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer1_weights_3_load_reg_670 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer1_weights_3_load_reg_670_pp0_iter2_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal layer1_bias_load_reg_675 : STD_LOGIC_VECTOR (6 downto 0);
    signal layer1_bias_load_reg_675_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal layer1_bias_load_reg_675_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal layer1_bias_load_reg_675_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal layer1_bias_load_reg_675_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_reg_681 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln60_fu_428_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln60_reg_711 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln14_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_716 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln58_fu_311_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_94 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln58_fu_305_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal layer1_output_fu_98 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln66_fu_446_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_1_fu_102 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_2_fu_106 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_3_fu_110 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_4_fu_114 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_5_fu_118 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_6_fu_122 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_7_fu_126 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln63_fu_336_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln63_fu_336_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_15_fu_364_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_522_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_15_fu_364_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_381_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_530_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_381_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_398_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_538_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln1_fu_410_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln65_fu_407_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_398_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln65_1_fu_419_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln1_fu_410_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum_3_fu_422_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_8_fu_440_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_522_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_522_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_530_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_530_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_538_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_538_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component neural_network_mul_9s_16s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_9s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_bias_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component neural_network_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    layer1_weights_0_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_0_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_0_address0,
        ce0 => layer1_weights_0_ce0,
        q0 => layer1_weights_0_q0);

    layer1_weights_1_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_1_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_1_address0,
        ce0 => layer1_weights_1_ce0,
        q0 => layer1_weights_1_q0);

    layer1_weights_2_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_2_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_2_address0,
        ce0 => layer1_weights_2_ce0,
        q0 => layer1_weights_2_q0);

    layer1_weights_3_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_3_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_3_address0,
        ce0 => layer1_weights_3_ce0,
        q0 => layer1_weights_3_q0);

    layer1_bias_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_bias_ROM_AUTO_1R
    generic map (
        DataWidth => 7,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_bias_address0,
        ce0 => layer1_bias_ce0,
        q0 => layer1_bias_q0);

    mul_9s_16s_24_1_1_U1 : component neural_network_mul_9s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => layer1_weights_0_load_reg_655,
        din1 => mul_ln63_fu_336_p1,
        dout => mul_ln63_fu_336_p2);

    mac_muladd_9s_16s_24ns_24_4_1_U2 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_1_q0,
        din1 => grp_fu_522_p1,
        din2 => grp_fu_522_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_522_p3);

    mac_muladd_9s_16s_24ns_24_4_1_U3 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_2_load_reg_665,
        din1 => grp_fu_530_p1,
        din2 => grp_fu_530_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_530_p3);

    mac_muladd_9s_16s_24ns_24_4_1_U4 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_3_load_reg_670_pp0_iter2_reg,
        din1 => grp_fu_538_p1,
        din2 => grp_fu_538_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_538_p3);

    flow_control_loop_pipe_sequential_init_U : component neural_network_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    i_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln58_fu_299_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_94 <= add_ln58_fu_305_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_94 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln60_reg_711 <= add_ln60_fu_428_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                icmp_ln14_reg_716 <= icmp_ln14_fu_434_p2;
                icmp_ln58_reg_622_pp0_iter2_reg <= icmp_ln58_reg_622_pp0_iter1_reg;
                icmp_ln58_reg_622_pp0_iter3_reg <= icmp_ln58_reg_622_pp0_iter2_reg;
                icmp_ln58_reg_622_pp0_iter4_reg <= icmp_ln58_reg_622_pp0_iter3_reg;
                icmp_ln58_reg_622_pp0_iter5_reg <= icmp_ln58_reg_622_pp0_iter4_reg;
                layer1_bias_load_reg_675_pp0_iter2_reg <= layer1_bias_load_reg_675;
                layer1_bias_load_reg_675_pp0_iter3_reg <= layer1_bias_load_reg_675_pp0_iter2_reg;
                layer1_bias_load_reg_675_pp0_iter4_reg <= layer1_bias_load_reg_675_pp0_iter3_reg;
                layer1_bias_load_reg_675_pp0_iter5_reg <= layer1_bias_load_reg_675_pp0_iter4_reg;
                layer1_weights_3_load_reg_670_pp0_iter2_reg <= layer1_weights_3_load_reg_670;
                tmp_13_reg_681 <= mul_ln63_fu_336_p2(23 downto 8);
                trunc_ln58_reg_626_pp0_iter2_reg <= trunc_ln58_reg_626_pp0_iter1_reg;
                trunc_ln58_reg_626_pp0_iter3_reg <= trunc_ln58_reg_626_pp0_iter2_reg;
                trunc_ln58_reg_626_pp0_iter4_reg <= trunc_ln58_reg_626_pp0_iter3_reg;
                trunc_ln58_reg_626_pp0_iter5_reg <= trunc_ln58_reg_626_pp0_iter4_reg;
                trunc_ln58_reg_626_pp0_iter6_reg <= trunc_ln58_reg_626_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln58_reg_622 <= icmp_ln58_fu_299_p2;
                icmp_ln58_reg_622_pp0_iter1_reg <= icmp_ln58_reg_622;
                layer1_bias_load_reg_675 <= layer1_bias_q0;
                layer1_weights_0_load_reg_655 <= layer1_weights_0_q0;
                layer1_weights_2_load_reg_665 <= layer1_weights_2_q0;
                layer1_weights_3_load_reg_670 <= layer1_weights_3_q0;
                sext_ln63_1_cast_reg_612 <= sext_ln63_1_cast_fu_283_p1;
                sext_ln63_2_cast_reg_607 <= sext_ln63_2_cast_fu_279_p1;
                sext_ln63_3_cast_reg_602 <= sext_ln63_3_cast_fu_275_p1;
                sext_ln63_cast_reg_617 <= sext_ln63_cast_fu_287_p1;
                trunc_ln58_reg_626_pp0_iter1_reg <= trunc_ln58_reg_626;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (trunc_ln58_reg_626_pp0_iter6_reg = ap_const_lv3_1))) then
                    layer1_output_1_fu_102(14 downto 0) <= zext_ln66_fu_446_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (trunc_ln58_reg_626_pp0_iter6_reg = ap_const_lv3_2))) then
                    layer1_output_2_fu_106(14 downto 0) <= zext_ln66_fu_446_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (trunc_ln58_reg_626_pp0_iter6_reg = ap_const_lv3_3))) then
                    layer1_output_3_fu_110(14 downto 0) <= zext_ln66_fu_446_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (trunc_ln58_reg_626_pp0_iter6_reg = ap_const_lv3_4))) then
                    layer1_output_4_fu_114(14 downto 0) <= zext_ln66_fu_446_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (trunc_ln58_reg_626_pp0_iter6_reg = ap_const_lv3_5))) then
                    layer1_output_5_fu_118(14 downto 0) <= zext_ln66_fu_446_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (trunc_ln58_reg_626_pp0_iter6_reg = ap_const_lv3_6))) then
                    layer1_output_6_fu_122(14 downto 0) <= zext_ln66_fu_446_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (trunc_ln58_reg_626_pp0_iter6_reg = ap_const_lv3_7))) then
                    layer1_output_7_fu_126(14 downto 0) <= zext_ln66_fu_446_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (trunc_ln58_reg_626_pp0_iter6_reg = ap_const_lv3_0))) then
                    layer1_output_fu_98(14 downto 0) <= zext_ln66_fu_446_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln58_fu_299_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                trunc_ln58_reg_626 <= trunc_ln58_fu_320_p1;
            end if;
        end if;
    end process;
    layer1_output_fu_98(15) <= '0';
    layer1_output_1_fu_102(15) <= '0';
    layer1_output_2_fu_106(15) <= '0';
    layer1_output_3_fu_110(15) <= '0';
    layer1_output_4_fu_114(15) <= '0';
    layer1_output_5_fu_118(15) <= '0';
    layer1_output_6_fu_122(15) <= '0';
    layer1_output_7_fu_126(15) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln58_fu_305_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv4_1));
    add_ln60_fu_428_p2 <= std_logic_vector(unsigned(zext_ln65_1_fu_419_p1) + unsigned(trunc_ln1_fu_410_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln58_fu_299_p2)
    begin
        if (((icmp_ln58_fu_299_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_94, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_94;
        end if; 
    end process;

    grp_fu_522_p1 <= sext_ln63_1_cast_reg_612(16 - 1 downto 0);
    grp_fu_522_p2 <= (tmp_13_reg_681 & ap_const_lv8_0);
    grp_fu_530_p1 <= sext_ln63_2_cast_reg_607(16 - 1 downto 0);
    grp_fu_530_p2 <= (tmp_15_fu_364_p4 & ap_const_lv8_0);
    grp_fu_538_p1 <= sext_ln63_3_cast_reg_602(16 - 1 downto 0);
    grp_fu_538_p2 <= (tmp_s_fu_381_p4 & ap_const_lv8_0);
    icmp_ln14_fu_434_p2 <= "1" when (signed(sum_3_fu_422_p2) > signed(ap_const_lv16_0)) else "0";
    icmp_ln58_fu_299_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv4_8) else "0";
    layer1_bias_address0 <= zext_ln58_fu_311_p1(3 - 1 downto 0);

    layer1_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_bias_ce0 <= ap_const_logic_1;
        else 
            layer1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_1_out <= layer1_output_1_fu_102;

    layer1_output_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_622_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln58_reg_622_pp0_iter5_reg = ap_const_lv1_1))) then 
            layer1_output_1_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_2_out <= layer1_output_2_fu_106;

    layer1_output_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_622_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln58_reg_622_pp0_iter5_reg = ap_const_lv1_1))) then 
            layer1_output_2_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_3_out <= layer1_output_3_fu_110;

    layer1_output_3_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_622_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln58_reg_622_pp0_iter5_reg = ap_const_lv1_1))) then 
            layer1_output_3_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_4_out <= layer1_output_4_fu_114;

    layer1_output_4_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_622_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln58_reg_622_pp0_iter5_reg = ap_const_lv1_1))) then 
            layer1_output_4_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_5_out <= layer1_output_5_fu_118;

    layer1_output_5_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_622_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln58_reg_622_pp0_iter5_reg = ap_const_lv1_1))) then 
            layer1_output_5_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_6_out <= layer1_output_6_fu_122;

    layer1_output_6_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_622_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln58_reg_622_pp0_iter5_reg = ap_const_lv1_1))) then 
            layer1_output_6_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_7_out <= layer1_output_7_fu_126;

    layer1_output_7_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_622_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln58_reg_622_pp0_iter5_reg = ap_const_lv1_1))) then 
            layer1_output_7_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_8_fu_440_p3 <= 
        add_ln60_reg_711 when (icmp_ln14_reg_716(0) = '1') else 
        ap_const_lv15_0;
    layer1_output_out <= layer1_output_fu_98;

    layer1_output_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_622_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln58_reg_622_pp0_iter5_reg = ap_const_lv1_1))) then 
            layer1_output_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_0_address0 <= zext_ln58_fu_311_p1(3 - 1 downto 0);

    layer1_weights_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weights_0_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_1_address0 <= zext_ln58_fu_311_p1(3 - 1 downto 0);

    layer1_weights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weights_1_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_2_address0 <= zext_ln58_fu_311_p1(3 - 1 downto 0);

    layer1_weights_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weights_2_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_3_address0 <= zext_ln58_fu_311_p1(3 - 1 downto 0);

    layer1_weights_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weights_3_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln63_fu_336_p1 <= sext_ln63_cast_reg_617(16 - 1 downto 0);
        sext_ln63_1_cast_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_1),24));

        sext_ln63_2_cast_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_2),24));

        sext_ln63_3_cast_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_3),24));

        sext_ln63_cast_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63),24));

    sum_3_fu_422_p2 <= std_logic_vector(unsigned(zext_ln65_fu_407_p1) + unsigned(sum_fu_398_p4));
    sum_fu_398_p1 <= grp_fu_538_p3;
    sum_fu_398_p4 <= sum_fu_398_p1(23 downto 8);
    tmp_15_fu_364_p1 <= grp_fu_522_p3;
    tmp_15_fu_364_p4 <= tmp_15_fu_364_p1(23 downto 8);
    tmp_s_fu_381_p1 <= grp_fu_530_p3;
    tmp_s_fu_381_p4 <= tmp_s_fu_381_p1(23 downto 8);
    trunc_ln1_fu_410_p1 <= grp_fu_538_p3;
    trunc_ln1_fu_410_p4 <= trunc_ln1_fu_410_p1(22 downto 8);
    trunc_ln58_fu_320_p1 <= ap_sig_allocacmp_i_2(3 - 1 downto 0);
    zext_ln58_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),64));
    zext_ln65_1_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer1_bias_load_reg_675_pp0_iter5_reg),15));
    zext_ln65_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer1_bias_load_reg_675_pp0_iter5_reg),16));
    zext_ln66_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer1_output_8_fu_440_p3),16));
end behav;
