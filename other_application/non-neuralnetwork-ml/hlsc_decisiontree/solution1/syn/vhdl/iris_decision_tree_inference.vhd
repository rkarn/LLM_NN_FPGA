-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity iris_decision_tree_inference is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (127 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of iris_decision_tree_inference is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "iris_decision_tree_inference_iris_decision_tree_inference,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.509000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=247,HLS_SYN_LUT=438,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_3FE00000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111111000000000000000000000";
    constant ap_const_lv64_3FE999999999999A : STD_LOGIC_VECTOR (63 downto 0) := "0011111111101001100110011001100110011001100110011001100110011010";
    constant ap_const_lv64_4013CCCCCCCCCCCD : STD_LOGIC_VECTOR (63 downto 0) := "0100000000010011110011001100110011001100110011001100110011001101";
    constant ap_const_lv64_4018333333333333 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000011000001100110011001100110011001100110011001100110011";
    constant ap_const_lv64_3FFA666666666666 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111111010011001100110011001100110011001100110011001100110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal features_petal_width_fu_165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln30_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_467 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_1_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_1_reg_472 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_97_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_reg_477 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_fu_100_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv1_i_reg_484 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_106_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_490 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_103_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv14_i_reg_495 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln21_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_reg_501 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln23_fu_255_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_507 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_1_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_1_reg_512 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_fu_284_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_1_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_1_reg_522 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_527 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal and_ln23_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_reg_532 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_fu_331_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln30_reg_538 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_126_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_fu_100_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_103_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln49_fu_131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp2_fu_140_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_155_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_fu_171_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_181_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal bitcast_ln21_fu_203_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_206_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln21_fu_216_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln21_1_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln23_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_241_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln23_fu_251_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal bitcast_ln31_fu_267_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_270_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln31_fu_280_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln23_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_121_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_1_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln21_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln21_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln23_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln23_1_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_1_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln24_2_fu_382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln24_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_388_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln23_fu_370_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal result_fu_402_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln54_1_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln54_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln54_fu_428_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal output_fu_438_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_97_ce : STD_LOGIC;
    signal grp_fu_100_ce : STD_LOGIC;
    signal grp_fu_103_ce : STD_LOGIC;
    signal grp_fu_106_ce : STD_LOGIC;
    signal regslice_both_out_stream_U_apdone_blk : STD_LOGIC;
    signal ap_block_state6 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal regslice_both_in_stream_U_apdone_blk : STD_LOGIC;
    signal in_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (127 downto 0);
    signal in_stream_TVALID_int_regslice : STD_LOGIC;
    signal in_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_stream_U_ack_in : STD_LOGIC;
    signal out_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (7 downto 0);
    signal out_stream_TVALID_int_regslice : STD_LOGIC;
    signal out_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_stream_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component iris_decision_tree_inference_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component iris_decision_tree_inference_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component iris_decision_tree_inference_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component iris_decision_tree_inference_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component iris_decision_tree_inference_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component iris_decision_tree_inference_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    fpext_32ns_64_2_no_dsp_1_U1 : component iris_decision_tree_inference_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => features_petal_width_fu_165_p1,
        ce => grp_fu_97_ce,
        dout => grp_fu_97_p1);

    fpext_32ns_64_2_no_dsp_1_U2 : component iris_decision_tree_inference_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_100_p0,
        ce => grp_fu_100_ce,
        dout => grp_fu_100_p1);

    fpext_32ns_64_2_no_dsp_1_U3 : component iris_decision_tree_inference_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_103_p0,
        ce => grp_fu_103_ce,
        dout => grp_fu_103_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U4 : component iris_decision_tree_inference_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => features_petal_width_fu_165_p1,
        din1 => ap_const_lv32_3FE00000,
        ce => grp_fu_106_ce,
        opcode => ap_const_lv5_5,
        dout => grp_fu_106_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U5 : component iris_decision_tree_inference_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => conv_i_reg_477,
        din1 => ap_const_lv64_3FE999999999999A,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_111_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U6 : component iris_decision_tree_inference_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => conv1_i_reg_484,
        din1 => ap_const_lv64_4013CCCCCCCCCCCD,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_116_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U7 : component iris_decision_tree_inference_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => conv14_i_reg_495,
        din1 => ap_const_lv64_4018333333333333,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_121_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U8 : component iris_decision_tree_inference_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => conv_i_reg_477,
        din1 => ap_const_lv64_3FFA666666666666,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_5,
        dout => grp_fu_126_p2);

    regslice_both_in_stream_U : component iris_decision_tree_inference_regslice_both
    generic map (
        DataWidth => 128)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_stream_TDATA,
        vld_in => in_stream_TVALID,
        ack_in => regslice_both_in_stream_U_ack_in,
        data_out => in_stream_TDATA_int_regslice,
        vld_out => in_stream_TVALID_int_regslice,
        ack_out => in_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_in_stream_U_apdone_blk);

    regslice_both_out_stream_U : component iris_decision_tree_inference_regslice_both
    generic map (
        DataWidth => 8)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_stream_TDATA_int_regslice,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => out_stream_TREADY_int_regslice,
        data_out => out_stream_TDATA,
        vld_out => regslice_both_out_stream_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                and_ln23_reg_532 <= and_ln23_fu_300_p2;
                select_ln30_reg_538 <= select_ln30_fu_331_p3;
                tmp_10_reg_543 <= grp_fu_126_p2;
                tmp_3_reg_527 <= grp_fu_111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                conv14_i_reg_495 <= grp_fu_103_p1;
                conv1_i_reg_484 <= grp_fu_100_p1;
                conv_i_reg_477 <= grp_fu_97_p1;
                tmp_8_reg_490 <= grp_fu_106_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                icmp_ln23_1_reg_512 <= icmp_ln23_1_fu_261_p2;
                icmp_ln23_reg_507 <= icmp_ln23_fu_255_p2;
                icmp_ln31_1_reg_522 <= icmp_ln31_1_fu_290_p2;
                icmp_ln31_reg_517 <= icmp_ln31_fu_284_p2;
                or_ln21_reg_501 <= or_ln21_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                icmp_ln30_1_reg_472 <= icmp_ln30_1_fu_197_p2;
                icmp_ln30_reg_467 <= icmp_ln30_fu_191_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state5, ap_CS_fsm_state6, regslice_both_out_stream_U_apdone_blk, in_stream_TVALID_int_regslice, out_stream_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((out_stream_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    and_ln21_fu_339_p2 <= (tmp_3_reg_527 and or_ln21_reg_501);
    and_ln23_1_fu_364_p2 <= (xor_ln23_fu_349_p2 and xor_ln21_fu_343_p2);
    and_ln23_fu_300_p2 <= (or_ln23_fu_296_p2 and grp_fu_116_p2);
    and_ln24_1_fu_377_p2 <= (xor_ln24_fu_358_p2 and and_ln23_reg_532);
    and_ln24_2_fu_382_p2 <= (xor_ln21_fu_343_p2 and and_ln24_1_fu_377_p2);
    and_ln24_fu_354_p2 <= (tmp_10_reg_543 and or_ln21_reg_501);
    and_ln30_1_fu_310_p2 <= (tmp_8_reg_490 and or_ln30_fu_306_p2);
    and_ln30_fu_325_p2 <= (and_ln31_fu_319_p2 and and_ln30_1_fu_310_p2);
    and_ln31_fu_319_p2 <= (or_ln31_fu_315_p2 and grp_fu_121_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, in_stream_TVALID_int_regslice)
    begin
        if (((in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(out_stream_TREADY_int_regslice)
    begin
        if ((out_stream_TREADY_int_regslice = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(regslice_both_out_stream_U_apdone_blk, out_stream_TREADY_int_regslice)
    begin
        if (((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_U_apdone_blk = ap_const_logic_1))) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, in_stream_TVALID_int_regslice)
    begin
                ap_block_state1 <= ((in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(regslice_both_out_stream_U_apdone_blk, out_stream_TREADY_int_regslice)
    begin
                ap_block_state6 <= ((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6, regslice_both_out_stream_U_apdone_blk, out_stream_TREADY_int_regslice)
    begin
        if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, regslice_both_out_stream_U_apdone_blk, out_stream_TREADY_int_regslice)
    begin
        if ((not(((out_stream_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_stream_U_apdone_blk = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln21_fu_203_p1 <= conv_i_reg_477;
    bitcast_ln23_fu_238_p1 <= conv1_i_reg_484;
    bitcast_ln31_fu_267_p1 <= conv14_i_reg_495;
    features_petal_width_fu_165_p1 <= tmp_1_fu_155_p4;

    grp_fu_100_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, in_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_100_ce <= ap_const_logic_1;
        else 
            grp_fu_100_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_100_p0 <= tmp2_fu_140_p4;

    grp_fu_103_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, in_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_103_ce <= ap_const_logic_1;
        else 
            grp_fu_103_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_103_p0 <= trunc_ln49_fu_131_p1;

    grp_fu_106_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, in_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_106_ce <= ap_const_logic_1;
        else 
            grp_fu_106_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_97_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, in_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (not(((in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_fu_97_ce <= ap_const_logic_1;
        else 
            grp_fu_97_ce <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln21_1_fu_226_p2 <= "1" when (trunc_ln21_fu_216_p1 = ap_const_lv52_0) else "0";
    icmp_ln21_fu_220_p2 <= "0" when (tmp_2_fu_206_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln23_1_fu_261_p2 <= "1" when (trunc_ln23_fu_251_p1 = ap_const_lv52_0) else "0";
    icmp_ln23_fu_255_p2 <= "0" when (tmp_4_fu_241_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln30_1_fu_197_p2 <= "1" when (tmp_7_fu_181_p4 = ap_const_lv23_0) else "0";
    icmp_ln30_fu_191_p2 <= "0" when (tmp_6_fu_171_p4 = ap_const_lv8_FF) else "1";
    icmp_ln31_1_fu_290_p2 <= "1" when (trunc_ln31_fu_280_p1 = ap_const_lv52_0) else "0";
    icmp_ln31_fu_284_p2 <= "0" when (tmp_9_fu_270_p4 = ap_const_lv11_7FF) else "1";
    icmp_ln54_1_fu_416_p2 <= "1" when (result_fu_402_p3 = ap_const_lv2_0) else "0";
    icmp_ln54_fu_410_p2 <= "1" when (result_fu_402_p3 = ap_const_lv2_1) else "0";

    in_stream_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, in_stream_TVALID_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            in_stream_TDATA_blk_n <= in_stream_TVALID_int_regslice;
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_TREADY <= regslice_both_in_stream_U_ack_in;

    in_stream_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_state1, in_stream_TVALID_int_regslice)
    begin
        if ((not(((in_stream_TVALID_int_regslice = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_stream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    or_ln21_fu_232_p2 <= (icmp_ln21_fu_220_p2 or icmp_ln21_1_fu_226_p2);
    or_ln23_fu_296_p2 <= (icmp_ln23_reg_507 or icmp_ln23_1_reg_512);
    or_ln24_fu_396_p2 <= (and_ln24_2_fu_382_p2 or and_ln21_fu_339_p2);
    or_ln30_fu_306_p2 <= (icmp_ln30_reg_467 or icmp_ln30_1_reg_472);
    or_ln31_fu_315_p2 <= (icmp_ln31_reg_517 or icmp_ln31_1_reg_522);
    or_ln54_fu_432_p2 <= (icmp_ln54_fu_410_p2 or icmp_ln54_1_fu_416_p2);

    out_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state6, out_stream_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_stream_TDATA_blk_n <= out_stream_TREADY_int_regslice;
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TDATA_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(output_fu_438_p3),8));
    out_stream_TVALID <= regslice_both_out_stream_U_vld_out;

    out_stream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state5, out_stream_TREADY_int_regslice)
    begin
        if (((out_stream_TREADY_int_regslice = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            out_stream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    output_fu_438_p3 <= 
        zext_ln54_fu_428_p1 when (or_ln54_fu_432_p2(0) = '1') else 
        ap_const_lv2_2;
    result_fu_402_p3 <= 
        select_ln24_fu_388_p3 when (or_ln24_fu_396_p2(0) = '1') else 
        select_ln23_fu_370_p3;
    select_ln23_fu_370_p3 <= 
        select_ln30_reg_538 when (and_ln23_1_fu_364_p2(0) = '1') else 
        ap_const_lv2_1;
    select_ln24_fu_388_p3 <= 
        ap_const_lv2_2 when (and_ln24_2_fu_382_p2(0) = '1') else 
        ap_const_lv2_0;
    select_ln30_fu_331_p3 <= 
        ap_const_lv2_1 when (and_ln30_fu_325_p2(0) = '1') else 
        ap_const_lv2_2;
    tmp2_fu_140_p4 <= in_stream_TDATA_int_regslice(95 downto 64);
    tmp_1_fu_155_p4 <= in_stream_TDATA_int_regslice(127 downto 96);
    tmp_2_fu_206_p4 <= bitcast_ln21_fu_203_p1(62 downto 52);
    tmp_4_fu_241_p4 <= bitcast_ln23_fu_238_p1(62 downto 52);
    tmp_6_fu_171_p4 <= in_stream_TDATA_int_regslice(126 downto 119);
    tmp_7_fu_181_p4 <= in_stream_TDATA_int_regslice(118 downto 96);
    tmp_9_fu_270_p4 <= bitcast_ln31_fu_267_p1(62 downto 52);
    trunc_ln21_fu_216_p1 <= bitcast_ln21_fu_203_p1(52 - 1 downto 0);
    trunc_ln23_fu_251_p1 <= bitcast_ln23_fu_238_p1(52 - 1 downto 0);
    trunc_ln31_fu_280_p1 <= bitcast_ln31_fu_267_p1(52 - 1 downto 0);
    trunc_ln49_fu_131_p1 <= in_stream_TDATA_int_regslice(32 - 1 downto 0);
    xor_ln21_fu_343_p2 <= (ap_const_lv1_1 xor and_ln21_fu_339_p2);
    xor_ln23_fu_349_p2 <= (ap_const_lv1_1 xor and_ln23_reg_532);
    xor_ln24_fu_358_p2 <= (ap_const_lv1_1 xor and_ln24_fu_354_p2);
    xor_ln54_fu_422_p2 <= (icmp_ln54_1_fu_416_p2 xor ap_const_lv1_1);
    zext_ln54_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln54_fu_422_p2),2));
end behav;
