// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="iris_decision_tree_inference_iris_decision_tree_inference,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.509000,HLS_SYN_LAT=5,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=247,HLS_SYN_LUT=438,HLS_VERSION=2023_1}" *)

module iris_decision_tree_inference (
        ap_clk,
        ap_rst_n,
        in_stream_TDATA,
        in_stream_TVALID,
        in_stream_TREADY,
        out_stream_TDATA,
        out_stream_TVALID,
        out_stream_TREADY,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [127:0] in_stream_TDATA;
input   in_stream_TVALID;
output   in_stream_TREADY;
output  [7:0] out_stream_TDATA;
output   out_stream_TVALID;
input   out_stream_TREADY;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
reg    in_stream_TDATA_blk_n;
reg    out_stream_TDATA_blk_n;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire   [31:0] features_petal_width_fu_165_p1;
wire   [0:0] icmp_ln30_fu_191_p2;
reg   [0:0] icmp_ln30_reg_467;
wire   [0:0] icmp_ln30_1_fu_197_p2;
reg   [0:0] icmp_ln30_1_reg_472;
wire   [63:0] grp_fu_97_p1;
reg   [63:0] conv_i_reg_477;
wire    ap_CS_fsm_state2;
wire   [63:0] grp_fu_100_p1;
reg   [63:0] conv1_i_reg_484;
wire   [0:0] grp_fu_106_p2;
reg   [0:0] tmp_8_reg_490;
wire   [63:0] grp_fu_103_p1;
reg   [63:0] conv14_i_reg_495;
wire   [0:0] or_ln21_fu_232_p2;
reg   [0:0] or_ln21_reg_501;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln23_fu_255_p2;
reg   [0:0] icmp_ln23_reg_507;
wire   [0:0] icmp_ln23_1_fu_261_p2;
reg   [0:0] icmp_ln23_1_reg_512;
wire   [0:0] icmp_ln31_fu_284_p2;
reg   [0:0] icmp_ln31_reg_517;
wire   [0:0] icmp_ln31_1_fu_290_p2;
reg   [0:0] icmp_ln31_1_reg_522;
wire   [0:0] grp_fu_111_p2;
reg   [0:0] tmp_3_reg_527;
wire    ap_CS_fsm_state4;
wire   [0:0] and_ln23_fu_300_p2;
reg   [0:0] and_ln23_reg_532;
wire   [1:0] select_ln30_fu_331_p3;
reg   [1:0] select_ln30_reg_538;
wire   [0:0] grp_fu_126_p2;
reg   [0:0] tmp_10_reg_543;
reg    ap_block_state1;
wire   [31:0] grp_fu_100_p0;
wire   [31:0] grp_fu_103_p0;
wire   [31:0] trunc_ln49_fu_131_p1;
wire   [31:0] tmp2_fu_140_p4;
wire   [31:0] tmp_1_fu_155_p4;
wire   [7:0] tmp_6_fu_171_p4;
wire   [22:0] tmp_7_fu_181_p4;
wire   [63:0] bitcast_ln21_fu_203_p1;
wire   [10:0] tmp_2_fu_206_p4;
wire   [51:0] trunc_ln21_fu_216_p1;
wire   [0:0] icmp_ln21_1_fu_226_p2;
wire   [0:0] icmp_ln21_fu_220_p2;
wire   [63:0] bitcast_ln23_fu_238_p1;
wire   [10:0] tmp_4_fu_241_p4;
wire   [51:0] trunc_ln23_fu_251_p1;
wire   [63:0] bitcast_ln31_fu_267_p1;
wire   [10:0] tmp_9_fu_270_p4;
wire   [51:0] trunc_ln31_fu_280_p1;
wire   [0:0] or_ln23_fu_296_p2;
wire   [0:0] grp_fu_116_p2;
wire   [0:0] or_ln30_fu_306_p2;
wire   [0:0] or_ln31_fu_315_p2;
wire   [0:0] grp_fu_121_p2;
wire   [0:0] and_ln30_1_fu_310_p2;
wire   [0:0] and_ln31_fu_319_p2;
wire   [0:0] and_ln30_fu_325_p2;
wire   [0:0] and_ln21_fu_339_p2;
wire   [0:0] and_ln24_fu_354_p2;
wire   [0:0] xor_ln21_fu_343_p2;
wire   [0:0] xor_ln23_fu_349_p2;
wire   [0:0] and_ln23_1_fu_364_p2;
wire   [0:0] xor_ln24_fu_358_p2;
wire   [0:0] and_ln24_1_fu_377_p2;
wire   [0:0] and_ln24_2_fu_382_p2;
wire   [0:0] or_ln24_fu_396_p2;
wire   [1:0] select_ln24_fu_388_p3;
wire   [1:0] select_ln23_fu_370_p3;
wire   [1:0] result_fu_402_p3;
wire   [0:0] icmp_ln54_1_fu_416_p2;
wire   [0:0] xor_ln54_fu_422_p2;
wire   [0:0] icmp_ln54_fu_410_p2;
wire   [0:0] or_ln54_fu_432_p2;
wire   [1:0] zext_ln54_fu_428_p1;
wire   [1:0] output_fu_438_p3;
reg    grp_fu_97_ce;
reg    grp_fu_100_ce;
reg    grp_fu_103_ce;
reg    grp_fu_106_ce;
wire    regslice_both_out_stream_U_apdone_blk;
reg    ap_block_state6;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
reg    ap_ST_fsm_state6_blk;
wire    regslice_both_in_stream_U_apdone_blk;
wire   [127:0] in_stream_TDATA_int_regslice;
wire    in_stream_TVALID_int_regslice;
reg    in_stream_TREADY_int_regslice;
wire    regslice_both_in_stream_U_ack_in;
wire   [7:0] out_stream_TDATA_int_regslice;
reg    out_stream_TVALID_int_regslice;
wire    out_stream_TREADY_int_regslice;
wire    regslice_both_out_stream_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
end

iris_decision_tree_inference_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

iris_decision_tree_inference_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(features_petal_width_fu_165_p1),
    .ce(grp_fu_97_ce),
    .dout(grp_fu_97_p1)
);

iris_decision_tree_inference_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_100_p0),
    .ce(grp_fu_100_ce),
    .dout(grp_fu_100_p1)
);

iris_decision_tree_inference_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_103_p0),
    .ce(grp_fu_103_ce),
    .dout(grp_fu_103_p1)
);

iris_decision_tree_inference_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(features_petal_width_fu_165_p1),
    .din1(32'd1071644672),
    .ce(grp_fu_106_ce),
    .opcode(5'd5),
    .dout(grp_fu_106_p2)
);

iris_decision_tree_inference_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(conv_i_reg_477),
    .din1(64'd4605380978949069210),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_111_p2)
);

iris_decision_tree_inference_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(conv1_i_reg_484),
    .din1(64'd4617259222966258893),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_116_p2)
);

iris_decision_tree_inference_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(conv14_i_reg_495),
    .din1(64'd4618497712863785779),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_121_p2)
);

iris_decision_tree_inference_dcmp_64ns_64ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 1 ))
dcmp_64ns_64ns_1_2_no_dsp_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(conv_i_reg_477),
    .din1(64'd4610109758557808230),
    .ce(1'b1),
    .opcode(5'd5),
    .dout(grp_fu_126_p2)
);

iris_decision_tree_inference_regslice_both #(
    .DataWidth( 128 ))
regslice_both_in_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in_stream_TDATA),
    .vld_in(in_stream_TVALID),
    .ack_in(regslice_both_in_stream_U_ack_in),
    .data_out(in_stream_TDATA_int_regslice),
    .vld_out(in_stream_TVALID_int_regslice),
    .ack_out(in_stream_TREADY_int_regslice),
    .apdone_blk(regslice_both_in_stream_U_apdone_blk)
);

iris_decision_tree_inference_regslice_both #(
    .DataWidth( 8 ))
regslice_both_out_stream_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_stream_TDATA_int_regslice),
    .vld_in(out_stream_TVALID_int_regslice),
    .ack_in(out_stream_TREADY_int_regslice),
    .data_out(out_stream_TDATA),
    .vld_out(regslice_both_out_stream_U_vld_out),
    .ack_out(out_stream_TREADY),
    .apdone_blk(regslice_both_out_stream_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        and_ln23_reg_532 <= and_ln23_fu_300_p2;
        select_ln30_reg_538 <= select_ln30_fu_331_p3;
        tmp_10_reg_543 <= grp_fu_126_p2;
        tmp_3_reg_527 <= grp_fu_111_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv14_i_reg_495 <= grp_fu_103_p1;
        conv1_i_reg_484 <= grp_fu_100_p1;
        conv_i_reg_477 <= grp_fu_97_p1;
        tmp_8_reg_490 <= grp_fu_106_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        icmp_ln23_1_reg_512 <= icmp_ln23_1_fu_261_p2;
        icmp_ln23_reg_507 <= icmp_ln23_fu_255_p2;
        icmp_ln31_1_reg_522 <= icmp_ln31_1_fu_290_p2;
        icmp_ln31_reg_517 <= icmp_ln31_fu_284_p2;
        or_ln21_reg_501 <= or_ln21_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        icmp_ln30_1_reg_472 <= icmp_ln30_1_fu_197_p2;
        icmp_ln30_reg_467 <= icmp_ln30_fu_191_p2;
    end
end

always @ (*) begin
    if (((in_stream_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if ((out_stream_TREADY_int_regslice == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((out_stream_TREADY_int_regslice == 1'b0) | (regslice_both_out_stream_U_apdone_blk == 1'b1))) begin
        ap_ST_fsm_state6_blk = 1'b1;
    end else begin
        ap_ST_fsm_state6_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_stream_TREADY_int_regslice == 1'b0) | (regslice_both_out_stream_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((out_stream_TREADY_int_regslice == 1'b0) | (regslice_both_out_stream_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state6))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((in_stream_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_100_ce = 1'b1;
    end else begin
        grp_fu_100_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((in_stream_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_103_ce = 1'b1;
    end else begin
        grp_fu_103_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((in_stream_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_106_ce = 1'b1;
    end else begin
        grp_fu_106_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((in_stream_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_fu_97_ce = 1'b1;
    end else begin
        grp_fu_97_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        in_stream_TDATA_blk_n = in_stream_TVALID_int_regslice;
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((in_stream_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        in_stream_TREADY_int_regslice = 1'b1;
    end else begin
        in_stream_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        out_stream_TDATA_blk_n = out_stream_TREADY_int_regslice;
    end else begin
        out_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((out_stream_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        out_stream_TVALID_int_regslice = 1'b1;
    end else begin
        out_stream_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((in_stream_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((out_stream_TREADY_int_regslice == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if ((~((out_stream_TREADY_int_regslice == 1'b0) | (regslice_both_out_stream_U_apdone_blk == 1'b1)) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign and_ln21_fu_339_p2 = (tmp_3_reg_527 & or_ln21_reg_501);

assign and_ln23_1_fu_364_p2 = (xor_ln23_fu_349_p2 & xor_ln21_fu_343_p2);

assign and_ln23_fu_300_p2 = (or_ln23_fu_296_p2 & grp_fu_116_p2);

assign and_ln24_1_fu_377_p2 = (xor_ln24_fu_358_p2 & and_ln23_reg_532);

assign and_ln24_2_fu_382_p2 = (xor_ln21_fu_343_p2 & and_ln24_1_fu_377_p2);

assign and_ln24_fu_354_p2 = (tmp_10_reg_543 & or_ln21_reg_501);

assign and_ln30_1_fu_310_p2 = (tmp_8_reg_490 & or_ln30_fu_306_p2);

assign and_ln30_fu_325_p2 = (and_ln31_fu_319_p2 & and_ln30_1_fu_310_p2);

assign and_ln31_fu_319_p2 = (or_ln31_fu_315_p2 & grp_fu_121_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_block_state1 = ((in_stream_TVALID_int_regslice == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state6 = ((out_stream_TREADY_int_regslice == 1'b0) | (regslice_both_out_stream_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln21_fu_203_p1 = conv_i_reg_477;

assign bitcast_ln23_fu_238_p1 = conv1_i_reg_484;

assign bitcast_ln31_fu_267_p1 = conv14_i_reg_495;

assign features_petal_width_fu_165_p1 = tmp_1_fu_155_p4;

assign grp_fu_100_p0 = tmp2_fu_140_p4;

assign grp_fu_103_p0 = trunc_ln49_fu_131_p1;

assign icmp_ln21_1_fu_226_p2 = ((trunc_ln21_fu_216_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_220_p2 = ((tmp_2_fu_206_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln23_1_fu_261_p2 = ((trunc_ln23_fu_251_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_255_p2 = ((tmp_4_fu_241_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln30_1_fu_197_p2 = ((tmp_7_fu_181_p4 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln30_fu_191_p2 = ((tmp_6_fu_171_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln31_1_fu_290_p2 = ((trunc_ln31_fu_280_p1 == 52'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_284_p2 = ((tmp_9_fu_270_p4 != 11'd2047) ? 1'b1 : 1'b0);

assign icmp_ln54_1_fu_416_p2 = ((result_fu_402_p3 == 2'd0) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_410_p2 = ((result_fu_402_p3 == 2'd1) ? 1'b1 : 1'b0);

assign in_stream_TREADY = regslice_both_in_stream_U_ack_in;

assign or_ln21_fu_232_p2 = (icmp_ln21_fu_220_p2 | icmp_ln21_1_fu_226_p2);

assign or_ln23_fu_296_p2 = (icmp_ln23_reg_507 | icmp_ln23_1_reg_512);

assign or_ln24_fu_396_p2 = (and_ln24_2_fu_382_p2 | and_ln21_fu_339_p2);

assign or_ln30_fu_306_p2 = (icmp_ln30_reg_467 | icmp_ln30_1_reg_472);

assign or_ln31_fu_315_p2 = (icmp_ln31_reg_517 | icmp_ln31_1_reg_522);

assign or_ln54_fu_432_p2 = (icmp_ln54_fu_410_p2 | icmp_ln54_1_fu_416_p2);

assign out_stream_TDATA_int_regslice = output_fu_438_p3;

assign out_stream_TVALID = regslice_both_out_stream_U_vld_out;

assign output_fu_438_p3 = ((or_ln54_fu_432_p2[0:0] == 1'b1) ? zext_ln54_fu_428_p1 : 2'd2);

assign result_fu_402_p3 = ((or_ln24_fu_396_p2[0:0] == 1'b1) ? select_ln24_fu_388_p3 : select_ln23_fu_370_p3);

assign select_ln23_fu_370_p3 = ((and_ln23_1_fu_364_p2[0:0] == 1'b1) ? select_ln30_reg_538 : 2'd1);

assign select_ln24_fu_388_p3 = ((and_ln24_2_fu_382_p2[0:0] == 1'b1) ? 2'd2 : 2'd0);

assign select_ln30_fu_331_p3 = ((and_ln30_fu_325_p2[0:0] == 1'b1) ? 2'd1 : 2'd2);

assign tmp2_fu_140_p4 = {{in_stream_TDATA_int_regslice[95:64]}};

assign tmp_1_fu_155_p4 = {{in_stream_TDATA_int_regslice[127:96]}};

assign tmp_2_fu_206_p4 = {{bitcast_ln21_fu_203_p1[62:52]}};

assign tmp_4_fu_241_p4 = {{bitcast_ln23_fu_238_p1[62:52]}};

assign tmp_6_fu_171_p4 = {{in_stream_TDATA_int_regslice[126:119]}};

assign tmp_7_fu_181_p4 = {{in_stream_TDATA_int_regslice[118:96]}};

assign tmp_9_fu_270_p4 = {{bitcast_ln31_fu_267_p1[62:52]}};

assign trunc_ln21_fu_216_p1 = bitcast_ln21_fu_203_p1[51:0];

assign trunc_ln23_fu_251_p1 = bitcast_ln23_fu_238_p1[51:0];

assign trunc_ln31_fu_280_p1 = bitcast_ln31_fu_267_p1[51:0];

assign trunc_ln49_fu_131_p1 = in_stream_TDATA_int_regslice[31:0];

assign xor_ln21_fu_343_p2 = (1'd1 ^ and_ln21_fu_339_p2);

assign xor_ln23_fu_349_p2 = (1'd1 ^ and_ln23_reg_532);

assign xor_ln24_fu_358_p2 = (1'd1 ^ and_ln24_fu_354_p2);

assign xor_ln54_fu_422_p2 = (icmp_ln54_1_fu_416_p2 ^ 1'd1);

assign zext_ln54_fu_428_p1 = xor_ln54_fu_422_p2;

endmodule //iris_decision_tree_inference
