// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="hls_dijkstra_hls_dijkstra,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.267500,HLS_SYN_LAT=321,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=1210,HLS_SYN_LUT=2700,HLS_VERSION=2023_1}" *)

module hls_dijkstra (
        ap_clk,
        ap_rst_n,
        s_axi_CONTROL_BUS_AWVALID,
        s_axi_CONTROL_BUS_AWREADY,
        s_axi_CONTROL_BUS_AWADDR,
        s_axi_CONTROL_BUS_WVALID,
        s_axi_CONTROL_BUS_WREADY,
        s_axi_CONTROL_BUS_WDATA,
        s_axi_CONTROL_BUS_WSTRB,
        s_axi_CONTROL_BUS_ARVALID,
        s_axi_CONTROL_BUS_ARREADY,
        s_axi_CONTROL_BUS_ARADDR,
        s_axi_CONTROL_BUS_RVALID,
        s_axi_CONTROL_BUS_RREADY,
        s_axi_CONTROL_BUS_RDATA,
        s_axi_CONTROL_BUS_RRESP,
        s_axi_CONTROL_BUS_BVALID,
        s_axi_CONTROL_BUS_BREADY,
        s_axi_CONTROL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;
parameter    C_S_AXI_CONTROL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_BUS_ADDR_WIDTH = 10;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_CONTROL_BUS_AWVALID;
output   s_axi_CONTROL_BUS_AWREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_AWADDR;
input   s_axi_CONTROL_BUS_WVALID;
output   s_axi_CONTROL_BUS_WREADY;
input  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_WDATA;
input  [C_S_AXI_CONTROL_BUS_WSTRB_WIDTH - 1:0] s_axi_CONTROL_BUS_WSTRB;
input   s_axi_CONTROL_BUS_ARVALID;
output   s_axi_CONTROL_BUS_ARREADY;
input  [C_S_AXI_CONTROL_BUS_ADDR_WIDTH - 1:0] s_axi_CONTROL_BUS_ARADDR;
output   s_axi_CONTROL_BUS_RVALID;
input   s_axi_CONTROL_BUS_RREADY;
output  [C_S_AXI_CONTROL_BUS_DATA_WIDTH - 1:0] s_axi_CONTROL_BUS_RDATA;
output  [1:0] s_axi_CONTROL_BUS_RRESP;
output   s_axi_CONTROL_BUS_BVALID;
input   s_axi_CONTROL_BUS_BREADY;
output  [1:0] s_axi_CONTROL_BUS_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] graph_q0;
wire   [31:0] src;
reg   [3:0] dist_address0;
reg    dist_ce0;
reg    dist_we0;
reg   [31:0] dist_d0;
wire   [31:0] dist_q0;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_start;
wire    grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_done;
wire    grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_idle;
wire    grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_ready;
wire   [3:0] grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_dist_address0;
wire    grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_dist_ce0;
wire    grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_dist_we0;
wire   [31:0] grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_dist_d0;
wire   [6:0] grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_graph_address0;
wire    grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_graph_ce0;
reg    grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_start_reg;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln22_fu_176_p1;
wire    ap_CS_fsm_state11;
reg   [12:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
wire    ap_ST_fsm_state10_blk;
wire    ap_ST_fsm_state11_blk;
wire    ap_ST_fsm_state12_blk;
reg    ap_ST_fsm_state13_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_start_reg = 1'b0;
end

hls_dijkstra_hls_dijkstra_Pipeline_VITIS_LOOP_24_2 grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_start),
    .ap_done(grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_done),
    .ap_idle(grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_idle),
    .ap_ready(grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_ready),
    .dist_address0(grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_dist_address0),
    .dist_ce0(grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_dist_ce0),
    .dist_we0(grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_dist_we0),
    .dist_d0(grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_dist_d0),
    .dist_q0(dist_q0),
    .graph_address0(grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_graph_address0),
    .graph_ce0(grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_graph_ce0),
    .graph_q0(graph_q0)
);

hls_dijkstra_CONTROL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_BUS_DATA_WIDTH ))
CONTROL_BUS_s_axi_U(
    .AWVALID(s_axi_CONTROL_BUS_AWVALID),
    .AWREADY(s_axi_CONTROL_BUS_AWREADY),
    .AWADDR(s_axi_CONTROL_BUS_AWADDR),
    .WVALID(s_axi_CONTROL_BUS_WVALID),
    .WREADY(s_axi_CONTROL_BUS_WREADY),
    .WDATA(s_axi_CONTROL_BUS_WDATA),
    .WSTRB(s_axi_CONTROL_BUS_WSTRB),
    .ARVALID(s_axi_CONTROL_BUS_ARVALID),
    .ARREADY(s_axi_CONTROL_BUS_ARREADY),
    .ARADDR(s_axi_CONTROL_BUS_ARADDR),
    .RVALID(s_axi_CONTROL_BUS_RVALID),
    .RREADY(s_axi_CONTROL_BUS_RREADY),
    .RDATA(s_axi_CONTROL_BUS_RDATA),
    .RRESP(s_axi_CONTROL_BUS_RRESP),
    .BVALID(s_axi_CONTROL_BUS_BVALID),
    .BREADY(s_axi_CONTROL_BUS_BREADY),
    .BRESP(s_axi_CONTROL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .src(src),
    .dist_address0(dist_address0),
    .dist_ce0(dist_ce0),
    .dist_we0(dist_we0),
    .dist_d0(dist_d0),
    .dist_q0(dist_q0),
    .graph_address0(grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_graph_address0),
    .graph_ce0(grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_graph_ce0),
    .graph_q0(graph_q0),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_start_reg <= 1'b1;
        end else if ((grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_ready == 1'b1)) begin
            grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_start_reg <= 1'b0;
        end
    end
end

assign ap_ST_fsm_state10_blk = 1'b0;

assign ap_ST_fsm_state11_blk = 1'b0;

assign ap_ST_fsm_state12_blk = 1'b0;

always @ (*) begin
    if ((grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_done == 1'b0)) begin
        ap_ST_fsm_state13_blk = 1'b1;
    end else begin
        ap_ST_fsm_state13_blk = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_done == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_done == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dist_address0 = zext_ln22_fu_176_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        dist_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dist_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dist_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dist_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dist_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dist_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dist_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dist_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        dist_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dist_address0 = grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_dist_address0;
    end else begin
        dist_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        dist_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dist_ce0 = grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_dist_ce0;
    end else begin
        dist_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dist_d0 = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state9))) begin
        dist_d0 = 32'd2147483647;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dist_d0 = grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_dist_d0;
    end else begin
        dist_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        dist_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dist_we0 = grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_dist_we0;
    end else begin
        dist_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_start = grp_hls_dijkstra_Pipeline_VITIS_LOOP_24_2_fu_168_ap_start_reg;

assign zext_ln22_fu_176_p1 = src;

endmodule //hls_dijkstra
