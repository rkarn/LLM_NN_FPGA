// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module AES_Encrypt_AES_Encrypt_Pipeline_VITIS_LOOP_75_11 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        w_address0,
        w_ce0,
        w_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_state3 = 4'd4;
parameter    ap_ST_fsm_state4 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
output  [5:0] w_address0;
output   w_ce0;
input  [31:0] w_q0;

reg ap_idle;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;
reg w_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln75_fu_118_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_state4;
wire    ap_block_state4_pp0_stage3_iter0;
reg   [2:0] i_1_reg_247;
reg   [3:0] state_addr_reg_255;
wire  signed [2:0] xor_ln77_fu_135_p2;
reg  signed [2:0] xor_ln77_reg_260;
reg   [3:0] state_addr_16_reg_265;
reg   [3:0] state_addr_17_reg_275;
wire    ap_CS_fsm_state2;
wire    ap_block_state2_pp0_stage1_iter0;
reg   [3:0] state_addr_18_reg_280;
wire   [7:0] xor_ln77_1_fu_194_p2;
reg   [7:0] xor_ln77_1_reg_285;
wire   [7:0] xor_ln77_2_fu_210_p2;
reg   [7:0] xor_ln77_2_reg_290;
reg   [7:0] trunc_ln77_15_reg_295;
wire   [7:0] trunc_ln77_fu_226_p1;
reg   [7:0] trunc_ln77_reg_300;
wire   [7:0] xor_ln77_3_fu_230_p2;
reg   [7:0] xor_ln77_3_reg_305;
wire    ap_CS_fsm_state3;
wire    ap_block_state3_pp0_stage2_iter0;
wire   [7:0] xor_ln77_4_fu_235_p2;
reg   [7:0] xor_ln77_4_reg_310;
wire   [63:0] i_2_cast16_fu_130_p1;
wire   [63:0] zext_ln77_fu_141_p1;
wire   [63:0] p_cast18_cast_cast_fu_154_p1;
wire   [63:0] zext_ln77_1_fu_171_p1;
wire   [63:0] zext_ln77_2_fu_179_p1;
reg   [2:0] i_fu_52;
wire   [2:0] add_ln75_fu_124_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_1;
wire   [5:0] p_cast18_cast_fu_146_p3;
wire   [3:0] tmp_3_cast_fu_164_p3;
wire  signed [3:0] sext_ln77_fu_176_p1;
wire   [7:0] trunc_ln77_s_fu_184_p4;
wire   [7:0] trunc_ln77_14_fu_200_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
wire    ap_ST_fsm_state4_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_done_reg = 1'b0;
end

AES_Encrypt_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln75_fu_118_p2 == 1'd0)) begin
            i_fu_52 <= add_ln75_fu_124_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_52 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_1_reg_247 <= ap_sig_allocacmp_i_1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_118_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        state_addr_16_reg_265[2 : 0] <= zext_ln77_fu_141_p1[2 : 0];
        state_addr_reg_255[2 : 0] <= i_2_cast16_fu_130_p1[2 : 0];
        xor_ln77_reg_260 <= xor_ln77_fu_135_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        state_addr_17_reg_275[2 : 0] <= zext_ln77_1_fu_171_p1[2 : 0];
        state_addr_18_reg_280 <= zext_ln77_2_fu_179_p1;
        trunc_ln77_15_reg_295 <= {{w_q0[15:8]}};
        trunc_ln77_reg_300 <= trunc_ln77_fu_226_p1;
        xor_ln77_1_reg_285 <= xor_ln77_1_fu_194_p2;
        xor_ln77_2_reg_290 <= xor_ln77_2_fu_210_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        xor_ln77_3_reg_305 <= xor_ln77_3_fu_230_p2;
        xor_ln77_4_reg_310 <= xor_ln77_4_fu_235_p2;
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

assign ap_ST_fsm_state4_blk = 1'b0;

always @ (*) begin
    if (((icmp_ln75_fu_118_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_52;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = state_addr_18_reg_280;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = state_addr_16_reg_265;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address0 = zext_ln77_2_fu_179_p1;
    end else if (((icmp_ln75_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        state_address0 = zext_ln77_fu_141_p1;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address1 = state_addr_17_reg_275;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = state_addr_reg_255;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        state_address1 = zext_ln77_1_fu_171_p1;
    end else if (((icmp_ln75_fu_118_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        state_address1 = i_2_cast16_fu_130_p1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln75_fu_118_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | ((icmp_ln75_fu_118_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1)))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        state_d0 = xor_ln77_4_reg_310;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_d0 = xor_ln77_2_reg_290;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        state_d1 = xor_ln77_3_reg_305;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_d1 = xor_ln77_1_reg_285;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w_ce0 = 1'b1;
    end else begin
        w_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((icmp_ln75_fu_118_p2 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln75_fu_124_p2 = (ap_sig_allocacmp_i_1 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_2_cast16_fu_130_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln75_fu_118_p2 = ((ap_sig_allocacmp_i_1 == 3'd4) ? 1'b1 : 1'b0);

assign p_cast18_cast_cast_fu_154_p1 = p_cast18_cast_fu_146_p3;

assign p_cast18_cast_fu_146_p3 = {{3'd5}, {ap_sig_allocacmp_i_1}};

assign sext_ln77_fu_176_p1 = xor_ln77_reg_260;

assign tmp_3_cast_fu_164_p3 = {{1'd1}, {i_1_reg_247}};

assign trunc_ln77_14_fu_200_p4 = {{w_q0[23:16]}};

assign trunc_ln77_fu_226_p1 = w_q0[7:0];

assign trunc_ln77_s_fu_184_p4 = {{w_q0[31:24]}};

assign w_address0 = p_cast18_cast_cast_fu_154_p1;

assign xor_ln77_1_fu_194_p2 = (trunc_ln77_s_fu_184_p4 ^ state_q1);

assign xor_ln77_2_fu_210_p2 = (trunc_ln77_14_fu_200_p4 ^ state_q0);

assign xor_ln77_3_fu_230_p2 = (trunc_ln77_15_reg_295 ^ state_q1);

assign xor_ln77_4_fu_235_p2 = (trunc_ln77_reg_300 ^ state_q0);

assign xor_ln77_fu_135_p2 = (ap_sig_allocacmp_i_1 ^ 3'd4);

assign zext_ln77_1_fu_171_p1 = tmp_3_cast_fu_164_p3;

assign zext_ln77_2_fu_179_p1 = $unsigned(sext_ln77_fu_176_p1);

assign zext_ln77_fu_141_p1 = $unsigned(xor_ln77_fu_135_p2);

always @ (posedge ap_clk) begin
    state_addr_reg_255[3] <= 1'b0;
    state_addr_16_reg_265[3] <= 1'b0;
    state_addr_17_reg_275[3] <= 1'b1;
end

endmodule //AES_Encrypt_AES_Encrypt_Pipeline_VITIS_LOOP_75_11
