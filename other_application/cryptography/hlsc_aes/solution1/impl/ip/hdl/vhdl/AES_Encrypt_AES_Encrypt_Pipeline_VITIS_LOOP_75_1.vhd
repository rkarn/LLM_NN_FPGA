-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AES_Encrypt_AES_Encrypt_Pipeline_VITIS_LOOP_75_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    state_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce1 : OUT STD_LOGIC;
    state_we1 : OUT STD_LOGIC;
    state_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    state_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    w_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    w_ce0 : OUT STD_LOGIC;
    w_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of AES_Encrypt_AES_Encrypt_Pipeline_VITIS_LOOP_75_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln75_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal i_2_reg_231 : STD_LOGIC_VECTOR (2 downto 0);
    signal state_addr_12_reg_239 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln77_5_fu_132_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal xor_ln77_5_reg_244 : STD_LOGIC_VECTOR (2 downto 0);
    signal state_addr_14_reg_249 : STD_LOGIC_VECTOR (3 downto 0);
    signal state_addr_15_reg_259 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal state_addr_16_reg_264 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln77_fu_178_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln77_reg_269 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln77_1_fu_194_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln77_1_reg_274 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln77_2_reg_279 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln77_fu_210_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln77_reg_284 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln77_2_fu_214_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln77_2_reg_289 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal xor_ln77_3_fu_219_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln77_3_reg_294 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_cast_fu_126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_fu_138_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_3_fu_155_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln77_4_fu_163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_48 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln75_fu_120_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_cast_fu_148_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln77_fu_160_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln_fu_168_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln77_1_fu_184_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component AES_Encrypt_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component AES_Encrypt_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_48_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln75_fu_114_p2 = ap_const_lv1_0)) then 
                    i_fu_48 <= add_ln75_fu_120_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_48 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                i_2_reg_231 <= ap_sig_allocacmp_i_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_114_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    state_addr_12_reg_239(2 downto 0) <= i_cast_fu_126_p1(4 - 1 downto 0)(2 downto 0);
                    state_addr_14_reg_249(2 downto 0) <= zext_ln77_fu_138_p1(4 - 1 downto 0)(2 downto 0);
                xor_ln77_5_reg_244 <= xor_ln77_5_fu_132_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    state_addr_15_reg_259(2 downto 0) <= zext_ln77_3_fu_155_p1(4 - 1 downto 0)(2 downto 0);
                state_addr_16_reg_264 <= zext_ln77_4_fu_163_p1(4 - 1 downto 0);
                trunc_ln77_2_reg_279 <= w_q0(15 downto 8);
                trunc_ln77_reg_284 <= trunc_ln77_fu_210_p1;
                xor_ln77_1_reg_274 <= xor_ln77_1_fu_194_p2;
                xor_ln77_reg_269 <= xor_ln77_fu_178_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                xor_ln77_2_reg_289 <= xor_ln77_2_fu_214_p2;
                xor_ln77_3_reg_294 <= xor_ln77_3_fu_219_p2;
            end if;
        end if;
    end process;
    state_addr_12_reg_239(3) <= '0';
    state_addr_14_reg_249(3) <= '0';
    state_addr_15_reg_259(3) <= '1';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, icmp_ln75_fu_114_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((icmp_ln75_fu_114_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln75_fu_120_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start_int)
    begin
        if ((ap_start_int = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, icmp_ln75_fu_114_p2, ap_start_int)
    begin
        if (((icmp_ln75_fu_114_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_state1, i_fu_48, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_48;
        end if; 
    end process;

    i_cast_fu_126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),64));
    icmp_ln75_fu_114_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv3_4) else "0";
        sext_ln77_fu_160_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln77_5_reg_244),4));


    state_address0_assign_proc : process(ap_CS_fsm_state1, icmp_ln75_fu_114_p2, ap_CS_fsm_state4, state_addr_14_reg_249, ap_CS_fsm_state2, state_addr_16_reg_264, ap_CS_fsm_state3, zext_ln77_fu_138_p1, zext_ln77_4_fu_163_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= state_addr_16_reg_264;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= state_addr_14_reg_249;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address0 <= zext_ln77_4_fu_163_p1(4 - 1 downto 0);
        elsif (((icmp_ln75_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            state_address0 <= zext_ln77_fu_138_p1(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_address1_assign_proc : process(ap_CS_fsm_state1, icmp_ln75_fu_114_p2, ap_CS_fsm_state4, state_addr_12_reg_239, state_addr_15_reg_259, ap_CS_fsm_state2, ap_CS_fsm_state3, i_cast_fu_126_p1, zext_ln77_3_fu_155_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address1 <= state_addr_15_reg_259;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address1 <= state_addr_12_reg_239;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            state_address1 <= zext_ln77_3_fu_155_p1(4 - 1 downto 0);
        elsif (((icmp_ln75_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            state_address1 <= i_cast_fu_126_p1(4 - 1 downto 0);
        else 
            state_address1 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state1, icmp_ln75_fu_114_p2, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln75_fu_114_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    state_ce1_assign_proc : process(ap_CS_fsm_state1, icmp_ln75_fu_114_p2, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln75_fu_114_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            state_ce1 <= ap_const_logic_1;
        else 
            state_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    state_d0_assign_proc : process(ap_CS_fsm_state4, xor_ln77_1_reg_274, ap_CS_fsm_state3, xor_ln77_3_reg_294)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_d0 <= xor_ln77_3_reg_294;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_d0 <= xor_ln77_1_reg_274;
        else 
            state_d0 <= "XXXXXXXX";
        end if; 
    end process;


    state_d1_assign_proc : process(ap_CS_fsm_state4, xor_ln77_reg_269, xor_ln77_2_reg_289, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_d1 <= xor_ln77_2_reg_289;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_d1 <= xor_ln77_reg_269;
        else 
            state_d1 <= "XXXXXXXX";
        end if; 
    end process;


    state_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;


    state_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            state_we1 <= ap_const_logic_1;
        else 
            state_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_cast_fu_148_p3 <= (ap_const_lv1_1 & i_2_reg_231);
    trunc_ln77_1_fu_184_p4 <= w_q0(23 downto 16);
    trunc_ln77_fu_210_p1 <= w_q0(8 - 1 downto 0);
    trunc_ln_fu_168_p4 <= w_q0(31 downto 24);
    w_address0 <= i_cast_fu_126_p1(6 - 1 downto 0);

    w_ce0_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            w_ce0 <= ap_const_logic_1;
        else 
            w_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln77_1_fu_194_p2 <= (trunc_ln77_1_fu_184_p4 xor state_q0);
    xor_ln77_2_fu_214_p2 <= (trunc_ln77_2_reg_279 xor state_q1);
    xor_ln77_3_fu_219_p2 <= (trunc_ln77_reg_284 xor state_q0);
    xor_ln77_5_fu_132_p2 <= (ap_sig_allocacmp_i_2 xor ap_const_lv3_4);
    xor_ln77_fu_178_p2 <= (trunc_ln_fu_168_p4 xor state_q1);
    zext_ln77_3_fu_155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_cast_fu_148_p3),64));
    zext_ln77_4_fu_163_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln77_fu_160_p1),64));
    zext_ln77_fu_138_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln77_5_fu_132_p2),64));
end behav;
