-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_filter_fir_filter_Pipeline_sample_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_TVALID : IN STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    input_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_TREADY : OUT STD_LOGIC;
    coeffs_load_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeffs_load_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeffs_load_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeffs_load : IN STD_LOGIC_VECTOR (31 downto 0);
    coeffs_load_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeffs_load_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeffs_load_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeffs_load_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeffs_load_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    coeffs_load_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_TVALID : OUT STD_LOGIC );
end;


architecture behav of fir_filter_fir_filter_Pipeline_sample_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal tmp_nbreadreq_fu_130_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal fir_filter_stream_int_0_stream_int_0_int_shift_reg_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_filter_stream_int_0_stream_int_0_int_shift_reg_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_filter_stream_int_0_stream_int_0_int_shift_reg_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_filter_stream_int_0_stream_int_0_int_shift_reg_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_filter_stream_int_0_stream_int_0_int_shift_reg_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_filter_stream_int_0_stream_int_0_int_shift_reg_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_filter_stream_int_0_stream_int_0_int_shift_reg_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_filter_stream_int_0_stream_int_0_int_shift_reg_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal fir_filter_stream_int_0_stream_int_0_int_shift_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal input_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal fir_filter_stream_int_0_stream_int_0_int_shift_reg_3_load_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_151_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_reg_439 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_1_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_3_reg_449 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_3_reg_449_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_167_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_8_reg_454 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_2_reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_4_reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_5_reg_469 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_6_reg_474 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_188_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_7_reg_479 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln37_9_reg_484 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_6_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_6_reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_fu_302_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_reg_494 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_2_fu_310_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_2_reg_499 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_7_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_7_reg_504 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal add_ln37_5_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_1_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_4_fu_315_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln37_3_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_151_ce : STD_LOGIC;
    signal grp_fu_156_ce : STD_LOGIC;
    signal grp_fu_161_ce : STD_LOGIC;
    signal grp_fu_167_ce : STD_LOGIC;
    signal grp_fu_172_ce : STD_LOGIC;
    signal grp_fu_176_ce : STD_LOGIC;
    signal grp_fu_180_ce : STD_LOGIC;
    signal grp_fu_184_ce : STD_LOGIC;
    signal grp_fu_188_ce : STD_LOGIC;
    signal grp_fu_192_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_loop_init : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fir_filter_mul_32s_32s_32_2_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_filter_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_2_1_U1 : component fir_filter_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fir_filter_stream_int_0_stream_int_0_int_shift_reg,
        din1 => coeffs_load_1,
        ce => grp_fu_151_ce,
        dout => grp_fu_151_p2);

    mul_32s_32s_32_2_1_U2 : component fir_filter_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fir_filter_stream_int_0_stream_int_0_int_shift_reg_1,
        din1 => coeffs_load_2,
        ce => grp_fu_156_ce,
        dout => grp_fu_156_p2);

    mul_32s_32s_32_2_1_U3 : component fir_filter_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => input_r_TDATA,
        din1 => coeffs_load,
        ce => grp_fu_161_ce,
        dout => grp_fu_161_p2);

    mul_32s_32s_32_2_1_U4 : component fir_filter_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fir_filter_stream_int_0_stream_int_0_int_shift_reg_2,
        din1 => coeffs_load_3,
        ce => grp_fu_167_ce,
        dout => grp_fu_167_p2);

    mul_32s_32s_32_2_1_U5 : component fir_filter_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fir_filter_stream_int_0_stream_int_0_int_shift_reg_8,
        din1 => coeffs_load_9,
        ce => grp_fu_172_ce,
        dout => grp_fu_172_p2);

    mul_32s_32s_32_2_1_U6 : component fir_filter_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fir_filter_stream_int_0_stream_int_0_int_shift_reg_5,
        din1 => coeffs_load_6,
        ce => grp_fu_176_ce,
        dout => grp_fu_176_p2);

    mul_32s_32s_32_2_1_U7 : component fir_filter_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fir_filter_stream_int_0_stream_int_0_int_shift_reg_3_load_reg_393,
        din1 => coeffs_load_4,
        ce => grp_fu_180_ce,
        dout => grp_fu_180_p2);

    mul_32s_32s_32_2_1_U8 : component fir_filter_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fir_filter_stream_int_0_stream_int_0_int_shift_reg_7,
        din1 => coeffs_load_8,
        ce => grp_fu_184_ce,
        dout => grp_fu_184_p2);

    mul_32s_32s_32_2_1_U9 : component fir_filter_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fir_filter_stream_int_0_stream_int_0_int_shift_reg_6,
        din1 => coeffs_load_7,
        ce => grp_fu_188_ce,
        dout => grp_fu_188_p2);

    mul_32s_32s_32_2_1_U10 : component fir_filter_mul_32s_32s_32_2_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fir_filter_stream_int_0_stream_int_0_int_shift_reg_4,
        din1 => coeffs_load_5,
        ce => grp_fu_192_ce,
        dout => grp_fu_192_p2);

    flow_control_loop_pipe_sequential_init_U : component fir_filter_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln37_2_reg_499 <= add_ln37_2_fu_310_p2;
                add_ln37_6_reg_489 <= add_ln37_6_fu_297_p2;
                add_ln37_7_reg_504 <= add_ln37_7_fu_319_p2;
                add_ln37_reg_494 <= add_ln37_fu_302_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                mul_ln37_2_reg_459 <= grp_fu_172_p2;
                mul_ln37_3_reg_449_pp0_iter2_reg <= mul_ln37_3_reg_449;
                mul_ln37_4_reg_464 <= grp_fu_176_p2;
                mul_ln37_5_reg_469 <= grp_fu_180_p2;
                mul_ln37_6_reg_474 <= grp_fu_184_p2;
                mul_ln37_7_reg_479 <= grp_fu_188_p2;
                mul_ln37_9_reg_484 <= grp_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                mul_ln37_1_reg_444 <= grp_fu_156_p2;
                mul_ln37_3_reg_449 <= grp_fu_161_p2;
                mul_ln37_8_reg_454 <= grp_fu_167_p2;
                mul_ln37_reg_439 <= grp_fu_151_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_130_p3 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                fir_filter_stream_int_0_stream_int_0_int_shift_reg <= input_r_TDATA;
                fir_filter_stream_int_0_stream_int_0_int_shift_reg_1 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg;
                fir_filter_stream_int_0_stream_int_0_int_shift_reg_2 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg_1;
                fir_filter_stream_int_0_stream_int_0_int_shift_reg_3 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg_2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_130_p3 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                fir_filter_stream_int_0_stream_int_0_int_shift_reg_3_load_reg_393 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg_3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                fir_filter_stream_int_0_stream_int_0_int_shift_reg_4 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg_3_load_reg_393;
                fir_filter_stream_int_0_stream_int_0_int_shift_reg_5 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg_4;
                fir_filter_stream_int_0_stream_int_0_int_shift_reg_6 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg_5;
                fir_filter_stream_int_0_stream_int_0_int_shift_reg_7 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg_6;
                fir_filter_stream_int_0_stream_int_0_int_shift_reg_8 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg_7;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln37_1_fu_306_p2 <= std_logic_vector(unsigned(mul_ln37_7_reg_479) + unsigned(mul_ln37_4_reg_464));
    add_ln37_2_fu_310_p2 <= std_logic_vector(unsigned(add_ln37_1_fu_306_p2) + unsigned(mul_ln37_6_reg_474));
    add_ln37_3_fu_324_p2 <= std_logic_vector(unsigned(add_ln37_2_reg_499) + unsigned(add_ln37_reg_494));
    add_ln37_4_fu_315_p2 <= std_logic_vector(unsigned(mul_ln37_9_reg_484) + unsigned(mul_ln37_5_reg_469));
    add_ln37_5_fu_293_p2 <= std_logic_vector(unsigned(mul_ln37_1_reg_444) + unsigned(mul_ln37_reg_439));
    add_ln37_6_fu_297_p2 <= std_logic_vector(unsigned(add_ln37_5_fu_293_p2) + unsigned(mul_ln37_8_reg_454));
    add_ln37_7_fu_319_p2 <= std_logic_vector(unsigned(add_ln37_6_reg_489) + unsigned(add_ln37_4_fu_315_p2));
    add_ln37_fu_302_p2 <= std_logic_vector(unsigned(mul_ln37_2_reg_459) + unsigned(mul_ln37_3_reg_449_pp0_iter2_reg));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter4, input_r_TVALID, tmp_nbreadreq_fu_130_p3, output_r_TREADY, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= (((output_r_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((tmp_nbreadreq_fu_130_p3 = ap_const_lv1_1) and (input_r_TVALID = ap_const_logic_0) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter4, input_r_TVALID, tmp_nbreadreq_fu_130_p3, output_r_TREADY, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= (((output_r_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((tmp_nbreadreq_fu_130_p3 = ap_const_lv1_1) and (input_r_TVALID = ap_const_logic_0) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, input_r_TVALID, tmp_nbreadreq_fu_130_p3, output_r_TREADY, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= (((output_r_TREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((tmp_nbreadreq_fu_130_p3 = ap_const_lv1_1) and (input_r_TVALID = ap_const_logic_0) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(input_r_TVALID, tmp_nbreadreq_fu_130_p3)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((tmp_nbreadreq_fu_130_p3 = ap_const_lv1_1) and (input_r_TVALID = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage0_iter4_assign_proc : process(output_r_TREADY)
    begin
                ap_block_state5_pp0_stage0_iter4 <= (output_r_TREADY = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_130_p3, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (tmp_nbreadreq_fu_130_p3 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_151_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_151_ce <= ap_const_logic_1;
        else 
            grp_fu_151_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_156_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_156_ce <= ap_const_logic_1;
        else 
            grp_fu_156_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_161_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_161_ce <= ap_const_logic_1;
        else 
            grp_fu_161_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_167_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_167_ce <= ap_const_logic_1;
        else 
            grp_fu_167_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_172_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_172_ce <= ap_const_logic_1;
        else 
            grp_fu_172_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_176_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_176_ce <= ap_const_logic_1;
        else 
            grp_fu_176_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_180_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_180_ce <= ap_const_logic_1;
        else 
            grp_fu_180_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_184_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_184_ce <= ap_const_logic_1;
        else 
            grp_fu_184_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_188_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_188_ce <= ap_const_logic_1;
        else 
            grp_fu_188_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_192_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_192_ce <= ap_const_logic_1;
        else 
            grp_fu_192_ce <= ap_const_logic_0;
        end if; 
    end process;


    input_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, input_r_TVALID, tmp_nbreadreq_fu_130_p3, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (tmp_nbreadreq_fu_130_p3 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_TDATA_blk_n <= input_r_TVALID;
        else 
            input_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    input_r_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, tmp_nbreadreq_fu_130_p3, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_nbreadreq_fu_130_p3 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_TREADY <= ap_const_logic_1;
        else 
            input_r_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    output_r_TDATA <= std_logic_vector(unsigned(add_ln37_7_reg_504) + unsigned(add_ln37_3_fu_324_p2));

    output_r_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter4, output_r_TREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_r_TDATA_blk_n <= output_r_TREADY;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_r_TVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            output_r_TVALID <= ap_const_logic_1;
        else 
            output_r_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    tmp_nbreadreq_fu_130_p3 <= (0=>(input_r_TVALID), others=>'-');
end behav;
