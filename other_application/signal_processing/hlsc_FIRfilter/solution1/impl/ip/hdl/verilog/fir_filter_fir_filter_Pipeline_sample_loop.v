// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module fir_filter_fir_filter_Pipeline_sample_loop (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_TVALID,
        output_r_TREADY,
        input_r_TDATA,
        input_r_TREADY,
        coeffs_load_1,
        coeffs_load_2,
        coeffs_load_9,
        coeffs_load,
        coeffs_load_6,
        coeffs_load_4,
        coeffs_load_8,
        coeffs_load_7,
        coeffs_load_3,
        coeffs_load_5,
        output_r_TDATA,
        output_r_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   input_r_TVALID;
input   output_r_TREADY;
input  [31:0] input_r_TDATA;
output   input_r_TREADY;
input  [31:0] coeffs_load_1;
input  [31:0] coeffs_load_2;
input  [31:0] coeffs_load_9;
input  [31:0] coeffs_load;
input  [31:0] coeffs_load_6;
input  [31:0] coeffs_load_4;
input  [31:0] coeffs_load_8;
input  [31:0] coeffs_load_7;
input  [31:0] coeffs_load_3;
input  [31:0] coeffs_load_5;
output  [31:0] output_r_TDATA;
output   output_r_TVALID;

reg ap_idle;
reg input_r_TREADY;
reg output_r_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire   [0:0] tmp_nbreadreq_fu_130_p3;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg  signed [31:0] fir_filter_stream_int_0_stream_int_0_int_shift_reg_8;
reg  signed [31:0] fir_filter_stream_int_0_stream_int_0_int_shift_reg_7;
reg  signed [31:0] fir_filter_stream_int_0_stream_int_0_int_shift_reg_6;
reg  signed [31:0] fir_filter_stream_int_0_stream_int_0_int_shift_reg_5;
reg  signed [31:0] fir_filter_stream_int_0_stream_int_0_int_shift_reg_4;
reg   [31:0] fir_filter_stream_int_0_stream_int_0_int_shift_reg_3;
reg  signed [31:0] fir_filter_stream_int_0_stream_int_0_int_shift_reg_2;
reg  signed [31:0] fir_filter_stream_int_0_stream_int_0_int_shift_reg_1;
reg  signed [31:0] fir_filter_stream_int_0_stream_int_0_int_shift_reg;
reg    input_r_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    output_r_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001;
reg  signed [31:0] fir_filter_stream_int_0_stream_int_0_int_shift_reg_3_load_reg_393;
wire   [31:0] grp_fu_151_p2;
reg   [31:0] mul_ln37_reg_439;
wire   [31:0] grp_fu_156_p2;
reg   [31:0] mul_ln37_1_reg_444;
wire   [31:0] grp_fu_161_p2;
reg   [31:0] mul_ln37_3_reg_449;
reg   [31:0] mul_ln37_3_reg_449_pp0_iter2_reg;
wire   [31:0] grp_fu_167_p2;
reg   [31:0] mul_ln37_8_reg_454;
wire   [31:0] grp_fu_172_p2;
reg   [31:0] mul_ln37_2_reg_459;
wire   [31:0] grp_fu_176_p2;
reg   [31:0] mul_ln37_4_reg_464;
wire   [31:0] grp_fu_180_p2;
reg   [31:0] mul_ln37_5_reg_469;
wire   [31:0] grp_fu_184_p2;
reg   [31:0] mul_ln37_6_reg_474;
wire   [31:0] grp_fu_188_p2;
reg   [31:0] mul_ln37_7_reg_479;
wire   [31:0] grp_fu_192_p2;
reg   [31:0] mul_ln37_9_reg_484;
wire   [31:0] add_ln37_6_fu_297_p2;
reg   [31:0] add_ln37_6_reg_489;
wire   [31:0] add_ln37_fu_302_p2;
reg   [31:0] add_ln37_reg_494;
wire   [31:0] add_ln37_2_fu_310_p2;
reg   [31:0] add_ln37_2_reg_499;
wire   [31:0] add_ln37_7_fu_319_p2;
reg   [31:0] add_ln37_7_reg_504;
reg    ap_block_pp0_stage0_01001;
wire   [31:0] add_ln37_5_fu_293_p2;
wire   [31:0] add_ln37_1_fu_306_p2;
wire   [31:0] add_ln37_4_fu_315_p2;
wire   [31:0] add_ln37_3_fu_324_p2;
reg    grp_fu_151_ce;
reg    grp_fu_156_ce;
reg    grp_fu_161_ce;
reg    grp_fu_167_ce;
reg    grp_fu_172_ce;
reg    grp_fu_176_ce;
reg    grp_fu_180_ce;
reg    grp_fu_184_ce;
reg    grp_fu_188_ce;
reg    grp_fu_192_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_loop_init;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 fir_filter_stream_int_0_stream_int_0_int_shift_reg_8 = 32'd0;
#0 fir_filter_stream_int_0_stream_int_0_int_shift_reg_7 = 32'd0;
#0 fir_filter_stream_int_0_stream_int_0_int_shift_reg_6 = 32'd0;
#0 fir_filter_stream_int_0_stream_int_0_int_shift_reg_5 = 32'd0;
#0 fir_filter_stream_int_0_stream_int_0_int_shift_reg_4 = 32'd0;
#0 fir_filter_stream_int_0_stream_int_0_int_shift_reg_3 = 32'd0;
#0 fir_filter_stream_int_0_stream_int_0_int_shift_reg_2 = 32'd0;
#0 fir_filter_stream_int_0_stream_int_0_int_shift_reg_1 = 32'd0;
#0 fir_filter_stream_int_0_stream_int_0_int_shift_reg = 32'd0;
#0 ap_done_reg = 1'b0;
end

fir_filter_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(fir_filter_stream_int_0_stream_int_0_int_shift_reg),
    .din1(coeffs_load_1),
    .ce(grp_fu_151_ce),
    .dout(grp_fu_151_p2)
);

fir_filter_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(fir_filter_stream_int_0_stream_int_0_int_shift_reg_1),
    .din1(coeffs_load_2),
    .ce(grp_fu_156_ce),
    .dout(grp_fu_156_p2)
);

fir_filter_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(input_r_TDATA),
    .din1(coeffs_load),
    .ce(grp_fu_161_ce),
    .dout(grp_fu_161_p2)
);

fir_filter_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(fir_filter_stream_int_0_stream_int_0_int_shift_reg_2),
    .din1(coeffs_load_3),
    .ce(grp_fu_167_ce),
    .dout(grp_fu_167_p2)
);

fir_filter_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(fir_filter_stream_int_0_stream_int_0_int_shift_reg_8),
    .din1(coeffs_load_9),
    .ce(grp_fu_172_ce),
    .dout(grp_fu_172_p2)
);

fir_filter_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(fir_filter_stream_int_0_stream_int_0_int_shift_reg_5),
    .din1(coeffs_load_6),
    .ce(grp_fu_176_ce),
    .dout(grp_fu_176_p2)
);

fir_filter_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(fir_filter_stream_int_0_stream_int_0_int_shift_reg_3_load_reg_393),
    .din1(coeffs_load_4),
    .ce(grp_fu_180_ce),
    .dout(grp_fu_180_p2)
);

fir_filter_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(fir_filter_stream_int_0_stream_int_0_int_shift_reg_7),
    .din1(coeffs_load_8),
    .ce(grp_fu_184_ce),
    .dout(grp_fu_184_p2)
);

fir_filter_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(fir_filter_stream_int_0_stream_int_0_int_shift_reg_6),
    .din1(coeffs_load_7),
    .ce(grp_fu_188_ce),
    .dout(grp_fu_188_p2)
);

fir_filter_mul_32s_32s_32_2_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
mul_32s_32s_32_2_1_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(fir_filter_stream_int_0_stream_int_0_int_shift_reg_4),
    .din1(coeffs_load_5),
    .ce(grp_fu_192_ce),
    .dout(grp_fu_192_p2)
);

fir_filter_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln37_2_reg_499 <= add_ln37_2_fu_310_p2;
        add_ln37_6_reg_489 <= add_ln37_6_fu_297_p2;
        add_ln37_7_reg_504 <= add_ln37_7_fu_319_p2;
        add_ln37_reg_494 <= add_ln37_fu_302_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        mul_ln37_2_reg_459 <= grp_fu_172_p2;
        mul_ln37_3_reg_449_pp0_iter2_reg <= mul_ln37_3_reg_449;
        mul_ln37_4_reg_464 <= grp_fu_176_p2;
        mul_ln37_5_reg_469 <= grp_fu_180_p2;
        mul_ln37_6_reg_474 <= grp_fu_184_p2;
        mul_ln37_7_reg_479 <= grp_fu_188_p2;
        mul_ln37_9_reg_484 <= grp_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        mul_ln37_1_reg_444 <= grp_fu_156_p2;
        mul_ln37_3_reg_449 <= grp_fu_161_p2;
        mul_ln37_8_reg_454 <= grp_fu_167_p2;
        mul_ln37_reg_439 <= grp_fu_151_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_130_p3 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fir_filter_stream_int_0_stream_int_0_int_shift_reg <= input_r_TDATA;
        fir_filter_stream_int_0_stream_int_0_int_shift_reg_1 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg;
        fir_filter_stream_int_0_stream_int_0_int_shift_reg_2 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg_1;
        fir_filter_stream_int_0_stream_int_0_int_shift_reg_3 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg_2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_130_p3 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fir_filter_stream_int_0_stream_int_0_int_shift_reg_3_load_reg_393 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg_3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fir_filter_stream_int_0_stream_int_0_int_shift_reg_4 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg_3_load_reg_393;
        fir_filter_stream_int_0_stream_int_0_int_shift_reg_5 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg_4;
        fir_filter_stream_int_0_stream_int_0_int_shift_reg_6 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg_5;
        fir_filter_stream_int_0_stream_int_0_int_shift_reg_7 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg_6;
        fir_filter_stream_int_0_stream_int_0_int_shift_reg_8 <= fir_filter_stream_int_0_stream_int_0_int_shift_reg_7;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (tmp_nbreadreq_fu_130_p3 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_151_ce = 1'b1;
    end else begin
        grp_fu_151_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_156_ce = 1'b1;
    end else begin
        grp_fu_156_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_161_ce = 1'b1;
    end else begin
        grp_fu_161_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_167_ce = 1'b1;
    end else begin
        grp_fu_167_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_172_ce = 1'b1;
    end else begin
        grp_fu_172_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_176_ce = 1'b1;
    end else begin
        grp_fu_176_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_180_ce = 1'b1;
    end else begin
        grp_fu_180_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_184_ce = 1'b1;
    end else begin
        grp_fu_184_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_188_ce = 1'b1;
    end else begin
        grp_fu_188_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_192_ce = 1'b1;
    end else begin
        grp_fu_192_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (tmp_nbreadreq_fu_130_p3 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_TDATA_blk_n = input_r_TVALID;
    end else begin
        input_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (tmp_nbreadreq_fu_130_p3 == 1'd1) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_TREADY = 1'b1;
    end else begin
        input_r_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_r_TDATA_blk_n = output_r_TREADY;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        output_r_TVALID = 1'b1;
    end else begin
        output_r_TVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln37_1_fu_306_p2 = (mul_ln37_7_reg_479 + mul_ln37_4_reg_464);

assign add_ln37_2_fu_310_p2 = (add_ln37_1_fu_306_p2 + mul_ln37_6_reg_474);

assign add_ln37_3_fu_324_p2 = (add_ln37_2_reg_499 + add_ln37_reg_494);

assign add_ln37_4_fu_315_p2 = (mul_ln37_9_reg_484 + mul_ln37_5_reg_469);

assign add_ln37_5_fu_293_p2 = (mul_ln37_1_reg_444 + mul_ln37_reg_439);

assign add_ln37_6_fu_297_p2 = (add_ln37_5_fu_293_p2 + mul_ln37_8_reg_454);

assign add_ln37_7_fu_319_p2 = (add_ln37_6_reg_489 + add_ln37_4_fu_315_p2);

assign add_ln37_fu_302_p2 = (mul_ln37_2_reg_459 + mul_ln37_3_reg_449_pp0_iter2_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((output_r_TREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((tmp_nbreadreq_fu_130_p3 == 1'd1) & (input_r_TVALID == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((output_r_TREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((tmp_nbreadreq_fu_130_p3 == 1'd1) & (input_r_TVALID == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((output_r_TREADY == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1)) | ((tmp_nbreadreq_fu_130_p3 == 1'd1) & (input_r_TVALID == 1'b0) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((tmp_nbreadreq_fu_130_p3 == 1'd1) & (input_r_TVALID == 1'b0));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage0_iter4 = (output_r_TREADY == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign output_r_TDATA = (add_ln37_7_reg_504 + add_ln37_3_fu_324_p2);

assign tmp_nbreadreq_fu_130_p3 = input_r_TVALID;

endmodule //fir_filter_fir_filter_Pipeline_sample_loop
