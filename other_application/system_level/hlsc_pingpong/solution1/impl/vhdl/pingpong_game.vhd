-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pingpong_game is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    input1_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input1_TVALID : IN STD_LOGIC;
    input1_TREADY : OUT STD_LOGIC;
    input2_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input2_TVALID : IN STD_LOGIC;
    input2_TREADY : OUT STD_LOGIC;
    output_r_TDATA : OUT STD_LOGIC_VECTOR (255 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC );
end;


architecture behav of pingpong_game is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pingpong_game_pingpong_game,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.758500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=374,HLS_SYN_LUT=1242,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv7_28 : STD_LOGIC_VECTOR (6 downto 0) := "0101000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010100";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv25_0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000000";
    constant ap_const_lv27_0 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal input1_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal input2_TDATA_blk_n : STD_LOGIC;
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal trunc_ln23_fu_223_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln23_reg_693 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln23_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_698 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln23_1_fu_269_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln23_1_reg_703 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln23_1_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_1_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_ball_dy_2_reg_713 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal zext_ln62_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln62_reg_719 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_paddle2_y_3_fu_302_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_paddle2_y_3_reg_724 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_ball_x_4_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_ball_x_4_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_ball_y_4_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_ball_y_4_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln36_1_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_1_reg_741 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_ball_dx_4_fu_430_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_ball_dx_4_reg_745 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_438_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_750 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln62_fu_446_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln62_reg_754 : STD_LOGIC_VECTOR (6 downto 0);
    signal state_ball_dy_3_fu_507_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_ball_dy_3_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal state_paddle1_y_fu_76 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_paddle1_y_3_fu_292_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_paddle2_y_fu_80 : STD_LOGIC_VECTOR (4 downto 0);
    signal state_ball_x_fu_84 : STD_LOGIC_VECTOR (6 downto 0);
    signal state_ball_x_5_fu_557_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal state_ball_y_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_ball_y_5_fu_550_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_ball_dx_fu_92 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_ball_dx_5_fu_542_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_allocacmp_state_ball_dx_load : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_load_fu_127_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_ball_dy_fu_96 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_score1_fu_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_score1_1_fu_534_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_score2_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal state_score2_1_fu_455_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal state_paddle1_y_cast_fu_179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln21_fu_191_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln21_fu_187_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln21_fu_195_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_207_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_fu_201_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln22_fu_215_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal state_paddle2_y_cast_fu_183_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln21_1_fu_237_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln21_1_fu_233_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln21_1_fu_241_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_253_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_1_fu_247_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln22_1_fu_261_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal state_ball_x_cast_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_328_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal icmp_ln36_1_fu_344_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln36_fu_356_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln36_fu_362_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln36_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_2_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln62_1_fu_308_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln38_1_fu_390_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_fu_402_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln38_fu_408_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln38_2_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln38_fu_396_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_fu_384_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_1_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln27_fu_312_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln31_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_1_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln32_fu_502_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln48_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln49_fu_528_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_input1_U_apdone_blk : STD_LOGIC;
    signal input1_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal input1_TVALID_int_regslice : STD_LOGIC;
    signal input1_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input1_U_ack_in : STD_LOGIC;
    signal regslice_both_input2_U_apdone_blk : STD_LOGIC;
    signal input2_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal input2_TVALID_int_regslice : STD_LOGIC;
    signal input2_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_input2_U_ack_in : STD_LOGIC;
    signal regslice_both_output_r_U_apdone_blk : STD_LOGIC;
    signal output_r_TDATA_int_regslice : STD_LOGIC_VECTOR (255 downto 0);
    signal output_r_TVALID_int_regslice : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_output_r_U_vld_out : STD_LOGIC;
    signal ap_condition_159 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component pingpong_game_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_both_input1_U : component pingpong_game_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input1_TDATA,
        vld_in => input1_TVALID,
        ack_in => regslice_both_input1_U_ack_in,
        data_out => input1_TDATA_int_regslice,
        vld_out => input1_TVALID_int_regslice,
        ack_out => input1_TREADY_int_regslice,
        apdone_blk => regslice_both_input1_U_apdone_blk);

    regslice_both_input2_U : component pingpong_game_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => input2_TDATA,
        vld_in => input2_TVALID,
        ack_in => regslice_both_input2_U_ack_in,
        data_out => input2_TDATA_int_regslice,
        vld_out => input2_TVALID_int_regslice,
        ack_out => input2_TREADY_int_regslice,
        apdone_blk => regslice_both_input2_U_apdone_blk);

    regslice_both_output_r_U : component pingpong_game_regslice_both
    generic map (
        DataWidth => 256)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TDATA_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_both_output_r_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_both_output_r_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    state_ball_dx_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_3_reg_750 = ap_const_lv1_0))) then 
                state_ball_dx_fu_92 <= state_ball_dx_5_fu_542_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_3_reg_750 = ap_const_lv1_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_lv1_1 = and_ln36_1_reg_741)))) then 
                state_ball_dx_fu_92 <= ap_const_lv32_1;
            elsif (((ap_const_lv1_0 = and_ln36_1_reg_741) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                state_ball_dx_fu_92 <= state_ball_dx_4_reg_745;
            end if; 
        end if;
    end process;

    state_ball_dy_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                state_ball_dy_fu_96 <= ap_const_lv32_1;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                state_ball_dy_fu_96 <= state_ball_dy_3_fu_507_p3;
            end if; 
        end if;
    end process;

    state_ball_x_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_3_fu_438_p3 = ap_const_lv1_1)))) then 
                state_ball_x_fu_84 <= ap_const_lv7_28;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_3_reg_750 = ap_const_lv1_0))) then 
                state_ball_x_fu_84 <= state_ball_x_5_fu_557_p3;
            end if; 
        end if;
    end process;

    state_ball_y_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_3_fu_438_p3 = ap_const_lv1_1)))) then 
                state_ball_y_fu_88 <= ap_const_lv32_C;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_3_reg_750 = ap_const_lv1_0))) then 
                state_ball_y_fu_88 <= state_ball_y_5_fu_550_p3;
            end if; 
        end if;
    end process;

    state_paddle1_y_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                state_paddle1_y_fu_76 <= ap_const_lv5_A;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                state_paddle1_y_fu_76 <= state_paddle1_y_3_fu_292_p3;
            end if; 
        end if;
    end process;

    state_paddle2_y_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                state_paddle2_y_fu_80 <= ap_const_lv5_A;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                state_paddle2_y_fu_80 <= state_paddle2_y_3_fu_302_p3;
            end if; 
        end if;
    end process;

    state_score1_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                state_score1_fu_100 <= ap_const_lv32_0;
            elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_3_reg_750 = ap_const_lv1_0))) then 
                state_score1_fu_100 <= state_score1_1_fu_534_p3;
            end if; 
        end if;
    end process;

    state_score2_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                state_score2_fu_104 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_3_fu_438_p3 = ap_const_lv1_1))) then 
                state_score2_fu_104 <= state_score2_1_fu_455_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (tmp_3_fu_438_p3 = ap_const_lv1_0))) then
                add_ln62_reg_754 <= add_ln62_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                and_ln36_1_reg_741 <= and_ln36_1_fu_378_p2;
                state_ball_dy_2_reg_713 <= state_ball_dy_fu_96;
                state_ball_x_4_reg_729 <= state_ball_x_4_fu_316_p2;
                state_ball_y_4_reg_734 <= state_ball_y_4_fu_322_p2;
                state_paddle2_y_3_reg_724 <= state_paddle2_y_3_fu_302_p3;
                tmp_3_reg_750 <= state_ball_x_4_fu_316_p2(31 downto 31);
                    zext_ln62_reg_719(4 downto 0) <= zext_ln62_fu_298_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln23_1_reg_708 <= icmp_ln23_1_fu_273_p2;
                icmp_ln23_reg_698 <= icmp_ln23_fu_227_p2;
                state_ball_dy_3_reg_759 <= state_ball_dy_3_fu_507_p3;
                trunc_ln23_1_reg_703 <= trunc_ln23_1_fu_269_p1;
                trunc_ln23_reg_693 <= trunc_ln23_fu_223_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_lv1_0 = and_ln36_1_fu_378_p2) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                state_ball_dx_4_reg_745 <= state_ball_dx_4_fu_430_p3;
            end if;
        end if;
    end process;
    zext_ln62_reg_719(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln21_1_fu_241_p2 <= std_logic_vector(unsigned(input2_TDATA_int_regslice) + unsigned(state_paddle2_y_cast_fu_183_p1));
    add_ln21_fu_195_p2 <= std_logic_vector(unsigned(input1_TDATA_int_regslice) + unsigned(state_paddle1_y_cast_fu_179_p1));
    add_ln22_1_fu_247_p2 <= std_logic_vector(unsigned(trunc_ln21_1_fu_237_p1) + unsigned(zext_ln21_1_fu_233_p1));
    add_ln22_fu_201_p2 <= std_logic_vector(unsigned(trunc_ln21_fu_191_p1) + unsigned(zext_ln21_fu_187_p1));
    add_ln36_fu_356_p2 <= std_logic_vector(unsigned(state_paddle1_y_3_fu_292_p3) + unsigned(ap_const_lv5_4));
    add_ln38_fu_402_p2 <= std_logic_vector(unsigned(state_paddle2_y_3_fu_302_p3) + unsigned(ap_const_lv5_4));
    add_ln49_fu_528_p2 <= std_logic_vector(unsigned(state_score1_fu_100) + unsigned(ap_const_lv32_1));
    add_ln62_fu_446_p2 <= std_logic_vector(unsigned(state_ball_x_fu_84) + unsigned(trunc_ln27_fu_312_p1));
    and_ln36_1_fu_378_p2 <= (icmp_ln36_fu_338_p2 and and_ln36_fu_372_p2);
    and_ln36_fu_372_p2 <= (xor_ln36_fu_350_p2 and icmp_ln36_2_fu_366_p2);
    and_ln38_1_fu_424_p2 <= (icmp_ln38_fu_384_p2 and and_ln38_fu_418_p2);
    and_ln38_fu_418_p2 <= (xor_ln38_fu_396_p2 and icmp_ln38_2_fu_412_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, input1_TVALID_int_regslice, input2_TVALID_int_regslice, output_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((input2_TVALID_int_regslice = ap_const_logic_0) or (input1_TVALID_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, input1_TVALID_int_regslice, input2_TVALID_int_regslice, output_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (output_r_TREADY_int_regslice = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((input2_TVALID_int_regslice = ap_const_logic_0) or (input1_TVALID_int_regslice = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter1, output_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage1_01001 <= ((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, output_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage1_11001 <= ((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, output_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage1_subdone <= ((output_r_TREADY_int_regslice = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(input1_TVALID_int_regslice, input2_TVALID_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((input2_TVALID_int_regslice = ap_const_logic_0) or (input1_TVALID_int_regslice = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage1_iter1_assign_proc : process(output_r_TREADY_int_regslice)
    begin
                ap_block_state5_pp0_stage1_iter1 <= (output_r_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_block_state6_pp0_stage0_iter2_assign_proc : process(output_r_TREADY_int_regslice)
    begin
                ap_block_state6_pp0_stage0_iter2 <= (output_r_TREADY_int_regslice = ap_const_logic_0);
    end process;


    ap_condition_159_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1)
    begin
                ap_condition_159 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_state_ball_dx_load_assign_proc : process(and_ln36_1_reg_741, state_ball_dx_4_reg_745, state_ball_dx_fu_92, ap_condition_159)
    begin
        if ((ap_const_boolean_1 = ap_condition_159)) then
            if ((ap_const_lv1_1 = and_ln36_1_reg_741)) then 
                ap_sig_allocacmp_state_ball_dx_load <= ap_const_lv32_1;
            elsif ((ap_const_lv1_0 = and_ln36_1_reg_741)) then 
                ap_sig_allocacmp_state_ball_dx_load <= state_ball_dx_4_reg_745;
            else 
                ap_sig_allocacmp_state_ball_dx_load <= state_ball_dx_fu_92;
            end if;
        else 
            ap_sig_allocacmp_state_ball_dx_load <= state_ball_dx_fu_92;
        end if; 
    end process;


    grp_load_fu_127_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, tmp_3_reg_750, state_ball_dx_fu_92, ap_sig_allocacmp_state_ball_dx_load)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (tmp_3_reg_750 = ap_const_lv1_0))) then 
            grp_load_fu_127_p1 <= ap_sig_allocacmp_state_ball_dx_load;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_load_fu_127_p1 <= state_ball_dx_fu_92;
        else 
            grp_load_fu_127_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln23_1_fu_273_p2 <= "1" when (unsigned(select_ln22_1_fu_261_p3) > unsigned(ap_const_lv31_14)) else "0";
    icmp_ln23_fu_227_p2 <= "1" when (unsigned(select_ln22_fu_215_p3) > unsigned(ap_const_lv31_14)) else "0";
    icmp_ln31_1_fu_491_p2 <= "1" when (signed(state_ball_y_4_reg_734) > signed(ap_const_lv32_16)) else "0";
    icmp_ln31_fu_486_p2 <= "1" when (signed(state_ball_y_4_reg_734) < signed(ap_const_lv32_1)) else "0";
    icmp_ln36_1_fu_344_p2 <= "1" when (signed(state_ball_y_4_fu_322_p2) < signed(zext_ln62_fu_298_p1)) else "0";
    icmp_ln36_2_fu_366_p2 <= "1" when (signed(state_ball_y_4_fu_322_p2) < signed(zext_ln36_fu_362_p1)) else "0";
    icmp_ln36_fu_338_p2 <= "1" when (signed(tmp_2_fu_328_p4) < signed(ap_const_lv31_1)) else "0";
    icmp_ln38_1_fu_390_p2 <= "1" when (signed(state_ball_y_4_fu_322_p2) < signed(zext_ln62_1_fu_308_p1)) else "0";
    icmp_ln38_2_fu_412_p2 <= "1" when (signed(state_ball_y_4_fu_322_p2) < signed(zext_ln38_fu_408_p1)) else "0";
    icmp_ln38_fu_384_p2 <= "1" when (signed(state_ball_x_4_fu_316_p2) > signed(ap_const_lv32_4D)) else "0";
    icmp_ln48_fu_523_p2 <= "1" when (signed(state_ball_x_4_reg_729) > signed(ap_const_lv32_4F)) else "0";

    input1_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, input1_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input1_TDATA_blk_n <= input1_TVALID_int_regslice;
        else 
            input1_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input1_TREADY <= regslice_both_input1_U_ack_in;

    input1_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input1_TREADY_int_regslice <= ap_const_logic_1;
        else 
            input1_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    input2_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, input2_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input2_TDATA_blk_n <= input2_TVALID_int_regslice;
        else 
            input2_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    input2_TREADY <= regslice_both_input2_U_ack_in;

    input2_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input2_TREADY_int_regslice <= ap_const_logic_1;
        else 
            input2_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    or_ln31_fu_496_p2 <= (icmp_ln31_fu_486_p2 or icmp_ln31_1_fu_491_p2);

    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter2, output_r_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int_regslice;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_r_TDATA_int_regslice <= (((((((((state_score2_fu_104 & state_score1_fu_100) & state_ball_dy_3_reg_759) & state_ball_dx_fu_92) & state_ball_y_fu_88) & ap_const_lv25_0) & state_ball_x_fu_84) & ap_const_lv27_0) & state_paddle2_y_3_reg_724) & zext_ln62_reg_719);
    output_r_TVALID <= regslice_both_output_r_U_vld_out;

    output_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            output_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    select_ln22_1_fu_261_p3 <= 
        ap_const_lv31_0 when (tmp_1_fu_253_p3(0) = '1') else 
        add_ln22_1_fu_247_p2;
    select_ln22_fu_215_p3 <= 
        ap_const_lv31_0 when (tmp_fu_207_p3(0) = '1') else 
        add_ln22_fu_201_p2;
    state_ball_dx_4_fu_430_p3 <= 
        ap_const_lv32_FFFFFFFF when (and_ln38_1_fu_424_p2(0) = '1') else 
        grp_load_fu_127_p1;
    state_ball_dx_5_fu_542_p3 <= 
        ap_const_lv32_FFFFFFFF when (icmp_ln48_fu_523_p2(0) = '1') else 
        grp_load_fu_127_p1;
    state_ball_dy_3_fu_507_p3 <= 
        sub_ln32_fu_502_p2 when (or_ln31_fu_496_p2(0) = '1') else 
        state_ball_dy_2_reg_713;
    state_ball_x_4_fu_316_p2 <= std_logic_vector(unsigned(state_ball_x_cast_fu_288_p1) + unsigned(grp_load_fu_127_p1));
    state_ball_x_5_fu_557_p3 <= 
        ap_const_lv7_28 when (icmp_ln48_fu_523_p2(0) = '1') else 
        add_ln62_reg_754;
    state_ball_x_cast_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_ball_x_fu_84),32));
    state_ball_y_4_fu_322_p2 <= std_logic_vector(unsigned(state_ball_y_fu_88) + unsigned(state_ball_dy_fu_96));
    state_ball_y_5_fu_550_p3 <= 
        ap_const_lv32_C when (icmp_ln48_fu_523_p2(0) = '1') else 
        state_ball_y_4_reg_734;
    state_paddle1_y_3_fu_292_p3 <= 
        ap_const_lv5_14 when (icmp_ln23_reg_698(0) = '1') else 
        trunc_ln23_reg_693;
    state_paddle1_y_cast_fu_179_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_paddle1_y_fu_76),32));
    state_paddle2_y_3_fu_302_p3 <= 
        ap_const_lv5_14 when (icmp_ln23_1_reg_708(0) = '1') else 
        trunc_ln23_1_reg_703;
    state_paddle2_y_cast_fu_183_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_paddle2_y_fu_80),32));
    state_score1_1_fu_534_p3 <= 
        add_ln49_fu_528_p2 when (icmp_ln48_fu_523_p2(0) = '1') else 
        state_score1_fu_100;
    state_score2_1_fu_455_p2 <= std_logic_vector(unsigned(state_score2_fu_104) + unsigned(ap_const_lv32_1));
    sub_ln32_fu_502_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(state_ball_dy_2_reg_713));
    tmp_1_fu_253_p3 <= add_ln21_1_fu_241_p2(31 downto 31);
    tmp_2_fu_328_p4 <= state_ball_x_4_fu_316_p2(31 downto 1);
    tmp_3_fu_438_p3 <= state_ball_x_4_fu_316_p2(31 downto 31);
    tmp_fu_207_p3 <= add_ln21_fu_195_p2(31 downto 31);
    trunc_ln21_1_fu_237_p1 <= input2_TDATA_int_regslice(31 - 1 downto 0);
    trunc_ln21_fu_191_p1 <= input1_TDATA_int_regslice(31 - 1 downto 0);
    trunc_ln23_1_fu_269_p1 <= select_ln22_1_fu_261_p3(5 - 1 downto 0);
    trunc_ln23_fu_223_p1 <= select_ln22_fu_215_p3(5 - 1 downto 0);
    trunc_ln27_fu_312_p1 <= grp_load_fu_127_p1(7 - 1 downto 0);
    xor_ln36_fu_350_p2 <= (icmp_ln36_1_fu_344_p2 xor ap_const_lv1_1);
    xor_ln38_fu_396_p2 <= (icmp_ln38_1_fu_390_p2 xor ap_const_lv1_1);
    zext_ln21_1_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_paddle2_y_fu_80),31));
    zext_ln21_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_paddle1_y_fu_76),31));
    zext_ln36_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_fu_356_p2),32));
    zext_ln38_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_fu_402_p2),32));
    zext_ln62_1_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_paddle2_y_3_fu_302_p3),32));
    zext_ln62_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(state_paddle1_y_3_fu_292_p3),32));
end behav;
