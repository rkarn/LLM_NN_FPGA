// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pingpong_game_pingpong_game,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.758500,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=374,HLS_SYN_LUT=1242,HLS_VERSION=2023_1}" *)

module pingpong_game (
        ap_clk,
        ap_rst_n,
        input1_TDATA,
        input1_TVALID,
        input1_TREADY,
        input2_TDATA,
        input2_TVALID,
        input2_TREADY,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_pp0_stage1 = 3'd4;

input   ap_clk;
input   ap_rst_n;
input  [31:0] input1_TDATA;
input   input1_TVALID;
output   input1_TREADY;
input  [31:0] input2_TDATA;
input   input2_TVALID;
output   input2_TREADY;
output  [255:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;

 reg    ap_rst_n_inv;
reg    input1_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    input2_TDATA_blk_n;
reg    output_r_TDATA_blk_n;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1;
reg    ap_enable_reg_pp0_iter2;
wire   [4:0] trunc_ln23_fu_223_p1;
reg   [4:0] trunc_ln23_reg_693;
reg    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state6_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln23_fu_227_p2;
reg   [0:0] icmp_ln23_reg_698;
wire   [4:0] trunc_ln23_1_fu_269_p1;
reg   [4:0] trunc_ln23_1_reg_703;
wire   [0:0] icmp_ln23_1_fu_273_p2;
reg   [0:0] icmp_ln23_1_reg_708;
reg   [31:0] state_ball_dy_2_reg_713;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
wire   [31:0] zext_ln62_fu_298_p1;
reg   [31:0] zext_ln62_reg_719;
wire   [4:0] state_paddle2_y_3_fu_302_p3;
reg   [4:0] state_paddle2_y_3_reg_724;
wire   [31:0] state_ball_x_4_fu_316_p2;
reg   [31:0] state_ball_x_4_reg_729;
wire   [31:0] state_ball_y_4_fu_322_p2;
reg   [31:0] state_ball_y_4_reg_734;
wire   [0:0] and_ln36_1_fu_378_p2;
reg   [0:0] and_ln36_1_reg_741;
wire   [31:0] state_ball_dx_4_fu_430_p3;
reg   [31:0] state_ball_dx_4_reg_745;
wire   [0:0] tmp_3_fu_438_p3;
reg   [0:0] tmp_3_reg_750;
wire   [6:0] add_ln62_fu_446_p2;
reg   [6:0] add_ln62_reg_754;
wire   [31:0] state_ball_dy_3_fu_507_p3;
reg   [31:0] state_ball_dy_3_reg_759;
wire    ap_CS_fsm_state1;
reg    ap_block_pp0_stage1_subdone;
reg   [4:0] state_paddle1_y_fu_76;
wire   [4:0] state_paddle1_y_3_fu_292_p3;
reg   [4:0] state_paddle2_y_fu_80;
reg   [6:0] state_ball_x_fu_84;
wire   [6:0] state_ball_x_5_fu_557_p3;
reg   [31:0] state_ball_y_fu_88;
wire   [31:0] state_ball_y_5_fu_550_p3;
reg   [31:0] state_ball_dx_fu_92;
wire   [31:0] state_ball_dx_5_fu_542_p3;
reg   [31:0] ap_sig_allocacmp_state_ball_dx_load;
reg   [31:0] grp_load_fu_127_p1;
reg   [31:0] state_ball_dy_fu_96;
reg   [31:0] state_score1_fu_100;
wire   [31:0] state_score1_1_fu_534_p3;
reg   [31:0] state_score2_fu_104;
wire   [31:0] state_score2_1_fu_455_p2;
reg    ap_block_pp0_stage1_01001;
wire   [31:0] state_paddle1_y_cast_fu_179_p1;
wire   [30:0] trunc_ln21_fu_191_p1;
wire   [30:0] zext_ln21_fu_187_p1;
wire   [31:0] add_ln21_fu_195_p2;
wire   [0:0] tmp_fu_207_p3;
wire   [30:0] add_ln22_fu_201_p2;
wire   [30:0] select_ln22_fu_215_p3;
wire   [31:0] state_paddle2_y_cast_fu_183_p1;
wire   [30:0] trunc_ln21_1_fu_237_p1;
wire   [30:0] zext_ln21_1_fu_233_p1;
wire   [31:0] add_ln21_1_fu_241_p2;
wire   [0:0] tmp_1_fu_253_p3;
wire   [30:0] add_ln22_1_fu_247_p2;
wire   [30:0] select_ln22_1_fu_261_p3;
wire   [31:0] state_ball_x_cast_fu_288_p1;
wire   [30:0] tmp_2_fu_328_p4;
wire   [0:0] icmp_ln36_1_fu_344_p2;
wire   [4:0] add_ln36_fu_356_p2;
wire   [31:0] zext_ln36_fu_362_p1;
wire   [0:0] xor_ln36_fu_350_p2;
wire   [0:0] icmp_ln36_2_fu_366_p2;
wire   [0:0] and_ln36_fu_372_p2;
wire   [0:0] icmp_ln36_fu_338_p2;
wire   [31:0] zext_ln62_1_fu_308_p1;
wire   [0:0] icmp_ln38_1_fu_390_p2;
wire   [4:0] add_ln38_fu_402_p2;
wire   [31:0] zext_ln38_fu_408_p1;
wire   [0:0] icmp_ln38_2_fu_412_p2;
wire   [0:0] xor_ln38_fu_396_p2;
wire   [0:0] and_ln38_fu_418_p2;
wire   [0:0] icmp_ln38_fu_384_p2;
wire   [0:0] and_ln38_1_fu_424_p2;
wire   [6:0] trunc_ln27_fu_312_p1;
wire   [0:0] icmp_ln31_fu_486_p2;
wire   [0:0] icmp_ln31_1_fu_491_p2;
wire   [0:0] or_ln31_fu_496_p2;
wire   [31:0] sub_ln32_fu_502_p2;
wire   [0:0] icmp_ln48_fu_523_p2;
wire   [31:0] add_ln49_fu_528_p2;
reg   [2:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_input1_U_apdone_blk;
wire   [31:0] input1_TDATA_int_regslice;
wire    input1_TVALID_int_regslice;
reg    input1_TREADY_int_regslice;
wire    regslice_both_input1_U_ack_in;
wire    regslice_both_input2_U_apdone_blk;
wire   [31:0] input2_TDATA_int_regslice;
wire    input2_TVALID_int_regslice;
reg    input2_TREADY_int_regslice;
wire    regslice_both_input2_U_ack_in;
wire    regslice_both_output_r_U_apdone_blk;
wire   [255:0] output_r_TDATA_int_regslice;
reg    output_r_TVALID_int_regslice;
wire    output_r_TREADY_int_regslice;
wire    regslice_both_output_r_U_vld_out;
reg    ap_condition_159;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

pingpong_game_regslice_both #(
    .DataWidth( 32 ))
regslice_both_input1_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input1_TDATA),
    .vld_in(input1_TVALID),
    .ack_in(regslice_both_input1_U_ack_in),
    .data_out(input1_TDATA_int_regslice),
    .vld_out(input1_TVALID_int_regslice),
    .ack_out(input1_TREADY_int_regslice),
    .apdone_blk(regslice_both_input1_U_apdone_blk)
);

pingpong_game_regslice_both #(
    .DataWidth( 32 ))
regslice_both_input2_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(input2_TDATA),
    .vld_in(input2_TVALID),
    .ack_in(regslice_both_input2_U_ack_in),
    .data_out(input2_TDATA_int_regslice),
    .vld_out(input2_TVALID_int_regslice),
    .ack_out(input2_TREADY_int_regslice),
    .apdone_blk(regslice_both_input2_U_apdone_blk)
);

pingpong_game_regslice_both #(
    .DataWidth( 256 ))
regslice_both_output_r_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDATA_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(output_r_TREADY_int_regslice),
    .data_out(output_r_TDATA),
    .vld_out(regslice_both_output_r_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_both_output_r_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state1)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_reg_750 == 1'd0))) begin
        state_ball_dx_fu_92 <= state_ball_dx_5_fu_542_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_reg_750 == 1'd1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'd1 == and_ln36_1_reg_741)))) begin
        state_ball_dx_fu_92 <= 32'd1;
    end else if (((1'd0 == and_ln36_1_reg_741) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_ball_dx_fu_92 <= state_ball_dx_4_reg_745;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        state_ball_dy_fu_96 <= 32'd1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        state_ball_dy_fu_96 <= state_ball_dy_3_fu_507_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_3_fu_438_p3 == 1'd1)))) begin
        state_ball_x_fu_84 <= 7'd40;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_reg_750 == 1'd0))) begin
        state_ball_x_fu_84 <= state_ball_x_5_fu_557_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_3_fu_438_p3 == 1'd1)))) begin
        state_ball_y_fu_88 <= 32'd12;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_reg_750 == 1'd0))) begin
        state_ball_y_fu_88 <= state_ball_y_5_fu_550_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        state_paddle1_y_fu_76 <= 5'd10;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        state_paddle1_y_fu_76 <= state_paddle1_y_3_fu_292_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        state_paddle2_y_fu_80 <= 5'd10;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        state_paddle2_y_fu_80 <= state_paddle2_y_3_fu_302_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        state_score1_fu_100 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_reg_750 == 1'd0))) begin
        state_score1_fu_100 <= state_score1_1_fu_534_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        state_score2_fu_104 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_3_fu_438_p3 == 1'd1))) begin
        state_score2_fu_104 <= state_score2_1_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (tmp_3_fu_438_p3 == 1'd0))) begin
        add_ln62_reg_754 <= add_ln62_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        and_ln36_1_reg_741 <= and_ln36_1_fu_378_p2;
        state_ball_dy_2_reg_713 <= state_ball_dy_fu_96;
        state_ball_x_4_reg_729 <= state_ball_x_4_fu_316_p2;
        state_ball_y_4_reg_734 <= state_ball_y_4_fu_322_p2;
        state_paddle2_y_3_reg_724 <= state_paddle2_y_3_fu_302_p3;
        tmp_3_reg_750 <= state_ball_x_4_fu_316_p2[32'd31];
        zext_ln62_reg_719[4 : 0] <= zext_ln62_fu_298_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln23_1_reg_708 <= icmp_ln23_1_fu_273_p2;
        icmp_ln23_reg_698 <= icmp_ln23_fu_227_p2;
        state_ball_dy_3_reg_759 <= state_ball_dy_3_fu_507_p3;
        trunc_ln23_1_reg_703 <= trunc_ln23_1_fu_269_p1;
        trunc_ln23_reg_693 <= trunc_ln23_fu_223_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln36_1_fu_378_p2) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        state_ball_dx_4_reg_745 <= state_ball_dx_4_fu_430_p3;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_159)) begin
        if ((1'd1 == and_ln36_1_reg_741)) begin
            ap_sig_allocacmp_state_ball_dx_load = 32'd1;
        end else if ((1'd0 == and_ln36_1_reg_741)) begin
            ap_sig_allocacmp_state_ball_dx_load = state_ball_dx_4_reg_745;
        end else begin
            ap_sig_allocacmp_state_ball_dx_load = state_ball_dx_fu_92;
        end
    end else begin
        ap_sig_allocacmp_state_ball_dx_load = state_ball_dx_fu_92;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (tmp_3_reg_750 == 1'd0))) begin
        grp_load_fu_127_p1 = ap_sig_allocacmp_state_ball_dx_load;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_load_fu_127_p1 = state_ball_dx_fu_92;
    end else begin
        grp_load_fu_127_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input1_TDATA_blk_n = input1_TVALID_int_regslice;
    end else begin
        input1_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input1_TREADY_int_regslice = 1'b1;
    end else begin
        input1_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input2_TDATA_blk_n = input2_TVALID_int_regslice;
    end else begin
        input2_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input2_TREADY_int_regslice = 1'b1;
    end else begin
        input2_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int_regslice;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        output_r_TVALID_int_regslice = 1'b1;
    end else begin
        output_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_1_fu_241_p2 = (input2_TDATA_int_regslice + state_paddle2_y_cast_fu_183_p1);

assign add_ln21_fu_195_p2 = (input1_TDATA_int_regslice + state_paddle1_y_cast_fu_179_p1);

assign add_ln22_1_fu_247_p2 = (trunc_ln21_1_fu_237_p1 + zext_ln21_1_fu_233_p1);

assign add_ln22_fu_201_p2 = (trunc_ln21_fu_191_p1 + zext_ln21_fu_187_p1);

assign add_ln36_fu_356_p2 = (state_paddle1_y_3_fu_292_p3 + 5'd4);

assign add_ln38_fu_402_p2 = (state_paddle2_y_3_fu_302_p3 + 5'd4);

assign add_ln49_fu_528_p2 = (state_score1_fu_100 + 32'd1);

assign add_ln62_fu_446_p2 = (state_ball_x_fu_84 + trunc_ln27_fu_312_p1);

assign and_ln36_1_fu_378_p2 = (icmp_ln36_fu_338_p2 & and_ln36_fu_372_p2);

assign and_ln36_fu_372_p2 = (xor_ln36_fu_350_p2 & icmp_ln36_2_fu_366_p2);

assign and_ln38_1_fu_424_p2 = (icmp_ln38_fu_384_p2 & and_ln38_fu_418_p2);

assign and_ln38_fu_418_p2 = (xor_ln38_fu_396_p2 & icmp_ln38_2_fu_412_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter2 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((input2_TVALID_int_regslice == 1'b0) | (input1_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter2 == 1'b1) & (output_r_TREADY_int_regslice == 1'b0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((input2_TVALID_int_regslice == 1'b0) | (input1_TVALID_int_regslice == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((output_r_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((output_r_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((output_r_TREADY_int_regslice == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter0 = ((input2_TVALID_int_regslice == 1'b0) | (input1_TVALID_int_regslice == 1'b0));
end

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = (output_r_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_block_state6_pp0_stage0_iter2 = (output_r_TREADY_int_regslice == 1'b0);
end

always @ (*) begin
    ap_condition_159 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign icmp_ln23_1_fu_273_p2 = ((select_ln22_1_fu_261_p3 > 31'd20) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_227_p2 = ((select_ln22_fu_215_p3 > 31'd20) ? 1'b1 : 1'b0);

assign icmp_ln31_1_fu_491_p2 = (($signed(state_ball_y_4_reg_734) > $signed(32'd22)) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_486_p2 = (($signed(state_ball_y_4_reg_734) < $signed(32'd1)) ? 1'b1 : 1'b0);

assign icmp_ln36_1_fu_344_p2 = (($signed(state_ball_y_4_fu_322_p2) < $signed(zext_ln62_fu_298_p1)) ? 1'b1 : 1'b0);

assign icmp_ln36_2_fu_366_p2 = (($signed(state_ball_y_4_fu_322_p2) < $signed(zext_ln36_fu_362_p1)) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_338_p2 = (($signed(tmp_2_fu_328_p4) < $signed(31'd1)) ? 1'b1 : 1'b0);

assign icmp_ln38_1_fu_390_p2 = (($signed(state_ball_y_4_fu_322_p2) < $signed(zext_ln62_1_fu_308_p1)) ? 1'b1 : 1'b0);

assign icmp_ln38_2_fu_412_p2 = (($signed(state_ball_y_4_fu_322_p2) < $signed(zext_ln38_fu_408_p1)) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_384_p2 = (($signed(state_ball_x_4_fu_316_p2) > $signed(32'd77)) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_523_p2 = (($signed(state_ball_x_4_reg_729) > $signed(32'd79)) ? 1'b1 : 1'b0);

assign input1_TREADY = regslice_both_input1_U_ack_in;

assign input2_TREADY = regslice_both_input2_U_ack_in;

assign or_ln31_fu_496_p2 = (icmp_ln31_fu_486_p2 | icmp_ln31_1_fu_491_p2);

assign output_r_TDATA_int_regslice = {{{{{{{{{{state_score2_fu_104}, {state_score1_fu_100}}, {state_ball_dy_3_reg_759}}, {state_ball_dx_fu_92}}, {state_ball_y_fu_88}}, {25'd0}}, {state_ball_x_fu_84}}, {27'd0}}, {state_paddle2_y_3_reg_724}}, {zext_ln62_reg_719}};

assign output_r_TVALID = regslice_both_output_r_U_vld_out;

assign select_ln22_1_fu_261_p3 = ((tmp_1_fu_253_p3[0:0] == 1'b1) ? 31'd0 : add_ln22_1_fu_247_p2);

assign select_ln22_fu_215_p3 = ((tmp_fu_207_p3[0:0] == 1'b1) ? 31'd0 : add_ln22_fu_201_p2);

assign state_ball_dx_4_fu_430_p3 = ((and_ln38_1_fu_424_p2[0:0] == 1'b1) ? 32'd4294967295 : grp_load_fu_127_p1);

assign state_ball_dx_5_fu_542_p3 = ((icmp_ln48_fu_523_p2[0:0] == 1'b1) ? 32'd4294967295 : grp_load_fu_127_p1);

assign state_ball_dy_3_fu_507_p3 = ((or_ln31_fu_496_p2[0:0] == 1'b1) ? sub_ln32_fu_502_p2 : state_ball_dy_2_reg_713);

assign state_ball_x_4_fu_316_p2 = (state_ball_x_cast_fu_288_p1 + grp_load_fu_127_p1);

assign state_ball_x_5_fu_557_p3 = ((icmp_ln48_fu_523_p2[0:0] == 1'b1) ? 7'd40 : add_ln62_reg_754);

assign state_ball_x_cast_fu_288_p1 = state_ball_x_fu_84;

assign state_ball_y_4_fu_322_p2 = (state_ball_y_fu_88 + state_ball_dy_fu_96);

assign state_ball_y_5_fu_550_p3 = ((icmp_ln48_fu_523_p2[0:0] == 1'b1) ? 32'd12 : state_ball_y_4_reg_734);

assign state_paddle1_y_3_fu_292_p3 = ((icmp_ln23_reg_698[0:0] == 1'b1) ? 5'd20 : trunc_ln23_reg_693);

assign state_paddle1_y_cast_fu_179_p1 = state_paddle1_y_fu_76;

assign state_paddle2_y_3_fu_302_p3 = ((icmp_ln23_1_reg_708[0:0] == 1'b1) ? 5'd20 : trunc_ln23_1_reg_703);

assign state_paddle2_y_cast_fu_183_p1 = state_paddle2_y_fu_80;

assign state_score1_1_fu_534_p3 = ((icmp_ln48_fu_523_p2[0:0] == 1'b1) ? add_ln49_fu_528_p2 : state_score1_fu_100);

assign state_score2_1_fu_455_p2 = (state_score2_fu_104 + 32'd1);

assign sub_ln32_fu_502_p2 = (32'd0 - state_ball_dy_2_reg_713);

assign tmp_1_fu_253_p3 = add_ln21_1_fu_241_p2[32'd31];

assign tmp_2_fu_328_p4 = {{state_ball_x_4_fu_316_p2[31:1]}};

assign tmp_3_fu_438_p3 = state_ball_x_4_fu_316_p2[32'd31];

assign tmp_fu_207_p3 = add_ln21_fu_195_p2[32'd31];

assign trunc_ln21_1_fu_237_p1 = input2_TDATA_int_regslice[30:0];

assign trunc_ln21_fu_191_p1 = input1_TDATA_int_regslice[30:0];

assign trunc_ln23_1_fu_269_p1 = select_ln22_1_fu_261_p3[4:0];

assign trunc_ln23_fu_223_p1 = select_ln22_fu_215_p3[4:0];

assign trunc_ln27_fu_312_p1 = grp_load_fu_127_p1[6:0];

assign xor_ln36_fu_350_p2 = (icmp_ln36_1_fu_344_p2 ^ 1'd1);

assign xor_ln38_fu_396_p2 = (icmp_ln38_1_fu_390_p2 ^ 1'd1);

assign zext_ln21_1_fu_233_p1 = state_paddle2_y_fu_80;

assign zext_ln21_fu_187_p1 = state_paddle1_y_fu_76;

assign zext_ln36_fu_362_p1 = add_ln36_fu_356_p2;

assign zext_ln38_fu_408_p1 = add_ln38_fu_402_p2;

assign zext_ln62_1_fu_308_p1 = state_paddle2_y_3_fu_302_p3;

assign zext_ln62_fu_298_p1 = state_paddle1_y_3_fu_292_p3;

always @ (posedge ap_clk) begin
    zext_ln62_reg_719[31:5] <= 27'b000000000000000000000000000;
end

endmodule //pingpong_game
