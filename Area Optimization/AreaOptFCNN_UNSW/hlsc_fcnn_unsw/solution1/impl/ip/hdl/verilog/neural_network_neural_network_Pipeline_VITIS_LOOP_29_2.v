// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_29_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        output_0,
        output_0_ap_vld,
        output_9,
        output_9_ap_vld,
        output_8,
        output_8_ap_vld,
        output_7,
        output_7_ap_vld,
        output_6,
        output_6_ap_vld,
        output_5,
        output_5_ap_vld,
        output_4,
        output_4_ap_vld,
        output_3,
        output_3_ap_vld,
        output_2,
        output_2_ap_vld,
        output_1,
        output_1_ap_vld,
        layer2_output_reload,
        layer2_output_1_reload,
        layer2_output_2_reload,
        layer2_output_3_reload,
        layer2_output_4_reload,
        layer2_output_5_reload,
        layer2_output_6_reload,
        layer2_output_7_reload,
        layer2_output_8_reload,
        layer2_output_9_reload,
        conv_i_i13_i_i8,
        sum_4_out,
        sum_4_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] output_0;
output   output_0_ap_vld;
output  [15:0] output_9;
output   output_9_ap_vld;
output  [15:0] output_8;
output   output_8_ap_vld;
output  [15:0] output_7;
output   output_7_ap_vld;
output  [15:0] output_6;
output   output_6_ap_vld;
output  [15:0] output_5;
output   output_5_ap_vld;
output  [15:0] output_4;
output   output_4_ap_vld;
output  [15:0] output_3;
output   output_3_ap_vld;
output  [15:0] output_2;
output   output_2_ap_vld;
output  [15:0] output_1;
output   output_1_ap_vld;
input  [15:0] layer2_output_reload;
input  [15:0] layer2_output_1_reload;
input  [15:0] layer2_output_2_reload;
input  [15:0] layer2_output_3_reload;
input  [15:0] layer2_output_4_reload;
input  [15:0] layer2_output_5_reload;
input  [15:0] layer2_output_6_reload;
input  [15:0] layer2_output_7_reload;
input  [15:0] layer2_output_8_reload;
input  [15:0] layer2_output_9_reload;
input  [15:0] conv_i_i13_i_i8;
output  [15:0] sum_4_out;
output   sum_4_out_ap_vld;

reg ap_idle;
reg output_0_ap_vld;
reg output_9_ap_vld;
reg output_8_ap_vld;
reg output_7_ap_vld;
reg output_6_ap_vld;
reg output_5_ap_vld;
reg output_4_ap_vld;
reg output_3_ap_vld;
reg output_2_ap_vld;
reg output_1_ap_vld;
reg sum_4_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln29_fu_393_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [4:0] f_x_lsb_table_address0;
reg    f_x_lsb_table_ce0;
wire   [10:0] f_x_lsb_table_q0;
wire   [4:0] exp_x_msb_2_m_1_table_address0;
reg    exp_x_msb_2_m_1_table_ce0;
wire   [24:0] exp_x_msb_2_m_1_table_q0;
wire   [4:0] exp_x_msb_1_table_address0;
reg    exp_x_msb_1_table_ce0;
wire   [24:0] exp_x_msb_1_table_q0;
wire    ap_block_pp0_stage0_11001;
reg   [3:0] i_reg_852;
reg   [3:0] i_reg_852_pp0_iter1_reg;
reg   [3:0] i_reg_852_pp0_iter2_reg;
reg   [3:0] i_reg_852_pp0_iter3_reg;
reg   [3:0] i_reg_852_pp0_iter4_reg;
reg   [0:0] icmp_ln29_reg_856;
reg   [0:0] icmp_ln29_reg_856_pp0_iter1_reg;
reg   [0:0] icmp_ln29_reg_856_pp0_iter2_reg;
reg   [0:0] icmp_ln29_reg_856_pp0_iter3_reg;
reg   [0:0] icmp_ln29_reg_856_pp0_iter4_reg;
wire   [0:0] tmp_fu_463_p3;
reg   [0:0] tmp_reg_860;
reg   [0:0] tmp_reg_860_pp0_iter1_reg;
reg   [0:0] tmp_reg_860_pp0_iter2_reg;
reg   [0:0] tmp_reg_860_pp0_iter3_reg;
reg   [0:0] tmp_reg_860_pp0_iter4_reg;
reg   [3:0] tmp_5_reg_866;
reg   [3:0] tmp_5_reg_866_pp0_iter1_reg;
wire   [1:0] trunc_ln217_fu_579_p1;
reg   [1:0] trunc_ln217_reg_871;
reg   [1:0] trunc_ln217_reg_871_pp0_iter1_reg;
reg   [1:0] trunc_ln217_reg_871_pp0_iter2_reg;
wire   [0:0] or_ln202_4_fu_625_p2;
reg   [0:0] or_ln202_4_reg_887;
reg   [0:0] or_ln202_4_reg_887_pp0_iter1_reg;
reg   [0:0] or_ln202_4_reg_887_pp0_iter2_reg;
reg   [0:0] or_ln202_4_reg_887_pp0_iter3_reg;
reg   [0:0] or_ln202_4_reg_887_pp0_iter4_reg;
reg   [10:0] f_x_lsb_reg_892;
reg   [10:0] f_x_lsb_reg_892_pp0_iter2_reg;
reg   [24:0] exp_x_msb_2_m_1_reg_898;
reg   [24:0] exp_x_msb_2_m_1_reg_898_pp0_iter2_reg;
reg   [18:0] trunc_ln3_reg_904;
wire   [24:0] exp_x_msb_2_lsb_m_1_fu_705_p2;
reg   [24:0] exp_x_msb_2_lsb_m_1_reg_914;
reg   [24:0] exp_x_msb_1_reg_919;
reg   [24:0] exp_x_msb_1_reg_919_pp0_iter4_reg;
reg   [24:0] y_lo_s_reg_925;
wire   [15:0] select_ln274_fu_802_p3;
reg   [15:0] select_ln274_reg_930;
wire   [63:0] zext_ln230_fu_591_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln245_fu_596_p1;
wire   [63:0] zext_ln261_fu_673_p1;
reg   [15:0] sum_fu_182;
wire   [15:0] sum_4_fu_823_p2;
wire    ap_loop_init;
reg   [3:0] i_3_fu_186;
wire   [3:0] add_ln29_fu_399_p2;
reg   [3:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0_01001;
wire   [24:0] y_lo_fu_372_p0;
wire   [24:0] y_lo_fu_372_p1;
wire   [15:0] tmp_1_fu_405_p12;
wire  signed [16:0] sext_ln31_fu_431_p1;
wire  signed [16:0] conv_i_i13_i_i8_cast_fu_376_p1;
wire   [16:0] x_fu_435_p2;
wire   [7:0] trunc_ln194_fu_451_p1;
wire   [0:0] tmp_2_fu_471_p3;
wire   [0:0] tmp_3_fu_485_p3;
wire   [0:0] tmp_4_fu_499_p3;
wire   [0:0] tmp_6_fu_513_p3;
wire   [0:0] tmp_7_fu_527_p3;
wire   [3:0] x_l_int_fu_441_p4;
wire   [10:0] x_l_fract_fu_455_p3;
wire   [0:0] icmp_ln202_fu_541_p2;
wire   [0:0] icmp_ln202_1_fu_547_p2;
wire   [4:0] x_lsb_ind_fu_583_p3;
wire   [4:0] x_msb_ind_2_fu_569_p4;
wire   [0:0] xor_ln198_fu_493_p2;
wire   [0:0] overf_fu_479_p2;
wire   [0:0] xor_ln198_1_fu_507_p2;
wire   [0:0] xor_ln198_2_fu_521_p2;
wire   [0:0] or_ln202_1_fu_607_p2;
wire   [0:0] or_ln202_fu_601_p2;
wire   [0:0] and_ln202_fu_553_p2;
wire   [0:0] xor_ln198_3_fu_535_p2;
wire   [0:0] or_ln202_3_fu_619_p2;
wire   [0:0] or_ln202_2_fu_613_p2;
wire   [17:0] exp_x_lsb_m_1_fu_642_p4;
wire   [24:0] f_x_msb_2_lsb_fu_657_p0;
wire   [17:0] f_x_msb_2_lsb_fu_657_p1;
wire   [42:0] f_x_msb_2_lsb_fu_657_p2;
wire   [4:0] x_msb_ind_1_fu_636_p3;
wire   [18:0] shl_ln2_fu_681_p5;
wire   [19:0] zext_ln249_1_fu_691_p1;
wire   [19:0] zext_ln249_fu_678_p1;
wire   [19:0] add_ln249_fu_695_p2;
wire   [24:0] zext_ln249_2_fu_701_p1;
wire   [49:0] y_lo_fu_372_p2;
wire   [0:0] y_fu_728_p2;
wire   [24:0] y_l_fu_741_p2;
wire   [21:0] select_ln190_fu_733_p3;
wire   [21:0] y_1_fu_745_p4;
wire   [21:0] y_2_fu_755_p3;
wire   [1:0] tmp_8_fu_762_p4;
wire   [0:0] tmp_9_fu_778_p3;
wire   [0:0] overf_1_fu_772_p2;
wire   [0:0] overf_2_fu_786_p2;
wire   [15:0] tmp_s_fu_792_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [42:0] f_x_msb_2_lsb_fu_657_p00;
wire   [42:0] f_x_msb_2_lsb_fu_657_p10;
wire   [49:0] y_lo_fu_372_p00;
wire   [49:0] y_lo_fu_372_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_done_reg = 1'b0;
end

neural_network_neural_network_Pipeline_VITIS_LOOP_29_2_f_x_lsb_table_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
f_x_lsb_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(f_x_lsb_table_address0),
    .ce0(f_x_lsb_table_ce0),
    .q0(f_x_lsb_table_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_29_2_exp_x_msb_2_m_1_table_ROM_AUTO_1R #(
    .DataWidth( 25 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
exp_x_msb_2_m_1_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_2_m_1_table_address0),
    .ce0(exp_x_msb_2_m_1_table_ce0),
    .q0(exp_x_msb_2_m_1_table_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_29_2_exp_x_msb_1_table_ROM_AUTO_1R #(
    .DataWidth( 25 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
exp_x_msb_1_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_1_table_address0),
    .ce0(exp_x_msb_1_table_ce0),
    .q0(exp_x_msb_1_table_q0)
);

neural_network_mul_25ns_25ns_50_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 50 ))
mul_25ns_25ns_50_1_1_U400(
    .din0(y_lo_fu_372_p0),
    .din1(y_lo_fu_372_p1),
    .dout(y_lo_fu_372_p2)
);

neural_network_mux_10_4_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_10_4_16_1_1_U401(
    .din0(layer2_output_reload),
    .din1(layer2_output_1_reload),
    .din2(layer2_output_2_reload),
    .din3(layer2_output_3_reload),
    .din4(layer2_output_4_reload),
    .din5(layer2_output_5_reload),
    .din6(layer2_output_6_reload),
    .din7(layer2_output_7_reload),
    .din8(layer2_output_8_reload),
    .din9(layer2_output_9_reload),
    .din10(ap_sig_allocacmp_i),
    .dout(tmp_1_fu_405_p12)
);

neural_network_mul_25ns_18ns_43_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 43 ))
mul_25ns_18ns_43_1_1_U402(
    .din0(f_x_msb_2_lsb_fu_657_p0),
    .din1(f_x_msb_2_lsb_fu_657_p1),
    .dout(f_x_msb_2_lsb_fu_657_p2)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln29_fu_393_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_3_fu_186 <= add_ln29_fu_399_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_3_fu_186 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sum_fu_182 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter6 == 1'b1)) begin
            sum_fu_182 <= sum_4_fu_823_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        exp_x_msb_2_m_1_reg_898 <= exp_x_msb_2_m_1_table_q0;
        f_x_lsb_reg_892 <= f_x_lsb_table_q0;
        i_reg_852 <= ap_sig_allocacmp_i;
        i_reg_852_pp0_iter1_reg <= i_reg_852;
        icmp_ln29_reg_856 <= icmp_ln29_fu_393_p2;
        icmp_ln29_reg_856_pp0_iter1_reg <= icmp_ln29_reg_856;
        or_ln202_4_reg_887_pp0_iter1_reg <= or_ln202_4_reg_887;
        tmp_5_reg_866_pp0_iter1_reg <= tmp_5_reg_866;
        tmp_reg_860_pp0_iter1_reg <= tmp_reg_860;
        trunc_ln217_reg_871_pp0_iter1_reg <= trunc_ln217_reg_871;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        exp_x_msb_1_reg_919_pp0_iter4_reg <= exp_x_msb_1_reg_919;
        exp_x_msb_2_m_1_reg_898_pp0_iter2_reg <= exp_x_msb_2_m_1_reg_898;
        f_x_lsb_reg_892_pp0_iter2_reg <= f_x_lsb_reg_892;
        i_reg_852_pp0_iter2_reg <= i_reg_852_pp0_iter1_reg;
        i_reg_852_pp0_iter3_reg <= i_reg_852_pp0_iter2_reg;
        i_reg_852_pp0_iter4_reg <= i_reg_852_pp0_iter3_reg;
        icmp_ln29_reg_856_pp0_iter2_reg <= icmp_ln29_reg_856_pp0_iter1_reg;
        icmp_ln29_reg_856_pp0_iter3_reg <= icmp_ln29_reg_856_pp0_iter2_reg;
        icmp_ln29_reg_856_pp0_iter4_reg <= icmp_ln29_reg_856_pp0_iter3_reg;
        or_ln202_4_reg_887_pp0_iter2_reg <= or_ln202_4_reg_887_pp0_iter1_reg;
        or_ln202_4_reg_887_pp0_iter3_reg <= or_ln202_4_reg_887_pp0_iter2_reg;
        or_ln202_4_reg_887_pp0_iter4_reg <= or_ln202_4_reg_887_pp0_iter3_reg;
        select_ln274_reg_930 <= select_ln274_fu_802_p3;
        tmp_reg_860_pp0_iter2_reg <= tmp_reg_860_pp0_iter1_reg;
        tmp_reg_860_pp0_iter3_reg <= tmp_reg_860_pp0_iter2_reg;
        tmp_reg_860_pp0_iter4_reg <= tmp_reg_860_pp0_iter3_reg;
        trunc_ln217_reg_871_pp0_iter2_reg <= trunc_ln217_reg_871_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln202_4_reg_887_pp0_iter2_reg == 1'd0))) begin
        exp_x_msb_1_reg_919 <= exp_x_msb_1_table_q0;
        exp_x_msb_2_lsb_m_1_reg_914 <= exp_x_msb_2_lsb_m_1_fu_705_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln29_fu_393_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln202_4_reg_887 <= or_ln202_4_fu_625_p2;
        tmp_5_reg_866 <= {{x_fu_435_p2[10:7]}};
        tmp_reg_860 <= x_fu_435_p2[32'd16];
        trunc_ln217_reg_871 <= trunc_ln217_fu_579_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln202_4_reg_887_pp0_iter1_reg == 1'd0))) begin
        trunc_ln3_reg_904 <= {{f_x_msb_2_lsb_fu_657_p2[42:24]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln202_4_reg_887_pp0_iter3_reg == 1'd0))) begin
        y_lo_s_reg_925 <= {{y_lo_fu_372_p2[49:25]}};
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_393_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter5_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_3_fu_186;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_x_msb_1_table_ce0 = 1'b1;
    end else begin
        exp_x_msb_1_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_x_msb_2_m_1_table_ce0 = 1'b1;
    end else begin
        exp_x_msb_2_m_1_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_x_lsb_table_ce0 = 1'b1;
    end else begin
        f_x_lsb_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_852_pp0_iter4_reg == 4'd0))) begin
        output_0_ap_vld = 1'b1;
    end else begin
        output_0_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_852_pp0_iter4_reg == 4'd1))) begin
        output_1_ap_vld = 1'b1;
    end else begin
        output_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_852_pp0_iter4_reg == 4'd2))) begin
        output_2_ap_vld = 1'b1;
    end else begin
        output_2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_852_pp0_iter4_reg == 4'd3))) begin
        output_3_ap_vld = 1'b1;
    end else begin
        output_3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_852_pp0_iter4_reg == 4'd4))) begin
        output_4_ap_vld = 1'b1;
    end else begin
        output_4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_852_pp0_iter4_reg == 4'd5))) begin
        output_5_ap_vld = 1'b1;
    end else begin
        output_5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_852_pp0_iter4_reg == 4'd6))) begin
        output_6_ap_vld = 1'b1;
    end else begin
        output_6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_852_pp0_iter4_reg == 4'd7))) begin
        output_7_ap_vld = 1'b1;
    end else begin
        output_7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & (i_reg_852_pp0_iter4_reg == 4'd8))) begin
        output_8_ap_vld = 1'b1;
    end else begin
        output_8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1) & ((i_reg_852_pp0_iter4_reg == 4'd9) | ((i_reg_852_pp0_iter4_reg == 4'd10) | ((i_reg_852_pp0_iter4_reg == 4'd11) | ((i_reg_852_pp0_iter4_reg == 4'd12) | ((i_reg_852_pp0_iter4_reg == 4'd13) | ((i_reg_852_pp0_iter4_reg == 4'd14) | (i_reg_852_pp0_iter4_reg == 4'd15))))))))) begin
        output_9_ap_vld = 1'b1;
    end else begin
        output_9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln29_reg_856_pp0_iter4_reg == 1'd1))) begin
        sum_4_out_ap_vld = 1'b1;
    end else begin
        sum_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln249_fu_695_p2 = (zext_ln249_1_fu_691_p1 + zext_ln249_fu_678_p1);

assign add_ln29_fu_399_p2 = (ap_sig_allocacmp_i + 4'd1);

assign and_ln202_fu_553_p2 = (icmp_ln202_fu_541_p2 & icmp_ln202_1_fu_547_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv_i_i13_i_i8_cast_fu_376_p1 = $signed(conv_i_i13_i_i8);

assign exp_x_lsb_m_1_fu_642_p4 = {{{trunc_ln217_reg_871_pp0_iter1_reg}, {5'd0}}, {f_x_lsb_reg_892}};

assign exp_x_msb_1_table_address0 = zext_ln261_fu_673_p1;

assign exp_x_msb_2_lsb_m_1_fu_705_p2 = (exp_x_msb_2_m_1_reg_898_pp0_iter2_reg + zext_ln249_2_fu_701_p1);

assign exp_x_msb_2_m_1_table_address0 = zext_ln245_fu_596_p1;

assign f_x_lsb_table_address0 = zext_ln230_fu_591_p1;

assign f_x_msb_2_lsb_fu_657_p0 = f_x_msb_2_lsb_fu_657_p00;

assign f_x_msb_2_lsb_fu_657_p00 = exp_x_msb_2_m_1_reg_898;

assign f_x_msb_2_lsb_fu_657_p1 = f_x_msb_2_lsb_fu_657_p10;

assign f_x_msb_2_lsb_fu_657_p10 = exp_x_lsb_m_1_fu_642_p4;

assign icmp_ln202_1_fu_547_p2 = ((x_l_fract_fu_455_p3 > 11'd1280) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_541_p2 = ((x_l_int_fu_441_p4 == 4'd7) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_393_p2 = ((ap_sig_allocacmp_i == 4'd10) ? 1'b1 : 1'b0);

assign or_ln202_1_fu_607_p2 = (xor_ln198_2_fu_521_p2 | xor_ln198_1_fu_507_p2);

assign or_ln202_2_fu_613_p2 = (or_ln202_fu_601_p2 | or_ln202_1_fu_607_p2);

assign or_ln202_3_fu_619_p2 = (xor_ln198_3_fu_535_p2 | and_ln202_fu_553_p2);

assign or_ln202_4_fu_625_p2 = (or_ln202_3_fu_619_p2 | or_ln202_2_fu_613_p2);

assign or_ln202_fu_601_p2 = (xor_ln198_fu_493_p2 | overf_fu_479_p2);

assign output_0 = select_ln274_fu_802_p3;

assign output_1 = select_ln274_fu_802_p3;

assign output_2 = select_ln274_fu_802_p3;

assign output_3 = select_ln274_fu_802_p3;

assign output_4 = select_ln274_fu_802_p3;

assign output_5 = select_ln274_fu_802_p3;

assign output_6 = select_ln274_fu_802_p3;

assign output_7 = select_ln274_fu_802_p3;

assign output_8 = select_ln274_fu_802_p3;

assign output_9 = select_ln274_fu_802_p3;

assign overf_1_fu_772_p2 = ((tmp_8_fu_762_p4 != 2'd0) ? 1'b1 : 1'b0);

assign overf_2_fu_786_p2 = (tmp_9_fu_778_p3 | overf_1_fu_772_p2);

assign overf_fu_479_p2 = (tmp_fu_463_p3 ^ tmp_2_fu_471_p3);

assign select_ln190_fu_733_p3 = ((y_fu_728_p2[0:0] == 1'b1) ? 22'd4194303 : 22'd0);

assign select_ln274_fu_802_p3 = ((overf_2_fu_786_p2[0:0] == 1'b1) ? 16'd65535 : tmp_s_fu_792_p4);

assign sext_ln31_fu_431_p1 = $signed(tmp_1_fu_405_p12);

assign shl_ln2_fu_681_p5 = {{{{trunc_ln217_reg_871_pp0_iter2_reg}, {5'd0}}, {f_x_lsb_reg_892_pp0_iter2_reg}}, {1'd0}};

assign sum_4_fu_823_p2 = (select_ln274_reg_930 + sum_fu_182);

assign sum_4_out = sum_fu_182;

assign tmp_2_fu_471_p3 = x_fu_435_p2[32'd11];

assign tmp_3_fu_485_p3 = x_fu_435_p2[32'd12];

assign tmp_4_fu_499_p3 = x_fu_435_p2[32'd13];

assign tmp_6_fu_513_p3 = x_fu_435_p2[32'd14];

assign tmp_7_fu_527_p3 = x_fu_435_p2[32'd15];

assign tmp_8_fu_762_p4 = {{y_2_fu_755_p3[21:20]}};

assign tmp_9_fu_778_p3 = y_2_fu_755_p3[32'd19];

assign tmp_fu_463_p3 = x_fu_435_p2[32'd16];

assign tmp_s_fu_792_p4 = {{y_2_fu_755_p3[18:3]}};

assign trunc_ln194_fu_451_p1 = x_fu_435_p2[7:0];

assign trunc_ln217_fu_579_p1 = x_fu_435_p2[1:0];

assign x_fu_435_p2 = ($signed(sext_ln31_fu_431_p1) - $signed(conv_i_i13_i_i8_cast_fu_376_p1));

assign x_l_fract_fu_455_p3 = {{trunc_ln194_fu_451_p1}, {3'd0}};

assign x_l_int_fu_441_p4 = {{x_fu_435_p2[11:8]}};

assign x_lsb_ind_fu_583_p3 = {{trunc_ln217_fu_579_p1}, {3'd0}};

assign x_msb_ind_1_fu_636_p3 = {{tmp_reg_860_pp0_iter1_reg}, {tmp_5_reg_866_pp0_iter1_reg}};

assign x_msb_ind_2_fu_569_p4 = {{x_fu_435_p2[6:2]}};

assign xor_ln198_1_fu_507_p2 = (tmp_fu_463_p3 ^ tmp_4_fu_499_p3);

assign xor_ln198_2_fu_521_p2 = (tmp_fu_463_p3 ^ tmp_6_fu_513_p3);

assign xor_ln198_3_fu_535_p2 = (tmp_fu_463_p3 ^ tmp_7_fu_527_p3);

assign xor_ln198_fu_493_p2 = (tmp_fu_463_p3 ^ tmp_3_fu_485_p3);

assign y_1_fu_745_p4 = {{y_l_fu_741_p2[24:3]}};

assign y_2_fu_755_p3 = ((or_ln202_4_reg_887_pp0_iter4_reg[0:0] == 1'b1) ? select_ln190_fu_733_p3 : y_1_fu_745_p4);

assign y_fu_728_p2 = (tmp_reg_860_pp0_iter4_reg ^ 1'd1);

assign y_l_fu_741_p2 = (exp_x_msb_1_reg_919_pp0_iter4_reg + y_lo_s_reg_925);

assign y_lo_fu_372_p0 = y_lo_fu_372_p00;

assign y_lo_fu_372_p00 = exp_x_msb_2_lsb_m_1_reg_914;

assign y_lo_fu_372_p1 = y_lo_fu_372_p10;

assign y_lo_fu_372_p10 = exp_x_msb_1_reg_919;

assign zext_ln230_fu_591_p1 = x_lsb_ind_fu_583_p3;

assign zext_ln245_fu_596_p1 = x_msb_ind_2_fu_569_p4;

assign zext_ln249_1_fu_691_p1 = shl_ln2_fu_681_p5;

assign zext_ln249_2_fu_701_p1 = add_ln249_fu_695_p2;

assign zext_ln249_fu_678_p1 = trunc_ln3_reg_904;

assign zext_ln261_fu_673_p1 = x_msb_ind_1_fu_636_p3;

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_29_2
