// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_58_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sext_ln63,
        sext_ln63_1,
        sext_ln63_2,
        sext_ln63_3,
        layer1_output_7_out,
        layer1_output_7_out_ap_vld,
        layer1_output_6_out,
        layer1_output_6_out_ap_vld,
        layer1_output_5_out,
        layer1_output_5_out_ap_vld,
        layer1_output_4_out,
        layer1_output_4_out_ap_vld,
        layer1_output_3_out,
        layer1_output_3_out_ap_vld,
        layer1_output_2_out,
        layer1_output_2_out_ap_vld,
        layer1_output_1_out,
        layer1_output_1_out_ap_vld,
        layer1_output_out,
        layer1_output_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] sext_ln63;
input  [15:0] sext_ln63_1;
input  [15:0] sext_ln63_2;
input  [15:0] sext_ln63_3;
output  [15:0] layer1_output_7_out;
output   layer1_output_7_out_ap_vld;
output  [15:0] layer1_output_6_out;
output   layer1_output_6_out_ap_vld;
output  [15:0] layer1_output_5_out;
output   layer1_output_5_out_ap_vld;
output  [15:0] layer1_output_4_out;
output   layer1_output_4_out_ap_vld;
output  [15:0] layer1_output_3_out;
output   layer1_output_3_out_ap_vld;
output  [15:0] layer1_output_2_out;
output   layer1_output_2_out_ap_vld;
output  [15:0] layer1_output_1_out;
output   layer1_output_1_out_ap_vld;
output  [15:0] layer1_output_out;
output   layer1_output_out_ap_vld;

reg ap_idle;
reg layer1_output_7_out_ap_vld;
reg layer1_output_6_out_ap_vld;
reg layer1_output_5_out_ap_vld;
reg layer1_output_4_out_ap_vld;
reg layer1_output_3_out_ap_vld;
reg layer1_output_2_out_ap_vld;
reg layer1_output_1_out_ap_vld;
reg layer1_output_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln58_fu_299_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [2:0] layer1_weights_0_address0;
reg    layer1_weights_0_ce0;
wire   [8:0] layer1_weights_0_q0;
wire   [2:0] layer1_weights_1_address0;
reg    layer1_weights_1_ce0;
wire  signed [8:0] layer1_weights_1_q0;
wire   [2:0] layer1_weights_2_address0;
reg    layer1_weights_2_ce0;
wire   [8:0] layer1_weights_2_q0;
wire   [2:0] layer1_weights_3_address0;
reg    layer1_weights_3_ce0;
wire   [8:0] layer1_weights_3_q0;
wire   [2:0] layer1_bias_address0;
reg    layer1_bias_ce0;
wire   [6:0] layer1_bias_q0;
wire    ap_block_pp0_stage0_11001;
wire  signed [23:0] sext_ln63_3_cast_fu_275_p1;
reg  signed [23:0] sext_ln63_3_cast_reg_602;
wire  signed [23:0] sext_ln63_2_cast_fu_279_p1;
reg  signed [23:0] sext_ln63_2_cast_reg_607;
wire  signed [23:0] sext_ln63_1_cast_fu_283_p1;
reg  signed [23:0] sext_ln63_1_cast_reg_612;
wire  signed [23:0] sext_ln63_cast_fu_287_p1;
reg  signed [23:0] sext_ln63_cast_reg_617;
reg   [0:0] icmp_ln58_reg_622;
reg   [0:0] icmp_ln58_reg_622_pp0_iter1_reg;
reg   [0:0] icmp_ln58_reg_622_pp0_iter2_reg;
reg   [0:0] icmp_ln58_reg_622_pp0_iter3_reg;
reg   [0:0] icmp_ln58_reg_622_pp0_iter4_reg;
reg   [0:0] icmp_ln58_reg_622_pp0_iter5_reg;
wire   [2:0] trunc_ln58_fu_320_p1;
reg   [2:0] trunc_ln58_reg_626;
reg   [2:0] trunc_ln58_reg_626_pp0_iter1_reg;
reg   [2:0] trunc_ln58_reg_626_pp0_iter2_reg;
reg   [2:0] trunc_ln58_reg_626_pp0_iter3_reg;
reg   [2:0] trunc_ln58_reg_626_pp0_iter4_reg;
reg   [2:0] trunc_ln58_reg_626_pp0_iter5_reg;
reg   [2:0] trunc_ln58_reg_626_pp0_iter6_reg;
reg  signed [8:0] layer1_weights_0_load_reg_655;
reg  signed [8:0] layer1_weights_2_load_reg_665;
reg   [8:0] layer1_weights_3_load_reg_670;
reg  signed [8:0] layer1_weights_3_load_reg_670_pp0_iter2_reg;
reg   [6:0] layer1_bias_load_reg_675;
reg   [6:0] layer1_bias_load_reg_675_pp0_iter2_reg;
reg   [6:0] layer1_bias_load_reg_675_pp0_iter3_reg;
reg   [6:0] layer1_bias_load_reg_675_pp0_iter4_reg;
reg   [6:0] layer1_bias_load_reg_675_pp0_iter5_reg;
reg   [15:0] tmp_13_reg_681;
wire   [14:0] add_ln60_fu_428_p2;
reg   [14:0] add_ln60_reg_711;
wire   [0:0] icmp_ln14_fu_434_p2;
reg   [0:0] icmp_ln14_reg_716;
wire   [63:0] zext_ln58_fu_311_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] i_fu_94;
wire   [3:0] add_ln58_fu_305_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_2;
reg   [15:0] layer1_output_fu_98;
wire   [15:0] zext_ln66_fu_446_p1;
reg   [15:0] layer1_output_1_fu_102;
reg   [15:0] layer1_output_2_fu_106;
reg   [15:0] layer1_output_3_fu_110;
reg   [15:0] layer1_output_4_fu_114;
reg   [15:0] layer1_output_5_fu_118;
reg   [15:0] layer1_output_6_fu_122;
reg   [15:0] layer1_output_7_fu_126;
wire    ap_block_pp0_stage0_01001;
wire  signed [15:0] mul_ln63_fu_336_p1;
wire   [23:0] mul_ln63_fu_336_p2;
wire  signed [23:0] tmp_15_fu_364_p1;
wire   [23:0] grp_fu_522_p3;
wire   [15:0] tmp_15_fu_364_p4;
wire  signed [23:0] tmp_s_fu_381_p1;
wire   [23:0] grp_fu_530_p3;
wire   [15:0] tmp_s_fu_381_p4;
wire  signed [23:0] sum_fu_398_p1;
wire   [23:0] grp_fu_538_p3;
wire  signed [23:0] trunc_ln1_fu_410_p1;
wire   [15:0] zext_ln65_fu_407_p1;
wire   [15:0] sum_fu_398_p4;
wire   [14:0] zext_ln65_1_fu_419_p1;
wire   [14:0] trunc_ln1_fu_410_p4;
wire   [15:0] sum_3_fu_422_p2;
wire   [14:0] layer1_output_8_fu_440_p3;
wire  signed [15:0] grp_fu_522_p1;
wire   [23:0] grp_fu_522_p2;
wire  signed [15:0] grp_fu_530_p1;
wire   [23:0] grp_fu_530_p2;
wire  signed [15:0] grp_fu_538_p1;
wire   [23:0] grp_fu_538_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_0_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
layer1_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_0_address0),
    .ce0(layer1_weights_0_ce0),
    .q0(layer1_weights_0_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_1_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
layer1_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_1_address0),
    .ce0(layer1_weights_1_ce0),
    .q0(layer1_weights_1_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_2_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
layer1_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_2_address0),
    .ce0(layer1_weights_2_ce0),
    .q0(layer1_weights_2_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_3_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
layer1_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_weights_3_address0),
    .ce0(layer1_weights_3_ce0),
    .q0(layer1_weights_3_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_bias_ROM_AUTO_1R #(
    .DataWidth( 7 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
layer1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer1_bias_address0),
    .ce0(layer1_bias_ce0),
    .q0(layer1_bias_q0)
);

neural_network_mul_9s_16s_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 24 ))
mul_9s_16s_24_1_1_U1(
    .din0(layer1_weights_0_load_reg_655),
    .din1(mul_ln63_fu_336_p1),
    .dout(mul_ln63_fu_336_p2)
);

neural_network_mac_muladd_9s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_16s_24ns_24_4_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_1_q0),
    .din1(grp_fu_522_p1),
    .din2(grp_fu_522_p2),
    .ce(1'b1),
    .dout(grp_fu_522_p3)
);

neural_network_mac_muladd_9s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_16s_24ns_24_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_2_load_reg_665),
    .din1(grp_fu_530_p1),
    .din2(grp_fu_530_p2),
    .ce(1'b1),
    .dout(grp_fu_530_p3)
);

neural_network_mac_muladd_9s_16s_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_9s_16s_24ns_24_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer1_weights_3_load_reg_670_pp0_iter2_reg),
    .din1(grp_fu_538_p1),
    .din2(grp_fu_538_p2),
    .ce(1'b1),
    .dout(grp_fu_538_p3)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln58_fu_299_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_94 <= add_ln58_fu_305_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_94 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln60_reg_711 <= add_ln60_fu_428_p2;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        icmp_ln14_reg_716 <= icmp_ln14_fu_434_p2;
        icmp_ln58_reg_622_pp0_iter2_reg <= icmp_ln58_reg_622_pp0_iter1_reg;
        icmp_ln58_reg_622_pp0_iter3_reg <= icmp_ln58_reg_622_pp0_iter2_reg;
        icmp_ln58_reg_622_pp0_iter4_reg <= icmp_ln58_reg_622_pp0_iter3_reg;
        icmp_ln58_reg_622_pp0_iter5_reg <= icmp_ln58_reg_622_pp0_iter4_reg;
        layer1_bias_load_reg_675_pp0_iter2_reg <= layer1_bias_load_reg_675;
        layer1_bias_load_reg_675_pp0_iter3_reg <= layer1_bias_load_reg_675_pp0_iter2_reg;
        layer1_bias_load_reg_675_pp0_iter4_reg <= layer1_bias_load_reg_675_pp0_iter3_reg;
        layer1_bias_load_reg_675_pp0_iter5_reg <= layer1_bias_load_reg_675_pp0_iter4_reg;
        layer1_weights_3_load_reg_670_pp0_iter2_reg <= layer1_weights_3_load_reg_670;
        tmp_13_reg_681 <= {{mul_ln63_fu_336_p2[23:8]}};
        trunc_ln58_reg_626_pp0_iter2_reg <= trunc_ln58_reg_626_pp0_iter1_reg;
        trunc_ln58_reg_626_pp0_iter3_reg <= trunc_ln58_reg_626_pp0_iter2_reg;
        trunc_ln58_reg_626_pp0_iter4_reg <= trunc_ln58_reg_626_pp0_iter3_reg;
        trunc_ln58_reg_626_pp0_iter5_reg <= trunc_ln58_reg_626_pp0_iter4_reg;
        trunc_ln58_reg_626_pp0_iter6_reg <= trunc_ln58_reg_626_pp0_iter5_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        icmp_ln58_reg_622 <= icmp_ln58_fu_299_p2;
        icmp_ln58_reg_622_pp0_iter1_reg <= icmp_ln58_reg_622;
        layer1_bias_load_reg_675 <= layer1_bias_q0;
        layer1_weights_0_load_reg_655 <= layer1_weights_0_q0;
        layer1_weights_2_load_reg_665 <= layer1_weights_2_q0;
        layer1_weights_3_load_reg_670 <= layer1_weights_3_q0;
        sext_ln63_1_cast_reg_612 <= sext_ln63_1_cast_fu_283_p1;
        sext_ln63_2_cast_reg_607 <= sext_ln63_2_cast_fu_279_p1;
        sext_ln63_3_cast_reg_602 <= sext_ln63_3_cast_fu_275_p1;
        sext_ln63_cast_reg_617 <= sext_ln63_cast_fu_287_p1;
        trunc_ln58_reg_626_pp0_iter1_reg <= trunc_ln58_reg_626;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (trunc_ln58_reg_626_pp0_iter6_reg == 3'd1))) begin
        layer1_output_1_fu_102[14 : 0] <= zext_ln66_fu_446_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (trunc_ln58_reg_626_pp0_iter6_reg == 3'd2))) begin
        layer1_output_2_fu_106[14 : 0] <= zext_ln66_fu_446_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (trunc_ln58_reg_626_pp0_iter6_reg == 3'd3))) begin
        layer1_output_3_fu_110[14 : 0] <= zext_ln66_fu_446_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (trunc_ln58_reg_626_pp0_iter6_reg == 3'd4))) begin
        layer1_output_4_fu_114[14 : 0] <= zext_ln66_fu_446_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (trunc_ln58_reg_626_pp0_iter6_reg == 3'd5))) begin
        layer1_output_5_fu_118[14 : 0] <= zext_ln66_fu_446_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (trunc_ln58_reg_626_pp0_iter6_reg == 3'd6))) begin
        layer1_output_6_fu_122[14 : 0] <= zext_ln66_fu_446_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (trunc_ln58_reg_626_pp0_iter6_reg == 3'd7))) begin
        layer1_output_7_fu_126[14 : 0] <= zext_ln66_fu_446_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1) & (trunc_ln58_reg_626_pp0_iter6_reg == 3'd0))) begin
        layer1_output_fu_98[14 : 0] <= zext_ln66_fu_446_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_299_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln58_reg_626 <= trunc_ln58_fu_320_p1;
    end
end

always @ (*) begin
    if (((icmp_ln58_fu_299_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_2 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_94;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_bias_ce0 = 1'b1;
    end else begin
        layer1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_reg_622_pp0_iter5_reg == 1'd1))) begin
        layer1_output_1_out_ap_vld = 1'b1;
    end else begin
        layer1_output_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_reg_622_pp0_iter5_reg == 1'd1))) begin
        layer1_output_2_out_ap_vld = 1'b1;
    end else begin
        layer1_output_2_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_reg_622_pp0_iter5_reg == 1'd1))) begin
        layer1_output_3_out_ap_vld = 1'b1;
    end else begin
        layer1_output_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_reg_622_pp0_iter5_reg == 1'd1))) begin
        layer1_output_4_out_ap_vld = 1'b1;
    end else begin
        layer1_output_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_reg_622_pp0_iter5_reg == 1'd1))) begin
        layer1_output_5_out_ap_vld = 1'b1;
    end else begin
        layer1_output_5_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_reg_622_pp0_iter5_reg == 1'd1))) begin
        layer1_output_6_out_ap_vld = 1'b1;
    end else begin
        layer1_output_6_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_reg_622_pp0_iter5_reg == 1'd1))) begin
        layer1_output_7_out_ap_vld = 1'b1;
    end else begin
        layer1_output_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln58_reg_622_pp0_iter5_reg == 1'd1))) begin
        layer1_output_out_ap_vld = 1'b1;
    end else begin
        layer1_output_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weights_0_ce0 = 1'b1;
    end else begin
        layer1_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weights_1_ce0 = 1'b1;
    end else begin
        layer1_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weights_2_ce0 = 1'b1;
    end else begin
        layer1_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer1_weights_3_ce0 = 1'b1;
    end else begin
        layer1_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln58_fu_305_p2 = (ap_sig_allocacmp_i_2 + 4'd1);

assign add_ln60_fu_428_p2 = (zext_ln65_1_fu_419_p1 + trunc_ln1_fu_410_p4);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_522_p1 = sext_ln63_1_cast_reg_612;

assign grp_fu_522_p2 = {{tmp_13_reg_681}, {8'd0}};

assign grp_fu_530_p1 = sext_ln63_2_cast_reg_607;

assign grp_fu_530_p2 = {{tmp_15_fu_364_p4}, {8'd0}};

assign grp_fu_538_p1 = sext_ln63_3_cast_reg_602;

assign grp_fu_538_p2 = {{tmp_s_fu_381_p4}, {8'd0}};

assign icmp_ln14_fu_434_p2 = (($signed(sum_3_fu_422_p2) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_299_p2 = ((ap_sig_allocacmp_i_2 == 4'd8) ? 1'b1 : 1'b0);

assign layer1_bias_address0 = zext_ln58_fu_311_p1;

assign layer1_output_1_out = layer1_output_1_fu_102;

assign layer1_output_2_out = layer1_output_2_fu_106;

assign layer1_output_3_out = layer1_output_3_fu_110;

assign layer1_output_4_out = layer1_output_4_fu_114;

assign layer1_output_5_out = layer1_output_5_fu_118;

assign layer1_output_6_out = layer1_output_6_fu_122;

assign layer1_output_7_out = layer1_output_7_fu_126;

assign layer1_output_8_fu_440_p3 = ((icmp_ln14_reg_716[0:0] == 1'b1) ? add_ln60_reg_711 : 15'd0);

assign layer1_output_out = layer1_output_fu_98;

assign layer1_weights_0_address0 = zext_ln58_fu_311_p1;

assign layer1_weights_1_address0 = zext_ln58_fu_311_p1;

assign layer1_weights_2_address0 = zext_ln58_fu_311_p1;

assign layer1_weights_3_address0 = zext_ln58_fu_311_p1;

assign mul_ln63_fu_336_p1 = sext_ln63_cast_reg_617;

assign sext_ln63_1_cast_fu_283_p1 = $signed(sext_ln63_1);

assign sext_ln63_2_cast_fu_279_p1 = $signed(sext_ln63_2);

assign sext_ln63_3_cast_fu_275_p1 = $signed(sext_ln63_3);

assign sext_ln63_cast_fu_287_p1 = $signed(sext_ln63);

assign sum_3_fu_422_p2 = (zext_ln65_fu_407_p1 + sum_fu_398_p4);

assign sum_fu_398_p1 = grp_fu_538_p3;

assign sum_fu_398_p4 = {{sum_fu_398_p1[23:8]}};

assign tmp_15_fu_364_p1 = grp_fu_522_p3;

assign tmp_15_fu_364_p4 = {{tmp_15_fu_364_p1[23:8]}};

assign tmp_s_fu_381_p1 = grp_fu_530_p3;

assign tmp_s_fu_381_p4 = {{tmp_s_fu_381_p1[23:8]}};

assign trunc_ln1_fu_410_p1 = grp_fu_538_p3;

assign trunc_ln1_fu_410_p4 = {{trunc_ln1_fu_410_p1[22:8]}};

assign trunc_ln58_fu_320_p1 = ap_sig_allocacmp_i_2[2:0];

assign zext_ln58_fu_311_p1 = ap_sig_allocacmp_i_2;

assign zext_ln65_1_fu_419_p1 = layer1_bias_load_reg_675_pp0_iter5_reg;

assign zext_ln65_fu_407_p1 = layer1_bias_load_reg_675_pp0_iter5_reg;

assign zext_ln66_fu_446_p1 = layer1_output_8_fu_440_p3;

always @ (posedge ap_clk) begin
    layer1_output_fu_98[15] <= 1'b0;
    layer1_output_1_fu_102[15] <= 1'b0;
    layer1_output_2_fu_106[15] <= 1'b0;
    layer1_output_3_fu_110[15] <= 1'b0;
    layer1_output_4_fu_114[15] <= 1'b0;
    layer1_output_5_fu_118[15] <= 1'b0;
    layer1_output_6_fu_122[15] <= 1'b0;
    layer1_output_7_fu_126[15] <= 1'b0;
end

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_58_1
