# ==============================================================
# Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2023.1 (64-bit)
# Tool Version Limit: 2023.05
# Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
# Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
# 
# ==============================================================
package require math::bignum
set SupportDataType 0
proc mysort {alist} { return $alist; }

proc glob-r {{dir .}} {
    # {{{
    set res {}
    foreach i [lsort [glob -nocomplain -dir $dir *]] {
        if {[file type $i]=="directory"} {
            eval lappend  res [glob-r $i]
        } else {
            lappend res $i
        }
    }
    set res
    # }}}
}


proc sort_file_names {files {top_name {}}} {
    if { [llength $files] < 2 } {
        return $files
    }
    set files [lsort -dictionary $files]
    if { $top_name eq "" } {
        return $files
    }
    set top_file ""
    set res {}
    foreach f $files {
        if { [file tail $f] eq $top_name } {
            if { $top_file ne "" } {
                error "Found multiple $top_name files"
            }
            set top_file $f
        } else {
            lappend res $f
        }
    }
    if { $top_file ne "" } {
        lappend res $top_file
    }
    return $res
}
    

## IP Info
set Vendor      "xilinx.com"
set Library     "hls"
set IPName      "mnist_inference"
set Version     "1.0"
set DisplayName "Mnist_inference"
set Revision    "2113735292"
set Description "An IP generated by Vitis HLS"
set Device      "artix7"
set AutoFamily  ""
set Taxonomy    "/VITIS_HLS_IP"
set target_part "xc7a35t-cpg236-1"
set target_lang "verilog"
set has_xpm_memory "0"
set has_blackbox "false"
set sdx_kernel_type "hls"
set xo_kernel_name "mnist_inference"
set xo_kernel_files {}
set enable_xo_gen false
set kernel_xml [file join [pwd] ../kernel/kernel.xml]
set solution_dir "/home/rrk307/home_hls/python_c_hlsc/AreaOptFCNN_MNIST/python_hlsc_fcnn/solution1"
set debug_dir "/home/rrk307/home_hls/python_c_hlsc/AreaOptFCNN_MNIST/python_hlsc_fcnn/solution1/.debug"
set xo_hls_files_dir ""
set hdl_module_list {mnist_inference_mac_muladd_10s_16s_24ns_24_4_1
mnist_inference_mac_muladd_11s_16s_24ns_24_4_1
mnist_inference_mac_muladd_9s_16s_24ns_24_4_1
mnist_inference_mac_muladd_9ns_16s_24ns_24_4_1
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_0_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_1_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_2_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_3_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_4_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_5_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_6_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_7_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_8_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_9_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_10_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_11_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_12_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_13_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_14_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_15_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_16_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_17_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_18_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_19_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_20_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_21_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_22_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_23_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_24_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_25_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_26_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_27_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_28_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_29_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_30_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_31_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_32_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_33_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_34_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_35_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_36_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_37_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_38_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_39_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_40_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_41_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_42_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_43_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_44_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_45_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_46_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_47_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_48_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_49_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_50_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_51_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_52_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_53_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_54_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_55_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_56_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_57_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_58_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_59_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_60_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_61_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_62_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_63_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_64_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_65_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_66_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_67_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_68_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_69_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_70_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_71_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_72_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_73_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_74_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_75_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_76_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_77_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_78_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_79_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_80_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_81_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_82_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_83_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_84_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_85_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_86_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_87_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_88_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_89_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_90_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_91_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_92_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_93_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_94_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_95_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_96_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_97_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_98_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_99_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_100_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_101_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_102_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_103_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_104_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_105_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_106_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_107_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_108_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_109_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_110_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_111_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_112_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_113_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_114_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_115_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_116_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_117_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_118_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_119_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_120_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_121_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_122_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_123_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_124_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_125_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_126_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_127_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_128_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_129_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_130_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_131_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_132_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_133_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_134_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_135_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_136_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_137_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_138_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_139_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_140_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_141_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_142_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_143_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_144_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_145_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_146_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_147_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_148_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_149_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_150_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_151_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_152_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_153_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_154_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_155_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_156_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_157_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_158_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_159_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_160_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_161_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_162_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_163_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_164_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_165_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_166_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_167_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_168_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_169_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_170_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_171_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_172_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_173_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_174_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_175_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_176_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_177_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_178_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_179_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_180_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_181_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_182_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_183_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_184_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_185_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_186_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_187_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_188_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_189_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_190_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_191_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_192_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_193_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_194_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_195_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_196_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_197_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_198_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_199_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_200_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_201_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_202_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_203_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_204_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_205_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_206_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_207_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_208_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_209_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_210_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_211_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_212_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_213_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_214_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_215_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_216_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_217_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_218_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_219_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_220_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_221_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_222_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_223_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_224_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_225_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_226_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_227_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_228_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_229_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_230_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_231_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_232_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_233_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_234_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_235_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_236_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_237_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_238_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_239_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_240_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_241_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_242_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_243_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_244_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_245_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_246_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_247_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_248_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_249_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_250_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_251_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_252_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_253_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_254_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_255_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_256_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_257_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_258_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_259_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_260_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_261_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_262_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_263_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_264_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_265_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_266_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_267_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_268_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_269_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_270_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_271_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_272_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_273_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_274_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_275_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_276_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_277_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_278_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_279_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_280_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_281_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_282_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_283_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_284_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_285_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_286_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_287_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_288_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_289_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_290_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_291_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_292_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_293_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_294_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_295_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_296_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_297_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_298_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_299_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_300_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_301_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_302_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_303_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_304_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_305_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_306_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_307_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_308_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_309_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_310_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_311_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_312_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_313_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_314_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_315_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_316_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_317_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_318_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_319_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_320_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_321_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_322_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_323_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_324_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_325_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_326_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_327_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_328_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_329_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_330_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_331_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_332_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_333_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_334_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_335_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_336_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_337_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_338_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_339_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_340_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_341_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_342_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_343_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_344_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_345_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_346_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_347_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_348_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_349_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_350_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_351_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_352_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_353_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_354_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_355_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_356_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_357_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_358_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_359_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_360_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_361_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_362_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_363_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_364_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_365_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_366_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_367_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_368_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_369_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_370_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_371_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_372_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_373_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_374_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_375_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_376_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_377_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_378_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_379_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_380_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_381_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_382_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_383_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_384_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_385_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_386_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_387_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_388_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_389_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_390_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_391_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_392_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_393_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_394_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_395_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_396_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_397_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_398_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_399_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_400_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_401_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_402_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_403_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_404_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_405_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_406_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_407_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_408_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_409_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_410_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_411_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_412_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_413_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_414_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_415_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_416_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_417_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_418_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_419_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_420_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_421_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_422_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_423_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_424_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_425_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_426_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_427_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_428_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_429_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_430_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_431_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_432_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_433_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_434_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_435_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_436_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_437_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_438_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_439_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_440_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_441_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_442_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_443_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_444_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_445_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_446_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_447_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_448_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_449_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_450_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_451_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_452_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_453_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_454_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_455_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_456_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_457_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_458_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_459_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_460_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_461_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_462_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_463_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_464_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_465_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_466_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_467_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_468_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_469_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_470_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_471_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_472_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_473_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_474_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_475_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_476_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_477_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_478_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_479_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_480_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_481_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_482_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_483_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_484_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_485_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_486_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_487_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_488_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_489_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_490_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_491_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_492_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_493_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_494_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_495_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_496_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_497_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_498_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_499_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_500_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_501_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_502_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_503_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_504_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_505_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_506_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_507_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_508_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_509_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_510_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_511_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_512_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_513_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_514_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_515_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_516_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_517_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_518_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_519_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_520_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_521_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_522_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_523_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_524_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_525_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_526_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_527_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_528_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_529_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_530_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_531_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_532_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_533_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_534_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_535_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_536_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_537_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_538_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_539_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_540_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_541_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_542_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_543_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_544_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_545_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_546_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_547_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_548_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_549_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_550_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_551_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_552_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_553_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_554_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_555_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_556_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_557_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_558_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_559_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_560_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_561_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_562_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_563_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_564_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_565_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_566_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_567_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_568_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_569_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_570_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_571_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_572_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_573_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_574_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_575_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_576_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_577_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_578_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_579_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_580_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_581_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_582_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_583_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_584_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_585_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_586_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_587_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_588_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_589_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_590_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_591_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_592_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_593_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_594_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_595_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_596_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_597_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_598_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_599_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_600_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_601_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_602_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_603_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_604_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_605_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_606_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_607_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_608_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_609_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_610_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_611_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_612_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_613_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_614_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_615_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_616_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_617_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_618_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_619_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_620_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_621_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_622_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_623_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_624_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_625_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_626_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_627_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_628_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_629_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_630_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_631_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_632_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_633_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_634_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_635_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_636_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_637_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_638_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_639_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_640_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_641_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_642_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_643_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_644_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_645_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_646_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_647_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_648_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_649_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_650_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_651_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_652_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_653_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_654_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_655_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_656_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_657_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_658_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_659_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_660_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_661_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_662_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_663_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_664_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_665_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_666_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_667_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_668_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_669_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_670_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_671_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_672_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_673_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_674_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_675_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_676_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_677_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_678_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_679_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_680_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_681_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_682_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_683_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_684_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_685_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_686_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_687_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_688_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_689_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_690_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_691_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_692_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_693_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_694_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_695_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_696_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_697_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_698_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_699_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_700_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_701_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_702_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_703_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_704_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_705_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_706_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_707_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_708_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_709_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_710_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_711_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_712_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_713_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_714_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_715_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_716_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_717_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_718_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_719_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_720_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_721_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_722_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_723_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_724_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_725_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_726_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_727_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_728_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_729_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_730_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_731_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_732_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_733_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_734_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_735_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_736_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_737_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_738_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_739_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_740_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_741_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_742_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_743_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_744_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_745_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_746_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_747_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_748_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_749_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_750_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_751_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_752_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_753_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_754_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_755_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_756_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_757_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_758_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_759_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_760_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_761_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_762_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_763_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_764_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_765_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_766_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_767_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_768_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_769_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_770_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_771_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_772_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_773_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_774_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_775_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_776_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_777_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_778_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_779_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_780_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_781_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_782_RAM_2P_BRAM_1R1W
mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_41_4_fixed_weights_783_RAM_2P_BRAM_1R1W
mnist_inference_flow_control_loop_pipe_sequential_init
mnist_inference_sum_RAM_AUTO_1R1W
mnist_inference_Pipeline_VITIS_LOOP_41_4
mnist_inference
}
set kernel_xo ""

## Variables
set Top "mnist_inference"
set TopNoPrefix "mnist_inference"
set VhdlFiles [sort_file_names [glob -nocomplain hdl/vhdl/*] ${Top}.vhd]
set VerilogFiles [sort_file_names [glob -nocomplain hdl/verilog/*] ${Top}.v]
set SWDriverFiles [sort_file_names [glob-r drivers]]
set SubcoreFiles [sort_file_names [glob -nocomplain subcore/*]]
set DocumentFiles [sort_file_names [glob -nocomplain doc/*]]
set BDFiles [sort_file_names [glob -nocomplain bd/*]]
set ConstraintFiles [sort_file_names [glob -nocomplain constraints/*]]
set MiscFiles [sort_file_names [glob -nocomplain misc/*]]
set Interfaces {
    ap_clk {
        type "clock"
        ctype {
            CLK {
                Type "bool"
                Width "1"
                Bits "1"
            }
        }
        buses ""
        reset "ap_rst"
    }
    ap_rst {
        type "reset"
        polarity "ACTIVE_HIGH"
        ctype {
            RST {
                Type "bool"
                Width "1"
                Bits "1"
            }
        }
    }
    ap_ctrl {
        type "ap_ctrl"
        ctrl_ports "ap_start ap_done ap_idle ap_ready"
        ctype {
            start {
                Type "bool"
                Width "1"
                Bits "1"
            }
            done {
                Type "bool"
                Width "1"
                Bits "1"
            }
            idle {
                Type "bool"
                Width "1"
                Bits "1"
            }
            ready {
                Type "bool"
                Width "1"
                Bits "1"
            }
        }
    }
    input_0_address0 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_0_q0 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_0_address1 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_0_q1 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_1_address0 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_1_q0 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_1_address1 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_1_q1 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_2_address0 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_2_q0 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_2_address1 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_2_q1 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_3_address0 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_3_q0 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_3_address1 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_3_q1 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_4_address0 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_4_q0 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_4_address1 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_4_q1 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_5_address0 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_5_q0 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_5_address1 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_5_q1 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_6_address0 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_6_q0 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_6_address1 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_6_q1 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_7_address0 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_7_q0 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_7_address1 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_7_q1 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_8_address0 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_8_q0 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_8_address1 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_8_q1 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_9_address0 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_9_q0 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_9_address1 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_9_q1 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_10_address0 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_10_q0 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_10_address1 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_10_q1 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_11_address0 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_11_q0 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_11_address1 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_11_q1 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_12_address0 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_12_q0 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_12_address1 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_12_q1 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_13_address0 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_13_q0 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_13_address1 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_13_q1 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_14_address0 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_14_q0 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_14_address1 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_14_q1 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_15_address0 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_15_q0 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    input_15_address1 {
        type "data"
        dir "out"
        width "6"
        ctype {
            DATA {
                Type "null"
                Width "6"
                Bits "6"
            }
        }
    }
    input_15_q1 {
        type "data"
        dir "in"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    output_r_address0 {
        type "data"
        dir "out"
        width "4"
        ctype {
            DATA {
                Type "null"
                Width "4"
                Bits "4"
            }
        }
    }
    output_r_d0 {
        type "data"
        dir "out"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
    output_r_address1 {
        type "data"
        dir "out"
        width "4"
        ctype {
            DATA {
                Type "null"
                Width "4"
                Bits "4"
            }
        }
    }
    output_r_d1 {
        type "data"
        dir "out"
        width "16"
        ctype {
            DATA {
                Type "null"
                Width "16"
                Bits "16"
            }
        }
    }
}

set vivado_ver [version -short]
if {[regexp -nocase {2015\.1.*} $vivado_ver match]} {
    set user_param_type "std_logic_vector"
} else {
    set user_param_type "integer"
}

######################## Helper functions #################
variable user_parameter_order 1

proc add_port {core name dir width param args} {
    # {{{
    catch {ipx::remove_port $name $core}
    set current_port [ipx::add_port $name $core]
    set_property direction $dir $current_port
    if {$width == ""} {
        # std_logic
        set_property type_name "std_logic" $current_port
        set_property is_vector "false" $current_port
    } else {
        # std_logic_vector
        # width should be an integer
        set_property size_left [expr $width - 1] $current_port
        if {$param != ""} {
            if {[string range $param end-1 end] == "/8"} {
                # for strobe
                set param [string range $param 0 end-2]
                set_property size_left_dependency "((spirit:decode(id('MODELPARAM_VALUE.$param')) div 8) - 1)" $current_port
            } else {
                set_property size_left_dependency "(spirit:decode(id('MODELPARAM_VALUE.$param')) - 1)" $current_port
            }
            set_property size_left_resolve_type "dependent" $current_port
        } else {
            set_property size_left_resolve_type "immediate" $current_port
        }
        set_property size_left_format_type "long" $current_port
        set_property size_right 0 $current_port
        set_property size_right_resolve_type "immediate" $current_port
        set_property size_right_format_type "long" $current_port
        set_property type_name "std_logic_vector" $current_port
        set_property is_vector "true" $current_port
    }

    foreach {k v} $args {
        set_property $k $v $current_port
    }

    return $current_port
    # }}}
}

proc add_hdl_parameter {core name type value format resolve_type args} {
    # {{{
    set current_hdl_parameter [ipx::add_hdl_parameter $name $core]
    set_property data_type $type $current_hdl_parameter
    set_property value $value $current_hdl_parameter
    set_property value_format $format $current_hdl_parameter
    set_property value_resolve_type $resolve_type $current_hdl_parameter
    foreach {k v} $args {
        set_property $k $v $current_hdl_parameter
    }

    return $current_hdl_parameter
    # }}}
}

proc add_bus_interface {core name type mode {preferredUsageValue "ALL"} {has_dependant_on "0"} {offset_slave_name "s_axi_AXILiteS"} {master_addrwidth "32"}} {
    # {{{
    set properties ""
    switch -- $type {
        axi4 -
        axi4lite {
            dict set properties bus_type_vlnv "xilinx.com:interface:aximm:1.0"
            dict set properties abstraction_type_vlnv "xilinx.com:interface:aximm_rtl:1.0"
            dict set properties endianness "little"
            dict set properties interface_mode $mode
            if {$mode == "master"} {
                set ::AddressSpace [ipx::add_address_space Data_$name $core]
                if {$master_addrwidth == "64"} {
                    set_property range 16E $::AddressSpace
                    set_property width 64 $::AddressSpace
                } else {
                    set_property range 4G $::AddressSpace
                    set_property width 32 $::AddressSpace
                }
                if {$has_dependant_on == "1"} {
                   set current_addrspace_param [ipx::add_address_space_parameter DEPENDENT_ON $::AddressSpace]
                   set_property value $offset_slave_name $current_addrspace_param
                }
                set current_addrspace_param [ipx::add_address_space_parameter PREFERRED_USAGE $::AddressSpace]
                set_property value $preferredUsageValue $current_addrspace_param
                dict set properties master_address_space_ref Data_$name
            }
            if {$mode == "slave"} {
                set current_memory_map [ipx::add_memory_map $name $core]
                set current_address_block [ipx::add_address_block Reg $current_memory_map]
                set_property width "32" $current_address_block
                set_property access "read-write" $current_address_block
                set_property usage "register" $current_address_block
                set_property base_address "0" $current_address_block
                set_property base_address_format "long" $current_address_block
                set_property base_address_resolve_type "immediate" $current_address_block
                set_property range "65536" $current_address_block
                set_property range_format "long" $current_address_block
                set_property range_resolve_type "generated" $current_address_block
                set current_parameter [ipx::add_address_block_parameter ${name}_base_addr $current_address_block]
                set_property name OFFSET_BASE_PARAM $current_parameter
                set_property value C_[string toupper $name]_BASEADDR $current_parameter
                set current_parameter [ipx::add_address_block_parameter ${name}_high_addr $current_address_block]
                set_property name OFFSET_HIGH_PARAM $current_parameter
                set_property value C_[string toupper $name]_HIGHADDR $current_parameter
                dict set properties slave_memory_map_ref $name
            }
        }
        axi4stream {
            dict set properties bus_type_vlnv "xilinx.com:interface:axis:1.0"
            dict set properties abstraction_type_vlnv "xilinx.com:interface:axis_rtl:1.0"
            dict set properties endianness "little"
            dict set properties interface_mode $mode
        }
        bram {
            dict set properties bus_type_vlnv "xilinx.com:interface:bram:1.0"
            dict set properties abstraction_type_vlnv "xilinx.com:interface:bram_rtl:1.0"
            dict set properties interface_mode $mode
        }
        fifo_read {
            dict set properties bus_type_vlnv "xilinx.com:interface:acc_fifo_read:1.0"
            dict set properties abstraction_type_vlnv "xilinx.com:interface:acc_fifo_read_rtl:1.0"
            dict set properties interface_mode $mode
        }
        fifo_write {
            dict set properties bus_type_vlnv "xilinx.com:interface:acc_fifo_write:1.0"
            dict set properties abstraction_type_vlnv "xilinx.com:interface:acc_fifo_write_rtl:1.0"
            dict set properties interface_mode $mode
        }
        ap_ctrl {
            dict set properties bus_type_vlnv "xilinx.com:interface:acc_handshake:1.0"
            dict set properties abstraction_type_vlnv "xilinx.com:interface:acc_handshake_rtl:1.0"
            dict set properties interface_mode $mode
        }
        clock {
            dict set properties bus_type_vlnv "xilinx.com:signal:clock:1.0"
            dict set properties abstraction_type_vlnv "xilinx.com:signal:clock_rtl:1.0"
            dict set properties interface_mode "slave"
        }
        reset {
            dict set properties bus_type_vlnv "xilinx.com:signal:reset:1.0"
            dict set properties abstraction_type_vlnv "xilinx.com:signal:reset_rtl:1.0"
            dict set properties interface_mode "slave"
        }
        clockenable {
            dict set properties bus_type_vlnv "xilinx.com:signal:clockenable:1.0"
            dict set properties abstraction_type_vlnv "xilinx.com:signal:clockenable_rtl:1.0"
            dict set properties interface_mode "slave"
        }
        interrupt {
            dict set properties bus_type_vlnv "xilinx.com:signal:interrupt:1.0"
            dict set properties abstraction_type_vlnv "xilinx.com:signal:interrupt_rtl:1.0"
            dict set properties interface_mode "master"
        }
        data {
            dict set properties bus_type_vlnv "xilinx.com:signal:data:1.0"
            dict set properties abstraction_type_vlnv "xilinx.com:signal:data_rtl:1.0"
            dict set properties interface_mode $mode
        }
    }

    set current_bus_interface [ipx::add_bus_interface $name $core]
    dict for {k v} $properties {
        set_property $k $v $current_bus_interface
    }

    return $current_bus_interface
    # }}}
}

proc add_port_map {bus name logical physical} {
    # {{{
    set current_port_map [ipx::add_port_map $name $bus]
    set_property logical_name $logical $current_port_map
    set_property physical_name $physical $current_port_map

    return $current_port_map
    # }}}
}

proc add_bus_parameter {bus name value {resolve_type ""}} {
    # {{{
    if {$resolve_type == ""} {
        set resolve_type "immediate"
    }

    set current_bus_parameter [ipx::add_bus_parameter $name $bus]
    set_property value $value $current_bus_parameter
    set_property value_resolve_type $resolve_type $current_bus_parameter

    return $current_bus_parameter
    # }}}
}

proc add_user_parameter {core name display_name value format resolve_type args} {
    # {{{
    upvar user_parameter_order order
    incr order
    
    set current_user_parameter [ipx::add_user_parameter $name $core]
    set_property order $order $current_user_parameter
    set_property value $value $current_user_parameter
    set_property display_name $display_name $current_user_parameter
    set_property value_format $format $current_user_parameter
    set_property value_resolve_type $resolve_type $current_user_parameter
    foreach {k v} $args {
        set_property $k $v $current_user_parameter
    }

    return $current_user_parameter
    # }}}
}

proc create_datatype { ctype {bitoffset 0} {is_data 0}} {
    # {{{
    dict with ctype {}

    switch -- [lindex $Type 0] {
        integer {
            # integer
            if {[lindex $Type 1] == "signed"} {
                set signed true
            } else {
                set signed false
            }
            if {$is_data} {
               return [iptypes::datatype::new -type integer -bitwidth $Bits -bitoffset $bitoffset -signed $signed]
            } else {
               return [iptypes::datatype::new -type integer -bitwidth $Width -bitoffset $bitoffset -signed $signed]
            }
        }

        real {
            lassign $Type type sub_type signed frac_width
            if {$sub_type == "fixed"} {
                # real - fixed
                if {$signed == "signed"} {
                    set signed true
                } else {
                    set signed false
                }
                return [iptypes::datatype::new -type real -bitwidth $Width -bitoffset $bitoffset -fixed \
                    -signed $signed -fractwidth $frac_width]
            } else {
                # real -float
                set sigwidth [expr ($Width == 64)? 53 : 24]
                return [iptypes::datatype::new -type real -bitwidth $Width -bitoffset $bitoffset -float -sigwidth $sigwidth]
            }
        }

        complex {
            dict with Element {}

            if {$Bits % 8 != 0} {
                set ::__warn_sub_field__ 1
            }

            switch -- [lindex $Type 0] {
                integer {
                    # integer
                    if {[lindex $Type 1] == "signed"} {
                        set signed true
                    } else {
                        set signed false
                    }
                    return [iptypes::datatype::new -type complex -bitwidth $Width -stride $Bits -bitoffset $bitoffset -integer -signed $signed]
                }

                real {
                    lassign $Type type sub_type signed frac_width
                    if {$sub_type == "fixed"} {
                        # real - fixed
                        if {$signed == "signed"} {
                            set signed true
                        } else {
                            set signed false
                        }
                        return [iptypes::datatype::new -type complex -bitwidth $Width -stride $Bits -bitoffset $bitoffset -real -fixed \
                            -signed $signed -fractwidth $frac_width]
                    } else {
                        # real -float
                        set sigwidth [expr ($Width == 64)? 53 : 24]
                        return [iptypes::datatype::new -type complex -bitwidth $Width -stride $Bits -bitoffset $bitoffset -real -float -sigwidth $sigwidth]
                    }
                }
            }
        }

        struct {
            set type [iptypes::datatype::new -type struct -bitoffset $bitoffset]

            set i 0
            dict for {field_name field_type} $Fields {
                iptypes::struct::new_field type -name $field_name -datatype [create_datatype $field_type $i]
                incr i [dict get $field_type Bits]
            }

            return $type
        }

        array {
            return [iptypes::datatype::new -type array_type -bitoffset $bitoffset -size $Dimension \
                -stride [dict get $Element Bits] -datatype [create_datatype $Element]]
        }

        null    -
        default {
            # null
            return [iptypes::datatype::new -bitwidth $Width -bitoffset $bitoffset]
        }
    }
    # }}}
}

proc add_bus_datatype {bus ctype {is_data 0}} {
    # {{{
    if {$::SupportDataType && $ctype != ""} {
        set layered_metadata ""
        dict for {key value} $ctype {
            dict set layered_metadata $iptypes::vlnv $key [create_datatype $value 0 $is_data]
        }
        add_bus_parameter $bus LAYERED_METADATA $layered_metadata generated
    }
    # }}}
}

proc set_dependent { name value obj } {
    # {{{
   # are there any operators in the value field?
   # No, set as immediate
   # Yes, set as xpath expr
   if { [string first < $value ] != -1 || \
        [string first > $value ] != -1 || \
        [string first - $value ] != -1 || \
        [string first + $value ] != -1 || \
        [string first / $value ] != -1 || \
        [string first * $value ] != -1 } {
     set_property ${name}_dependency [ ipx::get_xpath_expression $value [ipx::current_core] ] $obj
     set_property ${name}_format long $obj
   } else {
     set_property ${name} $value $obj
     set_property ${name}_format long $obj
   }
    # }}}
}

proc set_access { access obj {is_field 0}} {
    # {{{
  # read-only, write-only, read-write, writeOnce, read-writeOnce 
  if        { $access eq "RW" } {
             set_property access "read-write" $obj
             if {$is_field} {
               set_property modified_write_value modify $obj 
             }
  } elseif { $access eq "R" } {
             set_property access "read-only" $obj
             if {$is_field} {
               set_property read_action modify $obj 
             }
  } elseif { $access eq "W" } {
             set_property access "write-only" $obj
  } elseif { $access eq "WO" } {
             set_property access "writeOnce" $obj
  } elseif { $access eq "RWO" } {
             set_property access "read-writeOnce" $obj
  } elseif { $access eq "RTOW" } {
             set_property access "read-only" $obj 
             if {$is_field} {
               set_property modified_write_value oneToToggle $obj 
               set_property read_action modify $obj 
             }
  } else {
    puts "Unmatched access type \"$access\""
  }

    # }}}
}

proc add_registers {registers memory_map_name} {
    # {{{
    set memory_maps [ ipx::get_memory_maps -quiet -of_objects [ ipx::current_core ] ] 
    if { $memory_maps eq "" } {
      set slaves_axi [ ipx::get_bus_interfaces -filter { ABSTRACTION_TYPE_NAME==aximm_rtl && interface_mode==slave } -of_objects [ ipx::current_core ] ]
      set slave_axi [ lindex $slaves_axi 0  ] 
      set memory_map [ ipx::add_memory_map [ get_property name $slave_axi ] [ipx::current_core ] ]
      # and point back to this memory map
      set_property  slave_memory_map_ref [get_property name $memory_map ] $slave_axi 
    } else {
      foreach memory_map_item $memory_maps {
        set memory_map_item_name [get_property name $memory_map_item]
        if {$memory_map_name eq $memory_map_item_name} {
          set memory_map $memory_map_item
        }
      }
    }
    
    set address_blocks [ ipx::get_address_blocks -quiet -of_objects $memory_map ]
    if { $address_blocks eq "" } {
      set address_block [ ipx::add_address_block [get_property name $memory_map ] $memory_map ]
      set_property base_address 0 $address_block 
      set_property range 4096 $address_block 
      set_property width 8 $address_block 
    } else {
      set address_block [ lindex $address_blocks 0 ]
    }
    
    
    foreach reg $registers {
      set offset [ lindex $reg 0 ]
      set name   [ lindex $reg 1 ]
      set access [ lindex $reg 2 ]
      set reset_val [ lindex $reg 3 ]
      set descr  [ lindex $reg 4 ]
      set fields  [ lindex $reg 5 ]
    
    #puts "Register line: [join $reg \"]"
    
      # compare offset and address range, if offset > default address rang(64k), we should expand the address range
      set address_range  [get_property range $address_block]
      set offset_value [::math::bignum::tostr  [ ::math::bignum::fromstr $offset ] ]
      while {$address_range <= $offset_value} {
          set address_range [expr $address_range * 2]
      }
    
      set_property range $address_range $address_block
      set ipx_reg [ ipx::add_register $name $address_block ]
      set_property address_offset $offset_value $ipx_reg 
      set_property size 32 $ipx_reg 
      set_property size_format long $ipx_reg 
      set_property reset_value  [::math::bignum::tostr [ ::math::bignum::fromstr $reset_val ] ] $ipx_reg 
      set_property reset_value_format long $ipx_reg 
      set_property description $descr $ipx_reg 
      set_property display_name $name $ipx_reg 
    
      # read-only, write-only, read-write, writeOnce, read-writeOnce 
      set_access $access $ipx_reg
    
      foreach field $fields {
    #puts "  field line: [join $field \"]"
         set offset [ lindex $field 0 ]
         set width [ lindex $field 1 ]
         set name [ lindex $field 2 ]
         set access [ lindex $field 3 ]
         set reset_value [ lindex $field 4 ]
         set description [ lindex $field 5 ]
    
         set ipx_field [ ipx::add_field $name $ipx_reg ]
         set_property bit_offset $offset $ipx_field
    
         set_dependent bit_width $width $ipx_field
         set_access $access $ipx_field 1
    
         #  set_property reset_value  [::math::bignum::tostr [ ::math::bignum::fromstr $offset ] ] $ipx_field 
         # set_property reset_value_format long $ipx_field 
         set_property description $description $ipx_field 
      }
    
    }

    # }}}
}

proc add_memories {memories memory_map_name} {
    # {{{
    set memory_maps [ ipx::get_memory_maps -quiet -of_objects [ ipx::current_core ] ] 
    if { $memory_maps eq "" } {
      set slaves_axi [ ipx::get_bus_interfaces -filter { ABSTRACTION_TYPE_NAME==aximm_rtl && interface_mode==slave } -of_objects [ ipx::current_core ] ]
      set slave_axi [ lindex $slaves_axi 0  ] 
      set memory_map [ ipx::add_memory_map [ get_property name $slave_axi ] [ipx::current_core ] ]
      # and point back to this memory map
      set_property  slave_memory_map_ref [get_property name $memory_map ] $slave_axi 
    } else {
      foreach memory_map_item $memory_maps {
        set memory_map_item_name [get_property name $memory_map_item]
        if {$memory_map_name eq $memory_map_item_name} {
          set memory_map $memory_map_item
        }
      }
    }

    set address_blocks [ ipx::get_address_blocks -quiet -of_objects $memory_map ]
    if { $address_blocks eq "" } {
      set address_block [ ipx::add_address_block [get_property name $memory_map ] $memory_map ]
      set_property base_address 0 $address_block 
      set_property range 4096 $address_block 
      set_property width 8 $address_block 
    } else {
      set address_block [ lindex $address_blocks 0 ]
    }
    
    
    dict for {array_name details} $memories {
      dict with details {}
      set offset $base_address
      set name   Memory_${array_name}
      set access RW
      set reset_val 0
      set descr  "Memory $array_name"
    
      # compare offset and address range, if offset > default address rang(64k), we should expand the address range
      set address_range  [get_property range $address_block]
      set offset_value [::math::bignum::tostr  [ ::math::bignum::fromstr $offset ] ]
      set address_range_tmp [expr $offset_value + $range ]
      while {$address_range < $address_range_tmp} {
          set address_range [expr $address_range * 2]
      }
    
      set_property range $address_range $address_block
      set ipx_reg [ ipx::add_register $name $address_block ]
      set_property address_offset $offset_value $ipx_reg 
      set_property size $range $ipx_reg 
      set_property size_format long $ipx_reg 
      set_property reset_value  [::math::bignum::tostr [ ::math::bignum::fromstr $reset_val ] ] $ipx_reg 
      set_property reset_value_format long $ipx_reg 
      set_property description $descr $ipx_reg 
      set_property display_name $name $ipx_reg 
    
      # read-only, write-only, read-write, writeOnce, read-writeOnce 
      set_access $access $ipx_reg
    }
    # }}}
}

proc getFiles {path} {
    # {{{
    set files ""
    foreach item [glob -nocomplain [file join $path *]] {
        if {[file isdir $item]} {
            set files [concat $files [getFiles $item]]
        } else {
            lappend files $item
        }
    }

    return [lsort $files]
    # }}}
}
###########################################################

## Enter IP directory
cd [file dir [info script]]

## Generate sub cores
set IPs ""
set IPFiles ""
if {$SubcoreFiles != ""} {
    set ipdir "hdl/ip"
    file delete -force $ipdir
    file mkdir $ipdir

    set prj "tmp"
    create_project -part $target_part -force $prj
    set_property target_language $target_lang [current_project]
    if {[regexp -nocase {2018\.4.*} $vivado_ver match]} {
        set_property coreContainer.alwaysCreateXCI 1 [current_project]
    }


    set vlnvpat1 {(?n)componentRef.*vendor="(.+)".*\s*.*library="(.+)".*\s*.*name="(.+)".*\s*.*version="(.+)".*\s*.*}
    set vlnvpat2 {(?n)\s*"component_reference"\s*:\s*"([^"]*)".*}  
    
    set COE_DIR ../../../..
    foreach ipfile $SubcoreFiles {
        set ipname [file root [file tail $ipfile]]
        #if {[string match *_ap_* $ipname]} {
        #    set ipname [string range $ipname 0 end-3]
        #}

        source $ipfile
        if {[regexp -nocase {2018\.4.*} $vivado_ver match]} {
            extract_files -force -base_dir "./${prj}srcs/sources_1/ip" [get_files -all -of [get_ips $ipname]]
            file copy -force ./${prj}.srcs/sources_1/ip/$ipname.xci ./${prj}srcs/sources_1/ip/$ipname/.
            set prj_root "${prj}srcs"
        } else {
            set prj_root "${prj}.*"
        }

        set rtlfiles [glob -nocomplain ${prj_root}/sources_1/ip/$ipname/synth/*]
        if { ![llength $rtlfiles] } { error "No RTL output found for subcore $ipname from $ipfile" }
        foreach rtl $rtlfiles {
            file copy $rtl $ipdir
        }

        set rtlfiles [glob -nocomplain ${prj_root}/sources_1/ip/$ipname/*.mif]
        foreach rtl $rtlfiles {
            file copy $rtl $ipdir
        }

        set xcifile [glob -nocomplain ${prj_root}/sources_1/ip/$ipname/$ipname.xci]
        if {![file isfile $xcifile]} {
            continue
        }

        set f [open $xcifile r]
        set rawxci [read $f]
        close $f

        if {[regexp $vlnvpat2 $rawxci m vlnv]} {
            lappend IPs $vlnv
        } elseif {[regexp $vlnvpat1 $rawxci m vendor library name version]} {
            lappend IPs "$vendor:$library:$name:$version"
        }
    
    }

    close_project
    
    set IPs [lsort -u $IPs]
    set IPFiles [glob -nocomplain $ipdir/*]
}

## Basic info
set vivado_ver [version -short]
set core [ipx::create_core $Vendor $Library $IPName $Version]
set_property definition_source HLS [ipx::current_core]
set_property display_name $DisplayName $core
set_property core_revision $Revision $core
set_property description $Description $core
set_property taxonomy $Taxonomy $core
if { $AutoFamily ne "" } {
  set_property auto_family_support_level $AutoFamily $core
} else {
  set_property supported_families [list $Device Pre-Production] $core
}

if {$has_xpm_memory} {
  set_property xpm_libraries {XPM_MEMORY} $core
}
if {$sdx_kernel_type ne ""} {
  set_property -quiet sdx_kernel true $core
  set_property -quiet sdx_kernel_type $sdx_kernel_type $core
}
## Add verilog files
if {[llength $VerilogFiles] > 0} {
    # synthesis
    set group [ipx::add_file_group xilinx_verilogsynthesis $core]
    foreach f [concat $IPFiles $ConstraintFiles $VerilogFiles] {
        set current_file [ipx::add_file $f $group]
        if {[file ext $f] == ".v" && $has_blackbox == "true"} {
            set_property type "systemVerilogSource" $current_file
        }
        if {[file ext $f] == ".dat" || [file ext $f] == ".mif"} {
            set_property type "mif" $current_file
        }
        if {[file ext $f] == ".xdc"} {
            if {[regexp -nocase {.*_ooc.xdc} $f]} {
                set_property used_in {out_of_context} $current_file
            } else {
                set_property used_in {synthesis implementation} $current_file
            }
        }
    }
    set_property model_name $Top $group
    if {$IPs != ""} {
        set_property component_subcores $IPs $group
    }

    # behavioral simulation
    set group [ipx::add_file_group xilinx_verilogbehavioralsimulation $core]
    foreach f [concat $VerilogFiles $IPFiles] {
        set current_file [ipx::add_file $f $group]
        if {[file ext $f] == ".v" && $has_blackbox == "true"} {
            set_property type "systemVerilogSource" $current_file
        }
        if {[file ext $f] == ".dat" || [file ext $f] == ".mif"} {
            set_property type "mif" $current_file
        }
    }
    set_property model_name $Top $group
    if {$IPs != ""} {
        set_property component_subcores $IPs $group
    }

}

## Add vhdl files
if {[llength $VhdlFiles] > 0} {
    # synthesis
    set group [ipx::add_file_group xilinx_vhdlsynthesis $core]
    foreach f [concat $IPFiles $ConstraintFiles $VhdlFiles] {
        set current_file [ipx::add_file $f $group]
        if {[file ext $f] == ".xdc"} {
            if {[regexp -nocase {.*_ooc.xdc} $f]} {
                set_property used_in {out_of_context} $current_file
            } else {
                set_property used_in {synthesis implementation} $current_file
            }
        }
    }
    set_property model_name $Top $group
    if {$IPs != ""} {
        set_property component_subcores $IPs $group
    }

    # behavioral simulation
    set group [ipx::add_file_group xilinx_vhdlbehavioralsimulation $core]
    foreach f [concat $VhdlFiles $IPFiles] {
        ipx::add_file $f $group
    }
    set_property model_name $Top $group
    if {$IPs != ""} {
        set_property component_subcores $IPs $group
    }

}

## Software Drivers Files
if {[llength $SWDriverFiles] > 0} {
    set current_file_group [ipx::add_file_group xilinx_softwaredriver $core]
    foreach f $SWDriverFiles {
        set current_file [ipx::add_file $f $current_file_group]
        if {[file ext $f] == ".mdd"} {
            set_property type {driver_mdd} $current_file
        } elseif {[file ext $f] == ".tcl"} {
            set_property type {driver_tcl} $current_file
        } else {
            set_property type {driver_src} $current_file
        }
    }
}

## Add document files
if {[llength $DocumentFiles] > 0} {
    set group [ipx::add_file_group xilinx_documentation $core]
    foreach f $DocumentFiles {
        ipx::add_file $f $group
    }
}

## Add misc files
if {[llength $MiscFiles] > 0} {
    set group [ipx::add_file_group xilinx_miscfiles $core]
    foreach f $MiscFiles {
        ipx::add_file $f $group
    }
}

## BD files
if {[llength $BDFiles] > 0} {
    set group [ipx::add_file_group xilinx_block_diagram $core]
    foreach f $BDFiles {
        ipx::add_file $f $group
    }
}

## Import ports
ipx::add_ports_from_hdl \
    -top_level_hdl_file hdl/vhdl/$Top.vhd \
    -top_module_name $Top \
    -quiet \
    $core

## Interfaces
foreach interface_name [mysort [dict keys $Interfaces]] {
    set interface_detail [dict get $Interfaces $interface_name]
    set ctype ""
    dict with interface_detail {}
    switch -nocase -- $type {
        axi4lite {
            # {{{
            ## direction
            if {$mode == "master"} {
                set dir0 "out"
                set dir1 "in"
            } else {
                set dir0 "in"
                set dir1 "out"
            }

            ## address width
            if {$mode == "master"} {
                set addr_bits 32
            } else {
               set addr_bits [dict get $port_width AWADDR]
            }

            ## rtl ports
            set rtl_ports [list \
                [list AWADDR  $dir0 $addr_bits "${param_prefix}_ADDR_WIDTH"] \
                [list AWVALID $dir0 "" ""] \
                [list AWREADY $dir1 "" ""] \
                [list WDATA   $dir0 $data_width "${param_prefix}_DATA_WIDTH"] \
                [list WSTRB   $dir0 4  "${param_prefix}_DATA_WIDTH/8"] \
                [list WVALID  $dir0 "" ""] \
                [list WREADY  $dir1 "" ""] \
                [list BRESP   $dir1 2  ""] \
                [list BVALID  $dir1 "" ""] \
                [list BREADY  $dir0 "" ""] \
                [list ARADDR  $dir0 $addr_bits "${param_prefix}_ADDR_WIDTH"] \
                [list ARVALID $dir0 "" ""] \
                [list ARREADY $dir1 "" ""] \
                [list RDATA   $dir1 $data_width "${param_prefix}_DATA_WIDTH"] \
                [list RRESP   $dir1 2  ""] \
                [list RVALID  $dir1 "" ""] \
                [list RREADY  $dir0 "" ""] \
            ]

            ## rtl parameters
            set rtl_parameters [list \
                [list ADDR_WIDTH "integer" $addr_bits "long" "generated"] \
                [list DATA_WIDTH "integer" $data_width "long" "immediate"] \
            ]

            ## bus parameters
            set bus_parameters [list \
                [list ADDR_WIDTH $addr_bits] \
                [list DATA_WIDTH $data_width] \
                [list PROTOCOL AXI4LITE] \
                [list READ_WRITE_MODE READ_WRITE] \
            ]

            ## axi4
            set current_bus_interface [add_bus_interface $core $interface_name axi4lite $mode]

            ## ports
            foreach rtl_port [mysort $rtl_ports] {
                lassign $rtl_port port_name port_dir port_width port_param
                add_port $core ${port_prefix}_$port_name $port_dir $port_width $port_param
            }

            ## rtl parameters
            foreach rtl_parameter [mysort $rtl_parameters] {
                set pargs [lassign $rtl_parameter pname ptype pvalue pformat presolve_type]
                eval add_hdl_parameter \$core \${param_prefix}_\$pname \$ptype \$pvalue \$pformat \$presolve_type $pargs
            }

            ## bus parameters
            foreach bus_parameter [mysort $bus_parameters] {
                lassign $bus_parameter pname pvalue
                add_bus_parameter $current_bus_interface $pname $pvalue
            }

            # port map
            foreach rtl_port [mysort $rtl_ports] {
                set port_name [lindex $rtl_port 0]
                add_port_map $current_bus_interface $port_name $port_name ${port_prefix}_${port_name}
            }

            # data type
            add_bus_datatype $current_bus_interface $ctype

            # add registers
            if {[info exists registers] && $registers!=""} {
               add_registers $registers $interface_name
            }

            # add memories
            if {[info exists memories] && $memories!=""} {
               add_memories $memories $interface_name
            }
            # }}}
        }

        axi4stream {
            # {{{
            ## ports
            if {$mode == "master"} {
                set dir0 "out"
                set dir1 "in"
            } else {
                set dir0 "in"
                set dir1 "out"
            }

            ## bus parameters
            set bus_parameters ""


            if {[dict exists $ports TDATA]} {
                lappend bus_parameters [list TDATA_NUM_BYTES [expr [dict get $ports TDATA] / 8]]
            }

            if {[dict exists $ports TDEST]} {
                lappend bus_parameters [list TDEST_WIDTH [dict get $ports TDEST]]
            }

            if {[dict exists $ports TID]} {
                lappend bus_parameters [list TID_WIDTH [dict get $ports TID]]
            }

            if {[dict exists $ports TUSER]} {
                lappend bus_parameters [list TUSER_WIDTH [dict get $ports TUSER]]
            } else {
                lappend bus_parameters [list TUSER_WIDTH 0]
            }

            set layered_metadata ""
            if {$SupportDataType && [dict exists $ctype TDATA]} {
                set ::__warn_sub_field__ 0
                dict set layered_metadata $iptypes::vlnv TDATA [create_datatype [dict get $ctype TDATA]]
                if {$::__warn_sub_field__} {
                    puts "TDATA of AXI4-Stream interface '$interface_name' contains sub-fields not aligned to byte boundaries. The resulting layout may not be compatible with the connecting interface."
                }
                if {[dict exists $ctype TDATA Name]} {
                    dict set layered_metadata $iptypes::vlnv TDATA datatype name value [dict get $ctype TDATA Name]
                }
            }
            if {$SupportDataType && [dict exists $ctype TUSER]} {
                set ::__warn_sub_field__ 0
                dict set layered_metadata $iptypes::vlnv TUSER [create_datatype [dict get $ctype TUSER]]
                if {$::__warn_sub_field__} {
                    puts "TUSER of AXI4-Stream interface '$interface_name' contains sub-fields not aligned to byte boundaries. The resulting layout may not be compatible with the connecting interface."
                }
            }
            lappend bus_parameters [list LAYERED_METADATA $layered_metadata generated]

            # tvalid
            add_port $core ${port_prefix}_TVALID $dir0 "" ""

            # tready
            if {$has_tready} {
                add_port $core ${port_prefix}_TREADY $dir1 "" ""
            }

            # other ports
            set tieoff {TUSER 0 TDEST 0 TID 0 TLAST 0 TKEEP 1 TSTRB 1}
            set port_names [mysort [dict keys $ports]]
            foreach port_name $port_names {
                set port_width [dict get $ports $port_name]
                if {$dir0 == "in" && [dict exists $tieoff $port_name]} {
                    set driver_value [expr [dict get $tieoff $port_name] * (2 ** $port_width - 1)]
                    add_port $core ${port_prefix}_${port_name} $dir0 $port_width "" endianness little driver_value $driver_value
                } else {
                    add_port $core ${port_prefix}_${port_name} $dir0 $port_width "" endianness little
                }
            }

            ## create bus interface
            set current_bus_interface [add_bus_interface $core $interface_name axi4stream $mode]

            ## port map
            # tvalid
            add_port_map $current_bus_interface "TVALID" "TVALID" ${port_prefix}_TVALID

            # tready
            if {$has_tready} {
                add_port_map $current_bus_interface "TREADY" "TREADY" ${port_prefix}_TREADY
            }

            # other ports
            dict for {port_name port_width} $ports {
                add_port_map $current_bus_interface $port_name $port_name ${port_prefix}_${port_name}
            }

            ## bus parameters
            foreach bus_parameter [mysort $bus_parameters] {
                lassign $bus_parameter pname pvalue presolve_type
                add_bus_parameter $current_bus_interface $pname $pvalue $presolve_type
            }

            # }}}
        }

        native_axim {
            # {{{
            ## direction
            if {$mode == "master"} {
                set dir0 "out"
                set dir1 "in"
            } else {
                set dir0 "in"
                set dir1 "out"
            }

            ## address width
            if {$mode == "master"} {
                set addr_bits [dict get $port_width AWADDR]
                set id_bits [dict get $port_width AWID]
                set wstrb_bits [dict get $port_width WSTRB]
            }

            ## rtl ports
            set rtl_ports [list \
                [list AWID    $dir0 $id_bits  "${param_prefix}_ID_WIDTH" \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_ID_PORTS')) = 1)" \
                ] \
                [list AWADDR  $dir0 $addr_bits "${param_prefix}_ADDR_WIDTH"] \
                [list AWLEN   $dir0 8  ""] \
                [list AWSIZE  $dir0 3  ""] \
                [list AWBURST $dir0 2  ""] \
                [list AWLOCK  $dir0 2  ""] \
                [list AWREGION $dir0 4  ""] \
                [list AWCACHE $dir0 4  ""] \
                [list AWPROT  $dir0 3  ""] \
                [list AWQOS   $dir0 4  ""] \
                [list AWUSER  $dir0 1  "${param_prefix}_AWUSER_WIDTH" \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_USER_PORTS')) = 1)" \
                ] \
                [list AWVALID $dir0 "" ""] \
                [list AWREADY $dir1 "" ""] \
                [list WID     $dir0 $id_bits  "${param_prefix}_ID_WIDTH" \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_ID_PORTS')) = 1)" \
                ] \
                [list WDATA   $dir0 $data_width "${param_prefix}_DATA_WIDTH"] \
                [list WSTRB   $dir0 $wstrb_bits  "${param_prefix}_DATA_WIDTH/8"] \
                [list WLAST   $dir0 "" ""] \
                [list WUSER   $dir0 1  "${param_prefix}_WUSER_WIDTH" \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_USER_PORTS')) = 1)" \
                ] \
                [list WVALID  $dir0 "" ""] \
                [list WREADY  $dir1 "" ""] \
                [list BID     $dir1 $id_bits  "${param_prefix}_ID_WIDTH" \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_ID_PORTS')) = 1)" \
                ] \
                [list BRESP   $dir1 2  ""] \
                [list BUSER   $dir1 1  "${param_prefix}_BUSER_WIDTH" \
                    driver_value {0} \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_USER_PORTS')) = 1)" \
                ] \
                [list BVALID  $dir1 "" ""] \
                [list BREADY  $dir0 "" ""] \
                [list ARID    $dir0 $id_bits  "${param_prefix}_ID_WIDTH" \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_ID_PORTS')) = 1)" \
                ] \
                [list ARADDR  $dir0 $addr_bits "${param_prefix}_ADDR_WIDTH"] \
                [list ARLEN   $dir0 8  ""] \
                [list ARSIZE  $dir0 3  ""] \
                [list ARBURST $dir0 2  ""] \
                [list ARLOCK  $dir0 2  ""] \
                [list ARREGION $dir0 4  ""] \
                [list ARCACHE $dir0 4  ""] \
                [list ARPROT  $dir0 3  ""] \
                [list ARQOS   $dir0 4  ""] \
                [list ARUSER  $dir0 1  "${param_prefix}_ARUSER_WIDTH" \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_USER_PORTS')) = 1)" \
                ] \
                [list ARVALID $dir0 "" ""] \
                [list ARREADY $dir1 "" ""] \
                [list RID     $dir1 $id_bits  "${param_prefix}_ID_WIDTH" \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_ID_PORTS')) = 1)" \
                ] \
                [list RDATA   $dir1 $data_width "${param_prefix}_DATA_WIDTH"] \
                [list RRESP   $dir1 2  ""] \
                [list RLAST   $dir1 "" ""] \
                [list RUSER   $dir1 1  "${param_prefix}_RUSER_WIDTH" \
                    driver_value {0} \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_USER_PORTS')) = 1)" \
                ] \
                [list RVALID  $dir1 "" ""] \
                [list RREADY  $dir0 "" ""] \
            ]

            ## rtl parameters
            set rtl_parameters [list \
                [list ID_WIDTH "integer" $id_bits  "long" "generated" \
                    enablement_presence optional \
                    enablement_resolve_type dependent \
                ] \
                [list ADDR_WIDTH   "integer" $addr_bits "long" "immediate"] \
                [list DATA_WIDTH   "integer" $data_width "long" "generated"] \
                [list AWUSER_WIDTH "integer" 1  "long" "generated" \
                    enablement_presence optional \
                    enablement_resolve_type dependent \
                ] \
                [list ARUSER_WIDTH "integer" 1  "long" "generated" \
                    enablement_presence optional \
                    enablement_resolve_type dependent \
                ] \
                [list WUSER_WIDTH  "integer" 1  "long" "generated" \
                    enablement_presence optional \
                    enablement_resolve_type dependent \
                ] \
                [list RUSER_WIDTH  "integer" 1  "long" "generated" \
                    enablement_presence optional \
                    enablement_resolve_type dependent \
                ] \
                [list BUSER_WIDTH  "integer" 1  "long" "generated" \
                    enablement_presence optional \
                    enablement_resolve_type dependent \
                ] \
                [list USER_VALUE      "$user_param_type" 0x00000000   "bitString" "generated" \
                    value_bit_string_length 32 \
                    enablement_presence optional \
                    enablement_resolve_type dependent \
                ] \
                [list PROT_VALUE      "$user_param_type" \"000\"  "bitString" "generated" \
                    value_bit_string_length 3 \
                ] \
                [list CACHE_VALUE     "$user_param_type" \"0011\" "bitString" "generated" \
                    value_bit_string_length 4 \
                ] \
            ]

            ## user parameters
            set user_parameters [list \
                [list ENABLE_ID_PORTS "Enable ID ports" "true" "bool" "user"] \
                [list ID_WIDTH "ID width" $id_bits "long" "user" \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_ID_PORTS')) = 1)" \
                    value_validation_range_maximum 32 \
                    value_validation_range_minimum 1 \
                ] \
                [list DATA_WIDTH "Data width" $data_width "long" "user" \
                    value_validation_list {32:32 64:64 128:128 256:256 512:512 1024:1024} \
                ] \
                [list ENABLE_USER_PORTS "Enable USER ports" "false" "bool" "user"] \
                [list AWUSER_WIDTH "AWUSER width" 1 "long" "user" \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_USER_PORTS')) = 1)" \
                    value_validation_range_maximum 1024 \
                    value_validation_range_minimum 1 \
                ] \
                [list WUSER_WIDTH "WUSER width" 1 "long" "user" \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_USER_PORTS')) = 1)" \
                    value_validation_range_maximum 1024 \
                    value_validation_range_minimum 1 \
                ] \
                [list BUSER_WIDTH "BUSER width" 1 "long" "user" \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_USER_PORTS')) = 1)" \
                    value_validation_range_maximum 1024 \
                    value_validation_range_minimum 1 \
                ] \
                [list ARUSER_WIDTH "ARUSER width" 1 "long" "user" \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_USER_PORTS')) = 1)" \
                    value_validation_range_maximum 1024 \
                    value_validation_range_minimum 1 \
                ] \
                [list RUSER_WIDTH "RUSER width" 1 "long" "user" \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_USER_PORTS')) = 1)" \
                    value_validation_range_maximum 1024 \
                    value_validation_range_minimum 1 \
                ] \
                [list USER_VALUE "USER value" 0x00000000 "bitString" "user" \
                    enablement_presence optional \
                    enablement_dependency "(spirit:decode(id('PARAM_VALUE.${param_prefix}_ENABLE_USER_PORTS')) = 1)" \
                    value_bit_string_length 32 \
                ] \
                [list PROT_VALUE "PROT value" \"000\" "bitString" "user" \
                    value_bit_string_length 3 \
                ] \
                [list CACHE_VALUE "CACHE value" \"0011\" "bitString" "user" \
                    value_bit_string_length 4 \
                ] \
            ]


            ## axi4
            set current_bus_interface [add_bus_interface $core $interface_name axi4 $mode $preferredUsageValue $has_dependant_on $offset_slave_name $addr_bits]

            ## rtl parameters
            foreach rtl_parameter [mysort $rtl_parameters] {
                set pargs [lassign $rtl_parameter pname ptype pvalue pformat presolve_type]
                eval add_hdl_parameter \$core \${param_prefix}_\$pname \$ptype \$pvalue \$pformat \$presolve_type $pargs
            }

            ## user parameters
            foreach user_parameter [mysort $user_parameters] {
                set pargs [lassign $user_parameter pname pdisplay_name pvalue pformat presolve_type]
                eval add_user_parameter \$core \${param_prefix}_\$pname \$pdisplay_name \$pvalue \$pformat \$presolve_type $pargs config_groups \[list 1 \"\$interface_name (AXI4 Master Interface)\"\]
            }

            ## bus parameters
            foreach pname [mysort [dict keys $busParams]] {
                set pvalue [dict get $busParams $pname]
                add_bus_parameter $current_bus_interface $pname $pvalue
            }

            ## ports
            foreach rtl_port [mysort $rtl_ports] {
                set port_args [lassign $rtl_port port_name port_dir port_width port_param]
                eval add_port \$core \${port_prefix}_\$port_name \$port_dir \$port_width \$port_param $port_args
            }

            # port map
            foreach rtl_port [mysort $rtl_ports] {
                set port_name [lindex $rtl_port 0]
                add_port_map $current_bus_interface $port_name $port_name ${port_prefix}_${port_name}
            }
            # }}}
        }

        bram {
            # {{{

            ## rtl ports
            set rtl_ports [list \
                [list Clk  CLK  out "" ""] \
                [list Rst  RST  out "" ""] \
                [list EN   EN   out "" ""] \
                [list WEN  WE   out [expr $mem_width / 8] ""] \
                [list Addr ADDR out 32 ""] \
                [list Dout DIN  out $mem_width ""] \
                [list Din  DOUT in  $mem_width ""] \
            ]

            ## bus parameters
            set bus_parameters [list \
                [list MEM_WIDTH $mem_width] \
                [list MEM_SIZE [expr $mem_width * $mem_depth / 8]] \
                [list MASTER_TYPE $master_type] \
            ]

            foreach mem_port $mem_ports {
                set suffix [string toupper $mem_port]
                ## interface
                set current_bus_interface [add_bus_interface $core ${interface_name}_PORT$suffix bram master]

                ## ports
                foreach rtl_port [mysort $rtl_ports] {
                    lassign $rtl_port port_name port_map port_dir port_width port_param
                    add_port $core ${port_prefix}_${port_name}_$suffix $port_dir $port_width $port_param
                }

                ## bus parameters
                foreach bus_parameter [mysort $bus_parameters] {
                    lassign $bus_parameter pname pvalue
                    add_bus_parameter $current_bus_interface $pname $pvalue
                }

                # port map
                foreach rtl_port [mysort $rtl_ports] {
                    lassign $rtl_port port_name port_map
                    add_port_map $current_bus_interface $port_map $port_map ${port_prefix}_${port_name}_$suffix
                }
            }
            # }}}
        }

        native_bram {
            # {{{

            ## rtl ports
            set rtl_ports [list \
                [list Clk  CLK  out "" ""] \
                [list Rst  RST  out "" ""] \
                [list EN   EN   out "" ""] \
                [list WEN  WE   out $we_width ""] \
                [list Addr ADDR out $addr_width ""] \
                [list Din  DIN  out $mem_width ""] \
                [list Dout DOUT in  $mem_width ""] \
            ]

            ## bus parameters
            set bus_parameters [list \
                [list MEM_WIDTH $mem_width] \
                [list MEM_SIZE [expr $mem_width * $mem_depth / 8]] \
                [list MASTER_TYPE $master_type] \
            ]

            foreach mem_port $mem_ports {
                set suffix [string toupper $mem_port]
                ## interface
                set current_bus_interface [add_bus_interface $core ${interface_name}_PORT$suffix bram master]

                ## ports
                foreach rtl_port [mysort $rtl_ports] {
                    lassign $rtl_port port_name port_map port_dir port_width port_param
                    add_port $core ${port_prefix}_${port_name}_$suffix $port_dir $port_width $port_param
                }

                ## bus parameters
                foreach bus_parameter [mysort $bus_parameters] {
                    lassign $bus_parameter pname pvalue
                    add_bus_parameter $current_bus_interface $pname $pvalue
                }

                # port map
                foreach rtl_port [mysort $rtl_ports] {
                    lassign $rtl_port port_name port_map
                    add_port_map $current_bus_interface $port_map $port_map ${port_prefix}_${port_name}_$suffix
                }

                # data type
                add_bus_datatype $current_bus_interface $ctype
            }
            # }}}
        }

        ap_fifo {
            # {{{
            if {$fifo_type == "read"} {
                set interface_type fifo_read
                set rtl_ports [list \
                    [list ${interface_name}_dout    RD_DATA in  $fifo_width] \
                    [list ${interface_name}_empty_n EMPTY_N in  ""] \
                    [list ${interface_name}_read    RD_EN   out ""] \
                ]
            } else {
                set interface_type fifo_write
                set rtl_ports [list \
                    [list ${interface_name}_din     WR_DATA out $fifo_width] \
                    [list ${interface_name}_full_n  FULL_N  in  ""] \
                    [list ${interface_name}_write   WR_EN   out ""] \
                ]
            }

            ## interface
            set current_bus_interface [add_bus_interface $core $interface_name $interface_type master]

            ## ports
            foreach rtl_port [mysort $rtl_ports] {
                lassign $rtl_port port_name port_map port_dir port_width
                add_port $core $port_name $port_dir $port_width ""
            }

            # port map
            foreach rtl_port [mysort $rtl_ports] {
                lassign $rtl_port port_name port_map
                add_port_map $current_bus_interface $port_map $port_map $port_name
            }

            # data type
            add_bus_datatype $current_bus_interface $ctype
            # }}}
        }

        ap_ctrl {
            # {{{
            set rtl_ports ""
            foreach port $ctrl_ports {
                switch -- $port {
                    ap_start {
                        lappend rtl_ports [list ap_start start in ""]
                    }
                    ap_ready {
                        lappend rtl_ports [list ap_ready ready out ""]
                    }
                    ap_done {
                        lappend rtl_ports [list ap_done done out ""]
                    }
                    ap_continue {
                        lappend rtl_ports [list ap_continue continue in ""]
                    }
                    ap_idle {
                        lappend rtl_ports [list ap_idle idle out ""]
                    }
                }
            }

            ## interface
            set current_bus_interface [add_bus_interface $core $interface_name ap_ctrl slave]

            ## ports
            foreach rtl_port [mysort $rtl_ports] {
                lassign $rtl_port port_name port_map port_dir port_width
                add_port $core $port_name $port_dir $port_width ""
            }

            # port map
            foreach rtl_port [mysort $rtl_ports] {
                lassign $rtl_port port_name port_map
                add_port_map $current_bus_interface $port_map $port_map $port_name
            }

            # data type
            add_bus_datatype $current_bus_interface $ctype
            # }}}
        }

        clock {
            # {{{
            add_port $core $interface_name in "" ""
            set current_bus_interface [add_bus_interface $core $interface_name clock slave]
            add_port_map $current_bus_interface CLK CLK $interface_name

            if {$buses != ""} {
                add_bus_parameter $current_bus_interface ASSOCIATED_BUSIF [join $buses ":"]
            }

            # attach reset
            if {[info exists reset] && $reset != ""} {
                add_bus_parameter $current_bus_interface ASSOCIATED_RESET [join $reset ":"]
            }

            # attach ce
            set result [dict filter $Interfaces script {name detail} {
                string equal [dict get $detail type] clockenable
            }]
            set port [lindex [dict keys $result] 0]
            if {$port != ""} {
                add_bus_parameter $current_bus_interface ASSOCIATED_CLKEN $port
            }

            # data type
            add_bus_datatype $current_bus_interface $ctype
            # }}}
        }

        reset {
            # {{{
            add_port $core $interface_name in "" ""
            set current_bus_interface [add_bus_interface $core $interface_name reset slave]
            add_port_map $current_bus_interface RST RST $interface_name
            if { ![info exists polarity] } { set polarity ACTIVE_LOW }
            add_bus_parameter $current_bus_interface POLARITY $polarity

            # data type
            add_bus_datatype $current_bus_interface $ctype
            # }}}
        }

        clockenable {
            # {{{
            add_port $core $interface_name in "" ""
            set current_bus_interface [add_bus_interface $core $interface_name clockenable slave]
            add_port_map $current_bus_interface CE CE $interface_name

            # data type
            add_bus_datatype $current_bus_interface $ctype
            # }}}
        }

        interrupt {
            # {{{
            add_port $core $interface_name out "" ""
            set current_bus_interface [add_bus_interface $core $interface_name interrupt master]
            add_port_map $current_bus_interface Intr INTERRUPT $interface_name
            add_bus_parameter $current_bus_interface SENSITIVITY "LEVEL_HIGH"

            # data type
            add_bus_datatype $current_bus_interface $ctype
            # }}}
        }

        data {
            # {{{
            if {$dir == "out"} {
                set mode "master"
            } else {
                set mode "slave"
            }
            add_port $core $interface_name $dir $width ""
            set current_bus_interface [add_bus_interface $core $interface_name $type $mode]
            add_port_map $current_bus_interface DATA DATA $interface_name

            # data type
            add_bus_datatype $current_bus_interface $ctype 1
            # }}}
        }
    }
}

## GUI
if {![regexp -nocase {2014\.3.*} $vivado_ver match]} {
    ipgui::add_group -name "group 0" -component [ipx::current_core] -parent [ipgui::get_pagespec -name "Page 0" -component [ipx::current_core] ] -display_name {m axi dev reg (AXI4 Master Interface)}
    set user_parameters_list [ipx::get_user_parameters -of_objects [ ipx::current_core ]]
    foreach {user_param} $user_parameters_list {
        set user_param_name [get_property name $user_param]
        if {[string compare -nocase $user_param_name "Component_Name"]} {
            ipgui::add_param -name $user_param_name -component [ipx::current_core] -parent [ipgui::get_groupspec -name "group 0" -component [ipx::current_core] ]
        }
    }
}
ipx::create_xgui_files -logo_file misc/logo.png $core

## System Info
set user_parameters_list {clk_period 10 machine 64 combinational 0 latency 831 II x}
foreach {user_para value} $user_parameters_list {
    incr user_parameter_order
    set user_para_value [ipx::add_user_parameter $user_para $core]
    set_property value $value $user_para_value
    set_property value_resolve_type "immediate" $user_para_value
    set_property order $user_parameter_order $user_para_value
}


ipx::update_checksums $core
ipx::save_core $core

## Generate zip
set ZipFile [string map {. _} ${Vendor}_${Library}_${IPName}_${Version}].zip
ipx::archive_core [file join [pwd] $ZipFile] $core

## Generate XO file if kernel.xml file is dumped
if {$enable_xo_gen && $kernel_xo ne ""} {
    if {[file isfile $kernel_xml]} {
        set ip_unzip_dir [file join [pwd] ip_unzip_dir]
        catch {exec unzip -d $ip_unzip_dir $ZipFile}
        set design_xml [file join $solution_dir .autopilot db ${TopNoPrefix}.design.xml]
        if { [file exists $kernel_xo] } {
            file delete -force $kernel_xo
        }
        if { ![file exists [file dir $kernel_xo]] } {
            file mkdir [file dir $kernel_xo]
        }
        set pack_xo_args [list -xo_path $kernel_xo -kernel_name $xo_kernel_name -kernel_xml $kernel_xml]
        if {[llength $xo_kernel_files]} {
            lappend pack_xo_args -kernel_files $xo_kernel_files
        }
        if {[file isdirectory $ip_unzip_dir]} {
            lappend pack_xo_args -ip_directory $ip_unzip_dir
        } else {
            lappend pack_xo_args -ip_directory [pwd]
        }
        if {[file isfile $design_xml]} {
            lappend pack_xo_args -design_xml $design_xml
        } else { puts "No design.xml file found: $design_xml"
        }
        if {[file isdirectory $debug_dir] && [llength [glob -nocomplain $debug_dir/*]]} {
            lappend pack_xo_args -debug_directory $debug_dir
        }
        if {[file isdirectory $xo_hls_files_dir] && [regsub {(\.[0-9][0-9]*)\.[0-9].*$} [::version -short] {\1}] > 2018.2} {
            lappend pack_xo_args -hls_directory $xo_hls_files_dir
        }
        puts "Running package_xo $pack_xo_args"
        package_xo {*}$pack_xo_args
        if {[file isdirectory $ip_unzip_dir]} {
            file delete -force $ip_unzip_dir
        }
    } else { 
        puts "Not running package_xo, missing kernel.xml: $kernel_xml"
    }
}


# Generate sysgen xml file
source -notrace "/eda/xilinx/Vitis_HLS/2023.1/common/scripts/ipxhls.tcl"
set json_file [file join $solution_dir [file tail $solution_dir]_data.json]
set outdir .
catch { ::ipx::utils::hls::write_sysgen_info_xml $json_file $outdir}
