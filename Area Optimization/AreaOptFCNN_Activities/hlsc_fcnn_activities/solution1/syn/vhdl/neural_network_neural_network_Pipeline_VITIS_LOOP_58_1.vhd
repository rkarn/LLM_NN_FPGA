-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network_neural_network_Pipeline_VITIS_LOOP_58_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln63 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_16 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln63_17 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_19_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_19_out_ap_vld : OUT STD_LOGIC;
    layer1_output_18_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_18_out_ap_vld : OUT STD_LOGIC;
    layer1_output_17_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_17_out_ap_vld : OUT STD_LOGIC;
    layer1_output_16_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_16_out_ap_vld : OUT STD_LOGIC;
    layer1_output_15_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_15_out_ap_vld : OUT STD_LOGIC;
    layer1_output_14_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_14_out_ap_vld : OUT STD_LOGIC;
    layer1_output_13_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_13_out_ap_vld : OUT STD_LOGIC;
    layer1_output_12_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_12_out_ap_vld : OUT STD_LOGIC;
    layer1_output_11_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_11_out_ap_vld : OUT STD_LOGIC;
    layer1_output_10_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_10_out_ap_vld : OUT STD_LOGIC;
    layer1_output_9_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_9_out_ap_vld : OUT STD_LOGIC;
    layer1_output_8_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_8_out_ap_vld : OUT STD_LOGIC;
    layer1_output_7_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_7_out_ap_vld : OUT STD_LOGIC;
    layer1_output_6_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_6_out_ap_vld : OUT STD_LOGIC;
    layer1_output_5_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_5_out_ap_vld : OUT STD_LOGIC;
    layer1_output_4_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_4_out_ap_vld : OUT STD_LOGIC;
    layer1_output_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_3_out_ap_vld : OUT STD_LOGIC;
    layer1_output_2_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_2_out_ap_vld : OUT STD_LOGIC;
    layer1_output_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_1_out_ap_vld : OUT STD_LOGIC;
    layer1_output_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of neural_network_neural_network_Pipeline_VITIS_LOOP_58_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1D : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_19 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_const_lv5_18 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_const_lv5_17 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_const_lv5_16 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln58_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer1_weights_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_0_ce0 : STD_LOGIC;
    signal layer1_weights_0_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_1_ce0 : STD_LOGIC;
    signal layer1_weights_1_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer1_weights_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_2_ce0 : STD_LOGIC;
    signal layer1_weights_2_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_3_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_3_ce0 : STD_LOGIC;
    signal layer1_weights_3_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer1_weights_4_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_4_ce0 : STD_LOGIC;
    signal layer1_weights_4_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_5_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_5_ce0 : STD_LOGIC;
    signal layer1_weights_5_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer1_weights_6_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_6_ce0 : STD_LOGIC;
    signal layer1_weights_6_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_7_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_7_ce0 : STD_LOGIC;
    signal layer1_weights_7_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer1_weights_8_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_8_ce0 : STD_LOGIC;
    signal layer1_weights_8_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_9_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_9_ce0 : STD_LOGIC;
    signal layer1_weights_9_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer1_weights_10_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_10_ce0 : STD_LOGIC;
    signal layer1_weights_10_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer1_weights_11_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_11_ce0 : STD_LOGIC;
    signal layer1_weights_11_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer1_weights_12_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_12_ce0 : STD_LOGIC;
    signal layer1_weights_12_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer1_weights_13_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_13_ce0 : STD_LOGIC;
    signal layer1_weights_13_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer1_weights_14_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_14_ce0 : STD_LOGIC;
    signal layer1_weights_14_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer1_weights_15_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_15_ce0 : STD_LOGIC;
    signal layer1_weights_15_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_16_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_16_ce0 : STD_LOGIC;
    signal layer1_weights_16_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_17_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_weights_17_ce0 : STD_LOGIC;
    signal layer1_weights_17_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_bias_ce0 : STD_LOGIC;
    signal layer1_bias_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln63_17_cast_fu_773_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_17_cast_reg_1732 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_16_cast_fu_777_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_16_cast_reg_1737 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_15_cast_fu_781_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_15_cast_reg_1742 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_14_cast_fu_785_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_14_cast_reg_1747 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_13_cast_fu_789_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_13_cast_reg_1752 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_12_cast_fu_793_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_12_cast_reg_1757 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_11_cast_fu_797_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_11_cast_reg_1762 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_10_cast_fu_801_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_10_cast_reg_1767 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_9_cast_fu_805_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_9_cast_reg_1772 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_8_cast_fu_809_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_8_cast_reg_1777 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_7_cast_fu_813_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_7_cast_reg_1782 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_6_cast_fu_817_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_6_cast_reg_1787 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_5_cast_fu_821_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_5_cast_reg_1792 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_4_cast_fu_825_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_4_cast_reg_1797 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_3_cast_fu_829_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_3_cast_reg_1802 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_2_cast_fu_833_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_2_cast_reg_1807 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_1_cast_fu_837_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_1_cast_reg_1812 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_cast_fu_841_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln63_cast_reg_1817 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_2_reg_1822 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter9_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter10_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter11_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter12_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter13_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter14_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter15_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter16_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter17_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter18_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter19_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1822_pp0_iter20_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln58_reg_1826 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_reg_1826_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln58_fu_865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_1830 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_1830_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_1830_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_1830_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_1830_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_1830_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_1830_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_1830_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_1830_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_1830_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln58_reg_1830_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal layer1_weights_0_load_reg_1861 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_reg_1876 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_weights_13_load_reg_2066 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer1_weights_14_load_reg_2071 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer1_weights_14_load_reg_2071_pp0_iter13_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal layer1_weights_15_load_reg_2076 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_15_load_reg_2076_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_15_load_reg_2076_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_16_load_reg_2081 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_16_load_reg_2081_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_16_load_reg_2081_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_16_load_reg_2081_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_17_load_reg_2086 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_17_load_reg_2086_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_17_load_reg_2086_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_17_load_reg_2086_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_weights_17_load_reg_2086_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_bias_load_reg_2091 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_bias_load_reg_2091_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_bias_load_reg_2091_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_bias_load_reg_2091_pp0_iter15_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_bias_load_reg_2091_pp0_iter16_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_bias_load_reg_2091_pp0_iter17_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_bias_load_reg_2091_pp0_iter18_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal layer1_bias_load_reg_2091_pp0_iter19_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln60_fu_1266_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln60_reg_2157 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln14_fu_1272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_2162 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_194 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln58_fu_859_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (4 downto 0);
    signal layer1_output_fu_198 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln66_fu_1284_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_1_fu_202 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_2_fu_206 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_3_fu_210 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_4_fu_214 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_5_fu_218 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_6_fu_222 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_7_fu_226 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_8_fu_230 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_9_fu_234 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_10_fu_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_11_fu_242 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_12_fu_246 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_13_fu_250 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_14_fu_254 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_15_fu_258 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_16_fu_262 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_17_fu_266 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_18_fu_270 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_19_fu_274 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln63_fu_883_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln63_fu_883_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_7_fu_913_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1468_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_7_fu_913_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_934_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1476_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_934_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_955_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1484_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_fu_955_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_976_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1492_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_fu_976_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_997_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1500_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_997_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_1018_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1508_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_12_fu_1018_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_1039_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1516_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_fu_1039_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_1060_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1524_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_fu_1060_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_1081_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1532_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_15_fu_1081_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_1102_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1540_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_16_fu_1102_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_1122_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1548_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_fu_1122_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_1142_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1556_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_fu_1142_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_1162_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1564_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_s_fu_1162_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_19_fu_1182_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1572_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_19_fu_1182_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_1202_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1580_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_20_fu_1202_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_1219_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1588_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_21_fu_1219_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_1236_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1596_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln_fu_1248_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln65_fu_1245_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_1236_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln65_1_fu_1257_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln_fu_1248_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal sum_3_fu_1260_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer1_output_20_fu_1278_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1468_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1468_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1476_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1476_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1484_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1484_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1492_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1492_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1500_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1500_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1508_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1508_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1516_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1516_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1524_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1524_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1532_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1532_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1540_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1540_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1548_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1548_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1556_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1556_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1564_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1564_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1572_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1572_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1580_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1580_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1588_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1588_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1596_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1596_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component neural_network_mul_10s_16s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_9s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_10s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_11s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_12s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_4_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_5_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_6_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_7_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_8_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_9_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_10_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_11_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_12_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_13_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_14_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_15_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_16_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_17_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_bias_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    layer1_weights_0_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_0_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_0_address0,
        ce0 => layer1_weights_0_ce0,
        q0 => layer1_weights_0_q0);

    layer1_weights_1_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_1_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_1_address0,
        ce0 => layer1_weights_1_ce0,
        q0 => layer1_weights_1_q0);

    layer1_weights_2_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_2_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_2_address0,
        ce0 => layer1_weights_2_ce0,
        q0 => layer1_weights_2_q0);

    layer1_weights_3_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_3_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_3_address0,
        ce0 => layer1_weights_3_ce0,
        q0 => layer1_weights_3_q0);

    layer1_weights_4_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_4_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_4_address0,
        ce0 => layer1_weights_4_ce0,
        q0 => layer1_weights_4_q0);

    layer1_weights_5_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_5_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_5_address0,
        ce0 => layer1_weights_5_ce0,
        q0 => layer1_weights_5_q0);

    layer1_weights_6_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_6_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_6_address0,
        ce0 => layer1_weights_6_ce0,
        q0 => layer1_weights_6_q0);

    layer1_weights_7_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_7_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_7_address0,
        ce0 => layer1_weights_7_ce0,
        q0 => layer1_weights_7_q0);

    layer1_weights_8_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_8_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_8_address0,
        ce0 => layer1_weights_8_ce0,
        q0 => layer1_weights_8_q0);

    layer1_weights_9_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_9_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_9_address0,
        ce0 => layer1_weights_9_ce0,
        q0 => layer1_weights_9_q0);

    layer1_weights_10_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_10_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_10_address0,
        ce0 => layer1_weights_10_ce0,
        q0 => layer1_weights_10_q0);

    layer1_weights_11_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_11_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_11_address0,
        ce0 => layer1_weights_11_ce0,
        q0 => layer1_weights_11_q0);

    layer1_weights_12_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_12_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_12_address0,
        ce0 => layer1_weights_12_ce0,
        q0 => layer1_weights_12_q0);

    layer1_weights_13_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_13_ROM_AUTO_1R
    generic map (
        DataWidth => 12,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_13_address0,
        ce0 => layer1_weights_13_ce0,
        q0 => layer1_weights_13_q0);

    layer1_weights_14_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_14_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_14_address0,
        ce0 => layer1_weights_14_ce0,
        q0 => layer1_weights_14_q0);

    layer1_weights_15_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_15_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_15_address0,
        ce0 => layer1_weights_15_ce0,
        q0 => layer1_weights_15_q0);

    layer1_weights_16_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_16_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_16_address0,
        ce0 => layer1_weights_16_ce0,
        q0 => layer1_weights_16_q0);

    layer1_weights_17_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_weights_17_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_17_address0,
        ce0 => layer1_weights_17_ce0,
        q0 => layer1_weights_17_q0);

    layer1_bias_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_58_1_layer1_bias_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 20,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_bias_address0,
        ce0 => layer1_bias_ce0,
        q0 => layer1_bias_q0);

    mul_10s_16s_24_1_1_U1 : component neural_network_mul_10s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => layer1_weights_0_load_reg_1861,
        din1 => mul_ln63_fu_883_p1,
        dout => mul_ln63_fu_883_p2);

    mac_muladd_9s_16s_24ns_24_4_1_U2 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_1_q0,
        din1 => grp_fu_1468_p1,
        din2 => grp_fu_1468_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1468_p3);

    mac_muladd_10s_16s_24ns_24_4_1_U3 : component neural_network_mac_muladd_10s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_2_q0,
        din1 => grp_fu_1476_p1,
        din2 => grp_fu_1476_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1476_p3);

    mac_muladd_9s_16s_24ns_24_4_1_U4 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_3_q0,
        din1 => grp_fu_1484_p1,
        din2 => grp_fu_1484_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1484_p3);

    mac_muladd_10s_16s_24ns_24_4_1_U5 : component neural_network_mac_muladd_10s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_4_q0,
        din1 => grp_fu_1492_p1,
        din2 => grp_fu_1492_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1492_p3);

    mac_muladd_9s_16s_24ns_24_4_1_U6 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_5_q0,
        din1 => grp_fu_1500_p1,
        din2 => grp_fu_1500_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1500_p3);

    mac_muladd_10s_16s_24ns_24_4_1_U7 : component neural_network_mac_muladd_10s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_6_q0,
        din1 => grp_fu_1508_p1,
        din2 => grp_fu_1508_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1508_p3);

    mac_muladd_11s_16s_24ns_24_4_1_U8 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_7_q0,
        din1 => grp_fu_1516_p1,
        din2 => grp_fu_1516_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1516_p3);

    mac_muladd_10s_16s_24ns_24_4_1_U9 : component neural_network_mac_muladd_10s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_8_q0,
        din1 => grp_fu_1524_p1,
        din2 => grp_fu_1524_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1524_p3);

    mac_muladd_9s_16s_24ns_24_4_1_U10 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_9_q0,
        din1 => grp_fu_1532_p1,
        din2 => grp_fu_1532_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1532_p3);

    mac_muladd_11s_16s_24ns_24_4_1_U11 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_10_q0,
        din1 => grp_fu_1540_p1,
        din2 => grp_fu_1540_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1540_p3);

    mac_muladd_11s_16s_24ns_24_4_1_U12 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_11_q0,
        din1 => grp_fu_1548_p1,
        din2 => grp_fu_1548_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1548_p3);

    mac_muladd_11s_16s_24ns_24_4_1_U13 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_12_q0,
        din1 => grp_fu_1556_p1,
        din2 => grp_fu_1556_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1556_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U14 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_13_load_reg_2066,
        din1 => grp_fu_1564_p1,
        din2 => grp_fu_1564_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1564_p3);

    mac_muladd_11s_16s_24ns_24_4_1_U15 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_14_load_reg_2071_pp0_iter13_reg,
        din1 => grp_fu_1572_p1,
        din2 => grp_fu_1572_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1572_p3);

    mac_muladd_10s_16s_24ns_24_4_1_U16 : component neural_network_mac_muladd_10s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_15_load_reg_2076_pp0_iter14_reg,
        din1 => grp_fu_1580_p1,
        din2 => grp_fu_1580_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1580_p3);

    mac_muladd_10s_16s_24ns_24_4_1_U17 : component neural_network_mac_muladd_10s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_16_load_reg_2081_pp0_iter15_reg,
        din1 => grp_fu_1588_p1,
        din2 => grp_fu_1588_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1588_p3);

    mac_muladd_10s_16s_24ns_24_4_1_U18 : component neural_network_mac_muladd_10s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_17_load_reg_2086_pp0_iter16_reg,
        din1 => grp_fu_1596_p1,
        din2 => grp_fu_1596_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1596_p3);

    flow_control_loop_pipe_sequential_init_U : component neural_network_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln58_fu_853_p2 = ap_const_lv1_0))) then 
                    i_fu_194 <= add_ln58_fu_859_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_194 <= ap_const_lv5_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln60_reg_2157 <= add_ln60_fu_1266_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                i_2_reg_1822_pp0_iter10_reg <= i_2_reg_1822_pp0_iter9_reg;
                i_2_reg_1822_pp0_iter11_reg <= i_2_reg_1822_pp0_iter10_reg;
                i_2_reg_1822_pp0_iter12_reg <= i_2_reg_1822_pp0_iter11_reg;
                i_2_reg_1822_pp0_iter13_reg <= i_2_reg_1822_pp0_iter12_reg;
                i_2_reg_1822_pp0_iter14_reg <= i_2_reg_1822_pp0_iter13_reg;
                i_2_reg_1822_pp0_iter15_reg <= i_2_reg_1822_pp0_iter14_reg;
                i_2_reg_1822_pp0_iter16_reg <= i_2_reg_1822_pp0_iter15_reg;
                i_2_reg_1822_pp0_iter17_reg <= i_2_reg_1822_pp0_iter16_reg;
                i_2_reg_1822_pp0_iter18_reg <= i_2_reg_1822_pp0_iter17_reg;
                i_2_reg_1822_pp0_iter19_reg <= i_2_reg_1822_pp0_iter18_reg;
                i_2_reg_1822_pp0_iter20_reg <= i_2_reg_1822_pp0_iter19_reg;
                i_2_reg_1822_pp0_iter2_reg <= i_2_reg_1822_pp0_iter1_reg;
                i_2_reg_1822_pp0_iter3_reg <= i_2_reg_1822_pp0_iter2_reg;
                i_2_reg_1822_pp0_iter4_reg <= i_2_reg_1822_pp0_iter3_reg;
                i_2_reg_1822_pp0_iter5_reg <= i_2_reg_1822_pp0_iter4_reg;
                i_2_reg_1822_pp0_iter6_reg <= i_2_reg_1822_pp0_iter5_reg;
                i_2_reg_1822_pp0_iter7_reg <= i_2_reg_1822_pp0_iter6_reg;
                i_2_reg_1822_pp0_iter8_reg <= i_2_reg_1822_pp0_iter7_reg;
                i_2_reg_1822_pp0_iter9_reg <= i_2_reg_1822_pp0_iter8_reg;
                icmp_ln14_reg_2162 <= icmp_ln14_fu_1272_p2;
                icmp_ln58_reg_1826_pp0_iter10_reg <= icmp_ln58_reg_1826_pp0_iter9_reg;
                icmp_ln58_reg_1826_pp0_iter11_reg <= icmp_ln58_reg_1826_pp0_iter10_reg;
                icmp_ln58_reg_1826_pp0_iter12_reg <= icmp_ln58_reg_1826_pp0_iter11_reg;
                icmp_ln58_reg_1826_pp0_iter13_reg <= icmp_ln58_reg_1826_pp0_iter12_reg;
                icmp_ln58_reg_1826_pp0_iter14_reg <= icmp_ln58_reg_1826_pp0_iter13_reg;
                icmp_ln58_reg_1826_pp0_iter15_reg <= icmp_ln58_reg_1826_pp0_iter14_reg;
                icmp_ln58_reg_1826_pp0_iter16_reg <= icmp_ln58_reg_1826_pp0_iter15_reg;
                icmp_ln58_reg_1826_pp0_iter17_reg <= icmp_ln58_reg_1826_pp0_iter16_reg;
                icmp_ln58_reg_1826_pp0_iter18_reg <= icmp_ln58_reg_1826_pp0_iter17_reg;
                icmp_ln58_reg_1826_pp0_iter19_reg <= icmp_ln58_reg_1826_pp0_iter18_reg;
                icmp_ln58_reg_1826_pp0_iter2_reg <= icmp_ln58_reg_1826_pp0_iter1_reg;
                icmp_ln58_reg_1826_pp0_iter3_reg <= icmp_ln58_reg_1826_pp0_iter2_reg;
                icmp_ln58_reg_1826_pp0_iter4_reg <= icmp_ln58_reg_1826_pp0_iter3_reg;
                icmp_ln58_reg_1826_pp0_iter5_reg <= icmp_ln58_reg_1826_pp0_iter4_reg;
                icmp_ln58_reg_1826_pp0_iter6_reg <= icmp_ln58_reg_1826_pp0_iter5_reg;
                icmp_ln58_reg_1826_pp0_iter7_reg <= icmp_ln58_reg_1826_pp0_iter6_reg;
                icmp_ln58_reg_1826_pp0_iter8_reg <= icmp_ln58_reg_1826_pp0_iter7_reg;
                icmp_ln58_reg_1826_pp0_iter9_reg <= icmp_ln58_reg_1826_pp0_iter8_reg;
                layer1_bias_load_reg_2091 <= layer1_bias_q0;
                layer1_bias_load_reg_2091_pp0_iter13_reg <= layer1_bias_load_reg_2091;
                layer1_bias_load_reg_2091_pp0_iter14_reg <= layer1_bias_load_reg_2091_pp0_iter13_reg;
                layer1_bias_load_reg_2091_pp0_iter15_reg <= layer1_bias_load_reg_2091_pp0_iter14_reg;
                layer1_bias_load_reg_2091_pp0_iter16_reg <= layer1_bias_load_reg_2091_pp0_iter15_reg;
                layer1_bias_load_reg_2091_pp0_iter17_reg <= layer1_bias_load_reg_2091_pp0_iter16_reg;
                layer1_bias_load_reg_2091_pp0_iter18_reg <= layer1_bias_load_reg_2091_pp0_iter17_reg;
                layer1_bias_load_reg_2091_pp0_iter19_reg <= layer1_bias_load_reg_2091_pp0_iter18_reg;
                layer1_weights_13_load_reg_2066 <= layer1_weights_13_q0;
                layer1_weights_14_load_reg_2071 <= layer1_weights_14_q0;
                layer1_weights_14_load_reg_2071_pp0_iter13_reg <= layer1_weights_14_load_reg_2071;
                layer1_weights_15_load_reg_2076 <= layer1_weights_15_q0;
                layer1_weights_15_load_reg_2076_pp0_iter13_reg <= layer1_weights_15_load_reg_2076;
                layer1_weights_15_load_reg_2076_pp0_iter14_reg <= layer1_weights_15_load_reg_2076_pp0_iter13_reg;
                layer1_weights_16_load_reg_2081 <= layer1_weights_16_q0;
                layer1_weights_16_load_reg_2081_pp0_iter13_reg <= layer1_weights_16_load_reg_2081;
                layer1_weights_16_load_reg_2081_pp0_iter14_reg <= layer1_weights_16_load_reg_2081_pp0_iter13_reg;
                layer1_weights_16_load_reg_2081_pp0_iter15_reg <= layer1_weights_16_load_reg_2081_pp0_iter14_reg;
                layer1_weights_17_load_reg_2086 <= layer1_weights_17_q0;
                layer1_weights_17_load_reg_2086_pp0_iter13_reg <= layer1_weights_17_load_reg_2086;
                layer1_weights_17_load_reg_2086_pp0_iter14_reg <= layer1_weights_17_load_reg_2086_pp0_iter13_reg;
                layer1_weights_17_load_reg_2086_pp0_iter15_reg <= layer1_weights_17_load_reg_2086_pp0_iter14_reg;
                layer1_weights_17_load_reg_2086_pp0_iter16_reg <= layer1_weights_17_load_reg_2086_pp0_iter15_reg;
                tmp_6_reg_1876 <= mul_ln63_fu_883_p2(23 downto 8);
                    zext_ln58_reg_1830_pp0_iter10_reg(4 downto 0) <= zext_ln58_reg_1830_pp0_iter9_reg(4 downto 0);
                    zext_ln58_reg_1830_pp0_iter2_reg(4 downto 0) <= zext_ln58_reg_1830_pp0_iter1_reg(4 downto 0);
                    zext_ln58_reg_1830_pp0_iter3_reg(4 downto 0) <= zext_ln58_reg_1830_pp0_iter2_reg(4 downto 0);
                    zext_ln58_reg_1830_pp0_iter4_reg(4 downto 0) <= zext_ln58_reg_1830_pp0_iter3_reg(4 downto 0);
                    zext_ln58_reg_1830_pp0_iter5_reg(4 downto 0) <= zext_ln58_reg_1830_pp0_iter4_reg(4 downto 0);
                    zext_ln58_reg_1830_pp0_iter6_reg(4 downto 0) <= zext_ln58_reg_1830_pp0_iter5_reg(4 downto 0);
                    zext_ln58_reg_1830_pp0_iter7_reg(4 downto 0) <= zext_ln58_reg_1830_pp0_iter6_reg(4 downto 0);
                    zext_ln58_reg_1830_pp0_iter8_reg(4 downto 0) <= zext_ln58_reg_1830_pp0_iter7_reg(4 downto 0);
                    zext_ln58_reg_1830_pp0_iter9_reg(4 downto 0) <= zext_ln58_reg_1830_pp0_iter8_reg(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_2_reg_1822 <= ap_sig_allocacmp_i_2;
                i_2_reg_1822_pp0_iter1_reg <= i_2_reg_1822;
                icmp_ln58_reg_1826 <= icmp_ln58_fu_853_p2;
                icmp_ln58_reg_1826_pp0_iter1_reg <= icmp_ln58_reg_1826;
                layer1_weights_0_load_reg_1861 <= layer1_weights_0_q0;
                sext_ln63_10_cast_reg_1767 <= sext_ln63_10_cast_fu_801_p1;
                sext_ln63_11_cast_reg_1762 <= sext_ln63_11_cast_fu_797_p1;
                sext_ln63_12_cast_reg_1757 <= sext_ln63_12_cast_fu_793_p1;
                sext_ln63_13_cast_reg_1752 <= sext_ln63_13_cast_fu_789_p1;
                sext_ln63_14_cast_reg_1747 <= sext_ln63_14_cast_fu_785_p1;
                sext_ln63_15_cast_reg_1742 <= sext_ln63_15_cast_fu_781_p1;
                sext_ln63_16_cast_reg_1737 <= sext_ln63_16_cast_fu_777_p1;
                sext_ln63_17_cast_reg_1732 <= sext_ln63_17_cast_fu_773_p1;
                sext_ln63_1_cast_reg_1812 <= sext_ln63_1_cast_fu_837_p1;
                sext_ln63_2_cast_reg_1807 <= sext_ln63_2_cast_fu_833_p1;
                sext_ln63_3_cast_reg_1802 <= sext_ln63_3_cast_fu_829_p1;
                sext_ln63_4_cast_reg_1797 <= sext_ln63_4_cast_fu_825_p1;
                sext_ln63_5_cast_reg_1792 <= sext_ln63_5_cast_fu_821_p1;
                sext_ln63_6_cast_reg_1787 <= sext_ln63_6_cast_fu_817_p1;
                sext_ln63_7_cast_reg_1782 <= sext_ln63_7_cast_fu_813_p1;
                sext_ln63_8_cast_reg_1777 <= sext_ln63_8_cast_fu_809_p1;
                sext_ln63_9_cast_reg_1772 <= sext_ln63_9_cast_fu_805_p1;
                sext_ln63_cast_reg_1817 <= sext_ln63_cast_fu_841_p1;
                    zext_ln58_reg_1830_pp0_iter1_reg(4 downto 0) <= zext_ln58_reg_1830(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_A) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_10_fu_238(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_B) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_11_fu_242(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_C) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_12_fu_246(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_D) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_13_fu_250(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_E) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_14_fu_254(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_F) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_15_fu_258(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_10) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_16_fu_262(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_11) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_17_fu_266(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_12) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_18_fu_270(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and ((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_13) or ((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_14) or ((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_15) or ((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_16) or ((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_17) or ((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_18) or ((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_19) or ((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_1A) or ((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_1B) or ((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_1C) or ((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_1D) or ((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_1E) or (i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_1F))))))))))))))) then
                    layer1_output_19_fu_274(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_1) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_1_fu_202(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_2) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_2_fu_206(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_3) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_3_fu_210(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_4) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_4_fu_214(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_5) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_5_fu_218(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_6) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_6_fu_222(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_7) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_7_fu_226(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_8) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_8_fu_230(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_9) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_9_fu_234(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((i_2_reg_1822_pp0_iter20_reg = ap_const_lv5_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    layer1_output_fu_198(14 downto 0) <= zext_ln66_fu_1284_p1(14 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln58_fu_853_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln58_reg_1830(4 downto 0) <= zext_ln58_fu_865_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln58_reg_1830(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln58_reg_1830_pp0_iter1_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln58_reg_1830_pp0_iter2_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln58_reg_1830_pp0_iter3_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln58_reg_1830_pp0_iter4_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln58_reg_1830_pp0_iter5_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln58_reg_1830_pp0_iter6_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln58_reg_1830_pp0_iter7_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln58_reg_1830_pp0_iter8_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln58_reg_1830_pp0_iter9_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln58_reg_1830_pp0_iter10_reg(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    layer1_output_fu_198(15) <= '0';
    layer1_output_1_fu_202(15) <= '0';
    layer1_output_2_fu_206(15) <= '0';
    layer1_output_3_fu_210(15) <= '0';
    layer1_output_4_fu_214(15) <= '0';
    layer1_output_5_fu_218(15) <= '0';
    layer1_output_6_fu_222(15) <= '0';
    layer1_output_7_fu_226(15) <= '0';
    layer1_output_8_fu_230(15) <= '0';
    layer1_output_9_fu_234(15) <= '0';
    layer1_output_10_fu_238(15) <= '0';
    layer1_output_11_fu_242(15) <= '0';
    layer1_output_12_fu_246(15) <= '0';
    layer1_output_13_fu_250(15) <= '0';
    layer1_output_14_fu_254(15) <= '0';
    layer1_output_15_fu_258(15) <= '0';
    layer1_output_16_fu_262(15) <= '0';
    layer1_output_17_fu_266(15) <= '0';
    layer1_output_18_fu_270(15) <= '0';
    layer1_output_19_fu_274(15) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln58_fu_859_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv5_1));
    add_ln60_fu_1266_p2 <= std_logic_vector(signed(sext_ln65_1_fu_1257_p1) + signed(trunc_ln_fu_1248_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln58_fu_853_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln58_fu_853_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter20_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter20_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_194, ap_loop_init)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_194;
        end if; 
    end process;

    grp_fu_1468_p1 <= sext_ln63_1_cast_reg_1812(16 - 1 downto 0);
    grp_fu_1468_p2 <= (tmp_6_reg_1876 & ap_const_lv8_0);
    grp_fu_1476_p1 <= sext_ln63_2_cast_reg_1807(16 - 1 downto 0);
    grp_fu_1476_p2 <= (tmp_7_fu_913_p4 & ap_const_lv8_0);
    grp_fu_1484_p1 <= sext_ln63_3_cast_reg_1802(16 - 1 downto 0);
    grp_fu_1484_p2 <= (tmp_8_fu_934_p4 & ap_const_lv8_0);
    grp_fu_1492_p1 <= sext_ln63_4_cast_reg_1797(16 - 1 downto 0);
    grp_fu_1492_p2 <= (tmp_9_fu_955_p4 & ap_const_lv8_0);
    grp_fu_1500_p1 <= sext_ln63_5_cast_reg_1792(16 - 1 downto 0);
    grp_fu_1500_p2 <= (tmp_10_fu_976_p4 & ap_const_lv8_0);
    grp_fu_1508_p1 <= sext_ln63_6_cast_reg_1787(16 - 1 downto 0);
    grp_fu_1508_p2 <= (tmp_11_fu_997_p4 & ap_const_lv8_0);
    grp_fu_1516_p1 <= sext_ln63_7_cast_reg_1782(16 - 1 downto 0);
    grp_fu_1516_p2 <= (tmp_12_fu_1018_p4 & ap_const_lv8_0);
    grp_fu_1524_p1 <= sext_ln63_8_cast_reg_1777(16 - 1 downto 0);
    grp_fu_1524_p2 <= (tmp_13_fu_1039_p4 & ap_const_lv8_0);
    grp_fu_1532_p1 <= sext_ln63_9_cast_reg_1772(16 - 1 downto 0);
    grp_fu_1532_p2 <= (tmp_14_fu_1060_p4 & ap_const_lv8_0);
    grp_fu_1540_p1 <= sext_ln63_10_cast_reg_1767(16 - 1 downto 0);
    grp_fu_1540_p2 <= (tmp_15_fu_1081_p4 & ap_const_lv8_0);
    grp_fu_1548_p1 <= sext_ln63_11_cast_reg_1762(16 - 1 downto 0);
    grp_fu_1548_p2 <= (tmp_16_fu_1102_p4 & ap_const_lv8_0);
    grp_fu_1556_p1 <= sext_ln63_12_cast_reg_1757(16 - 1 downto 0);
    grp_fu_1556_p2 <= (tmp_17_fu_1122_p4 & ap_const_lv8_0);
    grp_fu_1564_p1 <= sext_ln63_13_cast_reg_1752(16 - 1 downto 0);
    grp_fu_1564_p2 <= (tmp_18_fu_1142_p4 & ap_const_lv8_0);
    grp_fu_1572_p1 <= sext_ln63_14_cast_reg_1747(16 - 1 downto 0);
    grp_fu_1572_p2 <= (tmp_s_fu_1162_p4 & ap_const_lv8_0);
    grp_fu_1580_p1 <= sext_ln63_15_cast_reg_1742(16 - 1 downto 0);
    grp_fu_1580_p2 <= (tmp_19_fu_1182_p4 & ap_const_lv8_0);
    grp_fu_1588_p1 <= sext_ln63_16_cast_reg_1737(16 - 1 downto 0);
    grp_fu_1588_p2 <= (tmp_20_fu_1202_p4 & ap_const_lv8_0);
    grp_fu_1596_p1 <= sext_ln63_17_cast_reg_1732(16 - 1 downto 0);
    grp_fu_1596_p2 <= (tmp_21_fu_1219_p4 & ap_const_lv8_0);
    icmp_ln14_fu_1272_p2 <= "1" when (signed(sum_3_fu_1260_p2) > signed(ap_const_lv16_0)) else "0";
    icmp_ln58_fu_853_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv5_14) else "0";
    layer1_bias_address0 <= zext_ln58_reg_1830_pp0_iter10_reg(5 - 1 downto 0);

    layer1_bias_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_bias_ce0 <= ap_const_logic_1;
        else 
            layer1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_10_out <= layer1_output_10_fu_238;

    layer1_output_10_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_10_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_10_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_11_out <= layer1_output_11_fu_242;

    layer1_output_11_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_11_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_11_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_12_out <= layer1_output_12_fu_246;

    layer1_output_12_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_12_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_12_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_13_out <= layer1_output_13_fu_250;

    layer1_output_13_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_13_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_13_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_14_out <= layer1_output_14_fu_254;

    layer1_output_14_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_14_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_14_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_15_out <= layer1_output_15_fu_258;

    layer1_output_15_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_15_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_15_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_16_out <= layer1_output_16_fu_262;

    layer1_output_16_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_16_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_16_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_17_out <= layer1_output_17_fu_266;

    layer1_output_17_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_17_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_17_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_18_out <= layer1_output_18_fu_270;

    layer1_output_18_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_18_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_18_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_19_out <= layer1_output_19_fu_274;

    layer1_output_19_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_19_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_19_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_1_out <= layer1_output_1_fu_202;

    layer1_output_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_1_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_20_fu_1278_p3 <= 
        add_ln60_reg_2157 when (icmp_ln14_reg_2162(0) = '1') else 
        ap_const_lv15_0;
    layer1_output_2_out <= layer1_output_2_fu_206;

    layer1_output_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_2_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_3_out <= layer1_output_3_fu_210;

    layer1_output_3_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_3_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_4_out <= layer1_output_4_fu_214;

    layer1_output_4_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_4_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_5_out <= layer1_output_5_fu_218;

    layer1_output_5_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_5_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_5_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_6_out <= layer1_output_6_fu_222;

    layer1_output_6_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_6_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_6_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_7_out <= layer1_output_7_fu_226;

    layer1_output_7_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_7_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_7_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_8_out <= layer1_output_8_fu_230;

    layer1_output_8_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_8_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_8_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_9_out <= layer1_output_9_fu_234;

    layer1_output_9_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_9_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_9_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_out <= layer1_output_fu_198;

    layer1_output_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln58_reg_1826_pp0_iter19_reg)
    begin
        if (((icmp_ln58_reg_1826_pp0_iter19_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_output_out_ap_vld <= ap_const_logic_1;
        else 
            layer1_output_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_0_address0 <= zext_ln58_fu_865_p1(5 - 1 downto 0);

    layer1_weights_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_0_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_10_address0 <= zext_ln58_reg_1830_pp0_iter8_reg(5 - 1 downto 0);

    layer1_weights_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_10_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_11_address0 <= zext_ln58_reg_1830_pp0_iter9_reg(5 - 1 downto 0);

    layer1_weights_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_11_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_12_address0 <= zext_ln58_reg_1830_pp0_iter10_reg(5 - 1 downto 0);

    layer1_weights_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_12_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_13_address0 <= zext_ln58_reg_1830_pp0_iter10_reg(5 - 1 downto 0);

    layer1_weights_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_13_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_14_address0 <= zext_ln58_reg_1830_pp0_iter10_reg(5 - 1 downto 0);

    layer1_weights_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_14_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_15_address0 <= zext_ln58_reg_1830_pp0_iter10_reg(5 - 1 downto 0);

    layer1_weights_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_15_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_16_address0 <= zext_ln58_reg_1830_pp0_iter10_reg(5 - 1 downto 0);

    layer1_weights_16_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_16_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_17_address0 <= zext_ln58_reg_1830_pp0_iter10_reg(5 - 1 downto 0);

    layer1_weights_17_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_17_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_1_address0 <= zext_ln58_fu_865_p1(5 - 1 downto 0);

    layer1_weights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_1_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_2_address0 <= zext_ln58_reg_1830(5 - 1 downto 0);

    layer1_weights_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_2_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_3_address0 <= zext_ln58_reg_1830_pp0_iter1_reg(5 - 1 downto 0);

    layer1_weights_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_3_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_4_address0 <= zext_ln58_reg_1830_pp0_iter2_reg(5 - 1 downto 0);

    layer1_weights_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_4_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_5_address0 <= zext_ln58_reg_1830_pp0_iter3_reg(5 - 1 downto 0);

    layer1_weights_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_5_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_6_address0 <= zext_ln58_reg_1830_pp0_iter4_reg(5 - 1 downto 0);

    layer1_weights_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_6_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_7_address0 <= zext_ln58_reg_1830_pp0_iter5_reg(5 - 1 downto 0);

    layer1_weights_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_7_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_8_address0 <= zext_ln58_reg_1830_pp0_iter6_reg(5 - 1 downto 0);

    layer1_weights_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_8_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_9_address0 <= zext_ln58_reg_1830_pp0_iter7_reg(5 - 1 downto 0);

    layer1_weights_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer1_weights_9_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln63_fu_883_p1 <= sext_ln63_cast_reg_1817(16 - 1 downto 0);
        sext_ln63_10_cast_fu_801_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_10),24));

        sext_ln63_11_cast_fu_797_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_11),24));

        sext_ln63_12_cast_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_12),24));

        sext_ln63_13_cast_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_13),24));

        sext_ln63_14_cast_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_14),24));

        sext_ln63_15_cast_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_15),24));

        sext_ln63_16_cast_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_16),24));

        sext_ln63_17_cast_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_17),24));

        sext_ln63_1_cast_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_1),24));

        sext_ln63_2_cast_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_2),24));

        sext_ln63_3_cast_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_3),24));

        sext_ln63_4_cast_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_4),24));

        sext_ln63_5_cast_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_5),24));

        sext_ln63_6_cast_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_6),24));

        sext_ln63_7_cast_fu_813_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_7),24));

        sext_ln63_8_cast_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_8),24));

        sext_ln63_9_cast_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63_9),24));

        sext_ln63_cast_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln63),24));

        sext_ln65_1_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(layer1_bias_load_reg_2091_pp0_iter19_reg),15));

        sext_ln65_fu_1245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(layer1_bias_load_reg_2091_pp0_iter19_reg),16));

    sum_3_fu_1260_p2 <= std_logic_vector(signed(sext_ln65_fu_1245_p1) + signed(sum_fu_1236_p4));
    sum_fu_1236_p1 <= grp_fu_1596_p3;
    sum_fu_1236_p4 <= sum_fu_1236_p1(23 downto 8);
    tmp_10_fu_976_p1 <= grp_fu_1492_p3;
    tmp_10_fu_976_p4 <= tmp_10_fu_976_p1(23 downto 8);
    tmp_11_fu_997_p1 <= grp_fu_1500_p3;
    tmp_11_fu_997_p4 <= tmp_11_fu_997_p1(23 downto 8);
    tmp_12_fu_1018_p1 <= grp_fu_1508_p3;
    tmp_12_fu_1018_p4 <= tmp_12_fu_1018_p1(23 downto 8);
    tmp_13_fu_1039_p1 <= grp_fu_1516_p3;
    tmp_13_fu_1039_p4 <= tmp_13_fu_1039_p1(23 downto 8);
    tmp_14_fu_1060_p1 <= grp_fu_1524_p3;
    tmp_14_fu_1060_p4 <= tmp_14_fu_1060_p1(23 downto 8);
    tmp_15_fu_1081_p1 <= grp_fu_1532_p3;
    tmp_15_fu_1081_p4 <= tmp_15_fu_1081_p1(23 downto 8);
    tmp_16_fu_1102_p1 <= grp_fu_1540_p3;
    tmp_16_fu_1102_p4 <= tmp_16_fu_1102_p1(23 downto 8);
    tmp_17_fu_1122_p1 <= grp_fu_1548_p3;
    tmp_17_fu_1122_p4 <= tmp_17_fu_1122_p1(23 downto 8);
    tmp_18_fu_1142_p1 <= grp_fu_1556_p3;
    tmp_18_fu_1142_p4 <= tmp_18_fu_1142_p1(23 downto 8);
    tmp_19_fu_1182_p1 <= grp_fu_1572_p3;
    tmp_19_fu_1182_p4 <= tmp_19_fu_1182_p1(23 downto 8);
    tmp_20_fu_1202_p1 <= grp_fu_1580_p3;
    tmp_20_fu_1202_p4 <= tmp_20_fu_1202_p1(23 downto 8);
    tmp_21_fu_1219_p1 <= grp_fu_1588_p3;
    tmp_21_fu_1219_p4 <= tmp_21_fu_1219_p1(23 downto 8);
    tmp_7_fu_913_p1 <= grp_fu_1468_p3;
    tmp_7_fu_913_p4 <= tmp_7_fu_913_p1(23 downto 8);
    tmp_8_fu_934_p1 <= grp_fu_1476_p3;
    tmp_8_fu_934_p4 <= tmp_8_fu_934_p1(23 downto 8);
    tmp_9_fu_955_p1 <= grp_fu_1484_p3;
    tmp_9_fu_955_p4 <= tmp_9_fu_955_p1(23 downto 8);
    tmp_s_fu_1162_p1 <= grp_fu_1564_p3;
    tmp_s_fu_1162_p4 <= tmp_s_fu_1162_p1(23 downto 8);
    trunc_ln_fu_1248_p1 <= grp_fu_1596_p3;
    trunc_ln_fu_1248_p4 <= trunc_ln_fu_1248_p1(22 downto 8);
    zext_ln58_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),64));
    zext_ln66_fu_1284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer1_output_20_fu_1278_p3),16));
end behav;
