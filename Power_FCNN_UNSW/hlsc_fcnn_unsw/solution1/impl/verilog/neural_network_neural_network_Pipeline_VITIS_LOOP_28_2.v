// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_28_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer2_output_address0,
        layer2_output_ce0,
        layer2_output_q0,
        conv_i_i13_i_i8,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        sum_4_out,
        sum_4_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] layer2_output_address0;
output   layer2_output_ce0;
input  [15:0] layer2_output_q0;
input  [15:0] conv_i_i13_i_i8;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [15:0] sum_4_out;
output   sum_4_out_ap_vld;

reg ap_idle;
reg layer2_output_ce0;
reg output_r_ce0;
reg output_r_we0;
reg sum_4_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln28_fu_253_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [4:0] f_x_lsb_table_address0;
reg    f_x_lsb_table_ce0;
wire   [10:0] f_x_lsb_table_q0;
wire   [4:0] exp_x_msb_2_m_1_table_address0;
reg    exp_x_msb_2_m_1_table_ce0;
wire   [24:0] exp_x_msb_2_m_1_table_q0;
wire   [4:0] exp_x_msb_1_table_address0;
reg    exp_x_msb_1_table_ce0;
wire   [24:0] exp_x_msb_1_table_q0;
wire    ap_block_pp0_stage0_11001;
wire  signed [16:0] conv_i_i13_i_i8_cast_fu_236_p1;
reg  signed [16:0] conv_i_i13_i_i8_cast_reg_675;
reg   [0:0] icmp_ln28_reg_680;
reg   [0:0] icmp_ln28_reg_680_pp0_iter1_reg;
reg   [0:0] icmp_ln28_reg_680_pp0_iter2_reg;
reg   [0:0] icmp_ln28_reg_680_pp0_iter3_reg;
reg   [0:0] icmp_ln28_reg_680_pp0_iter4_reg;
reg   [0:0] icmp_ln28_reg_680_pp0_iter5_reg;
wire   [63:0] zext_ln28_fu_265_p1;
reg   [63:0] zext_ln28_reg_684;
reg   [63:0] zext_ln28_reg_684_pp0_iter1_reg;
reg   [63:0] zext_ln28_reg_684_pp0_iter2_reg;
reg   [63:0] zext_ln28_reg_684_pp0_iter3_reg;
reg   [63:0] zext_ln28_reg_684_pp0_iter4_reg;
reg   [63:0] zext_ln28_reg_684_pp0_iter5_reg;
reg   [63:0] zext_ln28_reg_684_pp0_iter6_reg;
wire   [16:0] x_fu_279_p2;
reg   [16:0] x_reg_694;
wire   [0:0] tmp_1_fu_306_p3;
reg   [0:0] tmp_1_reg_699;
reg   [0:0] tmp_1_reg_699_pp0_iter2_reg;
reg   [0:0] tmp_1_reg_699_pp0_iter3_reg;
reg   [0:0] tmp_1_reg_699_pp0_iter4_reg;
reg   [0:0] tmp_1_reg_699_pp0_iter5_reg;
wire   [0:0] icmp_ln202_fu_370_p2;
reg   [0:0] icmp_ln202_reg_706;
wire   [0:0] icmp_ln202_1_fu_376_p2;
reg   [0:0] icmp_ln202_1_reg_711;
reg   [3:0] tmp_reg_716;
reg   [3:0] tmp_reg_716_pp0_iter2_reg;
wire   [1:0] trunc_ln217_fu_402_p1;
reg   [1:0] trunc_ln217_reg_721;
reg   [1:0] trunc_ln217_reg_721_pp0_iter2_reg;
reg   [1:0] trunc_ln217_reg_721_pp0_iter3_reg;
wire   [0:0] or_ln202_2_fu_436_p2;
reg   [0:0] or_ln202_2_reg_737;
reg   [10:0] f_x_lsb_reg_742;
reg   [10:0] f_x_lsb_reg_742_pp0_iter3_reg;
reg   [24:0] exp_x_msb_2_m_1_reg_748;
reg   [24:0] exp_x_msb_2_m_1_reg_748_pp0_iter3_reg;
wire   [0:0] or_ln202_4_fu_464_p2;
reg   [0:0] or_ln202_4_reg_754;
reg   [0:0] or_ln202_4_reg_754_pp0_iter3_reg;
reg   [0:0] or_ln202_4_reg_754_pp0_iter4_reg;
reg   [0:0] or_ln202_4_reg_754_pp0_iter5_reg;
reg   [18:0] trunc_ln2_reg_759;
wire   [24:0] exp_x_msb_2_lsb_m_1_fu_538_p2;
reg   [24:0] exp_x_msb_2_lsb_m_1_reg_769;
reg   [24:0] exp_x_msb_1_reg_774;
reg   [24:0] exp_x_msb_1_reg_774_pp0_iter5_reg;
reg   [24:0] y_lo_s_reg_780;
wire   [15:0] select_ln274_fu_635_p3;
reg   [15:0] select_ln274_reg_785;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln230_fu_414_p1;
wire   [63:0] zext_ln245_fu_419_p1;
wire   [63:0] zext_ln261_fu_506_p1;
reg   [15:0] sum_fu_146;
wire   [15:0] sum_4_fu_646_p2;
wire    ap_loop_init;
reg   [3:0] i_3_fu_150;
wire   [3:0] add_ln28_fu_259_p2;
reg   [3:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0_01001;
wire   [24:0] y_lo_fu_232_p0;
wire   [24:0] y_lo_fu_232_p1;
wire  signed [16:0] sext_ln30_fu_275_p1;
wire   [7:0] trunc_ln194_fu_294_p1;
wire   [0:0] tmp_2_fu_314_p3;
wire   [0:0] tmp_3_fu_328_p3;
wire   [0:0] tmp_4_fu_342_p3;
wire   [0:0] tmp_5_fu_356_p3;
wire   [3:0] x_l_int_fu_284_p4;
wire   [10:0] x_l_fract_fu_298_p3;
wire   [4:0] x_lsb_ind_fu_406_p3;
wire   [4:0] x_msb_ind_2_fu_392_p4;
wire   [0:0] xor_ln198_fu_336_p2;
wire   [0:0] overf_fu_322_p2;
wire   [0:0] xor_ln198_1_fu_350_p2;
wire   [0:0] xor_ln198_2_fu_364_p2;
wire   [0:0] or_ln202_1_fu_430_p2;
wire   [0:0] or_ln202_fu_424_p2;
wire   [0:0] tmp_6_fu_442_p3;
wire   [0:0] and_ln202_fu_454_p2;
wire   [0:0] xor_ln198_3_fu_449_p2;
wire   [0:0] or_ln202_3_fu_458_p2;
wire   [17:0] exp_x_lsb_m_1_fu_475_p4;
wire   [24:0] f_x_msb_2_lsb_fu_490_p0;
wire   [17:0] f_x_msb_2_lsb_fu_490_p1;
wire   [42:0] f_x_msb_2_lsb_fu_490_p2;
wire   [4:0] x_msb_ind_1_fu_469_p3;
wire   [18:0] shl_ln2_fu_514_p5;
wire   [19:0] zext_ln249_1_fu_524_p1;
wire   [19:0] zext_ln249_fu_511_p1;
wire   [19:0] add_ln249_fu_528_p2;
wire   [24:0] zext_ln249_2_fu_534_p1;
wire   [49:0] y_lo_fu_232_p2;
wire   [0:0] y_fu_561_p2;
wire   [24:0] y_l_fu_574_p2;
wire   [21:0] select_ln190_fu_566_p3;
wire   [21:0] y_1_fu_578_p4;
wire   [21:0] y_2_fu_588_p3;
wire   [1:0] tmp_7_fu_595_p4;
wire   [0:0] tmp_8_fu_611_p3;
wire   [0:0] overf_1_fu_605_p2;
wire   [0:0] overf_2_fu_619_p2;
wire   [15:0] tmp_s_fu_625_p4;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [42:0] f_x_msb_2_lsb_fu_490_p00;
wire   [42:0] f_x_msb_2_lsb_fu_490_p10;
wire   [49:0] y_lo_fu_232_p00;
wire   [49:0] y_lo_fu_232_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_done_reg = 1'b0;
end

neural_network_neural_network_Pipeline_VITIS_LOOP_28_2_f_x_lsb_table_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
f_x_lsb_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(f_x_lsb_table_address0),
    .ce0(f_x_lsb_table_ce0),
    .q0(f_x_lsb_table_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_28_2_exp_x_msb_2_m_1_table_ROM_AUTO_1R #(
    .DataWidth( 25 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
exp_x_msb_2_m_1_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_2_m_1_table_address0),
    .ce0(exp_x_msb_2_m_1_table_ce0),
    .q0(exp_x_msb_2_m_1_table_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_28_2_exp_x_msb_1_table_ROM_AUTO_1R #(
    .DataWidth( 25 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
exp_x_msb_1_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_1_table_address0),
    .ce0(exp_x_msb_1_table_ce0),
    .q0(exp_x_msb_1_table_q0)
);

neural_network_mul_25ns_25ns_50_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 50 ))
mul_25ns_25ns_50_1_1_U330(
    .din0(y_lo_fu_232_p0),
    .din1(y_lo_fu_232_p1),
    .dout(y_lo_fu_232_p2)
);

neural_network_mul_25ns_18ns_43_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 43 ))
mul_25ns_18ns_43_1_1_U331(
    .din0(f_x_msb_2_lsb_fu_490_p0),
    .din1(f_x_msb_2_lsb_fu_490_p1),
    .dout(f_x_msb_2_lsb_fu_490_p2)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln28_fu_253_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_3_fu_150 <= add_ln28_fu_259_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_3_fu_150 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sum_fu_146 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter7 == 1'b1)) begin
            sum_fu_146 <= sum_4_fu_646_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        conv_i_i13_i_i8_cast_reg_675 <= conv_i_i13_i_i8_cast_fu_236_p1;
        icmp_ln202_1_reg_711 <= icmp_ln202_1_fu_376_p2;
        icmp_ln202_reg_706 <= icmp_ln202_fu_370_p2;
        icmp_ln28_reg_680 <= icmp_ln28_fu_253_p2;
        icmp_ln28_reg_680_pp0_iter1_reg <= icmp_ln28_reg_680;
        or_ln202_2_reg_737 <= or_ln202_2_fu_436_p2;
        tmp_1_reg_699 <= x_fu_279_p2[32'd16];
        tmp_reg_716 <= {{x_fu_279_p2[10:7]}};
        trunc_ln217_reg_721 <= trunc_ln217_fu_402_p1;
        x_reg_694 <= x_fu_279_p2;
        zext_ln28_reg_684_pp0_iter1_reg[3 : 0] <= zext_ln28_reg_684[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        exp_x_msb_1_reg_774_pp0_iter5_reg <= exp_x_msb_1_reg_774;
        exp_x_msb_2_m_1_reg_748 <= exp_x_msb_2_m_1_table_q0;
        exp_x_msb_2_m_1_reg_748_pp0_iter3_reg <= exp_x_msb_2_m_1_reg_748;
        f_x_lsb_reg_742 <= f_x_lsb_table_q0;
        f_x_lsb_reg_742_pp0_iter3_reg <= f_x_lsb_reg_742;
        icmp_ln28_reg_680_pp0_iter2_reg <= icmp_ln28_reg_680_pp0_iter1_reg;
        icmp_ln28_reg_680_pp0_iter3_reg <= icmp_ln28_reg_680_pp0_iter2_reg;
        icmp_ln28_reg_680_pp0_iter4_reg <= icmp_ln28_reg_680_pp0_iter3_reg;
        icmp_ln28_reg_680_pp0_iter5_reg <= icmp_ln28_reg_680_pp0_iter4_reg;
        or_ln202_4_reg_754 <= or_ln202_4_fu_464_p2;
        or_ln202_4_reg_754_pp0_iter3_reg <= or_ln202_4_reg_754;
        or_ln202_4_reg_754_pp0_iter4_reg <= or_ln202_4_reg_754_pp0_iter3_reg;
        or_ln202_4_reg_754_pp0_iter5_reg <= or_ln202_4_reg_754_pp0_iter4_reg;
        select_ln274_reg_785 <= select_ln274_fu_635_p3;
        tmp_1_reg_699_pp0_iter2_reg <= tmp_1_reg_699;
        tmp_1_reg_699_pp0_iter3_reg <= tmp_1_reg_699_pp0_iter2_reg;
        tmp_1_reg_699_pp0_iter4_reg <= tmp_1_reg_699_pp0_iter3_reg;
        tmp_1_reg_699_pp0_iter5_reg <= tmp_1_reg_699_pp0_iter4_reg;
        tmp_reg_716_pp0_iter2_reg <= tmp_reg_716;
        trunc_ln217_reg_721_pp0_iter2_reg <= trunc_ln217_reg_721;
        trunc_ln217_reg_721_pp0_iter3_reg <= trunc_ln217_reg_721_pp0_iter2_reg;
        zext_ln28_reg_684_pp0_iter2_reg[3 : 0] <= zext_ln28_reg_684_pp0_iter1_reg[3 : 0];
        zext_ln28_reg_684_pp0_iter3_reg[3 : 0] <= zext_ln28_reg_684_pp0_iter2_reg[3 : 0];
        zext_ln28_reg_684_pp0_iter4_reg[3 : 0] <= zext_ln28_reg_684_pp0_iter3_reg[3 : 0];
        zext_ln28_reg_684_pp0_iter5_reg[3 : 0] <= zext_ln28_reg_684_pp0_iter4_reg[3 : 0];
        zext_ln28_reg_684_pp0_iter6_reg[3 : 0] <= zext_ln28_reg_684_pp0_iter5_reg[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln202_4_reg_754_pp0_iter3_reg == 1'd0))) begin
        exp_x_msb_1_reg_774 <= exp_x_msb_1_table_q0;
        exp_x_msb_2_lsb_m_1_reg_769 <= exp_x_msb_2_lsb_m_1_fu_538_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln202_4_reg_754 == 1'd0))) begin
        trunc_ln2_reg_759 <= {{f_x_msb_2_lsb_fu_490_p2[42:24]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln202_4_reg_754_pp0_iter4_reg == 1'd0))) begin
        y_lo_s_reg_780 <= {{y_lo_fu_232_p2[49:25]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln28_fu_253_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln28_reg_684[3 : 0] <= zext_ln28_fu_265_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_253_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i = 4'd0;
    end else begin
        ap_sig_allocacmp_i = i_3_fu_150;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        exp_x_msb_1_table_ce0 = 1'b1;
    end else begin
        exp_x_msb_1_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_x_msb_2_m_1_table_ce0 = 1'b1;
    end else begin
        exp_x_msb_2_m_1_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_x_lsb_table_ce0 = 1'b1;
    end else begin
        f_x_lsb_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_output_ce0 = 1'b1;
    end else begin
        layer2_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln28_reg_680_pp0_iter5_reg == 1'd1))) begin
        sum_4_out_ap_vld = 1'b1;
    end else begin
        sum_4_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln249_fu_528_p2 = (zext_ln249_1_fu_524_p1 + zext_ln249_fu_511_p1);

assign add_ln28_fu_259_p2 = (ap_sig_allocacmp_i + 4'd1);

assign and_ln202_fu_454_p2 = (icmp_ln202_reg_706 & icmp_ln202_1_reg_711);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv_i_i13_i_i8_cast_fu_236_p1 = $signed(conv_i_i13_i_i8);

assign exp_x_lsb_m_1_fu_475_p4 = {{{trunc_ln217_reg_721_pp0_iter2_reg}, {5'd0}}, {f_x_lsb_reg_742}};

assign exp_x_msb_1_table_address0 = zext_ln261_fu_506_p1;

assign exp_x_msb_2_lsb_m_1_fu_538_p2 = (exp_x_msb_2_m_1_reg_748_pp0_iter3_reg + zext_ln249_2_fu_534_p1);

assign exp_x_msb_2_m_1_table_address0 = zext_ln245_fu_419_p1;

assign f_x_lsb_table_address0 = zext_ln230_fu_414_p1;

assign f_x_msb_2_lsb_fu_490_p0 = f_x_msb_2_lsb_fu_490_p00;

assign f_x_msb_2_lsb_fu_490_p00 = exp_x_msb_2_m_1_reg_748;

assign f_x_msb_2_lsb_fu_490_p1 = f_x_msb_2_lsb_fu_490_p10;

assign f_x_msb_2_lsb_fu_490_p10 = exp_x_lsb_m_1_fu_475_p4;

assign icmp_ln202_1_fu_376_p2 = ((x_l_fract_fu_298_p3 > 11'd1280) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_370_p2 = ((x_l_int_fu_284_p4 == 4'd7) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_253_p2 = ((ap_sig_allocacmp_i == 4'd10) ? 1'b1 : 1'b0);

assign layer2_output_address0 = zext_ln28_fu_265_p1;

assign or_ln202_1_fu_430_p2 = (xor_ln198_2_fu_364_p2 | xor_ln198_1_fu_350_p2);

assign or_ln202_2_fu_436_p2 = (or_ln202_fu_424_p2 | or_ln202_1_fu_430_p2);

assign or_ln202_3_fu_458_p2 = (xor_ln198_3_fu_449_p2 | and_ln202_fu_454_p2);

assign or_ln202_4_fu_464_p2 = (or_ln202_3_fu_458_p2 | or_ln202_2_reg_737);

assign or_ln202_fu_424_p2 = (xor_ln198_fu_336_p2 | overf_fu_322_p2);

assign output_r_address0 = zext_ln28_reg_684_pp0_iter6_reg;

assign output_r_d0 = select_ln274_reg_785;

assign overf_1_fu_605_p2 = ((tmp_7_fu_595_p4 != 2'd0) ? 1'b1 : 1'b0);

assign overf_2_fu_619_p2 = (tmp_8_fu_611_p3 | overf_1_fu_605_p2);

assign overf_fu_322_p2 = (tmp_2_fu_314_p3 ^ tmp_1_fu_306_p3);

assign select_ln190_fu_566_p3 = ((y_fu_561_p2[0:0] == 1'b1) ? 22'd4194303 : 22'd0);

assign select_ln274_fu_635_p3 = ((overf_2_fu_619_p2[0:0] == 1'b1) ? 16'd65535 : tmp_s_fu_625_p4);

assign sext_ln30_fu_275_p1 = $signed(layer2_output_q0);

assign shl_ln2_fu_514_p5 = {{{{trunc_ln217_reg_721_pp0_iter3_reg}, {5'd0}}, {f_x_lsb_reg_742_pp0_iter3_reg}}, {1'd0}};

assign sum_4_fu_646_p2 = (select_ln274_reg_785 + sum_fu_146);

assign sum_4_out = sum_fu_146;

assign tmp_1_fu_306_p3 = x_fu_279_p2[32'd16];

assign tmp_2_fu_314_p3 = x_fu_279_p2[32'd11];

assign tmp_3_fu_328_p3 = x_fu_279_p2[32'd12];

assign tmp_4_fu_342_p3 = x_fu_279_p2[32'd13];

assign tmp_5_fu_356_p3 = x_fu_279_p2[32'd14];

assign tmp_6_fu_442_p3 = x_reg_694[32'd15];

assign tmp_7_fu_595_p4 = {{y_2_fu_588_p3[21:20]}};

assign tmp_8_fu_611_p3 = y_2_fu_588_p3[32'd19];

assign tmp_s_fu_625_p4 = {{y_2_fu_588_p3[18:3]}};

assign trunc_ln194_fu_294_p1 = x_fu_279_p2[7:0];

assign trunc_ln217_fu_402_p1 = x_fu_279_p2[1:0];

assign x_fu_279_p2 = ($signed(sext_ln30_fu_275_p1) - $signed(conv_i_i13_i_i8_cast_reg_675));

assign x_l_fract_fu_298_p3 = {{trunc_ln194_fu_294_p1}, {3'd0}};

assign x_l_int_fu_284_p4 = {{x_fu_279_p2[11:8]}};

assign x_lsb_ind_fu_406_p3 = {{trunc_ln217_fu_402_p1}, {3'd0}};

assign x_msb_ind_1_fu_469_p3 = {{tmp_1_reg_699_pp0_iter2_reg}, {tmp_reg_716_pp0_iter2_reg}};

assign x_msb_ind_2_fu_392_p4 = {{x_fu_279_p2[6:2]}};

assign xor_ln198_1_fu_350_p2 = (tmp_4_fu_342_p3 ^ tmp_1_fu_306_p3);

assign xor_ln198_2_fu_364_p2 = (tmp_5_fu_356_p3 ^ tmp_1_fu_306_p3);

assign xor_ln198_3_fu_449_p2 = (tmp_6_fu_442_p3 ^ tmp_1_reg_699);

assign xor_ln198_fu_336_p2 = (tmp_3_fu_328_p3 ^ tmp_1_fu_306_p3);

assign y_1_fu_578_p4 = {{y_l_fu_574_p2[24:3]}};

assign y_2_fu_588_p3 = ((or_ln202_4_reg_754_pp0_iter5_reg[0:0] == 1'b1) ? select_ln190_fu_566_p3 : y_1_fu_578_p4);

assign y_fu_561_p2 = (tmp_1_reg_699_pp0_iter5_reg ^ 1'd1);

assign y_l_fu_574_p2 = (exp_x_msb_1_reg_774_pp0_iter5_reg + y_lo_s_reg_780);

assign y_lo_fu_232_p0 = y_lo_fu_232_p00;

assign y_lo_fu_232_p00 = exp_x_msb_2_lsb_m_1_reg_769;

assign y_lo_fu_232_p1 = y_lo_fu_232_p10;

assign y_lo_fu_232_p10 = exp_x_msb_1_reg_774;

assign zext_ln230_fu_414_p1 = x_lsb_ind_fu_406_p3;

assign zext_ln245_fu_419_p1 = x_msb_ind_2_fu_392_p4;

assign zext_ln249_1_fu_524_p1 = shl_ln2_fu_514_p5;

assign zext_ln249_2_fu_534_p1 = add_ln249_fu_528_p2;

assign zext_ln249_fu_511_p1 = trunc_ln2_reg_759;

assign zext_ln261_fu_506_p1 = x_msb_ind_1_fu_469_p3;

assign zext_ln28_fu_265_p1 = ap_sig_allocacmp_i;

always @ (posedge ap_clk) begin
    zext_ln28_reg_684[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln28_reg_684_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln28_reg_684_pp0_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln28_reg_684_pp0_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln28_reg_684_pp0_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln28_reg_684_pp0_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln28_reg_684_pp0_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_28_2
