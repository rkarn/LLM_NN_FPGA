// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_52_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        zext_ln55,
        zext_ln55_1,
        zext_ln55_2,
        zext_ln55_3,
        zext_ln55_4,
        zext_ln55_5,
        zext_ln55_6,
        zext_ln55_7,
        zext_ln55_8,
        zext_ln55_9,
        zext_ln55_10,
        zext_ln55_11,
        zext_ln55_12,
        zext_ln55_13,
        zext_ln55_14,
        zext_ln55_15,
        zext_ln55_16,
        zext_ln55_17,
        zext_ln55_18,
        zext_ln55_19,
        layer2_output_address0,
        layer2_output_ce0,
        layer2_output_we0,
        layer2_output_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [14:0] zext_ln55;
input  [14:0] zext_ln55_1;
input  [14:0] zext_ln55_2;
input  [14:0] zext_ln55_3;
input  [14:0] zext_ln55_4;
input  [14:0] zext_ln55_5;
input  [14:0] zext_ln55_6;
input  [14:0] zext_ln55_7;
input  [14:0] zext_ln55_8;
input  [14:0] zext_ln55_9;
input  [14:0] zext_ln55_10;
input  [14:0] zext_ln55_11;
input  [14:0] zext_ln55_12;
input  [14:0] zext_ln55_13;
input  [14:0] zext_ln55_14;
input  [14:0] zext_ln55_15;
input  [14:0] zext_ln55_16;
input  [14:0] zext_ln55_17;
input  [14:0] zext_ln55_18;
input  [14:0] zext_ln55_19;
output  [2:0] layer2_output_address0;
output   layer2_output_ce0;
output   layer2_output_we0;
output  [15:0] layer2_output_d0;

reg ap_idle;
reg layer2_output_ce0;
reg layer2_output_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_state11_pp0_stage0_iter10;
wire    ap_block_state12_pp0_stage0_iter11;
wire    ap_block_state13_pp0_stage0_iter12;
wire    ap_block_state14_pp0_stage0_iter13;
wire    ap_block_state15_pp0_stage0_iter14;
wire    ap_block_state16_pp0_stage0_iter15;
wire    ap_block_state17_pp0_stage0_iter16;
wire    ap_block_state18_pp0_stage0_iter17;
wire    ap_block_state19_pp0_stage0_iter18;
wire    ap_block_state20_pp0_stage0_iter19;
wire    ap_block_state21_pp0_stage0_iter20;
wire    ap_block_state22_pp0_stage0_iter21;
wire    ap_block_state23_pp0_stage0_iter22;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln52_fu_620_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [2:0] layer2_weights_0_address0;
reg    layer2_weights_0_ce0;
wire   [10:0] layer2_weights_0_q0;
wire   [2:0] layer2_weights_1_address0;
reg    layer2_weights_1_ce0;
wire  signed [10:0] layer2_weights_1_q0;
wire   [2:0] layer2_weights_2_address0;
reg    layer2_weights_2_ce0;
wire  signed [10:0] layer2_weights_2_q0;
wire   [2:0] layer2_weights_3_address0;
reg    layer2_weights_3_ce0;
wire  signed [10:0] layer2_weights_3_q0;
wire   [2:0] layer2_weights_4_address0;
reg    layer2_weights_4_ce0;
wire  signed [9:0] layer2_weights_4_q0;
wire   [2:0] layer2_weights_5_address0;
reg    layer2_weights_5_ce0;
wire  signed [9:0] layer2_weights_5_q0;
wire   [2:0] layer2_weights_6_address0;
reg    layer2_weights_6_ce0;
wire  signed [9:0] layer2_weights_6_q0;
wire   [2:0] layer2_weights_7_address0;
reg    layer2_weights_7_ce0;
wire  signed [9:0] layer2_weights_7_q0;
wire   [2:0] layer2_weights_8_address0;
reg    layer2_weights_8_ce0;
wire  signed [10:0] layer2_weights_8_q0;
wire   [2:0] layer2_weights_9_address0;
reg    layer2_weights_9_ce0;
wire  signed [10:0] layer2_weights_9_q0;
wire   [2:0] layer2_weights_10_address0;
reg    layer2_weights_10_ce0;
wire  signed [10:0] layer2_weights_10_q0;
wire   [2:0] layer2_weights_11_address0;
reg    layer2_weights_11_ce0;
wire  signed [9:0] layer2_weights_11_q0;
wire   [2:0] layer2_weights_12_address0;
reg    layer2_weights_12_ce0;
wire  signed [11:0] layer2_weights_12_q0;
wire   [2:0] layer2_weights_13_address0;
reg    layer2_weights_13_ce0;
wire  signed [10:0] layer2_weights_13_q0;
wire   [2:0] layer2_weights_14_address0;
reg    layer2_weights_14_ce0;
wire  signed [10:0] layer2_weights_14_q0;
wire   [2:0] layer2_weights_15_address0;
reg    layer2_weights_15_ce0;
wire  signed [9:0] layer2_weights_15_q0;
wire   [2:0] layer2_weights_16_address0;
reg    layer2_weights_16_ce0;
wire  signed [10:0] layer2_weights_16_q0;
wire   [2:0] layer2_weights_17_address0;
reg    layer2_weights_17_ce0;
wire  signed [10:0] layer2_weights_17_q0;
wire   [2:0] layer2_weights_18_address0;
reg    layer2_weights_18_ce0;
wire  signed [10:0] layer2_weights_18_q0;
wire   [2:0] layer2_weights_19_address0;
reg    layer2_weights_19_ce0;
wire  signed [10:0] layer2_weights_19_q0;
wire   [2:0] layer2_bias_address0;
reg    layer2_bias_ce0;
wire   [8:0] layer2_bias_q0;
wire   [23:0] zext_ln55_19_cast_fu_532_p1;
reg   [23:0] zext_ln55_19_cast_reg_1229;
wire    ap_block_pp0_stage0_11001;
wire   [23:0] zext_ln55_18_cast_fu_536_p1;
reg   [23:0] zext_ln55_18_cast_reg_1234;
wire   [23:0] zext_ln55_17_cast_fu_540_p1;
reg   [23:0] zext_ln55_17_cast_reg_1239;
wire   [23:0] zext_ln55_16_cast_fu_544_p1;
reg   [23:0] zext_ln55_16_cast_reg_1244;
wire   [23:0] zext_ln55_15_cast_fu_548_p1;
reg   [23:0] zext_ln55_15_cast_reg_1249;
wire   [23:0] zext_ln55_14_cast_fu_552_p1;
reg   [23:0] zext_ln55_14_cast_reg_1254;
wire   [23:0] zext_ln55_13_cast_fu_556_p1;
reg   [23:0] zext_ln55_13_cast_reg_1259;
wire   [23:0] zext_ln55_12_cast_fu_560_p1;
reg   [23:0] zext_ln55_12_cast_reg_1264;
wire   [23:0] zext_ln55_11_cast_fu_564_p1;
reg   [23:0] zext_ln55_11_cast_reg_1269;
wire   [23:0] zext_ln55_10_cast_fu_568_p1;
reg   [23:0] zext_ln55_10_cast_reg_1274;
wire   [23:0] zext_ln55_9_cast_fu_572_p1;
reg   [23:0] zext_ln55_9_cast_reg_1279;
wire   [23:0] zext_ln55_8_cast_fu_576_p1;
reg   [23:0] zext_ln55_8_cast_reg_1284;
wire   [23:0] zext_ln55_7_cast_fu_580_p1;
reg   [23:0] zext_ln55_7_cast_reg_1289;
wire   [23:0] zext_ln55_6_cast_fu_584_p1;
reg   [23:0] zext_ln55_6_cast_reg_1294;
wire   [23:0] zext_ln55_5_cast_fu_588_p1;
reg   [23:0] zext_ln55_5_cast_reg_1299;
wire   [23:0] zext_ln55_4_cast_fu_592_p1;
reg   [23:0] zext_ln55_4_cast_reg_1304;
wire   [23:0] zext_ln55_3_cast_fu_596_p1;
reg   [23:0] zext_ln55_3_cast_reg_1309;
wire   [23:0] zext_ln55_2_cast_fu_600_p1;
reg   [23:0] zext_ln55_2_cast_reg_1314;
wire   [23:0] zext_ln55_1_cast_fu_604_p1;
reg   [23:0] zext_ln55_1_cast_reg_1319;
wire   [23:0] zext_ln55_cast_fu_608_p1;
reg   [23:0] zext_ln55_cast_reg_1324;
wire   [63:0] i_1_cast_fu_632_p1;
reg   [63:0] i_1_cast_reg_1333;
reg   [63:0] i_1_cast_reg_1333_pp0_iter1_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter2_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter3_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter4_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter5_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter6_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter7_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter8_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter9_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter10_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter11_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter12_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter13_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter14_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter15_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter16_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter17_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter18_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter19_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter20_reg;
reg   [63:0] i_1_cast_reg_1333_pp0_iter21_reg;
reg  signed [10:0] layer2_weights_0_load_reg_1367;
reg   [15:0] tmp_s_reg_1382;
wire    ap_block_pp0_stage0;
reg   [2:0] i_fu_122;
wire   [2:0] add_ln52_fu_626_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_i_1;
wire   [14:0] mul_ln55_fu_650_p1;
wire   [23:0] mul_ln55_fu_650_p2;
wire  signed [23:0] tmp_1_fu_680_p1;
wire   [23:0] grp_fu_1070_p3;
wire   [15:0] tmp_1_fu_680_p4;
wire  signed [23:0] tmp_2_fu_701_p1;
wire   [23:0] grp_fu_1078_p3;
wire   [15:0] tmp_2_fu_701_p4;
wire  signed [23:0] tmp_3_fu_722_p1;
wire   [23:0] grp_fu_1086_p3;
wire   [15:0] tmp_3_fu_722_p4;
wire  signed [23:0] tmp_4_fu_743_p1;
wire   [23:0] grp_fu_1094_p3;
wire   [15:0] tmp_4_fu_743_p4;
wire  signed [23:0] tmp_5_fu_764_p1;
wire   [23:0] grp_fu_1102_p3;
wire   [15:0] tmp_5_fu_764_p4;
wire  signed [23:0] tmp_6_fu_785_p1;
wire   [23:0] grp_fu_1110_p3;
wire   [15:0] tmp_6_fu_785_p4;
wire  signed [23:0] tmp_7_fu_806_p1;
wire   [23:0] grp_fu_1118_p3;
wire   [15:0] tmp_7_fu_806_p4;
wire  signed [23:0] tmp_8_fu_827_p1;
wire   [23:0] grp_fu_1126_p3;
wire   [15:0] tmp_8_fu_827_p4;
wire  signed [23:0] tmp_9_fu_848_p1;
wire   [23:0] grp_fu_1134_p3;
wire   [15:0] tmp_9_fu_848_p4;
wire  signed [23:0] tmp_10_fu_869_p1;
wire   [23:0] grp_fu_1142_p3;
wire   [15:0] tmp_10_fu_869_p4;
wire  signed [23:0] tmp_11_fu_890_p1;
wire   [23:0] grp_fu_1150_p3;
wire   [15:0] tmp_11_fu_890_p4;
wire  signed [23:0] tmp_12_fu_911_p1;
wire   [23:0] grp_fu_1158_p3;
wire   [15:0] tmp_12_fu_911_p4;
wire  signed [23:0] tmp_13_fu_932_p1;
wire   [23:0] grp_fu_1166_p3;
wire   [15:0] tmp_13_fu_932_p4;
wire  signed [23:0] tmp_14_fu_953_p1;
wire   [23:0] grp_fu_1174_p3;
wire   [15:0] tmp_14_fu_953_p4;
wire  signed [23:0] tmp_15_fu_974_p1;
wire   [23:0] grp_fu_1182_p3;
wire   [15:0] tmp_15_fu_974_p4;
wire  signed [23:0] tmp_16_fu_995_p1;
wire   [23:0] grp_fu_1190_p3;
wire   [15:0] tmp_16_fu_995_p4;
wire  signed [23:0] tmp_17_fu_1016_p1;
wire   [23:0] grp_fu_1198_p3;
wire   [15:0] tmp_17_fu_1016_p4;
wire  signed [23:0] tmp_18_fu_1033_p1;
wire   [23:0] grp_fu_1206_p3;
wire   [15:0] tmp_18_fu_1033_p4;
wire  signed [23:0] trunc_ln55_s_fu_1050_p1;
wire   [23:0] grp_fu_1214_p3;
wire  signed [15:0] sext_ln57_fu_1059_p1;
wire   [15:0] trunc_ln55_s_fu_1050_p4;
wire   [14:0] grp_fu_1070_p1;
wire   [23:0] grp_fu_1070_p2;
wire   [14:0] grp_fu_1078_p1;
wire   [23:0] grp_fu_1078_p2;
wire   [14:0] grp_fu_1086_p1;
wire   [23:0] grp_fu_1086_p2;
wire   [14:0] grp_fu_1094_p1;
wire   [23:0] grp_fu_1094_p2;
wire   [14:0] grp_fu_1102_p1;
wire   [23:0] grp_fu_1102_p2;
wire   [14:0] grp_fu_1110_p1;
wire   [23:0] grp_fu_1110_p2;
wire   [14:0] grp_fu_1118_p1;
wire   [23:0] grp_fu_1118_p2;
wire   [14:0] grp_fu_1126_p1;
wire   [23:0] grp_fu_1126_p2;
wire   [14:0] grp_fu_1134_p1;
wire   [23:0] grp_fu_1134_p2;
wire   [14:0] grp_fu_1142_p1;
wire   [23:0] grp_fu_1142_p2;
wire   [14:0] grp_fu_1150_p1;
wire   [23:0] grp_fu_1150_p2;
wire   [14:0] grp_fu_1158_p1;
wire   [23:0] grp_fu_1158_p2;
wire   [14:0] grp_fu_1166_p1;
wire   [23:0] grp_fu_1166_p2;
wire   [14:0] grp_fu_1174_p1;
wire   [23:0] grp_fu_1174_p2;
wire   [14:0] grp_fu_1182_p1;
wire   [23:0] grp_fu_1182_p2;
wire   [14:0] grp_fu_1190_p1;
wire   [23:0] grp_fu_1190_p2;
wire   [14:0] grp_fu_1198_p1;
wire   [23:0] grp_fu_1198_p2;
wire   [14:0] grp_fu_1206_p1;
wire   [23:0] grp_fu_1206_p2;
wire   [14:0] grp_fu_1214_p1;
wire   [23:0] grp_fu_1214_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg    ap_loop_exit_ready_pp0_iter16_reg;
reg    ap_loop_exit_ready_pp0_iter17_reg;
reg    ap_loop_exit_ready_pp0_iter18_reg;
reg    ap_loop_exit_ready_pp0_iter19_reg;
reg    ap_loop_exit_ready_pp0_iter20_reg;
reg    ap_loop_exit_ready_pp0_iter21_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
#0 ap_done_reg = 1'b0;
end

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_0_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_0_address0),
    .ce0(layer2_weights_0_ce0),
    .q0(layer2_weights_0_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_1_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_1_address0),
    .ce0(layer2_weights_1_ce0),
    .q0(layer2_weights_1_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_2_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_2_address0),
    .ce0(layer2_weights_2_ce0),
    .q0(layer2_weights_2_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_3_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_3_address0),
    .ce0(layer2_weights_3_ce0),
    .q0(layer2_weights_3_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_4_ROM_AUTO_1R #(
    .DataWidth( 10 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_4_address0),
    .ce0(layer2_weights_4_ce0),
    .q0(layer2_weights_4_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_5_ROM_AUTO_1R #(
    .DataWidth( 10 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_5_address0),
    .ce0(layer2_weights_5_ce0),
    .q0(layer2_weights_5_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_6_ROM_AUTO_1R #(
    .DataWidth( 10 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_6_address0),
    .ce0(layer2_weights_6_ce0),
    .q0(layer2_weights_6_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_7_ROM_AUTO_1R #(
    .DataWidth( 10 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_7_address0),
    .ce0(layer2_weights_7_ce0),
    .q0(layer2_weights_7_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_8_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_8_address0),
    .ce0(layer2_weights_8_ce0),
    .q0(layer2_weights_8_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_9_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_9_address0),
    .ce0(layer2_weights_9_ce0),
    .q0(layer2_weights_9_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_10_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_10_address0),
    .ce0(layer2_weights_10_ce0),
    .q0(layer2_weights_10_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_11_ROM_AUTO_1R #(
    .DataWidth( 10 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_11_address0),
    .ce0(layer2_weights_11_ce0),
    .q0(layer2_weights_11_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_12_ROM_AUTO_1R #(
    .DataWidth( 12 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_12_address0),
    .ce0(layer2_weights_12_ce0),
    .q0(layer2_weights_12_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_13_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_13_address0),
    .ce0(layer2_weights_13_ce0),
    .q0(layer2_weights_13_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_14_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_14_address0),
    .ce0(layer2_weights_14_ce0),
    .q0(layer2_weights_14_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_15_ROM_AUTO_1R #(
    .DataWidth( 10 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_15_address0),
    .ce0(layer2_weights_15_ce0),
    .q0(layer2_weights_15_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_16_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_16_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_16_address0),
    .ce0(layer2_weights_16_ce0),
    .q0(layer2_weights_16_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_17_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_17_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_17_address0),
    .ce0(layer2_weights_17_ce0),
    .q0(layer2_weights_17_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_18_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_18_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_18_address0),
    .ce0(layer2_weights_18_ce0),
    .q0(layer2_weights_18_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_weights_19_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_weights_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_weights_19_address0),
    .ce0(layer2_weights_19_ce0),
    .q0(layer2_weights_19_q0)
);

neural_network_neural_network_Pipeline_VITIS_LOOP_52_3_layer2_bias_ROM_AUTO_1R #(
    .DataWidth( 9 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
layer2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(layer2_bias_address0),
    .ce0(layer2_bias_ce0),
    .q0(layer2_bias_q0)
);

neural_network_mul_11s_15ns_24_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 15 ),
    .dout_WIDTH( 24 ))
mul_11s_15ns_24_1_1_U62(
    .din0(layer2_weights_0_load_reg_1367),
    .din1(mul_ln55_fu_650_p1),
    .dout(mul_ln55_fu_650_p2)
);

neural_network_mac_muladd_11s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_15ns_24ns_24_4_1_U63(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_1_q0),
    .din1(grp_fu_1070_p1),
    .din2(grp_fu_1070_p2),
    .ce(1'b1),
    .dout(grp_fu_1070_p3)
);

neural_network_mac_muladd_11s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_15ns_24ns_24_4_1_U64(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_2_q0),
    .din1(grp_fu_1078_p1),
    .din2(grp_fu_1078_p2),
    .ce(1'b1),
    .dout(grp_fu_1078_p3)
);

neural_network_mac_muladd_11s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_15ns_24ns_24_4_1_U65(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_3_q0),
    .din1(grp_fu_1086_p1),
    .din2(grp_fu_1086_p2),
    .ce(1'b1),
    .dout(grp_fu_1086_p3)
);

neural_network_mac_muladd_10s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_15ns_24ns_24_4_1_U66(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_4_q0),
    .din1(grp_fu_1094_p1),
    .din2(grp_fu_1094_p2),
    .ce(1'b1),
    .dout(grp_fu_1094_p3)
);

neural_network_mac_muladd_10s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_15ns_24ns_24_4_1_U67(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_5_q0),
    .din1(grp_fu_1102_p1),
    .din2(grp_fu_1102_p2),
    .ce(1'b1),
    .dout(grp_fu_1102_p3)
);

neural_network_mac_muladd_10s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_15ns_24ns_24_4_1_U68(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_6_q0),
    .din1(grp_fu_1110_p1),
    .din2(grp_fu_1110_p2),
    .ce(1'b1),
    .dout(grp_fu_1110_p3)
);

neural_network_mac_muladd_10s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_15ns_24ns_24_4_1_U69(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_7_q0),
    .din1(grp_fu_1118_p1),
    .din2(grp_fu_1118_p2),
    .ce(1'b1),
    .dout(grp_fu_1118_p3)
);

neural_network_mac_muladd_11s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_15ns_24ns_24_4_1_U70(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_8_q0),
    .din1(grp_fu_1126_p1),
    .din2(grp_fu_1126_p2),
    .ce(1'b1),
    .dout(grp_fu_1126_p3)
);

neural_network_mac_muladd_11s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_15ns_24ns_24_4_1_U71(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_9_q0),
    .din1(grp_fu_1134_p1),
    .din2(grp_fu_1134_p2),
    .ce(1'b1),
    .dout(grp_fu_1134_p3)
);

neural_network_mac_muladd_11s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_15ns_24ns_24_4_1_U72(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_10_q0),
    .din1(grp_fu_1142_p1),
    .din2(grp_fu_1142_p2),
    .ce(1'b1),
    .dout(grp_fu_1142_p3)
);

neural_network_mac_muladd_10s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_15ns_24ns_24_4_1_U73(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_11_q0),
    .din1(grp_fu_1150_p1),
    .din2(grp_fu_1150_p2),
    .ce(1'b1),
    .dout(grp_fu_1150_p3)
);

neural_network_mac_muladd_12s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_12s_15ns_24ns_24_4_1_U74(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_12_q0),
    .din1(grp_fu_1158_p1),
    .din2(grp_fu_1158_p2),
    .ce(1'b1),
    .dout(grp_fu_1158_p3)
);

neural_network_mac_muladd_11s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_15ns_24ns_24_4_1_U75(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_13_q0),
    .din1(grp_fu_1166_p1),
    .din2(grp_fu_1166_p2),
    .ce(1'b1),
    .dout(grp_fu_1166_p3)
);

neural_network_mac_muladd_11s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_15ns_24ns_24_4_1_U76(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_14_q0),
    .din1(grp_fu_1174_p1),
    .din2(grp_fu_1174_p2),
    .ce(1'b1),
    .dout(grp_fu_1174_p3)
);

neural_network_mac_muladd_10s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 10 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_10s_15ns_24ns_24_4_1_U77(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_15_q0),
    .din1(grp_fu_1182_p1),
    .din2(grp_fu_1182_p2),
    .ce(1'b1),
    .dout(grp_fu_1182_p3)
);

neural_network_mac_muladd_11s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_15ns_24ns_24_4_1_U78(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_16_q0),
    .din1(grp_fu_1190_p1),
    .din2(grp_fu_1190_p2),
    .ce(1'b1),
    .dout(grp_fu_1190_p3)
);

neural_network_mac_muladd_11s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_15ns_24ns_24_4_1_U79(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_17_q0),
    .din1(grp_fu_1198_p1),
    .din2(grp_fu_1198_p2),
    .ce(1'b1),
    .dout(grp_fu_1198_p3)
);

neural_network_mac_muladd_11s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_15ns_24ns_24_4_1_U80(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_18_q0),
    .din1(grp_fu_1206_p1),
    .din2(grp_fu_1206_p2),
    .ce(1'b1),
    .dout(grp_fu_1206_p3)
);

neural_network_mac_muladd_11s_15ns_24ns_24_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 15 ),
    .din2_WIDTH( 24 ),
    .dout_WIDTH( 24 ))
mac_muladd_11s_15ns_24ns_24_4_1_U81(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(layer2_weights_19_q0),
    .din1(grp_fu_1214_p1),
    .din2(grp_fu_1214_p2),
    .ce(1'b1),
    .dout(grp_fu_1214_p3)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter21_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln52_fu_620_p2 == 1'd0))) begin
            i_fu_122 <= add_ln52_fu_626_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_122 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
        ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
        ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
        ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
        ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
        ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        i_1_cast_reg_1333_pp0_iter10_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter9_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter11_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter10_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter12_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter11_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter13_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter12_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter14_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter13_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter15_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter14_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter16_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter15_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter17_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter16_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter18_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter17_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter19_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter18_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter20_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter19_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter21_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter20_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter2_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter1_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter3_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter2_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter4_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter3_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter5_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter4_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter6_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter5_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter7_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter6_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter8_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter7_reg[2 : 0];
        i_1_cast_reg_1333_pp0_iter9_reg[2 : 0] <= i_1_cast_reg_1333_pp0_iter8_reg[2 : 0];
        tmp_s_reg_1382 <= {{mul_ln55_fu_650_p2[23:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_1_cast_reg_1333_pp0_iter1_reg[2 : 0] <= i_1_cast_reg_1333[2 : 0];
        layer2_weights_0_load_reg_1367 <= layer2_weights_0_q0;
        zext_ln55_10_cast_reg_1274[14 : 0] <= zext_ln55_10_cast_fu_568_p1[14 : 0];
        zext_ln55_11_cast_reg_1269[14 : 0] <= zext_ln55_11_cast_fu_564_p1[14 : 0];
        zext_ln55_12_cast_reg_1264[14 : 0] <= zext_ln55_12_cast_fu_560_p1[14 : 0];
        zext_ln55_13_cast_reg_1259[14 : 0] <= zext_ln55_13_cast_fu_556_p1[14 : 0];
        zext_ln55_14_cast_reg_1254[14 : 0] <= zext_ln55_14_cast_fu_552_p1[14 : 0];
        zext_ln55_15_cast_reg_1249[14 : 0] <= zext_ln55_15_cast_fu_548_p1[14 : 0];
        zext_ln55_16_cast_reg_1244[14 : 0] <= zext_ln55_16_cast_fu_544_p1[14 : 0];
        zext_ln55_17_cast_reg_1239[14 : 0] <= zext_ln55_17_cast_fu_540_p1[14 : 0];
        zext_ln55_18_cast_reg_1234[14 : 0] <= zext_ln55_18_cast_fu_536_p1[14 : 0];
        zext_ln55_19_cast_reg_1229[14 : 0] <= zext_ln55_19_cast_fu_532_p1[14 : 0];
        zext_ln55_1_cast_reg_1319[14 : 0] <= zext_ln55_1_cast_fu_604_p1[14 : 0];
        zext_ln55_2_cast_reg_1314[14 : 0] <= zext_ln55_2_cast_fu_600_p1[14 : 0];
        zext_ln55_3_cast_reg_1309[14 : 0] <= zext_ln55_3_cast_fu_596_p1[14 : 0];
        zext_ln55_4_cast_reg_1304[14 : 0] <= zext_ln55_4_cast_fu_592_p1[14 : 0];
        zext_ln55_5_cast_reg_1299[14 : 0] <= zext_ln55_5_cast_fu_588_p1[14 : 0];
        zext_ln55_6_cast_reg_1294[14 : 0] <= zext_ln55_6_cast_fu_584_p1[14 : 0];
        zext_ln55_7_cast_reg_1289[14 : 0] <= zext_ln55_7_cast_fu_580_p1[14 : 0];
        zext_ln55_8_cast_reg_1284[14 : 0] <= zext_ln55_8_cast_fu_576_p1[14 : 0];
        zext_ln55_9_cast_reg_1279[14 : 0] <= zext_ln55_9_cast_fu_572_p1[14 : 0];
        zext_ln55_cast_reg_1324[14 : 0] <= zext_ln55_cast_fu_608_p1[14 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln52_fu_620_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_1_cast_reg_1333[2 : 0] <= i_1_cast_fu_632_p1[2 : 0];
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln52_fu_620_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter21_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 3'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_122;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_bias_ce0 = 1'b1;
    end else begin
        layer2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_output_ce0 = 1'b1;
    end else begin
        layer2_output_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_output_we0 = 1'b1;
    end else begin
        layer2_output_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_0_ce0 = 1'b1;
    end else begin
        layer2_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_10_ce0 = 1'b1;
    end else begin
        layer2_weights_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_11_ce0 = 1'b1;
    end else begin
        layer2_weights_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_12_ce0 = 1'b1;
    end else begin
        layer2_weights_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter12 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_13_ce0 = 1'b1;
    end else begin
        layer2_weights_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_14_ce0 = 1'b1;
    end else begin
        layer2_weights_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_15_ce0 = 1'b1;
    end else begin
        layer2_weights_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter15 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_16_ce0 = 1'b1;
    end else begin
        layer2_weights_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_17_ce0 = 1'b1;
    end else begin
        layer2_weights_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter17 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_18_ce0 = 1'b1;
    end else begin
        layer2_weights_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_19_ce0 = 1'b1;
    end else begin
        layer2_weights_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_1_ce0 = 1'b1;
    end else begin
        layer2_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_2_ce0 = 1'b1;
    end else begin
        layer2_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_3_ce0 = 1'b1;
    end else begin
        layer2_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_4_ce0 = 1'b1;
    end else begin
        layer2_weights_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_5_ce0 = 1'b1;
    end else begin
        layer2_weights_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_6_ce0 = 1'b1;
    end else begin
        layer2_weights_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_7_ce0 = 1'b1;
    end else begin
        layer2_weights_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_8_ce0 = 1'b1;
    end else begin
        layer2_weights_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        layer2_weights_9_ce0 = 1'b1;
    end else begin
        layer2_weights_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln52_fu_626_p2 = (ap_sig_allocacmp_i_1 + 3'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter19 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter20 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage0_iter21 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage0_iter22 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign grp_fu_1070_p1 = zext_ln55_1_cast_reg_1319;

assign grp_fu_1070_p2 = {{tmp_s_reg_1382}, {8'd0}};

assign grp_fu_1078_p1 = zext_ln55_2_cast_reg_1314;

assign grp_fu_1078_p2 = {{tmp_1_fu_680_p4}, {8'd0}};

assign grp_fu_1086_p1 = zext_ln55_3_cast_reg_1309;

assign grp_fu_1086_p2 = {{tmp_2_fu_701_p4}, {8'd0}};

assign grp_fu_1094_p1 = zext_ln55_4_cast_reg_1304;

assign grp_fu_1094_p2 = {{tmp_3_fu_722_p4}, {8'd0}};

assign grp_fu_1102_p1 = zext_ln55_5_cast_reg_1299;

assign grp_fu_1102_p2 = {{tmp_4_fu_743_p4}, {8'd0}};

assign grp_fu_1110_p1 = zext_ln55_6_cast_reg_1294;

assign grp_fu_1110_p2 = {{tmp_5_fu_764_p4}, {8'd0}};

assign grp_fu_1118_p1 = zext_ln55_7_cast_reg_1289;

assign grp_fu_1118_p2 = {{tmp_6_fu_785_p4}, {8'd0}};

assign grp_fu_1126_p1 = zext_ln55_8_cast_reg_1284;

assign grp_fu_1126_p2 = {{tmp_7_fu_806_p4}, {8'd0}};

assign grp_fu_1134_p1 = zext_ln55_9_cast_reg_1279;

assign grp_fu_1134_p2 = {{tmp_8_fu_827_p4}, {8'd0}};

assign grp_fu_1142_p1 = zext_ln55_10_cast_reg_1274;

assign grp_fu_1142_p2 = {{tmp_9_fu_848_p4}, {8'd0}};

assign grp_fu_1150_p1 = zext_ln55_11_cast_reg_1269;

assign grp_fu_1150_p2 = {{tmp_10_fu_869_p4}, {8'd0}};

assign grp_fu_1158_p1 = zext_ln55_12_cast_reg_1264;

assign grp_fu_1158_p2 = {{tmp_11_fu_890_p4}, {8'd0}};

assign grp_fu_1166_p1 = zext_ln55_13_cast_reg_1259;

assign grp_fu_1166_p2 = {{tmp_12_fu_911_p4}, {8'd0}};

assign grp_fu_1174_p1 = zext_ln55_14_cast_reg_1254;

assign grp_fu_1174_p2 = {{tmp_13_fu_932_p4}, {8'd0}};

assign grp_fu_1182_p1 = zext_ln55_15_cast_reg_1249;

assign grp_fu_1182_p2 = {{tmp_14_fu_953_p4}, {8'd0}};

assign grp_fu_1190_p1 = zext_ln55_16_cast_reg_1244;

assign grp_fu_1190_p2 = {{tmp_15_fu_974_p4}, {8'd0}};

assign grp_fu_1198_p1 = zext_ln55_17_cast_reg_1239;

assign grp_fu_1198_p2 = {{tmp_16_fu_995_p4}, {8'd0}};

assign grp_fu_1206_p1 = zext_ln55_18_cast_reg_1234;

assign grp_fu_1206_p2 = {{tmp_17_fu_1016_p4}, {8'd0}};

assign grp_fu_1214_p1 = zext_ln55_19_cast_reg_1229;

assign grp_fu_1214_p2 = {{tmp_18_fu_1033_p4}, {8'd0}};

assign i_1_cast_fu_632_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln52_fu_620_p2 = ((ap_sig_allocacmp_i_1 == 3'd5) ? 1'b1 : 1'b0);

assign layer2_bias_address0 = i_1_cast_reg_1333_pp0_iter20_reg;

assign layer2_output_address0 = i_1_cast_reg_1333_pp0_iter21_reg;

assign layer2_output_d0 = ($signed(sext_ln57_fu_1059_p1) + $signed(trunc_ln55_s_fu_1050_p4));

assign layer2_weights_0_address0 = i_1_cast_fu_632_p1;

assign layer2_weights_10_address0 = i_1_cast_reg_1333_pp0_iter8_reg;

assign layer2_weights_11_address0 = i_1_cast_reg_1333_pp0_iter9_reg;

assign layer2_weights_12_address0 = i_1_cast_reg_1333_pp0_iter10_reg;

assign layer2_weights_13_address0 = i_1_cast_reg_1333_pp0_iter11_reg;

assign layer2_weights_14_address0 = i_1_cast_reg_1333_pp0_iter12_reg;

assign layer2_weights_15_address0 = i_1_cast_reg_1333_pp0_iter13_reg;

assign layer2_weights_16_address0 = i_1_cast_reg_1333_pp0_iter14_reg;

assign layer2_weights_17_address0 = i_1_cast_reg_1333_pp0_iter15_reg;

assign layer2_weights_18_address0 = i_1_cast_reg_1333_pp0_iter16_reg;

assign layer2_weights_19_address0 = i_1_cast_reg_1333_pp0_iter17_reg;

assign layer2_weights_1_address0 = i_1_cast_fu_632_p1;

assign layer2_weights_2_address0 = i_1_cast_reg_1333;

assign layer2_weights_3_address0 = i_1_cast_reg_1333_pp0_iter1_reg;

assign layer2_weights_4_address0 = i_1_cast_reg_1333_pp0_iter2_reg;

assign layer2_weights_5_address0 = i_1_cast_reg_1333_pp0_iter3_reg;

assign layer2_weights_6_address0 = i_1_cast_reg_1333_pp0_iter4_reg;

assign layer2_weights_7_address0 = i_1_cast_reg_1333_pp0_iter5_reg;

assign layer2_weights_8_address0 = i_1_cast_reg_1333_pp0_iter6_reg;

assign layer2_weights_9_address0 = i_1_cast_reg_1333_pp0_iter7_reg;

assign mul_ln55_fu_650_p1 = zext_ln55_cast_reg_1324;

assign sext_ln57_fu_1059_p1 = $signed(layer2_bias_q0);

assign tmp_10_fu_869_p1 = grp_fu_1142_p3;

assign tmp_10_fu_869_p4 = {{tmp_10_fu_869_p1[23:8]}};

assign tmp_11_fu_890_p1 = grp_fu_1150_p3;

assign tmp_11_fu_890_p4 = {{tmp_11_fu_890_p1[23:8]}};

assign tmp_12_fu_911_p1 = grp_fu_1158_p3;

assign tmp_12_fu_911_p4 = {{tmp_12_fu_911_p1[23:8]}};

assign tmp_13_fu_932_p1 = grp_fu_1166_p3;

assign tmp_13_fu_932_p4 = {{tmp_13_fu_932_p1[23:8]}};

assign tmp_14_fu_953_p1 = grp_fu_1174_p3;

assign tmp_14_fu_953_p4 = {{tmp_14_fu_953_p1[23:8]}};

assign tmp_15_fu_974_p1 = grp_fu_1182_p3;

assign tmp_15_fu_974_p4 = {{tmp_15_fu_974_p1[23:8]}};

assign tmp_16_fu_995_p1 = grp_fu_1190_p3;

assign tmp_16_fu_995_p4 = {{tmp_16_fu_995_p1[23:8]}};

assign tmp_17_fu_1016_p1 = grp_fu_1198_p3;

assign tmp_17_fu_1016_p4 = {{tmp_17_fu_1016_p1[23:8]}};

assign tmp_18_fu_1033_p1 = grp_fu_1206_p3;

assign tmp_18_fu_1033_p4 = {{tmp_18_fu_1033_p1[23:8]}};

assign tmp_1_fu_680_p1 = grp_fu_1070_p3;

assign tmp_1_fu_680_p4 = {{tmp_1_fu_680_p1[23:8]}};

assign tmp_2_fu_701_p1 = grp_fu_1078_p3;

assign tmp_2_fu_701_p4 = {{tmp_2_fu_701_p1[23:8]}};

assign tmp_3_fu_722_p1 = grp_fu_1086_p3;

assign tmp_3_fu_722_p4 = {{tmp_3_fu_722_p1[23:8]}};

assign tmp_4_fu_743_p1 = grp_fu_1094_p3;

assign tmp_4_fu_743_p4 = {{tmp_4_fu_743_p1[23:8]}};

assign tmp_5_fu_764_p1 = grp_fu_1102_p3;

assign tmp_5_fu_764_p4 = {{tmp_5_fu_764_p1[23:8]}};

assign tmp_6_fu_785_p1 = grp_fu_1110_p3;

assign tmp_6_fu_785_p4 = {{tmp_6_fu_785_p1[23:8]}};

assign tmp_7_fu_806_p1 = grp_fu_1118_p3;

assign tmp_7_fu_806_p4 = {{tmp_7_fu_806_p1[23:8]}};

assign tmp_8_fu_827_p1 = grp_fu_1126_p3;

assign tmp_8_fu_827_p4 = {{tmp_8_fu_827_p1[23:8]}};

assign tmp_9_fu_848_p1 = grp_fu_1134_p3;

assign tmp_9_fu_848_p4 = {{tmp_9_fu_848_p1[23:8]}};

assign trunc_ln55_s_fu_1050_p1 = grp_fu_1214_p3;

assign trunc_ln55_s_fu_1050_p4 = {{trunc_ln55_s_fu_1050_p1[23:8]}};

assign zext_ln55_10_cast_fu_568_p1 = zext_ln55_10;

assign zext_ln55_11_cast_fu_564_p1 = zext_ln55_11;

assign zext_ln55_12_cast_fu_560_p1 = zext_ln55_12;

assign zext_ln55_13_cast_fu_556_p1 = zext_ln55_13;

assign zext_ln55_14_cast_fu_552_p1 = zext_ln55_14;

assign zext_ln55_15_cast_fu_548_p1 = zext_ln55_15;

assign zext_ln55_16_cast_fu_544_p1 = zext_ln55_16;

assign zext_ln55_17_cast_fu_540_p1 = zext_ln55_17;

assign zext_ln55_18_cast_fu_536_p1 = zext_ln55_18;

assign zext_ln55_19_cast_fu_532_p1 = zext_ln55_19;

assign zext_ln55_1_cast_fu_604_p1 = zext_ln55_1;

assign zext_ln55_2_cast_fu_600_p1 = zext_ln55_2;

assign zext_ln55_3_cast_fu_596_p1 = zext_ln55_3;

assign zext_ln55_4_cast_fu_592_p1 = zext_ln55_4;

assign zext_ln55_5_cast_fu_588_p1 = zext_ln55_5;

assign zext_ln55_6_cast_fu_584_p1 = zext_ln55_6;

assign zext_ln55_7_cast_fu_580_p1 = zext_ln55_7;

assign zext_ln55_8_cast_fu_576_p1 = zext_ln55_8;

assign zext_ln55_9_cast_fu_572_p1 = zext_ln55_9;

assign zext_ln55_cast_fu_608_p1 = zext_ln55;

always @ (posedge ap_clk) begin
    zext_ln55_19_cast_reg_1229[23:15] <= 9'b000000000;
    zext_ln55_18_cast_reg_1234[23:15] <= 9'b000000000;
    zext_ln55_17_cast_reg_1239[23:15] <= 9'b000000000;
    zext_ln55_16_cast_reg_1244[23:15] <= 9'b000000000;
    zext_ln55_15_cast_reg_1249[23:15] <= 9'b000000000;
    zext_ln55_14_cast_reg_1254[23:15] <= 9'b000000000;
    zext_ln55_13_cast_reg_1259[23:15] <= 9'b000000000;
    zext_ln55_12_cast_reg_1264[23:15] <= 9'b000000000;
    zext_ln55_11_cast_reg_1269[23:15] <= 9'b000000000;
    zext_ln55_10_cast_reg_1274[23:15] <= 9'b000000000;
    zext_ln55_9_cast_reg_1279[23:15] <= 9'b000000000;
    zext_ln55_8_cast_reg_1284[23:15] <= 9'b000000000;
    zext_ln55_7_cast_reg_1289[23:15] <= 9'b000000000;
    zext_ln55_6_cast_reg_1294[23:15] <= 9'b000000000;
    zext_ln55_5_cast_reg_1299[23:15] <= 9'b000000000;
    zext_ln55_4_cast_reg_1304[23:15] <= 9'b000000000;
    zext_ln55_3_cast_reg_1309[23:15] <= 9'b000000000;
    zext_ln55_2_cast_reg_1314[23:15] <= 9'b000000000;
    zext_ln55_1_cast_reg_1319[23:15] <= 9'b000000000;
    zext_ln55_cast_reg_1324[23:15] <= 9'b000000000;
    i_1_cast_reg_1333[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter1_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter2_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter3_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter4_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter5_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter6_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter7_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter8_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter9_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter10_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter11_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter12_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter13_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter14_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter15_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter16_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter17_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter18_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter19_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter20_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    i_1_cast_reg_1333_pp0_iter21_reg[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_52_3
