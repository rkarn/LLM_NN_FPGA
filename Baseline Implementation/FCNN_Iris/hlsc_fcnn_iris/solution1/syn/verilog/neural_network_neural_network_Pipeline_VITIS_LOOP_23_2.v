// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_23_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        layer2_output_0_01_reload,
        layer2_output_1_02_reload,
        layer2_output_2_03_reload,
        conv_i_i13_i_i9,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        sum_1_out,
        sum_1_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] layer2_output_0_01_reload;
input  [15:0] layer2_output_1_02_reload;
input  [15:0] layer2_output_2_03_reload;
input  [15:0] conv_i_i13_i_i9;
output  [1:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [15:0] sum_1_out;
output   sum_1_out_ap_vld;

reg ap_idle;
reg output_r_ce0;
reg output_r_we0;
reg sum_1_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln23_fu_148_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire  signed [16:0] conv_i_i13_i_i9_cast_fu_131_p1;
reg  signed [16:0] conv_i_i13_i_i9_cast_reg_234;
reg   [1:0] i_reg_239;
reg   [1:0] i_reg_239_pp0_iter1_reg;
reg   [1:0] i_reg_239_pp0_iter2_reg;
reg   [1:0] i_reg_239_pp0_iter3_reg;
reg   [1:0] i_reg_239_pp0_iter4_reg;
reg   [1:0] i_reg_239_pp0_iter5_reg;
reg   [1:0] i_reg_239_pp0_iter6_reg;
reg   [0:0] icmp_ln23_reg_245;
reg   [0:0] icmp_ln23_reg_245_pp0_iter1_reg;
reg   [0:0] icmp_ln23_reg_245_pp0_iter2_reg;
reg   [0:0] icmp_ln23_reg_245_pp0_iter3_reg;
reg   [0:0] icmp_ln23_reg_245_pp0_iter4_reg;
reg   [0:0] icmp_ln23_reg_245_pp0_iter5_reg;
wire   [15:0] grp_exp_17_9_s_fu_120_ap_return;
reg   [15:0] trunc_ln_reg_249;
wire    grp_exp_17_9_s_fu_120_ap_start;
wire    grp_exp_17_9_s_fu_120_ap_done;
wire    grp_exp_17_9_s_fu_120_ap_idle;
wire    grp_exp_17_9_s_fu_120_ap_ready;
wire   [16:0] grp_exp_17_9_s_fu_120_x_val;
reg    grp_exp_17_9_s_fu_120_ap_start_reg;
wire    ap_block_pp0_stage0;
wire   [63:0] trunc_ln24_1_cast_fu_186_p1;
reg   [15:0] sum_1_fu_68;
wire   [15:0] sum_fu_190_p2;
wire    ap_loop_init;
reg   [1:0] i_3_fu_72;
wire   [1:0] add_ln23_fu_154_p2;
reg   [1:0] ap_sig_allocacmp_i;
wire    ap_block_pp0_stage0_01001;
wire   [15:0] tmp_9_fu_165_p5;
wire  signed [16:0] sext_ln24_fu_173_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 grp_exp_17_9_s_fu_120_ap_start_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

neural_network_exp_17_9_s grp_exp_17_9_s_fu_120(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_exp_17_9_s_fu_120_ap_start),
    .ap_done(grp_exp_17_9_s_fu_120_ap_done),
    .ap_idle(grp_exp_17_9_s_fu_120_ap_idle),
    .ap_ready(grp_exp_17_9_s_fu_120_ap_ready),
    .x_val(grp_exp_17_9_s_fu_120_x_val),
    .ap_return(grp_exp_17_9_s_fu_120_ap_return)
);

neural_network_mux_3_2_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 2 ),
    .dout_WIDTH( 16 ))
mux_3_2_16_1_1_U68(
    .din0(layer2_output_0_01_reload),
    .din1(layer2_output_1_02_reload),
    .din2(layer2_output_2_03_reload),
    .din3(i_reg_239),
    .dout(tmp_9_fu_165_p5)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_exp_17_9_s_fu_120_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln23_fu_148_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_exp_17_9_s_fu_120_ap_start_reg <= 1'b1;
        end else if ((grp_exp_17_9_s_fu_120_ap_ready == 1'b1)) begin
            grp_exp_17_9_s_fu_120_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln23_fu_148_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_3_fu_72 <= add_ln23_fu_154_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_3_fu_72 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            sum_1_fu_68 <= 16'd0;
        end else if ((ap_enable_reg_pp0_iter7 == 1'b1)) begin
            sum_1_fu_68 <= sum_fu_190_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        conv_i_i13_i_i9_cast_reg_234 <= conv_i_i13_i_i9_cast_fu_131_p1;
        i_reg_239 <= ap_sig_allocacmp_i;
        i_reg_239_pp0_iter1_reg <= i_reg_239;
        icmp_ln23_reg_245 <= icmp_ln23_fu_148_p2;
        icmp_ln23_reg_245_pp0_iter1_reg <= icmp_ln23_reg_245;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        i_reg_239_pp0_iter2_reg <= i_reg_239_pp0_iter1_reg;
        i_reg_239_pp0_iter3_reg <= i_reg_239_pp0_iter2_reg;
        i_reg_239_pp0_iter4_reg <= i_reg_239_pp0_iter3_reg;
        i_reg_239_pp0_iter5_reg <= i_reg_239_pp0_iter4_reg;
        i_reg_239_pp0_iter6_reg <= i_reg_239_pp0_iter5_reg;
        icmp_ln23_reg_245_pp0_iter2_reg <= icmp_ln23_reg_245_pp0_iter1_reg;
        icmp_ln23_reg_245_pp0_iter3_reg <= icmp_ln23_reg_245_pp0_iter2_reg;
        icmp_ln23_reg_245_pp0_iter4_reg <= icmp_ln23_reg_245_pp0_iter3_reg;
        icmp_ln23_reg_245_pp0_iter5_reg <= icmp_ln23_reg_245_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln23_reg_245_pp0_iter5_reg == 1'd0))) begin
        trunc_ln_reg_249 <= grp_exp_17_9_s_fu_120_ap_return;
    end
end

always @ (*) begin
    if (((icmp_ln23_fu_148_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter6_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i = 2'd0;
    end else begin
        ap_sig_allocacmp_i = i_3_fu_72;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter7 == 1'b1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln23_reg_245_pp0_iter5_reg == 1'd1))) begin
        sum_1_out_ap_vld = 1'b1;
    end else begin
        sum_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_fu_154_p2 = (ap_sig_allocacmp_i + 2'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign conv_i_i13_i_i9_cast_fu_131_p1 = $signed(conv_i_i13_i_i9);

assign grp_exp_17_9_s_fu_120_ap_start = grp_exp_17_9_s_fu_120_ap_start_reg;

assign grp_exp_17_9_s_fu_120_x_val = ($signed(sext_ln24_fu_173_p1) - $signed(conv_i_i13_i_i9_cast_reg_234));

assign icmp_ln23_fu_148_p2 = ((ap_sig_allocacmp_i == 2'd3) ? 1'b1 : 1'b0);

assign output_r_address0 = trunc_ln24_1_cast_fu_186_p1;

assign output_r_d0 = trunc_ln_reg_249;

assign sext_ln24_fu_173_p1 = $signed(tmp_9_fu_165_p5);

assign sum_1_out = sum_1_fu_68;

assign sum_fu_190_p2 = (trunc_ln_reg_249 + sum_1_fu_68);

assign trunc_ln24_1_cast_fu_186_p1 = i_reg_239_pp0_iter6_reg;

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_23_2
