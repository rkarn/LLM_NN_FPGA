// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_37_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sum_address0,
        sum_ce0,
        sum_q0,
        sum_address1,
        sum_ce1,
        sum_q1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        output_r_address1,
        output_r_ce1,
        output_r_we1,
        output_r_d1
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] sum_address0;
output   sum_ce0;
input  [15:0] sum_q0;
output  [3:0] sum_address1;
output   sum_ce1;
input  [15:0] sum_q1;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [15:0] output_r_d0;
output  [3:0] output_r_address1;
output   output_r_ce1;
output   output_r_we1;
output  [15:0] output_r_d1;

reg ap_idle;
reg sum_ce0;
reg sum_ce1;
reg output_r_ce0;
reg output_r_we0;
reg output_r_ce1;
reg output_r_we1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln37_fu_104_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] i_2_cast7075_fu_110_p1;
reg   [63:0] i_2_cast7075_reg_192;
reg   [63:0] i_2_cast7075_reg_192_pp0_iter1_reg;
wire   [63:0] zext_ln39_1_fu_121_p1;
reg   [63:0] zext_ln39_1_reg_202;
reg   [63:0] zext_ln39_1_reg_202_pp0_iter1_reg;
wire   [14:0] select_ln39_fu_147_p3;
reg   [14:0] select_ln39_reg_212;
wire   [14:0] select_ln39_1_fu_165_p3;
reg   [14:0] select_ln39_1_reg_217;
wire    ap_block_pp0_stage0;
reg   [3:0] i_fu_42;
wire   [3:0] add_ln37_fu_126_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_1;
wire   [3:0] or_ln37_fu_115_p2;
wire   [0:0] icmp_ln39_fu_141_p2;
wire   [14:0] trunc_ln39_fu_137_p1;
wire   [0:0] icmp_ln39_1_fu_159_p2;
wire   [14:0] trunc_ln39_1_fu_155_p1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mnist_inference_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln37_fu_104_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_42 <= add_ln37_fu_126_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_42 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        i_2_cast7075_reg_192_pp0_iter1_reg[3 : 0] <= i_2_cast7075_reg_192[3 : 0];
        select_ln39_1_reg_217 <= select_ln39_1_fu_165_p3;
        select_ln39_reg_212 <= select_ln39_fu_147_p3;
        zext_ln39_1_reg_202_pp0_iter1_reg[3 : 1] <= zext_ln39_1_reg_202[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_104_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_cast7075_reg_192[3 : 0] <= i_2_cast7075_fu_110_p1[3 : 0];
        zext_ln39_1_reg_202[3 : 1] <= zext_ln39_1_fu_121_p1[3 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln37_fu_104_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_42;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_r_ce1 = 1'b1;
    end else begin
        output_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        output_r_we1 = 1'b1;
    end else begin
        output_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_ce0 = 1'b1;
    end else begin
        sum_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_ce1 = 1'b1;
    end else begin
        sum_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln37_fu_126_p2 = (ap_sig_allocacmp_i_1 + 4'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign i_2_cast7075_fu_110_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln37_fu_104_p2 = ((ap_sig_allocacmp_i_1 < 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln39_1_fu_159_p2 = (($signed(sum_q0) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign icmp_ln39_fu_141_p2 = (($signed(sum_q1) > $signed(16'd0)) ? 1'b1 : 1'b0);

assign or_ln37_fu_115_p2 = (ap_sig_allocacmp_i_1 | 4'd1);

assign output_r_address0 = zext_ln39_1_reg_202_pp0_iter1_reg;

assign output_r_address1 = i_2_cast7075_reg_192_pp0_iter1_reg;

assign output_r_d0 = select_ln39_1_reg_217;

assign output_r_d1 = select_ln39_reg_212;

assign select_ln39_1_fu_165_p3 = ((icmp_ln39_1_fu_159_p2[0:0] == 1'b1) ? trunc_ln39_1_fu_155_p1 : 15'd0);

assign select_ln39_fu_147_p3 = ((icmp_ln39_fu_141_p2[0:0] == 1'b1) ? trunc_ln39_fu_137_p1 : 15'd0);

assign sum_address0 = zext_ln39_1_fu_121_p1;

assign sum_address1 = i_2_cast7075_fu_110_p1;

assign trunc_ln39_1_fu_155_p1 = sum_q0[14:0];

assign trunc_ln39_fu_137_p1 = sum_q1[14:0];

assign zext_ln39_1_fu_121_p1 = or_ln37_fu_115_p2;

always @ (posedge ap_clk) begin
    i_2_cast7075_reg_192[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i_2_cast7075_reg_192_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_1_reg_202[0] <= 1'b1;
    zext_ln39_1_reg_202[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_1_reg_202_pp0_iter1_reg[0] <= 1'b1;
    zext_ln39_1_reg_202_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_37_4
