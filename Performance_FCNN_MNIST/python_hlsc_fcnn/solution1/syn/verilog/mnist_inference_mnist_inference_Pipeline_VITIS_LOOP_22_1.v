// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_22_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sum_address0,
        sum_ce0,
        sum_we0,
        sum_d0,
        grp_fu_20451_p_din0,
        grp_fu_20451_p_dout0,
        grp_fu_20451_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] sum_address0;
output   sum_ce0;
output   sum_we0;
output  [15:0] sum_d0;
output  [31:0] grp_fu_20451_p_din0;
input  [63:0] grp_fu_20451_p_dout0;
output   grp_fu_20451_p_ce;

reg ap_idle;
reg[3:0] sum_address0;
reg sum_ce0;
reg sum_we0;
reg[15:0] sum_d0;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_state6_pp0_stage1_iter2;
wire    ap_block_state8_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln22_reg_645;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [3:0] biases_address0;
reg    biases_ce0;
wire   [31:0] biases_q0;
reg   [3:0] i_2_reg_639;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state7_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln22_fu_139_p2;
wire   [63:0] i_cast7074_fu_145_p1;
reg   [63:0] i_cast7074_reg_649;
reg   [63:0] i_cast7074_reg_649_pp0_iter1_reg;
reg   [63:0] i_cast7074_reg_649_pp0_iter2_reg;
reg   [31:0] biases_load_reg_659;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] biases_load_reg_659_pp0_iter1_reg;
wire   [63:0] zext_ln24_4_fu_155_p1;
reg   [63:0] zext_ln24_4_reg_665;
reg   [63:0] zext_ln24_4_reg_665_pp0_iter1_reg;
reg   [63:0] zext_ln24_4_reg_665_pp0_iter2_reg;
reg   [31:0] biases_load_1_reg_675;
reg   [31:0] biases_load_1_reg_675_pp0_iter2_reg;
wire   [62:0] trunc_ln24_fu_174_p1;
reg   [62:0] trunc_ln24_reg_681;
reg   [0:0] tmp_reg_686;
reg   [10:0] tmp2_reg_691;
wire   [51:0] trunc_ln24_1_fu_196_p1;
reg   [51:0] trunc_ln24_1_reg_696;
wire   [53:0] select_ln24_fu_220_p3;
reg   [53:0] select_ln24_reg_701;
wire   [0:0] icmp_ln24_fu_227_p2;
reg   [0:0] icmp_ln24_reg_706;
wire   [0:0] icmp_ln24_1_fu_238_p2;
reg   [0:0] icmp_ln24_1_reg_713;
wire  signed [11:0] select_ln24_1_fu_256_p3;
reg  signed [11:0] select_ln24_1_reg_718;
wire   [0:0] icmp_ln24_2_fu_264_p2;
reg   [0:0] icmp_ln24_2_reg_724;
wire   [15:0] trunc_ln24_2_fu_270_p1;
reg   [15:0] trunc_ln24_2_reg_730;
wire   [0:0] icmp_ln24_4_fu_284_p2;
reg   [0:0] icmp_ln24_4_reg_736;
wire   [62:0] trunc_ln24_5_fu_294_p1;
reg   [62:0] trunc_ln24_5_reg_741;
reg   [0:0] tmp_3920_reg_746;
reg   [10:0] tmp_65_reg_751;
wire   [51:0] trunc_ln24_6_fu_316_p1;
reg   [51:0] trunc_ln24_6_reg_756;
wire   [15:0] select_ln24_10_fu_423_p3;
reg   [15:0] select_ln24_10_reg_761;
wire   [53:0] select_ln24_4_fu_451_p3;
reg   [53:0] select_ln24_4_reg_766;
wire   [0:0] icmp_ln24_5_fu_458_p2;
reg   [0:0] icmp_ln24_5_reg_771;
wire   [0:0] icmp_ln24_6_fu_469_p2;
reg   [0:0] icmp_ln24_6_reg_778;
wire  signed [11:0] select_ln24_5_fu_487_p3;
reg  signed [11:0] select_ln24_5_reg_783;
wire   [0:0] icmp_ln24_7_fu_495_p2;
reg   [0:0] icmp_ln24_7_reg_789;
wire   [15:0] trunc_ln24_7_fu_501_p1;
reg   [15:0] trunc_ln24_7_reg_795;
wire   [0:0] icmp_ln24_9_fu_515_p2;
reg   [0:0] icmp_ln24_9_reg_801;
wire   [15:0] select_ln24_13_fu_624_p3;
reg   [15:0] select_ln24_13_reg_806;
reg    ap_enable_reg_pp0_iter0_reg;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
reg   [3:0] i_fu_82;
wire   [3:0] add_ln22_fu_160_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_2;
reg   [31:0] grp_fu_128_p0;
wire   [3:0] or_ln22_fu_150_p2;
wire   [63:0] bitcast_ln724_fu_170_p1;
wire   [52:0] zext_ln24_1_cast_fu_203_p3;
wire   [53:0] zext_ln24_1_fu_210_p1;
wire   [53:0] sub_ln24_fu_214_p2;
wire   [11:0] zext_ln24_fu_200_p1;
wire   [11:0] sub_ln24_1_fu_232_p2;
wire   [11:0] add_ln24_fu_244_p2;
wire   [11:0] sub_ln24_2_fu_250_p2;
wire   [7:0] tmp_3919_fu_274_p4;
wire   [63:0] bitcast_ln724_2_fu_290_p1;
wire  signed [31:0] sext_ln24_fu_320_p1;
wire   [53:0] zext_ln24_2_fu_328_p1;
wire   [53:0] ashr_ln24_fu_332_p2;
wire   [31:0] bitcast_ln724_786_fu_341_p1;
wire   [0:0] tmp_3918_fu_344_p3;
wire   [0:0] icmp_ln24_3_fu_323_p2;
wire   [15:0] trunc_ln24_3_fu_337_p1;
wire   [15:0] select_ln24_14_fu_352_p3;
wire   [15:0] sext_ln24cast_fu_368_p1;
wire   [15:0] shl_ln24_fu_372_p2;
wire   [15:0] select_ln24_3_fu_377_p3;
wire   [0:0] xor_ln24_fu_391_p2;
wire   [0:0] and_ln24_fu_396_p2;
wire   [15:0] select_ln24_8_fu_384_p3;
wire   [0:0] or_ln24_fu_408_p2;
wire   [0:0] xor_ln24_1_fu_412_p2;
wire   [0:0] and_ln24_1_fu_418_p2;
wire   [15:0] select_ln24_2_fu_360_p3;
wire   [15:0] select_ln24_9_fu_401_p3;
wire   [52:0] zext_ln24_5_cast_fu_434_p3;
wire   [53:0] zext_ln24_5_fu_441_p1;
wire   [53:0] sub_ln24_3_fu_445_p2;
wire   [11:0] zext_ln24_3_fu_431_p1;
wire   [11:0] sub_ln24_4_fu_463_p2;
wire   [11:0] add_ln24_1_fu_475_p2;
wire   [11:0] sub_ln24_5_fu_481_p2;
wire   [7:0] tmp_3922_fu_505_p4;
wire  signed [31:0] sext_ln24_2_fu_521_p1;
wire   [53:0] zext_ln24_6_fu_529_p1;
wire   [53:0] ashr_ln24_1_fu_533_p2;
wire   [31:0] bitcast_ln724_788_fu_542_p1;
wire   [0:0] tmp_3921_fu_545_p3;
wire   [0:0] icmp_ln24_8_fu_524_p2;
wire   [15:0] trunc_ln24_8_fu_538_p1;
wire   [15:0] select_ln24_15_fu_553_p3;
wire   [15:0] sext_ln24_2cast_fu_569_p1;
wire   [15:0] shl_ln24_1_fu_573_p2;
wire   [15:0] select_ln24_7_fu_578_p3;
wire   [0:0] xor_ln24_2_fu_592_p2;
wire   [0:0] and_ln24_2_fu_597_p2;
wire   [15:0] select_ln24_11_fu_585_p3;
wire   [0:0] or_ln24_1_fu_609_p2;
wire   [0:0] xor_ln24_3_fu_613_p2;
wire   [0:0] and_ln24_3_fu_619_p2;
wire   [15:0] select_ln24_6_fu_561_p3;
wire   [15:0] select_ln24_12_fu_602_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_22_1_biases_RAM_1P_BRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
biases_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(biases_address0),
    .ce0(biases_ce0),
    .q0(biases_q0)
);

mnist_inference_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        i_fu_82 <= 4'd0;
    end else if (((icmp_ln22_reg_645 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        i_fu_82 <= add_ln22_fu_160_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        biases_load_reg_659_pp0_iter1_reg <= biases_load_reg_659;
        icmp_ln24_5_reg_771 <= icmp_ln24_5_fu_458_p2;
        icmp_ln24_6_reg_778 <= icmp_ln24_6_fu_469_p2;
        icmp_ln24_7_reg_789 <= icmp_ln24_7_fu_495_p2;
        icmp_ln24_9_reg_801 <= icmp_ln24_9_fu_515_p2;
        select_ln24_10_reg_761 <= select_ln24_10_fu_423_p3;
        select_ln24_4_reg_766 <= select_ln24_4_fu_451_p3;
        select_ln24_5_reg_783 <= select_ln24_5_fu_487_p3;
        tmp2_reg_691 <= {{bitcast_ln724_fu_170_p1[62:52]}};
        tmp_reg_686 <= bitcast_ln724_fu_170_p1[32'd63];
        trunc_ln24_1_reg_696 <= trunc_ln24_1_fu_196_p1;
        trunc_ln24_7_reg_795 <= trunc_ln24_7_fu_501_p1;
        trunc_ln24_reg_681 <= trunc_ln24_fu_174_p1;
        zext_ln24_4_reg_665_pp0_iter1_reg[3 : 1] <= zext_ln24_4_reg_665[3 : 1];
        zext_ln24_4_reg_665_pp0_iter2_reg[3 : 1] <= zext_ln24_4_reg_665_pp0_iter1_reg[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        biases_load_1_reg_675 <= biases_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        biases_load_1_reg_675_pp0_iter2_reg <= biases_load_1_reg_675;
        i_2_reg_639 <= ap_sig_allocacmp_i_2;
        i_cast7074_reg_649_pp0_iter1_reg[3 : 0] <= i_cast7074_reg_649[3 : 0];
        i_cast7074_reg_649_pp0_iter2_reg[3 : 0] <= i_cast7074_reg_649_pp0_iter1_reg[3 : 0];
        icmp_ln22_reg_645 <= icmp_ln22_fu_139_p2;
        icmp_ln24_1_reg_713 <= icmp_ln24_1_fu_238_p2;
        icmp_ln24_2_reg_724 <= icmp_ln24_2_fu_264_p2;
        icmp_ln24_4_reg_736 <= icmp_ln24_4_fu_284_p2;
        icmp_ln24_reg_706 <= icmp_ln24_fu_227_p2;
        select_ln24_13_reg_806 <= select_ln24_13_fu_624_p3;
        select_ln24_1_reg_718 <= select_ln24_1_fu_256_p3;
        select_ln24_reg_701 <= select_ln24_fu_220_p3;
        tmp_3920_reg_746 <= bitcast_ln724_2_fu_290_p1[32'd63];
        tmp_65_reg_751 <= {{bitcast_ln724_2_fu_290_p1[62:52]}};
        trunc_ln24_2_reg_730 <= trunc_ln24_2_fu_270_p1;
        trunc_ln24_5_reg_741 <= trunc_ln24_5_fu_294_p1;
        trunc_ln24_6_reg_756 <= trunc_ln24_6_fu_316_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_645 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        biases_load_reg_659 <= biases_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_139_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_cast7074_reg_649[3 : 0] <= i_cast7074_fu_145_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_reg_645 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        zext_ln24_4_reg_665[3 : 1] <= zext_ln24_4_fu_155_p1[3 : 1];
    end
end

always @ (*) begin
    if (((icmp_ln22_reg_645 == 1'd0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_2 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_2 = i_fu_82;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            biases_address0 = zext_ln24_4_fu_155_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            biases_address0 = i_cast7074_fu_145_p1;
        end else begin
            biases_address0 = 'bx;
        end
    end else begin
        biases_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        biases_ce0 = 1'b1;
    end else begin
        biases_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_128_p0 = biases_load_1_reg_675;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_128_p0 = biases_load_reg_659;
        end else begin
            grp_fu_128_p0 = 'bx;
        end
    end else begin
        grp_fu_128_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            sum_address0 = zext_ln24_4_reg_665_pp0_iter2_reg;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sum_address0 = i_cast7074_reg_649_pp0_iter2_reg;
        end else begin
            sum_address0 = 'bx;
        end
    end else begin
        sum_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        sum_ce0 = 1'b1;
    end else begin
        sum_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            sum_d0 = select_ln24_13_reg_806;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            sum_d0 = select_ln24_10_reg_761;
        end else begin
            sum_d0 = 'bx;
        end
    end else begin
        sum_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        sum_we0 = 1'b1;
    end else begin
        sum_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_160_p2 = (i_2_reg_639 + 4'd2);

assign add_ln24_1_fu_475_p2 = ($signed(sub_ln24_4_fu_463_p2) + $signed(12'd4088));

assign add_ln24_fu_244_p2 = ($signed(sub_ln24_1_fu_232_p2) + $signed(12'd4088));

assign and_ln24_1_fu_418_p2 = (xor_ln24_1_fu_412_p2 & icmp_ln24_1_reg_713);

assign and_ln24_2_fu_597_p2 = (xor_ln24_2_fu_592_p2 & icmp_ln24_7_reg_789);

assign and_ln24_3_fu_619_p2 = (xor_ln24_3_fu_613_p2 & icmp_ln24_6_reg_778);

assign and_ln24_fu_396_p2 = (xor_ln24_fu_391_p2 & icmp_ln24_2_reg_724);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign ashr_ln24_1_fu_533_p2 = $signed(select_ln24_4_reg_766) >>> zext_ln24_6_fu_529_p1;

assign ashr_ln24_fu_332_p2 = $signed(select_ln24_reg_701) >>> zext_ln24_2_fu_328_p1;

assign bitcast_ln724_2_fu_290_p1 = grp_fu_20451_p_dout0;

assign bitcast_ln724_786_fu_341_p1 = biases_load_reg_659_pp0_iter1_reg;

assign bitcast_ln724_788_fu_542_p1 = biases_load_1_reg_675_pp0_iter2_reg;

assign bitcast_ln724_fu_170_p1 = grp_fu_20451_p_dout0;

assign grp_fu_20451_p_ce = 1'b1;

assign grp_fu_20451_p_din0 = grp_fu_128_p0;

assign i_cast7074_fu_145_p1 = ap_sig_allocacmp_i_2;

assign icmp_ln22_fu_139_p2 = ((ap_sig_allocacmp_i_2 < 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln24_1_fu_238_p2 = (($signed(sub_ln24_1_fu_232_p2) > $signed(12'd8)) ? 1'b1 : 1'b0);

assign icmp_ln24_2_fu_264_p2 = ((sub_ln24_1_fu_232_p2 == 12'd8) ? 1'b1 : 1'b0);

assign icmp_ln24_3_fu_323_p2 = ((select_ln24_1_reg_718 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln24_4_fu_284_p2 = ((tmp_3919_fu_274_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_5_fu_458_p2 = ((trunc_ln24_5_reg_741 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_6_fu_469_p2 = (($signed(sub_ln24_4_fu_463_p2) > $signed(12'd8)) ? 1'b1 : 1'b0);

assign icmp_ln24_7_fu_495_p2 = ((sub_ln24_4_fu_463_p2 == 12'd8) ? 1'b1 : 1'b0);

assign icmp_ln24_8_fu_524_p2 = ((select_ln24_5_reg_783 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln24_9_fu_515_p2 = ((tmp_3922_fu_505_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_227_p2 = ((trunc_ln24_reg_681 == 63'd0) ? 1'b1 : 1'b0);

assign or_ln22_fu_150_p2 = (i_2_reg_639 | 4'd1);

assign or_ln24_1_fu_609_p2 = (icmp_ln24_7_reg_789 | icmp_ln24_5_reg_771);

assign or_ln24_fu_408_p2 = (icmp_ln24_reg_706 | icmp_ln24_2_reg_724);

assign select_ln24_10_fu_423_p3 = ((and_ln24_1_fu_418_p2[0:0] == 1'b1) ? select_ln24_2_fu_360_p3 : select_ln24_9_fu_401_p3);

assign select_ln24_11_fu_585_p3 = ((icmp_ln24_5_reg_771[0:0] == 1'b1) ? 16'd0 : select_ln24_7_fu_578_p3);

assign select_ln24_12_fu_602_p3 = ((and_ln24_2_fu_597_p2[0:0] == 1'b1) ? trunc_ln24_7_reg_795 : select_ln24_11_fu_585_p3);

assign select_ln24_13_fu_624_p3 = ((and_ln24_3_fu_619_p2[0:0] == 1'b1) ? select_ln24_6_fu_561_p3 : select_ln24_12_fu_602_p3);

assign select_ln24_14_fu_352_p3 = ((tmp_3918_fu_344_p3[0:0] == 1'b1) ? 16'd65535 : 16'd0);

assign select_ln24_15_fu_553_p3 = ((tmp_3921_fu_545_p3[0:0] == 1'b1) ? 16'd65535 : 16'd0);

assign select_ln24_1_fu_256_p3 = ((icmp_ln24_1_fu_238_p2[0:0] == 1'b1) ? add_ln24_fu_244_p2 : sub_ln24_2_fu_250_p2);

assign select_ln24_2_fu_360_p3 = ((icmp_ln24_3_fu_323_p2[0:0] == 1'b1) ? trunc_ln24_3_fu_337_p1 : select_ln24_14_fu_352_p3);

assign select_ln24_3_fu_377_p3 = ((icmp_ln24_4_reg_736[0:0] == 1'b1) ? shl_ln24_fu_372_p2 : 16'd0);

assign select_ln24_4_fu_451_p3 = ((tmp_3920_reg_746[0:0] == 1'b1) ? sub_ln24_3_fu_445_p2 : zext_ln24_5_fu_441_p1);

assign select_ln24_5_fu_487_p3 = ((icmp_ln24_6_fu_469_p2[0:0] == 1'b1) ? add_ln24_1_fu_475_p2 : sub_ln24_5_fu_481_p2);

assign select_ln24_6_fu_561_p3 = ((icmp_ln24_8_fu_524_p2[0:0] == 1'b1) ? trunc_ln24_8_fu_538_p1 : select_ln24_15_fu_553_p3);

assign select_ln24_7_fu_578_p3 = ((icmp_ln24_9_reg_801[0:0] == 1'b1) ? shl_ln24_1_fu_573_p2 : 16'd0);

assign select_ln24_8_fu_384_p3 = ((icmp_ln24_reg_706[0:0] == 1'b1) ? 16'd0 : select_ln24_3_fu_377_p3);

assign select_ln24_9_fu_401_p3 = ((and_ln24_fu_396_p2[0:0] == 1'b1) ? trunc_ln24_2_reg_730 : select_ln24_8_fu_384_p3);

assign select_ln24_fu_220_p3 = ((tmp_reg_686[0:0] == 1'b1) ? sub_ln24_fu_214_p2 : zext_ln24_1_fu_210_p1);

assign sext_ln24_2_fu_521_p1 = select_ln24_5_reg_783;

assign sext_ln24_2cast_fu_569_p1 = sext_ln24_2_fu_521_p1[15:0];

assign sext_ln24_fu_320_p1 = select_ln24_1_reg_718;

assign sext_ln24cast_fu_368_p1 = sext_ln24_fu_320_p1[15:0];

assign shl_ln24_1_fu_573_p2 = trunc_ln24_7_reg_795 << sext_ln24_2cast_fu_569_p1;

assign shl_ln24_fu_372_p2 = trunc_ln24_2_reg_730 << sext_ln24cast_fu_368_p1;

assign sub_ln24_1_fu_232_p2 = (12'd1075 - zext_ln24_fu_200_p1);

assign sub_ln24_2_fu_250_p2 = (12'd8 - sub_ln24_1_fu_232_p2);

assign sub_ln24_3_fu_445_p2 = (54'd0 - zext_ln24_5_fu_441_p1);

assign sub_ln24_4_fu_463_p2 = (12'd1075 - zext_ln24_3_fu_431_p1);

assign sub_ln24_5_fu_481_p2 = (12'd8 - sub_ln24_4_fu_463_p2);

assign sub_ln24_fu_214_p2 = (54'd0 - zext_ln24_1_fu_210_p1);

assign tmp_3918_fu_344_p3 = bitcast_ln724_786_fu_341_p1[32'd31];

assign tmp_3919_fu_274_p4 = {{select_ln24_1_fu_256_p3[11:4]}};

assign tmp_3921_fu_545_p3 = bitcast_ln724_788_fu_542_p1[32'd31];

assign tmp_3922_fu_505_p4 = {{select_ln24_5_fu_487_p3[11:4]}};

assign trunc_ln24_1_fu_196_p1 = bitcast_ln724_fu_170_p1[51:0];

assign trunc_ln24_2_fu_270_p1 = select_ln24_fu_220_p3[15:0];

assign trunc_ln24_3_fu_337_p1 = ashr_ln24_fu_332_p2[15:0];

assign trunc_ln24_5_fu_294_p1 = bitcast_ln724_2_fu_290_p1[62:0];

assign trunc_ln24_6_fu_316_p1 = bitcast_ln724_2_fu_290_p1[51:0];

assign trunc_ln24_7_fu_501_p1 = select_ln24_4_fu_451_p3[15:0];

assign trunc_ln24_8_fu_538_p1 = ashr_ln24_1_fu_533_p2[15:0];

assign trunc_ln24_fu_174_p1 = bitcast_ln724_fu_170_p1[62:0];

assign xor_ln24_1_fu_412_p2 = (or_ln24_fu_408_p2 ^ 1'd1);

assign xor_ln24_2_fu_592_p2 = (icmp_ln24_5_reg_771 ^ 1'd1);

assign xor_ln24_3_fu_613_p2 = (or_ln24_1_fu_609_p2 ^ 1'd1);

assign xor_ln24_fu_391_p2 = (icmp_ln24_reg_706 ^ 1'd1);

assign zext_ln24_1_cast_fu_203_p3 = {{1'd1}, {trunc_ln24_1_reg_696}};

assign zext_ln24_1_fu_210_p1 = zext_ln24_1_cast_fu_203_p3;

assign zext_ln24_2_fu_328_p1 = $unsigned(sext_ln24_fu_320_p1);

assign zext_ln24_3_fu_431_p1 = tmp_65_reg_751;

assign zext_ln24_4_fu_155_p1 = or_ln22_fu_150_p2;

assign zext_ln24_5_cast_fu_434_p3 = {{1'd1}, {trunc_ln24_6_reg_756}};

assign zext_ln24_5_fu_441_p1 = zext_ln24_5_cast_fu_434_p3;

assign zext_ln24_6_fu_529_p1 = $unsigned(sext_ln24_2_fu_521_p1);

assign zext_ln24_fu_200_p1 = tmp2_reg_691;

always @ (posedge ap_clk) begin
    i_cast7074_reg_649[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i_cast7074_reg_649_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    i_cast7074_reg_649_pp0_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln24_4_reg_665[0] <= 1'b1;
    zext_ln24_4_reg_665[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln24_4_reg_665_pp0_iter1_reg[0] <= 1'b1;
    zext_ln24_4_reg_665_pp0_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln24_4_reg_665_pp0_iter2_reg[0] <= 1'b1;
    zext_ln24_4_reg_665_pp0_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_22_1
