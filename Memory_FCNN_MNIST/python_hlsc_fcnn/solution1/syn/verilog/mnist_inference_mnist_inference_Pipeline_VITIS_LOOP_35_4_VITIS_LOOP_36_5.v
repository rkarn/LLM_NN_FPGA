// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_35_4_VITIS_LOOP_36_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        select_ln27,
        add_ln35_1,
        weight_tile_address0,
        weight_tile_ce0,
        weight_tile_we0,
        weight_tile_d0,
        tile
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] select_ln27;
input  [13:0] add_ln35_1;
output  [9:0] weight_tile_address0;
output   weight_tile_ce0;
output   weight_tile_we0;
output  [15:0] weight_tile_d0;
input  [9:0] tile;

reg ap_idle;
reg weight_tile_ce0;
reg weight_tile_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln35_fu_186_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [12:0] weights_address0;
reg    weights_ce0;
wire   [31:0] weights_q0;
wire    ap_block_pp0_stage0_11001;
wire   [6:0] select_ln35_fu_207_p3;
reg   [6:0] select_ln35_reg_551;
reg   [6:0] select_ln35_reg_551_pp0_iter1_reg;
wire   [3:0] select_ln35_1_fu_215_p3;
reg   [3:0] select_ln35_1_reg_556;
reg   [3:0] select_ln35_1_reg_556_pp0_iter1_reg;
reg   [3:0] select_ln35_1_reg_556_pp0_iter2_reg;
reg   [3:0] select_ln35_1_reg_556_pp0_iter3_reg;
reg   [3:0] select_ln35_1_reg_556_pp0_iter4_reg;
reg   [3:0] select_ln35_1_reg_556_pp0_iter5_reg;
reg   [3:0] select_ln35_1_reg_556_pp0_iter6_reg;
reg   [3:0] select_ln35_1_reg_556_pp0_iter7_reg;
reg   [3:0] select_ln35_1_reg_556_pp0_iter8_reg;
wire   [9:0] zext_ln38_2_fu_248_p1;
reg   [9:0] zext_ln38_2_reg_566;
reg   [9:0] zext_ln38_2_reg_566_pp0_iter3_reg;
reg   [9:0] zext_ln38_2_reg_566_pp0_iter4_reg;
reg   [9:0] zext_ln38_2_reg_566_pp0_iter5_reg;
reg   [9:0] zext_ln38_2_reg_566_pp0_iter6_reg;
reg   [9:0] zext_ln38_2_reg_566_pp0_iter7_reg;
reg   [9:0] zext_ln38_2_reg_566_pp0_iter8_reg;
reg   [31:0] weights_load_reg_581;
reg   [31:0] weights_load_reg_581_pp0_iter5_reg;
reg   [31:0] weights_load_reg_581_pp0_iter6_reg;
reg   [31:0] weights_load_reg_581_pp0_iter7_reg;
wire   [62:0] trunc_ln38_fu_268_p1;
reg   [62:0] trunc_ln38_reg_587;
reg   [0:0] tmp_reg_592;
reg   [10:0] tmp_1_reg_597;
wire   [51:0] trunc_ln38_1_fu_290_p1;
reg   [51:0] trunc_ln38_1_reg_602;
wire   [53:0] select_ln38_fu_314_p3;
reg   [53:0] select_ln38_reg_607;
wire   [0:0] icmp_ln38_fu_321_p2;
reg   [0:0] icmp_ln38_reg_612;
wire   [0:0] icmp_ln38_1_fu_332_p2;
reg   [0:0] icmp_ln38_1_reg_619;
wire  signed [11:0] select_ln38_1_fu_350_p3;
reg  signed [11:0] select_ln38_1_reg_624;
wire   [0:0] icmp_ln38_2_fu_358_p2;
reg   [0:0] icmp_ln38_2_reg_630;
wire   [15:0] trunc_ln38_2_fu_364_p1;
reg   [15:0] trunc_ln38_2_reg_636;
wire   [0:0] icmp_ln38_4_fu_378_p2;
reg   [0:0] icmp_ln38_4_reg_642;
wire   [15:0] select_ln38_6_fu_487_p3;
reg   [15:0] select_ln38_6_reg_647;
wire   [63:0] zext_ln38_5_fu_260_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln38_3_fu_507_p1;
reg   [6:0] j_fu_96;
wire   [6:0] add_ln36_1_fu_227_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_j_1;
reg   [3:0] i_fu_100;
reg   [3:0] ap_sig_allocacmp_i_load;
reg   [13:0] indvar_flatten_fu_104;
wire   [13:0] add_ln35_2_fu_192_p2;
reg   [13:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [9:0] zext_ln36_fu_176_p1;
wire   [0:0] icmp_ln36_fu_180_p2;
wire   [3:0] add_ln35_fu_201_p2;
wire   [9:0] add_ln36_fu_251_p2;
wire   [12:0] grp_fu_512_p3;
wire   [63:0] grp_fu_152_p1;
wire   [63:0] bitcast_ln724_fu_264_p1;
wire   [52:0] zext_ln38_1_cast_fu_297_p3;
wire   [53:0] zext_ln38_6_fu_304_p1;
wire   [53:0] sub_ln38_fu_308_p2;
wire   [11:0] zext_ln38_fu_294_p1;
wire   [11:0] sub_ln38_1_fu_326_p2;
wire   [11:0] add_ln38_fu_338_p2;
wire   [11:0] sub_ln38_2_fu_344_p2;
wire   [7:0] tmp_3_fu_368_p4;
wire  signed [31:0] sext_ln38_fu_384_p1;
wire   [53:0] zext_ln38_7_fu_392_p1;
wire   [53:0] ashr_ln38_fu_396_p2;
wire   [31:0] bitcast_ln724_1_fu_405_p1;
wire   [0:0] tmp_2_fu_408_p3;
wire   [0:0] icmp_ln38_3_fu_387_p2;
wire   [15:0] trunc_ln38_3_fu_401_p1;
wire   [15:0] select_ln38_7_fu_416_p3;
wire   [15:0] sext_ln38cast_fu_432_p1;
wire   [15:0] shl_ln38_fu_436_p2;
wire   [15:0] select_ln38_3_fu_441_p3;
wire   [0:0] xor_ln38_fu_455_p2;
wire   [0:0] and_ln38_fu_460_p2;
wire   [15:0] select_ln38_4_fu_448_p3;
wire   [0:0] or_ln38_fu_472_p2;
wire   [0:0] xor_ln38_1_fu_476_p2;
wire   [0:0] and_ln38_1_fu_482_p2;
wire   [15:0] select_ln38_2_fu_424_p3;
wire   [15:0] select_ln38_5_fu_465_p3;
wire   [9:0] tmp_s_fu_495_p3;
wire   [9:0] add_ln38_1_fu_502_p2;
wire   [3:0] grp_fu_512_p0;
wire   [9:0] grp_fu_512_p1;
wire   [9:0] grp_fu_512_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [12:0] grp_fu_512_p00;
wire   [12:0] grp_fu_512_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_35_4_VITIS_LOOP_36_5_weights_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 7840 ),
    .AddressWidth( 13 ))
weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(weights_address0),
    .ce0(weights_ce0),
    .q0(weights_q0)
);

mnist_inference_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(weights_load_reg_581),
    .ce(1'b1),
    .dout(grp_fu_152_p1)
);

mnist_inference_mac_muladd_4ns_10ns_10ns_13_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 10 ),
    .dout_WIDTH( 13 ))
mac_muladd_4ns_10ns_10ns_13_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_512_p0),
    .din1(grp_fu_512_p1),
    .din2(grp_fu_512_p2),
    .ce(1'b1),
    .dout(grp_fu_512_p3)
);

mnist_inference_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln35_fu_186_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_100 <= select_ln35_1_fu_215_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_100 <= 4'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln35_fu_186_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_104 <= add_ln35_2_fu_192_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_104 <= 14'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln35_fu_186_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_96 <= add_ln36_1_fu_227_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_96 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        select_ln35_1_reg_556_pp0_iter1_reg <= select_ln35_1_reg_556;
        select_ln35_reg_551_pp0_iter1_reg <= select_ln35_reg_551;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        icmp_ln38_1_reg_619 <= icmp_ln38_1_fu_332_p2;
        icmp_ln38_2_reg_630 <= icmp_ln38_2_fu_358_p2;
        icmp_ln38_4_reg_642 <= icmp_ln38_4_fu_378_p2;
        icmp_ln38_reg_612 <= icmp_ln38_fu_321_p2;
        select_ln35_1_reg_556_pp0_iter2_reg <= select_ln35_1_reg_556_pp0_iter1_reg;
        select_ln35_1_reg_556_pp0_iter3_reg <= select_ln35_1_reg_556_pp0_iter2_reg;
        select_ln35_1_reg_556_pp0_iter4_reg <= select_ln35_1_reg_556_pp0_iter3_reg;
        select_ln35_1_reg_556_pp0_iter5_reg <= select_ln35_1_reg_556_pp0_iter4_reg;
        select_ln35_1_reg_556_pp0_iter6_reg <= select_ln35_1_reg_556_pp0_iter5_reg;
        select_ln35_1_reg_556_pp0_iter7_reg <= select_ln35_1_reg_556_pp0_iter6_reg;
        select_ln35_1_reg_556_pp0_iter8_reg <= select_ln35_1_reg_556_pp0_iter7_reg;
        select_ln38_1_reg_624 <= select_ln38_1_fu_350_p3;
        select_ln38_6_reg_647 <= select_ln38_6_fu_487_p3;
        select_ln38_reg_607 <= select_ln38_fu_314_p3;
        tmp_1_reg_597 <= {{bitcast_ln724_fu_264_p1[62:52]}};
        tmp_reg_592 <= bitcast_ln724_fu_264_p1[32'd63];
        trunc_ln38_1_reg_602 <= trunc_ln38_1_fu_290_p1;
        trunc_ln38_2_reg_636 <= trunc_ln38_2_fu_364_p1;
        trunc_ln38_reg_587 <= trunc_ln38_fu_268_p1;
        weights_load_reg_581 <= weights_q0;
        weights_load_reg_581_pp0_iter5_reg <= weights_load_reg_581;
        weights_load_reg_581_pp0_iter6_reg <= weights_load_reg_581_pp0_iter5_reg;
        weights_load_reg_581_pp0_iter7_reg <= weights_load_reg_581_pp0_iter6_reg;
        zext_ln38_2_reg_566[6 : 0] <= zext_ln38_2_fu_248_p1[6 : 0];
        zext_ln38_2_reg_566_pp0_iter3_reg[6 : 0] <= zext_ln38_2_reg_566[6 : 0];
        zext_ln38_2_reg_566_pp0_iter4_reg[6 : 0] <= zext_ln38_2_reg_566_pp0_iter3_reg[6 : 0];
        zext_ln38_2_reg_566_pp0_iter5_reg[6 : 0] <= zext_ln38_2_reg_566_pp0_iter4_reg[6 : 0];
        zext_ln38_2_reg_566_pp0_iter6_reg[6 : 0] <= zext_ln38_2_reg_566_pp0_iter5_reg[6 : 0];
        zext_ln38_2_reg_566_pp0_iter7_reg[6 : 0] <= zext_ln38_2_reg_566_pp0_iter6_reg[6 : 0];
        zext_ln38_2_reg_566_pp0_iter8_reg[6 : 0] <= zext_ln38_2_reg_566_pp0_iter7_reg[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln35_fu_186_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln35_1_reg_556 <= select_ln35_1_fu_215_p3;
        select_ln35_reg_551 <= select_ln35_fu_207_p3;
    end
end

always @ (*) begin
    if (((icmp_ln35_fu_186_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter8_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_load = 4'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 14'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_104;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_j_1 = j_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        weight_tile_ce0 = 1'b1;
    end else begin
        weight_tile_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        weight_tile_we0 = 1'b1;
    end else begin
        weight_tile_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        weights_ce0 = 1'b1;
    end else begin
        weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln35_2_fu_192_p2 = (ap_sig_allocacmp_indvar_flatten_load + 14'd1);

assign add_ln35_fu_201_p2 = (ap_sig_allocacmp_i_load + 4'd1);

assign add_ln36_1_fu_227_p2 = (select_ln35_fu_207_p3 + 7'd1);

assign add_ln36_fu_251_p2 = (zext_ln38_2_fu_248_p1 + tile);

assign add_ln38_1_fu_502_p2 = (tmp_s_fu_495_p3 + zext_ln38_2_reg_566_pp0_iter8_reg);

assign add_ln38_fu_338_p2 = ($signed(sub_ln38_1_fu_326_p2) + $signed(12'd4088));

assign and_ln38_1_fu_482_p2 = (xor_ln38_1_fu_476_p2 & icmp_ln38_1_reg_619);

assign and_ln38_fu_460_p2 = (xor_ln38_fu_455_p2 & icmp_ln38_2_reg_630);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ashr_ln38_fu_396_p2 = $signed(select_ln38_reg_607) >>> zext_ln38_7_fu_392_p1;

assign bitcast_ln724_1_fu_405_p1 = weights_load_reg_581_pp0_iter7_reg;

assign bitcast_ln724_fu_264_p1 = grp_fu_152_p1;

assign grp_fu_512_p0 = grp_fu_512_p00;

assign grp_fu_512_p00 = select_ln35_1_fu_215_p3;

assign grp_fu_512_p1 = 13'd784;

assign grp_fu_512_p2 = grp_fu_512_p20;

assign grp_fu_512_p20 = add_ln36_fu_251_p2;

assign icmp_ln35_fu_186_p2 = ((ap_sig_allocacmp_indvar_flatten_load == add_ln35_1) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_180_p2 = ((zext_ln36_fu_176_p1 == select_ln27) ? 1'b1 : 1'b0);

assign icmp_ln38_1_fu_332_p2 = (($signed(sub_ln38_1_fu_326_p2) > $signed(12'd8)) ? 1'b1 : 1'b0);

assign icmp_ln38_2_fu_358_p2 = ((sub_ln38_1_fu_326_p2 == 12'd8) ? 1'b1 : 1'b0);

assign icmp_ln38_3_fu_387_p2 = ((select_ln38_1_reg_624 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln38_4_fu_378_p2 = ((tmp_3_fu_368_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_321_p2 = ((trunc_ln38_reg_587 == 63'd0) ? 1'b1 : 1'b0);

assign or_ln38_fu_472_p2 = (icmp_ln38_reg_612 | icmp_ln38_2_reg_630);

assign select_ln35_1_fu_215_p3 = ((icmp_ln36_fu_180_p2[0:0] == 1'b1) ? add_ln35_fu_201_p2 : ap_sig_allocacmp_i_load);

assign select_ln35_fu_207_p3 = ((icmp_ln36_fu_180_p2[0:0] == 1'b1) ? 7'd0 : ap_sig_allocacmp_j_1);

assign select_ln38_1_fu_350_p3 = ((icmp_ln38_1_fu_332_p2[0:0] == 1'b1) ? add_ln38_fu_338_p2 : sub_ln38_2_fu_344_p2);

assign select_ln38_2_fu_424_p3 = ((icmp_ln38_3_fu_387_p2[0:0] == 1'b1) ? trunc_ln38_3_fu_401_p1 : select_ln38_7_fu_416_p3);

assign select_ln38_3_fu_441_p3 = ((icmp_ln38_4_reg_642[0:0] == 1'b1) ? shl_ln38_fu_436_p2 : 16'd0);

assign select_ln38_4_fu_448_p3 = ((icmp_ln38_reg_612[0:0] == 1'b1) ? 16'd0 : select_ln38_3_fu_441_p3);

assign select_ln38_5_fu_465_p3 = ((and_ln38_fu_460_p2[0:0] == 1'b1) ? trunc_ln38_2_reg_636 : select_ln38_4_fu_448_p3);

assign select_ln38_6_fu_487_p3 = ((and_ln38_1_fu_482_p2[0:0] == 1'b1) ? select_ln38_2_fu_424_p3 : select_ln38_5_fu_465_p3);

assign select_ln38_7_fu_416_p3 = ((tmp_2_fu_408_p3[0:0] == 1'b1) ? 16'd65535 : 16'd0);

assign select_ln38_fu_314_p3 = ((tmp_reg_592[0:0] == 1'b1) ? sub_ln38_fu_308_p2 : zext_ln38_6_fu_304_p1);

assign sext_ln38_fu_384_p1 = select_ln38_1_reg_624;

assign sext_ln38cast_fu_432_p1 = sext_ln38_fu_384_p1[15:0];

assign shl_ln38_fu_436_p2 = trunc_ln38_2_reg_636 << sext_ln38cast_fu_432_p1;

assign sub_ln38_1_fu_326_p2 = (12'd1075 - zext_ln38_fu_294_p1);

assign sub_ln38_2_fu_344_p2 = (12'd8 - sub_ln38_1_fu_326_p2);

assign sub_ln38_fu_308_p2 = (54'd0 - zext_ln38_6_fu_304_p1);

assign tmp_2_fu_408_p3 = bitcast_ln724_1_fu_405_p1[32'd31];

assign tmp_3_fu_368_p4 = {{select_ln38_1_fu_350_p3[11:4]}};

assign tmp_s_fu_495_p3 = {{select_ln35_1_reg_556_pp0_iter8_reg}, {6'd0}};

assign trunc_ln38_1_fu_290_p1 = bitcast_ln724_fu_264_p1[51:0];

assign trunc_ln38_2_fu_364_p1 = select_ln38_fu_314_p3[15:0];

assign trunc_ln38_3_fu_401_p1 = ashr_ln38_fu_396_p2[15:0];

assign trunc_ln38_fu_268_p1 = bitcast_ln724_fu_264_p1[62:0];

assign weight_tile_address0 = zext_ln38_3_fu_507_p1;

assign weight_tile_d0 = select_ln38_6_reg_647;

assign weights_address0 = zext_ln38_5_fu_260_p1;

assign xor_ln38_1_fu_476_p2 = (or_ln38_fu_472_p2 ^ 1'd1);

assign xor_ln38_fu_455_p2 = (icmp_ln38_reg_612 ^ 1'd1);

assign zext_ln36_fu_176_p1 = ap_sig_allocacmp_j_1;

assign zext_ln38_1_cast_fu_297_p3 = {{1'd1}, {trunc_ln38_1_reg_602}};

assign zext_ln38_2_fu_248_p1 = select_ln35_reg_551_pp0_iter1_reg;

assign zext_ln38_3_fu_507_p1 = add_ln38_1_fu_502_p2;

assign zext_ln38_5_fu_260_p1 = grp_fu_512_p3;

assign zext_ln38_6_fu_304_p1 = zext_ln38_1_cast_fu_297_p3;

assign zext_ln38_7_fu_392_p1 = $unsigned(sext_ln38_fu_384_p1);

assign zext_ln38_fu_294_p1 = tmp_1_reg_597;

always @ (posedge ap_clk) begin
    zext_ln38_2_reg_566[9:7] <= 3'b000;
    zext_ln38_2_reg_566_pp0_iter3_reg[9:7] <= 3'b000;
    zext_ln38_2_reg_566_pp0_iter4_reg[9:7] <= 3'b000;
    zext_ln38_2_reg_566_pp0_iter5_reg[9:7] <= 3'b000;
    zext_ln38_2_reg_566_pp0_iter6_reg[9:7] <= 3'b000;
    zext_ln38_2_reg_566_pp0_iter7_reg[9:7] <= 3'b000;
    zext_ln38_2_reg_566_pp0_iter8_reg[9:7] <= 3'b000;
end

endmodule //mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_35_4_VITIS_LOOP_36_5
