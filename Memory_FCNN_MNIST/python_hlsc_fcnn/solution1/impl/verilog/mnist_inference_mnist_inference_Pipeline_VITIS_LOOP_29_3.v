// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_29_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        select_ln27,
        tile,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_tile_address0,
        input_tile_ce0,
        input_tile_we0,
        input_tile_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] select_ln27;
input  [9:0] tile;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [5:0] input_tile_address0;
output   input_tile_ce0;
output   input_tile_we0;
output  [15:0] input_tile_d0;

reg ap_idle;
reg input_r_ce0;
reg input_tile_ce0;
reg input_tile_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln29_fu_139_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [6:0] i_1_reg_409;
wire    ap_block_pp0_stage0_11001;
reg   [6:0] i_1_reg_409_pp0_iter1_reg;
reg   [6:0] i_1_reg_409_pp0_iter2_reg;
reg   [6:0] i_1_reg_409_pp0_iter3_reg;
reg   [6:0] i_1_reg_409_pp0_iter4_reg;
reg   [6:0] i_1_reg_409_pp0_iter5_reg;
reg   [31:0] input_r_load_reg_423;
reg   [31:0] input_r_load_reg_423_pp0_iter2_reg;
reg   [31:0] input_r_load_reg_423_pp0_iter3_reg;
reg   [31:0] input_r_load_reg_423_pp0_iter4_reg;
wire   [62:0] trunc_ln31_fu_175_p1;
reg   [62:0] trunc_ln31_reg_434;
reg   [0:0] tmp_reg_439;
reg   [10:0] tmp_s_reg_444;
wire   [51:0] trunc_ln31_1_fu_197_p1;
reg   [51:0] trunc_ln31_1_reg_449;
wire   [53:0] select_ln31_fu_221_p3;
reg   [53:0] select_ln31_reg_454;
wire   [0:0] icmp_ln31_fu_228_p2;
reg   [0:0] icmp_ln31_reg_459;
wire   [0:0] icmp_ln31_1_fu_239_p2;
reg   [0:0] icmp_ln31_1_reg_466;
wire  signed [11:0] select_ln31_1_fu_257_p3;
reg  signed [11:0] select_ln31_1_reg_471;
wire   [0:0] icmp_ln31_2_fu_265_p2;
reg   [0:0] icmp_ln31_2_reg_477;
wire   [15:0] trunc_ln31_2_fu_271_p1;
reg   [15:0] trunc_ln31_2_reg_483;
wire   [0:0] icmp_ln31_4_fu_285_p2;
reg   [0:0] icmp_ln31_4_reg_489;
wire   [15:0] select_ln31_6_fu_390_p3;
reg   [15:0] select_ln31_6_reg_494;
wire   [63:0] zext_ln31_1_fu_157_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln29_fu_398_p1;
reg   [6:0] i_fu_82;
wire   [6:0] add_ln29_fu_145_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_i_1;
wire   [31:0] grp_fu_124_p0;
wire   [9:0] zext_ln29_1_fu_135_p1;
wire   [9:0] add_ln31_fu_151_p2;
wire   [63:0] grp_fu_124_p1;
wire   [63:0] bitcast_ln724_fu_171_p1;
wire   [52:0] zext_ln31_2_cast_fu_204_p3;
wire   [53:0] zext_ln31_2_fu_211_p1;
wire   [53:0] sub_ln31_fu_215_p2;
wire   [11:0] zext_ln31_fu_201_p1;
wire   [11:0] sub_ln31_1_fu_233_p2;
wire   [11:0] add_ln31_1_fu_245_p2;
wire   [11:0] sub_ln31_2_fu_251_p2;
wire   [7:0] tmp_5_fu_275_p4;
wire  signed [31:0] sext_ln31_fu_291_p1;
wire   [53:0] zext_ln31_3_fu_299_p1;
wire   [53:0] ashr_ln31_fu_303_p2;
wire   [0:0] tmp_4_fu_312_p3;
wire   [0:0] icmp_ln31_3_fu_294_p2;
wire   [15:0] trunc_ln31_3_fu_308_p1;
wire   [15:0] select_ln31_7_fu_319_p3;
wire   [15:0] sext_ln31cast_fu_335_p1;
wire   [15:0] shl_ln31_fu_339_p2;
wire   [15:0] select_ln31_3_fu_344_p3;
wire   [0:0] xor_ln31_fu_358_p2;
wire   [0:0] and_ln31_fu_363_p2;
wire   [15:0] select_ln31_4_fu_351_p3;
wire   [0:0] or_ln31_fu_375_p2;
wire   [0:0] xor_ln31_1_fu_379_p2;
wire   [0:0] and_ln31_1_fu_385_p2;
wire   [15:0] select_ln31_2_fu_327_p3;
wire   [15:0] select_ln31_5_fu_368_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mnist_inference_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_124_p0),
    .ce(1'b1),
    .dout(grp_fu_124_p1)
);

mnist_inference_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln29_fu_139_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_82 <= add_ln29_fu_145_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_82 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        i_1_reg_409 <= ap_sig_allocacmp_i_1;
        i_1_reg_409_pp0_iter1_reg <= i_1_reg_409;
        input_r_load_reg_423 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        i_1_reg_409_pp0_iter2_reg <= i_1_reg_409_pp0_iter1_reg;
        i_1_reg_409_pp0_iter3_reg <= i_1_reg_409_pp0_iter2_reg;
        i_1_reg_409_pp0_iter4_reg <= i_1_reg_409_pp0_iter3_reg;
        i_1_reg_409_pp0_iter5_reg <= i_1_reg_409_pp0_iter4_reg;
        icmp_ln31_1_reg_466 <= icmp_ln31_1_fu_239_p2;
        icmp_ln31_2_reg_477 <= icmp_ln31_2_fu_265_p2;
        icmp_ln31_4_reg_489 <= icmp_ln31_4_fu_285_p2;
        icmp_ln31_reg_459 <= icmp_ln31_fu_228_p2;
        input_r_load_reg_423_pp0_iter2_reg <= input_r_load_reg_423;
        input_r_load_reg_423_pp0_iter3_reg <= input_r_load_reg_423_pp0_iter2_reg;
        input_r_load_reg_423_pp0_iter4_reg <= input_r_load_reg_423_pp0_iter3_reg;
        select_ln31_1_reg_471 <= select_ln31_1_fu_257_p3;
        select_ln31_6_reg_494 <= select_ln31_6_fu_390_p3;
        select_ln31_reg_454 <= select_ln31_fu_221_p3;
        tmp_reg_439 <= bitcast_ln724_fu_171_p1[32'd63];
        tmp_s_reg_444 <= {{bitcast_ln724_fu_171_p1[62:52]}};
        trunc_ln31_1_reg_449 <= trunc_ln31_1_fu_197_p1;
        trunc_ln31_2_reg_483 <= trunc_ln31_2_fu_271_p1;
        trunc_ln31_reg_434 <= trunc_ln31_fu_175_p1;
    end
end

always @ (*) begin
    if (((icmp_ln29_fu_139_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_82;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        input_tile_ce0 = 1'b1;
    end else begin
        input_tile_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        input_tile_we0 = 1'b1;
    end else begin
        input_tile_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln29_fu_145_p2 = (ap_sig_allocacmp_i_1 + 7'd1);

assign add_ln31_1_fu_245_p2 = ($signed(sub_ln31_1_fu_233_p2) + $signed(12'd4088));

assign add_ln31_fu_151_p2 = (zext_ln29_1_fu_135_p1 + tile);

assign and_ln31_1_fu_385_p2 = (xor_ln31_1_fu_379_p2 & icmp_ln31_1_reg_466);

assign and_ln31_fu_363_p2 = (xor_ln31_fu_358_p2 & icmp_ln31_2_reg_477);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ashr_ln31_fu_303_p2 = $signed(select_ln31_reg_454) >>> zext_ln31_3_fu_299_p1;

assign bitcast_ln724_fu_171_p1 = grp_fu_124_p1;

assign grp_fu_124_p0 = input_r_load_reg_423;

assign icmp_ln29_fu_139_p2 = ((zext_ln29_1_fu_135_p1 == select_ln27) ? 1'b1 : 1'b0);

assign icmp_ln31_1_fu_239_p2 = (($signed(sub_ln31_1_fu_233_p2) > $signed(12'd8)) ? 1'b1 : 1'b0);

assign icmp_ln31_2_fu_265_p2 = ((sub_ln31_1_fu_233_p2 == 12'd8) ? 1'b1 : 1'b0);

assign icmp_ln31_3_fu_294_p2 = ((select_ln31_1_reg_471 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln31_4_fu_285_p2 = ((tmp_5_fu_275_p4 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_228_p2 = ((trunc_ln31_reg_434 == 63'd0) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln31_1_fu_157_p1;

assign input_tile_address0 = zext_ln29_fu_398_p1;

assign input_tile_d0 = select_ln31_6_reg_494;

assign or_ln31_fu_375_p2 = (icmp_ln31_reg_459 | icmp_ln31_2_reg_477);

assign select_ln31_1_fu_257_p3 = ((icmp_ln31_1_fu_239_p2[0:0] == 1'b1) ? add_ln31_1_fu_245_p2 : sub_ln31_2_fu_251_p2);

assign select_ln31_2_fu_327_p3 = ((icmp_ln31_3_fu_294_p2[0:0] == 1'b1) ? trunc_ln31_3_fu_308_p1 : select_ln31_7_fu_319_p3);

assign select_ln31_3_fu_344_p3 = ((icmp_ln31_4_reg_489[0:0] == 1'b1) ? shl_ln31_fu_339_p2 : 16'd0);

assign select_ln31_4_fu_351_p3 = ((icmp_ln31_reg_459[0:0] == 1'b1) ? 16'd0 : select_ln31_3_fu_344_p3);

assign select_ln31_5_fu_368_p3 = ((and_ln31_fu_363_p2[0:0] == 1'b1) ? trunc_ln31_2_reg_483 : select_ln31_4_fu_351_p3);

assign select_ln31_6_fu_390_p3 = ((and_ln31_1_fu_385_p2[0:0] == 1'b1) ? select_ln31_2_fu_327_p3 : select_ln31_5_fu_368_p3);

assign select_ln31_7_fu_319_p3 = ((tmp_4_fu_312_p3[0:0] == 1'b1) ? 16'd65535 : 16'd0);

assign select_ln31_fu_221_p3 = ((tmp_reg_439[0:0] == 1'b1) ? sub_ln31_fu_215_p2 : zext_ln31_2_fu_211_p1);

assign sext_ln31_fu_291_p1 = select_ln31_1_reg_471;

assign sext_ln31cast_fu_335_p1 = sext_ln31_fu_291_p1[15:0];

assign shl_ln31_fu_339_p2 = trunc_ln31_2_reg_483 << sext_ln31cast_fu_335_p1;

assign sub_ln31_1_fu_233_p2 = (12'd1075 - zext_ln31_fu_201_p1);

assign sub_ln31_2_fu_251_p2 = (12'd8 - sub_ln31_1_fu_233_p2);

assign sub_ln31_fu_215_p2 = (54'd0 - zext_ln31_2_fu_211_p1);

assign tmp_4_fu_312_p3 = input_r_load_reg_423_pp0_iter4_reg[32'd31];

assign tmp_5_fu_275_p4 = {{select_ln31_1_fu_257_p3[11:4]}};

assign trunc_ln31_1_fu_197_p1 = bitcast_ln724_fu_171_p1[51:0];

assign trunc_ln31_2_fu_271_p1 = select_ln31_fu_221_p3[15:0];

assign trunc_ln31_3_fu_308_p1 = ashr_ln31_fu_303_p2[15:0];

assign trunc_ln31_fu_175_p1 = bitcast_ln724_fu_171_p1[62:0];

assign xor_ln31_1_fu_379_p2 = (or_ln31_fu_375_p2 ^ 1'd1);

assign xor_ln31_fu_358_p2 = (icmp_ln31_reg_459 ^ 1'd1);

assign zext_ln29_1_fu_135_p1 = ap_sig_allocacmp_i_1;

assign zext_ln29_fu_398_p1 = i_1_reg_409_pp0_iter5_reg;

assign zext_ln31_1_fu_157_p1 = add_ln31_fu_151_p2;

assign zext_ln31_2_cast_fu_204_p3 = {{1'd1}, {trunc_ln31_1_reg_449}};

assign zext_ln31_2_fu_211_p1 = zext_ln31_2_cast_fu_204_p3;

assign zext_ln31_3_fu_299_p1 = $unsigned(sext_ln31_fu_291_p1);

assign zext_ln31_fu_201_p1 = tmp_s_reg_444;

endmodule //mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_29_3
