-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_35_4_VITIS_LOOP_36_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    select_ln27 : IN STD_LOGIC_VECTOR (9 downto 0);
    add_ln35_1 : IN STD_LOGIC_VECTOR (13 downto 0);
    weight_tile_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    weight_tile_ce0 : OUT STD_LOGIC;
    weight_tile_we0 : OUT STD_LOGIC;
    weight_tile_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    tile : IN STD_LOGIC_VECTOR (9 downto 0) );
end;


architecture behav of mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_35_4_VITIS_LOOP_36_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_310 : STD_LOGIC_VECTOR (12 downto 0) := "0001100010000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln35_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal weights_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal weights_ce0 : STD_LOGIC;
    signal weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln35_fu_207_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln35_reg_551 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln35_reg_551_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln35_1_fu_215_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_reg_556 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_reg_556_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_reg_556_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_reg_556_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_reg_556_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_reg_556_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_reg_556_pp0_iter6_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_reg_556_pp0_iter7_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_reg_556_pp0_iter8_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln38_2_fu_248_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_2_reg_566 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_2_reg_566_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_2_reg_566_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_2_reg_566_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_2_reg_566_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_2_reg_566_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_2_reg_566_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal weights_load_reg_581 : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_load_reg_581_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_load_reg_581_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal weights_load_reg_581_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln38_fu_268_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln38_reg_587 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_597 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln38_1_fu_290_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln38_1_reg_602 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln38_fu_314_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln38_reg_607 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln38_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_612 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_1_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_1_reg_619 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_1_fu_350_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln38_1_reg_624 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln38_2_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_2_reg_630 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_2_fu_364_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln38_2_reg_636 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln38_4_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_4_reg_642 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_6_fu_487_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln38_6_reg_647 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln38_5_fu_260_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln38_3_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_fu_96 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_1_fu_227_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_100 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_sig_allocacmp_i_load : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_104 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_2_fu_192_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln36_fu_176_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln36_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_fu_201_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln36_fu_251_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_512_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln724_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_1_cast_fu_297_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln38_6_fu_304_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln38_fu_308_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln38_fu_294_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln38_1_fu_326_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln38_fu_338_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln38_2_fu_344_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_fu_368_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln38_fu_384_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln38_7_fu_392_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln38_fu_396_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln724_1_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_3_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln38_3_fu_401_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln38_7_fu_416_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln38cast_fu_432_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln38_fu_436_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln38_3_fu_441_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln38_fu_455_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_4_fu_448_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln38_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln38_1_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_1_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_2_fu_424_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln38_5_fu_465_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_495_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_1_fu_502_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_512_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_512_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_512_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_512_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_512_p20 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component mnist_inference_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component mnist_inference_mac_muladd_4ns_10ns_10ns_13_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_35_4_VITIS_LOOP_36_5_weights_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component mnist_inference_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    weights_U : component mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_35_4_VITIS_LOOP_36_5_weights_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 7840,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => weights_address0,
        ce0 => weights_ce0,
        q0 => weights_q0);

    fpext_32ns_64_2_no_dsp_1_U7 : component mnist_inference_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => weights_load_reg_581,
        ce => ap_const_logic_1,
        dout => grp_fu_152_p1);

    mac_muladd_4ns_10ns_10ns_13_4_1_U8 : component mnist_inference_mac_muladd_4ns_10ns_10ns_13_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 4,
        din1_WIDTH => 10,
        din2_WIDTH => 10,
        dout_WIDTH => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_512_p0,
        din1 => grp_fu_512_p1,
        din2 => grp_fu_512_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_512_p3);

    flow_control_loop_pipe_sequential_init_U : component mnist_inference_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln35_fu_186_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_100 <= select_ln35_1_fu_215_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_100 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln35_fu_186_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten_fu_104 <= add_ln35_2_fu_192_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_104 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln35_fu_186_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    j_fu_96 <= add_ln36_1_fu_227_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_96 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                select_ln35_1_reg_556_pp0_iter1_reg <= select_ln35_1_reg_556;
                select_ln35_reg_551_pp0_iter1_reg <= select_ln35_reg_551;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                icmp_ln38_1_reg_619 <= icmp_ln38_1_fu_332_p2;
                icmp_ln38_2_reg_630 <= icmp_ln38_2_fu_358_p2;
                icmp_ln38_4_reg_642 <= icmp_ln38_4_fu_378_p2;
                icmp_ln38_reg_612 <= icmp_ln38_fu_321_p2;
                select_ln35_1_reg_556_pp0_iter2_reg <= select_ln35_1_reg_556_pp0_iter1_reg;
                select_ln35_1_reg_556_pp0_iter3_reg <= select_ln35_1_reg_556_pp0_iter2_reg;
                select_ln35_1_reg_556_pp0_iter4_reg <= select_ln35_1_reg_556_pp0_iter3_reg;
                select_ln35_1_reg_556_pp0_iter5_reg <= select_ln35_1_reg_556_pp0_iter4_reg;
                select_ln35_1_reg_556_pp0_iter6_reg <= select_ln35_1_reg_556_pp0_iter5_reg;
                select_ln35_1_reg_556_pp0_iter7_reg <= select_ln35_1_reg_556_pp0_iter6_reg;
                select_ln35_1_reg_556_pp0_iter8_reg <= select_ln35_1_reg_556_pp0_iter7_reg;
                select_ln38_1_reg_624 <= select_ln38_1_fu_350_p3;
                select_ln38_6_reg_647 <= select_ln38_6_fu_487_p3;
                select_ln38_reg_607 <= select_ln38_fu_314_p3;
                tmp_1_reg_597 <= bitcast_ln724_fu_264_p1(62 downto 52);
                tmp_reg_592 <= bitcast_ln724_fu_264_p1(63 downto 63);
                trunc_ln38_1_reg_602 <= trunc_ln38_1_fu_290_p1;
                trunc_ln38_2_reg_636 <= trunc_ln38_2_fu_364_p1;
                trunc_ln38_reg_587 <= trunc_ln38_fu_268_p1;
                weights_load_reg_581 <= weights_q0;
                weights_load_reg_581_pp0_iter5_reg <= weights_load_reg_581;
                weights_load_reg_581_pp0_iter6_reg <= weights_load_reg_581_pp0_iter5_reg;
                weights_load_reg_581_pp0_iter7_reg <= weights_load_reg_581_pp0_iter6_reg;
                    zext_ln38_2_reg_566(6 downto 0) <= zext_ln38_2_fu_248_p1(6 downto 0);
                    zext_ln38_2_reg_566_pp0_iter3_reg(6 downto 0) <= zext_ln38_2_reg_566(6 downto 0);
                    zext_ln38_2_reg_566_pp0_iter4_reg(6 downto 0) <= zext_ln38_2_reg_566_pp0_iter3_reg(6 downto 0);
                    zext_ln38_2_reg_566_pp0_iter5_reg(6 downto 0) <= zext_ln38_2_reg_566_pp0_iter4_reg(6 downto 0);
                    zext_ln38_2_reg_566_pp0_iter6_reg(6 downto 0) <= zext_ln38_2_reg_566_pp0_iter5_reg(6 downto 0);
                    zext_ln38_2_reg_566_pp0_iter7_reg(6 downto 0) <= zext_ln38_2_reg_566_pp0_iter6_reg(6 downto 0);
                    zext_ln38_2_reg_566_pp0_iter8_reg(6 downto 0) <= zext_ln38_2_reg_566_pp0_iter7_reg(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln35_fu_186_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln35_1_reg_556 <= select_ln35_1_fu_215_p3;
                select_ln35_reg_551 <= select_ln35_fu_207_p3;
            end if;
        end if;
    end process;
    zext_ln38_2_reg_566(9 downto 7) <= "000";
    zext_ln38_2_reg_566_pp0_iter3_reg(9 downto 7) <= "000";
    zext_ln38_2_reg_566_pp0_iter4_reg(9 downto 7) <= "000";
    zext_ln38_2_reg_566_pp0_iter5_reg(9 downto 7) <= "000";
    zext_ln38_2_reg_566_pp0_iter6_reg(9 downto 7) <= "000";
    zext_ln38_2_reg_566_pp0_iter7_reg(9 downto 7) <= "000";
    zext_ln38_2_reg_566_pp0_iter8_reg(9 downto 7) <= "000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln35_2_fu_192_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv14_1));
    add_ln35_fu_201_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_load) + unsigned(ap_const_lv4_1));
    add_ln36_1_fu_227_p2 <= std_logic_vector(unsigned(select_ln35_fu_207_p3) + unsigned(ap_const_lv7_1));
    add_ln36_fu_251_p2 <= std_logic_vector(unsigned(zext_ln38_2_fu_248_p1) + unsigned(tile));
    add_ln38_1_fu_502_p2 <= std_logic_vector(unsigned(tmp_s_fu_495_p3) + unsigned(zext_ln38_2_reg_566_pp0_iter8_reg));
    add_ln38_fu_338_p2 <= std_logic_vector(unsigned(sub_ln38_1_fu_326_p2) + unsigned(ap_const_lv12_FF8));
    and_ln38_1_fu_482_p2 <= (xor_ln38_1_fu_476_p2 and icmp_ln38_1_reg_619);
    and_ln38_fu_460_p2 <= (xor_ln38_fu_455_p2 and icmp_ln38_2_reg_630);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln35_fu_186_p2)
    begin
        if (((icmp_ln35_fu_186_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_100)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_load <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_load <= i_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_104)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv14_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_104;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, j_fu_96, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_96;
        end if; 
    end process;

    ashr_ln38_fu_396_p2 <= std_logic_vector(shift_right(signed(select_ln38_reg_607),to_integer(unsigned('0' & zext_ln38_7_fu_392_p1(31-1 downto 0)))));
    bitcast_ln724_1_fu_405_p1 <= weights_load_reg_581_pp0_iter7_reg;
    bitcast_ln724_fu_264_p1 <= grp_fu_152_p1;
    grp_fu_512_p0 <= grp_fu_512_p00(4 - 1 downto 0);
    grp_fu_512_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_fu_215_p3),13));
    grp_fu_512_p1 <= ap_const_lv13_310(10 - 1 downto 0);
    grp_fu_512_p2 <= grp_fu_512_p20(10 - 1 downto 0);
    grp_fu_512_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_fu_251_p2),13));
    icmp_ln35_fu_186_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = add_ln35_1) else "0";
    icmp_ln36_fu_180_p2 <= "1" when (zext_ln36_fu_176_p1 = select_ln27) else "0";
    icmp_ln38_1_fu_332_p2 <= "1" when (signed(sub_ln38_1_fu_326_p2) > signed(ap_const_lv12_8)) else "0";
    icmp_ln38_2_fu_358_p2 <= "1" when (sub_ln38_1_fu_326_p2 = ap_const_lv12_8) else "0";
    icmp_ln38_3_fu_387_p2 <= "1" when (unsigned(select_ln38_1_reg_624) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln38_4_fu_378_p2 <= "1" when (tmp_3_fu_368_p4 = ap_const_lv8_0) else "0";
    icmp_ln38_fu_321_p2 <= "1" when (trunc_ln38_reg_587 = ap_const_lv63_0) else "0";
    or_ln38_fu_472_p2 <= (icmp_ln38_reg_612 or icmp_ln38_2_reg_630);
    select_ln35_1_fu_215_p3 <= 
        add_ln35_fu_201_p2 when (icmp_ln36_fu_180_p2(0) = '1') else 
        ap_sig_allocacmp_i_load;
    select_ln35_fu_207_p3 <= 
        ap_const_lv7_0 when (icmp_ln36_fu_180_p2(0) = '1') else 
        ap_sig_allocacmp_j_1;
    select_ln38_1_fu_350_p3 <= 
        add_ln38_fu_338_p2 when (icmp_ln38_1_fu_332_p2(0) = '1') else 
        sub_ln38_2_fu_344_p2;
    select_ln38_2_fu_424_p3 <= 
        trunc_ln38_3_fu_401_p1 when (icmp_ln38_3_fu_387_p2(0) = '1') else 
        select_ln38_7_fu_416_p3;
    select_ln38_3_fu_441_p3 <= 
        shl_ln38_fu_436_p2 when (icmp_ln38_4_reg_642(0) = '1') else 
        ap_const_lv16_0;
    select_ln38_4_fu_448_p3 <= 
        ap_const_lv16_0 when (icmp_ln38_reg_612(0) = '1') else 
        select_ln38_3_fu_441_p3;
    select_ln38_5_fu_465_p3 <= 
        trunc_ln38_2_reg_636 when (and_ln38_fu_460_p2(0) = '1') else 
        select_ln38_4_fu_448_p3;
    select_ln38_6_fu_487_p3 <= 
        select_ln38_2_fu_424_p3 when (and_ln38_1_fu_482_p2(0) = '1') else 
        select_ln38_5_fu_465_p3;
    select_ln38_7_fu_416_p3 <= 
        ap_const_lv16_FFFF when (tmp_2_fu_408_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln38_fu_314_p3 <= 
        sub_ln38_fu_308_p2 when (tmp_reg_592(0) = '1') else 
        zext_ln38_6_fu_304_p1;
        sext_ln38_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln38_1_reg_624),32));

    sext_ln38cast_fu_432_p1 <= sext_ln38_fu_384_p1(16 - 1 downto 0);
    shl_ln38_fu_436_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln38_2_reg_636),to_integer(unsigned('0' & sext_ln38cast_fu_432_p1(16-1 downto 0)))));
    sub_ln38_1_fu_326_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln38_fu_294_p1));
    sub_ln38_2_fu_344_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(sub_ln38_1_fu_326_p2));
    sub_ln38_fu_308_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln38_6_fu_304_p1));
    tmp_2_fu_408_p3 <= bitcast_ln724_1_fu_405_p1(31 downto 31);
    tmp_3_fu_368_p4 <= select_ln38_1_fu_350_p3(11 downto 4);
    tmp_s_fu_495_p3 <= (select_ln35_1_reg_556_pp0_iter8_reg & ap_const_lv6_0);
    trunc_ln38_1_fu_290_p1 <= bitcast_ln724_fu_264_p1(52 - 1 downto 0);
    trunc_ln38_2_fu_364_p1 <= select_ln38_fu_314_p3(16 - 1 downto 0);
    trunc_ln38_3_fu_401_p1 <= ashr_ln38_fu_396_p2(16 - 1 downto 0);
    trunc_ln38_fu_268_p1 <= bitcast_ln724_fu_264_p1(63 - 1 downto 0);
    weight_tile_address0 <= zext_ln38_3_fu_507_p1(10 - 1 downto 0);

    weight_tile_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            weight_tile_ce0 <= ap_const_logic_1;
        else 
            weight_tile_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    weight_tile_d0 <= select_ln38_6_reg_647;

    weight_tile_we0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            weight_tile_we0 <= ap_const_logic_1;
        else 
            weight_tile_we0 <= ap_const_logic_0;
        end if; 
    end process;

    weights_address0 <= zext_ln38_5_fu_260_p1(13 - 1 downto 0);

    weights_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            weights_ce0 <= ap_const_logic_1;
        else 
            weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln38_1_fu_476_p2 <= (or_ln38_fu_472_p2 xor ap_const_lv1_1);
    xor_ln38_fu_455_p2 <= (icmp_ln38_reg_612 xor ap_const_lv1_1);
    zext_ln36_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),10));
    zext_ln38_1_cast_fu_297_p3 <= (ap_const_lv1_1 & trunc_ln38_1_reg_602);
    zext_ln38_2_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_reg_551_pp0_iter1_reg),10));
    zext_ln38_3_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_1_fu_502_p2),64));
    zext_ln38_5_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_512_p3),64));
    zext_ln38_6_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln38_1_cast_fu_297_p3),54));
    zext_ln38_7_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln38_fu_384_p1),54));
    zext_ln38_fu_294_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_reg_597),12));
end behav;
