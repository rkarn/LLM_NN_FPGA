-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_29_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    select_ln27 : IN STD_LOGIC_VECTOR (9 downto 0);
    tile : IN STD_LOGIC_VECTOR (9 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_tile_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    input_tile_ce0 : OUT STD_LOGIC;
    input_tile_we0 : OUT STD_LOGIC;
    input_tile_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of mnist_inference_mnist_inference_Pipeline_VITIS_LOOP_29_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln29_fu_139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal i_1_reg_409 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_reg_409_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_409_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_409_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_409_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_409_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal input_r_load_reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_load_reg_423_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_load_reg_423_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal input_r_load_reg_423_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln31_fu_175_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal trunc_ln31_reg_434 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_reg_439 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_444 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln31_1_fu_197_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal trunc_ln31_1_reg_449 : STD_LOGIC_VECTOR (51 downto 0);
    signal select_ln31_fu_221_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln31_reg_454 : STD_LOGIC_VECTOR (53 downto 0);
    signal icmp_ln31_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_459 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_1_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_1_reg_466 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_1_fu_257_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln31_1_reg_471 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln31_2_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_2_reg_477 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln31_2_fu_271_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln31_2_reg_483 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln31_4_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_4_reg_489 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_6_fu_390_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln31_6_reg_494 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln31_1_fu_157_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln29_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_82 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln29_fu_145_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_124_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln29_1_fu_135_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln31_fu_151_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_124_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln724_fu_171_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_2_cast_fu_204_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln31_2_fu_211_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal sub_ln31_fu_215_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal zext_ln31_fu_201_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln31_1_fu_233_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln31_1_fu_245_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln31_2_fu_251_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_5_fu_275_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln31_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln31_3_fu_299_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln31_fu_303_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_4_fu_312_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_3_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln31_3_fu_308_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln31_7_fu_319_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln31cast_fu_335_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln31_fu_339_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln31_3_fu_344_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln31_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_4_fu_351_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln31_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln31_1_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_1_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_2_fu_327_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln31_5_fu_368_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component mnist_inference_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component mnist_inference_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    fpext_32ns_64_2_no_dsp_1_U1 : component mnist_inference_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_124_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_124_p1);

    flow_control_loop_pipe_sequential_init_U : component mnist_inference_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    i_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln29_fu_139_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_82 <= add_ln29_fu_145_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_82 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_1_reg_409 <= ap_sig_allocacmp_i_1;
                i_1_reg_409_pp0_iter1_reg <= i_1_reg_409;
                input_r_load_reg_423 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                i_1_reg_409_pp0_iter2_reg <= i_1_reg_409_pp0_iter1_reg;
                i_1_reg_409_pp0_iter3_reg <= i_1_reg_409_pp0_iter2_reg;
                i_1_reg_409_pp0_iter4_reg <= i_1_reg_409_pp0_iter3_reg;
                i_1_reg_409_pp0_iter5_reg <= i_1_reg_409_pp0_iter4_reg;
                icmp_ln31_1_reg_466 <= icmp_ln31_1_fu_239_p2;
                icmp_ln31_2_reg_477 <= icmp_ln31_2_fu_265_p2;
                icmp_ln31_4_reg_489 <= icmp_ln31_4_fu_285_p2;
                icmp_ln31_reg_459 <= icmp_ln31_fu_228_p2;
                input_r_load_reg_423_pp0_iter2_reg <= input_r_load_reg_423;
                input_r_load_reg_423_pp0_iter3_reg <= input_r_load_reg_423_pp0_iter2_reg;
                input_r_load_reg_423_pp0_iter4_reg <= input_r_load_reg_423_pp0_iter3_reg;
                select_ln31_1_reg_471 <= select_ln31_1_fu_257_p3;
                select_ln31_6_reg_494 <= select_ln31_6_fu_390_p3;
                select_ln31_reg_454 <= select_ln31_fu_221_p3;
                tmp_reg_439 <= bitcast_ln724_fu_171_p1(63 downto 63);
                tmp_s_reg_444 <= bitcast_ln724_fu_171_p1(62 downto 52);
                trunc_ln31_1_reg_449 <= trunc_ln31_1_fu_197_p1;
                trunc_ln31_2_reg_483 <= trunc_ln31_2_fu_271_p1;
                trunc_ln31_reg_434 <= trunc_ln31_fu_175_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln29_fu_145_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv7_1));
    add_ln31_1_fu_245_p2 <= std_logic_vector(unsigned(sub_ln31_1_fu_233_p2) + unsigned(ap_const_lv12_FF8));
    add_ln31_fu_151_p2 <= std_logic_vector(unsigned(zext_ln29_1_fu_135_p1) + unsigned(tile));
    and_ln31_1_fu_385_p2 <= (xor_ln31_1_fu_379_p2 and icmp_ln31_1_reg_466);
    and_ln31_fu_363_p2 <= (xor_ln31_fu_358_p2 and icmp_ln31_2_reg_477);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln29_fu_139_p2)
    begin
        if (((icmp_ln29_fu_139_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_82, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_82;
        end if; 
    end process;

    ashr_ln31_fu_303_p2 <= std_logic_vector(shift_right(signed(select_ln31_reg_454),to_integer(unsigned('0' & zext_ln31_3_fu_299_p1(31-1 downto 0)))));
    bitcast_ln724_fu_171_p1 <= grp_fu_124_p1;
    grp_fu_124_p0 <= input_r_load_reg_423;
    icmp_ln29_fu_139_p2 <= "1" when (zext_ln29_1_fu_135_p1 = select_ln27) else "0";
    icmp_ln31_1_fu_239_p2 <= "1" when (signed(sub_ln31_1_fu_233_p2) > signed(ap_const_lv12_8)) else "0";
    icmp_ln31_2_fu_265_p2 <= "1" when (sub_ln31_1_fu_233_p2 = ap_const_lv12_8) else "0";
    icmp_ln31_3_fu_294_p2 <= "1" when (unsigned(select_ln31_1_reg_471) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln31_4_fu_285_p2 <= "1" when (tmp_5_fu_275_p4 = ap_const_lv8_0) else "0";
    icmp_ln31_fu_228_p2 <= "1" when (trunc_ln31_reg_434 = ap_const_lv63_0) else "0";
    input_r_address0 <= zext_ln31_1_fu_157_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_address0 <= zext_ln29_fu_398_p1(6 - 1 downto 0);

    input_tile_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            input_tile_ce0 <= ap_const_logic_1;
        else 
            input_tile_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_tile_d0 <= select_ln31_6_reg_494;

    input_tile_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            input_tile_we0 <= ap_const_logic_1;
        else 
            input_tile_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln31_fu_375_p2 <= (icmp_ln31_reg_459 or icmp_ln31_2_reg_477);
    select_ln31_1_fu_257_p3 <= 
        add_ln31_1_fu_245_p2 when (icmp_ln31_1_fu_239_p2(0) = '1') else 
        sub_ln31_2_fu_251_p2;
    select_ln31_2_fu_327_p3 <= 
        trunc_ln31_3_fu_308_p1 when (icmp_ln31_3_fu_294_p2(0) = '1') else 
        select_ln31_7_fu_319_p3;
    select_ln31_3_fu_344_p3 <= 
        shl_ln31_fu_339_p2 when (icmp_ln31_4_reg_489(0) = '1') else 
        ap_const_lv16_0;
    select_ln31_4_fu_351_p3 <= 
        ap_const_lv16_0 when (icmp_ln31_reg_459(0) = '1') else 
        select_ln31_3_fu_344_p3;
    select_ln31_5_fu_368_p3 <= 
        trunc_ln31_2_reg_483 when (and_ln31_fu_363_p2(0) = '1') else 
        select_ln31_4_fu_351_p3;
    select_ln31_6_fu_390_p3 <= 
        select_ln31_2_fu_327_p3 when (and_ln31_1_fu_385_p2(0) = '1') else 
        select_ln31_5_fu_368_p3;
    select_ln31_7_fu_319_p3 <= 
        ap_const_lv16_FFFF when (tmp_4_fu_312_p3(0) = '1') else 
        ap_const_lv16_0;
    select_ln31_fu_221_p3 <= 
        sub_ln31_fu_215_p2 when (tmp_reg_439(0) = '1') else 
        zext_ln31_2_fu_211_p1;
        sext_ln31_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln31_1_reg_471),32));

    sext_ln31cast_fu_335_p1 <= sext_ln31_fu_291_p1(16 - 1 downto 0);
    shl_ln31_fu_339_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln31_2_reg_483),to_integer(unsigned('0' & sext_ln31cast_fu_335_p1(16-1 downto 0)))));
    sub_ln31_1_fu_233_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln31_fu_201_p1));
    sub_ln31_2_fu_251_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(sub_ln31_1_fu_233_p2));
    sub_ln31_fu_215_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln31_2_fu_211_p1));
    tmp_4_fu_312_p3 <= input_r_load_reg_423_pp0_iter4_reg(31 downto 31);
    tmp_5_fu_275_p4 <= select_ln31_1_fu_257_p3(11 downto 4);
    trunc_ln31_1_fu_197_p1 <= bitcast_ln724_fu_171_p1(52 - 1 downto 0);
    trunc_ln31_2_fu_271_p1 <= select_ln31_fu_221_p3(16 - 1 downto 0);
    trunc_ln31_3_fu_308_p1 <= ashr_ln31_fu_303_p2(16 - 1 downto 0);
    trunc_ln31_fu_175_p1 <= bitcast_ln724_fu_171_p1(63 - 1 downto 0);
    xor_ln31_1_fu_379_p2 <= (or_ln31_fu_375_p2 xor ap_const_lv1_1);
    xor_ln31_fu_358_p2 <= (icmp_ln31_reg_459 xor ap_const_lv1_1);
    zext_ln29_1_fu_135_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),10));
    zext_ln29_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_409_pp0_iter5_reg),64));
    zext_ln31_1_fu_157_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_151_p2),64));
    zext_ln31_2_cast_fu_204_p3 <= (ap_const_lv1_1 & trunc_ln31_1_reg_449);
    zext_ln31_2_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln31_2_cast_fu_204_p3),54));
    zext_ln31_3_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln31_fu_291_p1),54));
    zext_ln31_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_444),12));
end behav;
