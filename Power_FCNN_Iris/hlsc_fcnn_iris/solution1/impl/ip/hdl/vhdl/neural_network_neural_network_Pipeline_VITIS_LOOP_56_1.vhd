-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network_neural_network_Pipeline_VITIS_LOOP_56_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln61 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln61_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln61_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln61_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer1_output_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    layer1_output_ce0 : OUT STD_LOGIC;
    layer1_output_we0 : OUT STD_LOGIC;
    layer1_output_d0 : OUT STD_LOGIC_VECTOR (14 downto 0) );
end;


architecture behav of neural_network_neural_network_Pipeline_VITIS_LOOP_56_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln56_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer1_weights_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer1_weights_0_ce0 : STD_LOGIC;
    signal layer1_weights_0_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer1_weights_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer1_weights_1_ce0 : STD_LOGIC;
    signal layer1_weights_1_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer1_weights_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer1_weights_2_ce0 : STD_LOGIC;
    signal layer1_weights_2_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer1_weights_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer1_weights_3_ce0 : STD_LOGIC;
    signal layer1_weights_3_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer1_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer1_bias_ce0 : STD_LOGIC;
    signal layer1_bias_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln61_3_cast_fu_180_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln61_3_cast_reg_381 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln61_2_cast_fu_184_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln61_2_cast_reg_386 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln61_1_cast_fu_188_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln61_1_cast_reg_391 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln61_cast_fu_192_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln61_cast_reg_396 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln56_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_reg_405 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_reg_405_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_reg_405_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_reg_405_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_reg_405_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_reg_405_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln56_reg_405_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal layer1_weights_0_load_reg_423 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_reg_438 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_3_fu_324_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_3_reg_478 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln58_fu_330_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln58_reg_483 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_74 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln56_fu_210_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln61_fu_234_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln61_fu_234_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_264_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_349_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_264_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_281_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_357_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_fu_281_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_298_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_365_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal trunc_ln_fu_311_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln63_fu_307_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_298_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln63_1_fu_320_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln_fu_311_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln14_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_349_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_349_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_357_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_357_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_365_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_365_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component neural_network_mul_9s_16s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_9s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_0_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_1_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_2_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_3_RAM_2P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_bias_RAM_1P_BRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component neural_network_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    layer1_weights_0_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_0_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 9,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_0_address0,
        ce0 => layer1_weights_0_ce0,
        q0 => layer1_weights_0_q0);

    layer1_weights_1_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_1_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 9,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_1_address0,
        ce0 => layer1_weights_1_ce0,
        q0 => layer1_weights_1_q0);

    layer1_weights_2_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_2_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 9,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_2_address0,
        ce0 => layer1_weights_2_ce0,
        q0 => layer1_weights_2_q0);

    layer1_weights_3_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_weights_3_RAM_2P_BRAM_1R1W
    generic map (
        DataWidth => 9,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_weights_3_address0,
        ce0 => layer1_weights_3_ce0,
        q0 => layer1_weights_3_q0);

    layer1_bias_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_56_1_layer1_bias_RAM_1P_BRAM_1R1W
    generic map (
        DataWidth => 7,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer1_bias_address0,
        ce0 => layer1_bias_ce0,
        q0 => layer1_bias_q0);

    mul_9s_16s_24_1_1_U1 : component neural_network_mul_9s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => layer1_weights_0_load_reg_423,
        din1 => mul_ln61_fu_234_p1,
        dout => mul_ln61_fu_234_p2);

    mac_muladd_9s_16s_24ns_24_4_1_U2 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_1_q0,
        din1 => grp_fu_349_p1,
        din2 => grp_fu_349_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_349_p3);

    mac_muladd_9s_16s_24ns_24_4_1_U3 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_2_q0,
        din1 => grp_fu_357_p1,
        din2 => grp_fu_357_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_357_p3);

    mac_muladd_9s_16s_24ns_24_4_1_U4 : component neural_network_mac_muladd_9s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 9,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer1_weights_3_q0,
        din1 => grp_fu_365_p1,
        din2 => grp_fu_365_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_365_p3);

    flow_control_loop_pipe_sequential_init_U : component neural_network_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    i_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln56_fu_204_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_74 <= add_ln56_fu_210_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_74 <= ap_const_lv4_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln58_reg_483 <= add_ln58_fu_330_p2;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                sum_3_reg_478 <= sum_3_fu_324_p2;
                tmp_4_reg_438 <= mul_ln61_fu_234_p2(23 downto 8);
                    zext_ln56_reg_405_pp0_iter2_reg(3 downto 0) <= zext_ln56_reg_405_pp0_iter1_reg(3 downto 0);
                    zext_ln56_reg_405_pp0_iter3_reg(3 downto 0) <= zext_ln56_reg_405_pp0_iter2_reg(3 downto 0);
                    zext_ln56_reg_405_pp0_iter4_reg(3 downto 0) <= zext_ln56_reg_405_pp0_iter3_reg(3 downto 0);
                    zext_ln56_reg_405_pp0_iter5_reg(3 downto 0) <= zext_ln56_reg_405_pp0_iter4_reg(3 downto 0);
                    zext_ln56_reg_405_pp0_iter6_reg(3 downto 0) <= zext_ln56_reg_405_pp0_iter5_reg(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                layer1_weights_0_load_reg_423 <= layer1_weights_0_q0;
                sext_ln61_1_cast_reg_391 <= sext_ln61_1_cast_fu_188_p1;
                sext_ln61_2_cast_reg_386 <= sext_ln61_2_cast_fu_184_p1;
                sext_ln61_3_cast_reg_381 <= sext_ln61_3_cast_fu_180_p1;
                sext_ln61_cast_reg_396 <= sext_ln61_cast_fu_192_p1;
                    zext_ln56_reg_405_pp0_iter1_reg(3 downto 0) <= zext_ln56_reg_405(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln56_fu_204_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln56_reg_405(3 downto 0) <= zext_ln56_fu_216_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln56_reg_405(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln56_reg_405_pp0_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln56_reg_405_pp0_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln56_reg_405_pp0_iter3_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln56_reg_405_pp0_iter4_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln56_reg_405_pp0_iter5_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln56_reg_405_pp0_iter6_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln56_fu_210_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_2) + unsigned(ap_const_lv4_1));
    add_ln58_fu_330_p2 <= std_logic_vector(unsigned(zext_ln63_1_fu_320_p1) + unsigned(trunc_ln_fu_311_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln56_fu_204_p2)
    begin
        if (((icmp_ln56_fu_204_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter6_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter6_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_2_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_74, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_2 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_2 <= i_fu_74;
        end if; 
    end process;

    grp_fu_349_p1 <= sext_ln61_1_cast_reg_391(16 - 1 downto 0);
    grp_fu_349_p2 <= (tmp_4_reg_438 & ap_const_lv8_0);
    grp_fu_357_p1 <= sext_ln61_2_cast_reg_386(16 - 1 downto 0);
    grp_fu_357_p2 <= (tmp_5_fu_264_p4 & ap_const_lv8_0);
    grp_fu_365_p1 <= sext_ln61_3_cast_reg_381(16 - 1 downto 0);
    grp_fu_365_p2 <= (tmp_6_fu_281_p4 & ap_const_lv8_0);
    icmp_ln14_fu_336_p2 <= "1" when (signed(sum_3_reg_478) > signed(ap_const_lv16_0)) else "0";
    icmp_ln56_fu_204_p2 <= "1" when (ap_sig_allocacmp_i_2 = ap_const_lv4_8) else "0";
    layer1_bias_address0 <= zext_ln56_reg_405_pp0_iter4_reg(3 - 1 downto 0);

    layer1_bias_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            layer1_bias_ce0 <= ap_const_logic_1;
        else 
            layer1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_address0 <= zext_ln56_reg_405_pp0_iter6_reg(3 - 1 downto 0);

    layer1_output_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer1_output_ce0 <= ap_const_logic_1;
        else 
            layer1_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_output_d0 <= 
        add_ln58_reg_483 when (icmp_ln14_fu_336_p2(0) = '1') else 
        ap_const_lv15_0;

    layer1_output_we0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            layer1_output_we0 <= ap_const_logic_1;
        else 
            layer1_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_0_address0 <= zext_ln56_fu_216_p1(3 - 1 downto 0);

    layer1_weights_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weights_0_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_1_address0 <= zext_ln56_fu_216_p1(3 - 1 downto 0);

    layer1_weights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weights_1_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_2_address0 <= zext_ln56_reg_405(3 - 1 downto 0);

    layer1_weights_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer1_weights_2_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer1_weights_3_address0 <= zext_ln56_reg_405_pp0_iter1_reg(3 - 1 downto 0);

    layer1_weights_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer1_weights_3_ce0 <= ap_const_logic_1;
        else 
            layer1_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln61_fu_234_p1 <= sext_ln61_cast_reg_396(16 - 1 downto 0);
        sext_ln61_1_cast_fu_188_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln61_1),24));

        sext_ln61_2_cast_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln61_2),24));

        sext_ln61_3_cast_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln61_3),24));

        sext_ln61_cast_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln61),24));

    sum_3_fu_324_p2 <= std_logic_vector(unsigned(zext_ln63_fu_307_p1) + unsigned(sum_fu_298_p4));
    sum_fu_298_p1 <= grp_fu_365_p3;
    sum_fu_298_p4 <= sum_fu_298_p1(23 downto 8);
    tmp_5_fu_264_p1 <= grp_fu_349_p3;
    tmp_5_fu_264_p4 <= tmp_5_fu_264_p1(23 downto 8);
    tmp_6_fu_281_p1 <= grp_fu_357_p3;
    tmp_6_fu_281_p4 <= tmp_6_fu_281_p1(23 downto 8);
    trunc_ln_fu_311_p1 <= grp_fu_365_p3;
    trunc_ln_fu_311_p4 <= trunc_ln_fu_311_p1(22 downto 8);
    zext_ln56_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_2),64));
    zext_ln63_1_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer1_bias_q0),15));
    zext_ln63_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(layer1_bias_q0),16));
end behav;
