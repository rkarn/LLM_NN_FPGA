-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network_neural_network_Pipeline_VITIS_LOOP_29_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_0_ap_vld : OUT STD_LOGIC;
    output_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_4_ap_vld : OUT STD_LOGIC;
    output_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_3_ap_vld : OUT STD_LOGIC;
    output_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_2_ap_vld : OUT STD_LOGIC;
    output_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_1_ap_vld : OUT STD_LOGIC;
    layer2_output_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_1_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_2_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_3_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_4_reload : IN STD_LOGIC_VECTOR (15 downto 0);
    conv_i_i13_i_i8 : IN STD_LOGIC_VECTOR (15 downto 0);
    sum_4_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    sum_4_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of neural_network_neural_network_Pipeline_VITIS_LOOP_29_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv11_500 : STD_LOGIC_VECTOR (10 downto 0) := "10100000000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv22_3FFFFF : STD_LOGIC_VECTOR (21 downto 0) := "1111111111111111111111";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv16_FFFF : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln29_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal f_x_lsb_table_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_x_lsb_table_ce0 : STD_LOGIC;
    signal f_x_lsb_table_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal exp_x_msb_2_m_1_table_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal exp_x_msb_2_m_1_table_ce0 : STD_LOGIC;
    signal exp_x_msb_2_m_1_table_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_1_table_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal exp_x_msb_1_table_ce0 : STD_LOGIC;
    signal exp_x_msb_1_table_q0 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_reg_742 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_742_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_742_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_742_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_742_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln29_reg_746 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_746_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_746_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_746_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_746_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_358_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_750 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_750_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_750_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_750_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_750_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_756 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_reg_756_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln217_fu_474_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln217_reg_761 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln217_reg_761_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln217_reg_761_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln202_4_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_4_reg_777 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_4_reg_777_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_4_reg_777_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_4_reg_777_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_4_reg_777_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal f_x_lsb_reg_782 : STD_LOGIC_VECTOR (10 downto 0);
    signal f_x_lsb_reg_782_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal exp_x_msb_2_m_1_reg_788 : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_2_m_1_reg_788_pp0_iter2_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal trunc_ln2_reg_794 : STD_LOGIC_VECTOR (18 downto 0);
    signal exp_x_msb_2_lsb_m_1_fu_600_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_2_lsb_m_1_reg_804 : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_1_reg_809 : STD_LOGIC_VECTOR (24 downto 0);
    signal exp_x_msb_1_reg_809_pp0_iter4_reg : STD_LOGIC_VECTOR (24 downto 0);
    signal y_lo_s_reg_815 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln274_fu_697_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln274_reg_820 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln230_fu_486_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln245_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln261_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_fu_152 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_4_fu_713_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal i_3_fu_156 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln29_fu_304_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal y_lo_fu_277_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal y_lo_fu_277_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_1_fu_310_p7 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln31_fu_326_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal conv_i_i13_i_i8_cast_fu_281_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_fu_330_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal trunc_ln194_fu_346_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_366_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_380_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_394_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_408_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_422_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_l_int_fu_336_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_l_fract_fu_350_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln202_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln202_1_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_lsb_ind_fu_478_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal x_msb_ind_2_fu_464_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln198_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overf_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln198_1_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln198_2_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_1_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln202_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln198_3_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_3_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln202_2_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exp_x_lsb_m_1_fu_537_p4 : STD_LOGIC_VECTOR (17 downto 0);
    signal f_x_msb_2_lsb_fu_552_p0 : STD_LOGIC_VECTOR (24 downto 0);
    signal f_x_msb_2_lsb_fu_552_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal f_x_msb_2_lsb_fu_552_p2 : STD_LOGIC_VECTOR (42 downto 0);
    signal x_msb_ind_1_fu_531_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln2_fu_576_p5 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln249_1_fu_586_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln249_fu_573_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln249_fu_590_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln249_2_fu_596_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal y_lo_fu_277_p2 : STD_LOGIC_VECTOR (49 downto 0);
    signal y_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_l_fu_636_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal select_ln190_fu_628_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal y_1_fu_640_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal y_2_fu_650_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_8_fu_657_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_673_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal overf_1_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overf_2_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_687_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal f_x_msb_2_lsb_fu_552_p00 : STD_LOGIC_VECTOR (42 downto 0);
    signal f_x_msb_2_lsb_fu_552_p10 : STD_LOGIC_VECTOR (42 downto 0);
    signal y_lo_fu_277_p00 : STD_LOGIC_VECTOR (49 downto 0);
    signal y_lo_fu_277_p10 : STD_LOGIC_VECTOR (49 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component neural_network_mul_25ns_25ns_50_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (24 downto 0);
        dout : OUT STD_LOGIC_VECTOR (49 downto 0) );
    end component;


    component neural_network_mux_5_3_16_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        din3 : IN STD_LOGIC_VECTOR (15 downto 0);
        din4 : IN STD_LOGIC_VECTOR (15 downto 0);
        din5 : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component neural_network_mul_25ns_18ns_43_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (24 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (42 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_29_2_f_x_lsb_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_29_2_exp_x_msb_2_m_1_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_29_2_exp_x_msb_1_table_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component neural_network_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    f_x_lsb_table_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_29_2_f_x_lsb_table_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => f_x_lsb_table_address0,
        ce0 => f_x_lsb_table_ce0,
        q0 => f_x_lsb_table_q0);

    exp_x_msb_2_m_1_table_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_29_2_exp_x_msb_2_m_1_table_ROM_AUTO_1R
    generic map (
        DataWidth => 25,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_2_m_1_table_address0,
        ce0 => exp_x_msb_2_m_1_table_ce0,
        q0 => exp_x_msb_2_m_1_table_q0);

    exp_x_msb_1_table_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_29_2_exp_x_msb_1_table_ROM_AUTO_1R
    generic map (
        DataWidth => 25,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_x_msb_1_table_address0,
        ce0 => exp_x_msb_1_table_ce0,
        q0 => exp_x_msb_1_table_q0);

    mul_25ns_25ns_50_1_1_U156 : component neural_network_mul_25ns_25ns_50_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 25,
        dout_WIDTH => 50)
    port map (
        din0 => y_lo_fu_277_p0,
        din1 => y_lo_fu_277_p1,
        dout => y_lo_fu_277_p2);

    mux_5_3_16_1_1_U157 : component neural_network_mux_5_3_16_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 16,
        din3_WIDTH => 16,
        din4_WIDTH => 16,
        din5_WIDTH => 3,
        dout_WIDTH => 16)
    port map (
        din0 => layer2_output_reload,
        din1 => layer2_output_1_reload,
        din2 => layer2_output_2_reload,
        din3 => layer2_output_3_reload,
        din4 => layer2_output_4_reload,
        din5 => ap_sig_allocacmp_i,
        dout => tmp_1_fu_310_p7);

    mul_25ns_18ns_43_1_1_U158 : component neural_network_mul_25ns_18ns_43_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 25,
        din1_WIDTH => 18,
        dout_WIDTH => 43)
    port map (
        din0 => f_x_msb_2_lsb_fu_552_p0,
        din1 => f_x_msb_2_lsb_fu_552_p1,
        dout => f_x_msb_2_lsb_fu_552_p2);

    flow_control_loop_pipe_sequential_init_U : component neural_network_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    i_3_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln29_fu_298_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_3_fu_156 <= add_ln29_fu_304_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_3_fu_156 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    sum_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    sum_fu_152 <= ap_const_lv16_0;
                elsif ((ap_enable_reg_pp0_iter6 = ap_const_logic_1)) then 
                    sum_fu_152 <= sum_4_fu_713_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                exp_x_msb_2_m_1_reg_788 <= exp_x_msb_2_m_1_table_q0;
                f_x_lsb_reg_782 <= f_x_lsb_table_q0;
                i_reg_742 <= ap_sig_allocacmp_i;
                i_reg_742_pp0_iter1_reg <= i_reg_742;
                icmp_ln29_reg_746 <= icmp_ln29_fu_298_p2;
                icmp_ln29_reg_746_pp0_iter1_reg <= icmp_ln29_reg_746;
                or_ln202_4_reg_777_pp0_iter1_reg <= or_ln202_4_reg_777;
                tmp_5_reg_756_pp0_iter1_reg <= tmp_5_reg_756;
                tmp_reg_750_pp0_iter1_reg <= tmp_reg_750;
                trunc_ln217_reg_761_pp0_iter1_reg <= trunc_ln217_reg_761;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                exp_x_msb_1_reg_809_pp0_iter4_reg <= exp_x_msb_1_reg_809;
                exp_x_msb_2_m_1_reg_788_pp0_iter2_reg <= exp_x_msb_2_m_1_reg_788;
                f_x_lsb_reg_782_pp0_iter2_reg <= f_x_lsb_reg_782;
                i_reg_742_pp0_iter2_reg <= i_reg_742_pp0_iter1_reg;
                i_reg_742_pp0_iter3_reg <= i_reg_742_pp0_iter2_reg;
                i_reg_742_pp0_iter4_reg <= i_reg_742_pp0_iter3_reg;
                icmp_ln29_reg_746_pp0_iter2_reg <= icmp_ln29_reg_746_pp0_iter1_reg;
                icmp_ln29_reg_746_pp0_iter3_reg <= icmp_ln29_reg_746_pp0_iter2_reg;
                icmp_ln29_reg_746_pp0_iter4_reg <= icmp_ln29_reg_746_pp0_iter3_reg;
                or_ln202_4_reg_777_pp0_iter2_reg <= or_ln202_4_reg_777_pp0_iter1_reg;
                or_ln202_4_reg_777_pp0_iter3_reg <= or_ln202_4_reg_777_pp0_iter2_reg;
                or_ln202_4_reg_777_pp0_iter4_reg <= or_ln202_4_reg_777_pp0_iter3_reg;
                select_ln274_reg_820 <= select_ln274_fu_697_p3;
                tmp_reg_750_pp0_iter2_reg <= tmp_reg_750_pp0_iter1_reg;
                tmp_reg_750_pp0_iter3_reg <= tmp_reg_750_pp0_iter2_reg;
                tmp_reg_750_pp0_iter4_reg <= tmp_reg_750_pp0_iter3_reg;
                trunc_ln217_reg_761_pp0_iter2_reg <= trunc_ln217_reg_761_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln202_4_reg_777_pp0_iter2_reg = ap_const_lv1_0))) then
                exp_x_msb_1_reg_809 <= exp_x_msb_1_table_q0;
                exp_x_msb_2_lsb_m_1_reg_804 <= exp_x_msb_2_lsb_m_1_fu_600_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln29_fu_298_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_ln202_4_reg_777 <= or_ln202_4_fu_520_p2;
                tmp_5_reg_756 <= x_fu_330_p2(10 downto 7);
                tmp_reg_750 <= x_fu_330_p2(16 downto 16);
                trunc_ln217_reg_761 <= trunc_ln217_fu_474_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln202_4_reg_777_pp0_iter1_reg = ap_const_lv1_0))) then
                trunc_ln2_reg_794 <= f_x_msb_2_lsb_fu_552_p2(42 downto 24);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln202_4_reg_777_pp0_iter3_reg = ap_const_lv1_0))) then
                y_lo_s_reg_815 <= y_lo_fu_277_p2(49 downto 25);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln249_fu_590_p2 <= std_logic_vector(unsigned(zext_ln249_1_fu_586_p1) + unsigned(zext_ln249_fu_573_p1));
    add_ln29_fu_304_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv3_1));
    and_ln202_fu_448_p2 <= (icmp_ln202_fu_436_p2 and icmp_ln202_1_fu_442_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln29_fu_298_p2)
    begin
        if (((icmp_ln29_fu_298_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_3_fu_156)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i <= i_3_fu_156;
        end if; 
    end process;

        conv_i_i13_i_i8_cast_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_i_i13_i_i8),17));

    exp_x_lsb_m_1_fu_537_p4 <= ((trunc_ln217_reg_761_pp0_iter1_reg & ap_const_lv5_0) & f_x_lsb_reg_782);
    exp_x_msb_1_table_address0 <= zext_ln261_fu_568_p1(5 - 1 downto 0);

    exp_x_msb_1_table_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            exp_x_msb_1_table_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_1_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_x_msb_2_lsb_m_1_fu_600_p2 <= std_logic_vector(unsigned(exp_x_msb_2_m_1_reg_788_pp0_iter2_reg) + unsigned(zext_ln249_2_fu_596_p1));
    exp_x_msb_2_m_1_table_address0 <= zext_ln245_fu_491_p1(5 - 1 downto 0);

    exp_x_msb_2_m_1_table_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_x_msb_2_m_1_table_ce0 <= ap_const_logic_1;
        else 
            exp_x_msb_2_m_1_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_lsb_table_address0 <= zext_ln230_fu_486_p1(5 - 1 downto 0);

    f_x_lsb_table_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            f_x_lsb_table_ce0 <= ap_const_logic_1;
        else 
            f_x_lsb_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_x_msb_2_lsb_fu_552_p0 <= f_x_msb_2_lsb_fu_552_p00(25 - 1 downto 0);
    f_x_msb_2_lsb_fu_552_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_m_1_reg_788),43));
    f_x_msb_2_lsb_fu_552_p1 <= f_x_msb_2_lsb_fu_552_p10(18 - 1 downto 0);
    f_x_msb_2_lsb_fu_552_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_lsb_m_1_fu_537_p4),43));
    icmp_ln202_1_fu_442_p2 <= "1" when (unsigned(x_l_fract_fu_350_p3) > unsigned(ap_const_lv11_500)) else "0";
    icmp_ln202_fu_436_p2 <= "1" when (x_l_int_fu_336_p4 = ap_const_lv4_7) else "0";
    icmp_ln29_fu_298_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv3_5) else "0";
    or_ln202_1_fu_502_p2 <= (xor_ln198_2_fu_416_p2 or xor_ln198_1_fu_402_p2);
    or_ln202_2_fu_508_p2 <= (or_ln202_fu_496_p2 or or_ln202_1_fu_502_p2);
    or_ln202_3_fu_514_p2 <= (xor_ln198_3_fu_430_p2 or and_ln202_fu_448_p2);
    or_ln202_4_fu_520_p2 <= (or_ln202_3_fu_514_p2 or or_ln202_2_fu_508_p2);
    or_ln202_fu_496_p2 <= (xor_ln198_fu_388_p2 or overf_fu_374_p2);
    output_0 <= select_ln274_fu_697_p3;

    output_0_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, i_reg_742_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (i_reg_742_pp0_iter4_reg = ap_const_lv3_0))) then 
            output_0_ap_vld <= ap_const_logic_1;
        else 
            output_0_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_1 <= select_ln274_fu_697_p3;

    output_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, i_reg_742_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (i_reg_742_pp0_iter4_reg = ap_const_lv3_1))) then 
            output_1_ap_vld <= ap_const_logic_1;
        else 
            output_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_2 <= select_ln274_fu_697_p3;

    output_2_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, i_reg_742_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (i_reg_742_pp0_iter4_reg = ap_const_lv3_2))) then 
            output_2_ap_vld <= ap_const_logic_1;
        else 
            output_2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_3 <= select_ln274_fu_697_p3;

    output_3_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, i_reg_742_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (i_reg_742_pp0_iter4_reg = ap_const_lv3_3))) then 
            output_3_ap_vld <= ap_const_logic_1;
        else 
            output_3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    output_4 <= select_ln274_fu_697_p3;

    output_4_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001, i_reg_742_pp0_iter4_reg)
    begin
        if ((not((i_reg_742_pp0_iter4_reg = ap_const_lv3_0)) and not((i_reg_742_pp0_iter4_reg = ap_const_lv3_1)) and not((i_reg_742_pp0_iter4_reg = ap_const_lv3_2)) and not((i_reg_742_pp0_iter4_reg = ap_const_lv3_3)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            output_4_ap_vld <= ap_const_logic_1;
        else 
            output_4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    overf_1_fu_667_p2 <= "0" when (tmp_8_fu_657_p4 = ap_const_lv2_0) else "1";
    overf_2_fu_681_p2 <= (tmp_9_fu_673_p3 or overf_1_fu_667_p2);
    overf_fu_374_p2 <= (tmp_fu_358_p3 xor tmp_2_fu_366_p3);
    select_ln190_fu_628_p3 <= 
        ap_const_lv22_3FFFFF when (y_fu_623_p2(0) = '1') else 
        ap_const_lv22_0;
    select_ln274_fu_697_p3 <= 
        ap_const_lv16_FFFF when (overf_2_fu_681_p2(0) = '1') else 
        tmp_s_fu_687_p4;
        sext_ln31_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_310_p7),17));

    shl_ln2_fu_576_p5 <= (((trunc_ln217_reg_761_pp0_iter2_reg & ap_const_lv5_0) & f_x_lsb_reg_782_pp0_iter2_reg) & ap_const_lv1_0);
    sum_4_fu_713_p2 <= std_logic_vector(unsigned(select_ln274_reg_820) + unsigned(sum_fu_152));
    sum_4_out <= sum_fu_152;

    sum_4_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln29_reg_746_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln29_reg_746_pp0_iter4_reg = ap_const_lv1_1))) then 
            sum_4_out_ap_vld <= ap_const_logic_1;
        else 
            sum_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_366_p3 <= x_fu_330_p2(11 downto 11);
    tmp_3_fu_380_p3 <= x_fu_330_p2(12 downto 12);
    tmp_4_fu_394_p3 <= x_fu_330_p2(13 downto 13);
    tmp_6_fu_408_p3 <= x_fu_330_p2(14 downto 14);
    tmp_7_fu_422_p3 <= x_fu_330_p2(15 downto 15);
    tmp_8_fu_657_p4 <= y_2_fu_650_p3(21 downto 20);
    tmp_9_fu_673_p3 <= y_2_fu_650_p3(19 downto 19);
    tmp_fu_358_p3 <= x_fu_330_p2(16 downto 16);
    tmp_s_fu_687_p4 <= y_2_fu_650_p3(18 downto 3);
    trunc_ln194_fu_346_p1 <= x_fu_330_p2(8 - 1 downto 0);
    trunc_ln217_fu_474_p1 <= x_fu_330_p2(2 - 1 downto 0);
    x_fu_330_p2 <= std_logic_vector(signed(sext_ln31_fu_326_p1) - signed(conv_i_i13_i_i8_cast_fu_281_p1));
    x_l_fract_fu_350_p3 <= (trunc_ln194_fu_346_p1 & ap_const_lv3_0);
    x_l_int_fu_336_p4 <= x_fu_330_p2(11 downto 8);
    x_lsb_ind_fu_478_p3 <= (trunc_ln217_fu_474_p1 & ap_const_lv3_0);
    x_msb_ind_1_fu_531_p3 <= (tmp_reg_750_pp0_iter1_reg & tmp_5_reg_756_pp0_iter1_reg);
    x_msb_ind_2_fu_464_p4 <= x_fu_330_p2(6 downto 2);
    xor_ln198_1_fu_402_p2 <= (tmp_fu_358_p3 xor tmp_4_fu_394_p3);
    xor_ln198_2_fu_416_p2 <= (tmp_fu_358_p3 xor tmp_6_fu_408_p3);
    xor_ln198_3_fu_430_p2 <= (tmp_fu_358_p3 xor tmp_7_fu_422_p3);
    xor_ln198_fu_388_p2 <= (tmp_fu_358_p3 xor tmp_3_fu_380_p3);
    y_1_fu_640_p4 <= y_l_fu_636_p2(24 downto 3);
    y_2_fu_650_p3 <= 
        select_ln190_fu_628_p3 when (or_ln202_4_reg_777_pp0_iter4_reg(0) = '1') else 
        y_1_fu_640_p4;
    y_fu_623_p2 <= (tmp_reg_750_pp0_iter4_reg xor ap_const_lv1_1);
    y_l_fu_636_p2 <= std_logic_vector(unsigned(exp_x_msb_1_reg_809_pp0_iter4_reg) + unsigned(y_lo_s_reg_815));
    y_lo_fu_277_p0 <= y_lo_fu_277_p00(25 - 1 downto 0);
    y_lo_fu_277_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_2_lsb_m_1_reg_804),50));
    y_lo_fu_277_p1 <= y_lo_fu_277_p10(25 - 1 downto 0);
    y_lo_fu_277_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_x_msb_1_reg_809),50));
    zext_ln230_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_lsb_ind_fu_478_p3),64));
    zext_ln245_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_ind_2_fu_464_p4),64));
    zext_ln249_1_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_576_p5),20));
    zext_ln249_2_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln249_fu_590_p2),25));
    zext_ln249_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln2_reg_794),20));
    zext_ln261_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(x_msb_ind_1_fu_531_p3),64));
end behav;
