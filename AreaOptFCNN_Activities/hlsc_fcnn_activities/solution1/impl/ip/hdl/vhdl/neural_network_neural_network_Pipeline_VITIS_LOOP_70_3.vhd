-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network_neural_network_Pipeline_VITIS_LOOP_70_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sext_ln75 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_2 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_3 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_4 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_5 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_6 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_7 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_8 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_9 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_10 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_11 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_12 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_13 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_14 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_15 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_16 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_17 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_18 : IN STD_LOGIC_VECTOR (15 downto 0);
    sext_ln75_19 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_4_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_4_out_ap_vld : OUT STD_LOGIC;
    layer2_output_3_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_3_out_ap_vld : OUT STD_LOGIC;
    layer2_output_2_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_2_out_ap_vld : OUT STD_LOGIC;
    layer2_output_1_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_1_out_ap_vld : OUT STD_LOGIC;
    layer2_output_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer2_output_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of neural_network_neural_network_Pipeline_VITIS_LOOP_70_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln70_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer2_weights_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_0_ce0 : STD_LOGIC;
    signal layer2_weights_0_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_1_ce0 : STD_LOGIC;
    signal layer2_weights_1_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_2_ce0 : STD_LOGIC;
    signal layer2_weights_2_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_3_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_3_ce0 : STD_LOGIC;
    signal layer2_weights_3_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_4_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_4_ce0 : STD_LOGIC;
    signal layer2_weights_4_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer2_weights_5_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_5_ce0 : STD_LOGIC;
    signal layer2_weights_5_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer2_weights_6_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_6_ce0 : STD_LOGIC;
    signal layer2_weights_6_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer2_weights_7_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_7_ce0 : STD_LOGIC;
    signal layer2_weights_7_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer2_weights_8_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_8_ce0 : STD_LOGIC;
    signal layer2_weights_8_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_9_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_9_ce0 : STD_LOGIC;
    signal layer2_weights_9_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_10_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_10_ce0 : STD_LOGIC;
    signal layer2_weights_10_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_11_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_11_ce0 : STD_LOGIC;
    signal layer2_weights_11_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer2_weights_12_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_12_ce0 : STD_LOGIC;
    signal layer2_weights_12_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal layer2_weights_13_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_13_ce0 : STD_LOGIC;
    signal layer2_weights_13_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_14_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_14_ce0 : STD_LOGIC;
    signal layer2_weights_14_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_15_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_15_ce0 : STD_LOGIC;
    signal layer2_weights_15_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer2_weights_16_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_16_ce0 : STD_LOGIC;
    signal layer2_weights_16_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_17_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_17_ce0 : STD_LOGIC;
    signal layer2_weights_17_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_18_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_18_ce0 : STD_LOGIC;
    signal layer2_weights_18_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_19_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_weights_19_ce0 : STD_LOGIC;
    signal layer2_weights_19_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_bias_ce0 : STD_LOGIC;
    signal layer2_bias_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln75_19_cast_fu_586_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_19_cast_reg_1351 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_18_cast_fu_590_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_18_cast_reg_1356 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_17_cast_fu_594_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_17_cast_reg_1361 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_16_cast_fu_598_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_16_cast_reg_1366 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_15_cast_fu_602_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_15_cast_reg_1371 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_14_cast_fu_606_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_14_cast_reg_1376 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_13_cast_fu_610_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_13_cast_reg_1381 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_12_cast_fu_614_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_12_cast_reg_1386 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_11_cast_fu_618_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_11_cast_reg_1391 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_10_cast_fu_622_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_10_cast_reg_1396 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_9_cast_fu_626_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_9_cast_reg_1401 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_8_cast_fu_630_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_8_cast_reg_1406 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_7_cast_fu_634_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_7_cast_reg_1411 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_6_cast_fu_638_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_6_cast_reg_1416 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_5_cast_fu_642_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_5_cast_reg_1421 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_4_cast_fu_646_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_4_cast_reg_1426 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_3_cast_fu_650_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_3_cast_reg_1431 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_2_cast_fu_654_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_2_cast_reg_1436 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_1_cast_fu_658_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_1_cast_reg_1441 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_cast_fu_662_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln75_cast_reg_1446 : STD_LOGIC_VECTOR (23 downto 0);
    signal i_1_reg_1451 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter15_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter16_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter17_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter18_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter19_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter20_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1451_pp0_iter21_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln70_reg_1455 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1455_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln70_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_1459 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_1459_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_1459_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_1459_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_1459_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_1459_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_1459_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_1459_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_1459_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_1459_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_1459_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_1459_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln70_reg_1459_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal layer2_weights_0_load_reg_1492 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_reg_1507 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_weights_15_load_reg_1727 : STD_LOGIC_VECTOR (9 downto 0);
    signal layer2_weights_16_load_reg_1732 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_16_load_reg_1732_pp0_iter15_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_17_load_reg_1737 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_17_load_reg_1737_pp0_iter15_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_17_load_reg_1737_pp0_iter16_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_18_load_reg_1742 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_18_load_reg_1742_pp0_iter15_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_18_load_reg_1742_pp0_iter16_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_18_load_reg_1742_pp0_iter17_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_19_load_reg_1747 : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_19_load_reg_1747_pp0_iter15_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_19_load_reg_1747_pp0_iter16_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_19_load_reg_1747_pp0_iter17_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_weights_19_load_reg_1747_pp0_iter18_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal layer2_bias_load_reg_1752 : STD_LOGIC_VECTOR (8 downto 0);
    signal layer2_bias_load_reg_1752_pp0_iter15_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal layer2_bias_load_reg_1752_pp0_iter16_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal layer2_bias_load_reg_1752_pp0_iter17_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal layer2_bias_load_reg_1752_pp0_iter18_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal layer2_bias_load_reg_1752_pp0_iter19_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal layer2_bias_load_reg_1752_pp0_iter20_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal layer2_bias_load_reg_1752_pp0_iter21_reg : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_134 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln70_fu_680_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (2 downto 0);
    signal layer2_output_fu_138 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_6_fu_1111_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_1_fu_142 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_2_fu_146 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_3_fu_150 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_output_4_fu_154 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln75_fu_704_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln75_fu_704_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_734_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1162_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_1_fu_734_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_755_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1170_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_fu_755_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_776_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1178_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_3_fu_776_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_797_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1186_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_4_fu_797_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_5_fu_818_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1194_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_5_fu_818_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_6_fu_839_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1202_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_6_fu_839_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_860_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1210_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_7_fu_860_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_881_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1218_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_8_fu_881_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_902_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1226_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_9_fu_902_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_923_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1234_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_10_fu_923_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_944_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1242_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_11_fu_944_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_965_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1250_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_12_fu_965_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_fu_985_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1258_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_13_fu_985_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_1005_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1266_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_14_fu_1005_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_1025_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1274_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_15_fu_1025_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_16_fu_1045_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1282_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_16_fu_1045_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_17_fu_1065_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1290_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_fu_1065_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_18_fu_1082_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1298_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_18_fu_1082_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_1099_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1306_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln77_fu_1108_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum_fu_1099_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1162_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1162_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1170_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1170_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1178_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1178_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1186_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1186_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1194_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1194_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1202_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1202_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1210_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1210_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1218_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1218_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1226_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1226_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1234_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1234_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1242_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1242_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1250_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1250_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1258_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1258_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1266_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1266_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1274_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1274_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1282_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1282_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1290_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1290_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1298_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1298_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_1306_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1306_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component neural_network_mul_11s_16s_24_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_11s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_10s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_mac_muladd_12s_16s_24ns_24_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (23 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_0_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_2_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_3_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_4_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_5_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_6_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_7_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_8_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_9_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_10_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_11_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_12_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_13_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_14_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_15_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_16_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_17_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_18_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_19_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_bias_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component neural_network_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    layer2_weights_0_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_0_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_0_address0,
        ce0 => layer2_weights_0_ce0,
        q0 => layer2_weights_0_q0);

    layer2_weights_1_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_1_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_1_address0,
        ce0 => layer2_weights_1_ce0,
        q0 => layer2_weights_1_q0);

    layer2_weights_2_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_2_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_2_address0,
        ce0 => layer2_weights_2_ce0,
        q0 => layer2_weights_2_q0);

    layer2_weights_3_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_3_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_3_address0,
        ce0 => layer2_weights_3_ce0,
        q0 => layer2_weights_3_q0);

    layer2_weights_4_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_4_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_4_address0,
        ce0 => layer2_weights_4_ce0,
        q0 => layer2_weights_4_q0);

    layer2_weights_5_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_5_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_5_address0,
        ce0 => layer2_weights_5_ce0,
        q0 => layer2_weights_5_q0);

    layer2_weights_6_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_6_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_6_address0,
        ce0 => layer2_weights_6_ce0,
        q0 => layer2_weights_6_q0);

    layer2_weights_7_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_7_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_7_address0,
        ce0 => layer2_weights_7_ce0,
        q0 => layer2_weights_7_q0);

    layer2_weights_8_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_8_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_8_address0,
        ce0 => layer2_weights_8_ce0,
        q0 => layer2_weights_8_q0);

    layer2_weights_9_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_9_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_9_address0,
        ce0 => layer2_weights_9_ce0,
        q0 => layer2_weights_9_q0);

    layer2_weights_10_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_10_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_10_address0,
        ce0 => layer2_weights_10_ce0,
        q0 => layer2_weights_10_q0);

    layer2_weights_11_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_11_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_11_address0,
        ce0 => layer2_weights_11_ce0,
        q0 => layer2_weights_11_q0);

    layer2_weights_12_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_12_ROM_AUTO_1R
    generic map (
        DataWidth => 12,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_12_address0,
        ce0 => layer2_weights_12_ce0,
        q0 => layer2_weights_12_q0);

    layer2_weights_13_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_13_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_13_address0,
        ce0 => layer2_weights_13_ce0,
        q0 => layer2_weights_13_q0);

    layer2_weights_14_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_14_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_14_address0,
        ce0 => layer2_weights_14_ce0,
        q0 => layer2_weights_14_q0);

    layer2_weights_15_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_15_ROM_AUTO_1R
    generic map (
        DataWidth => 10,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_15_address0,
        ce0 => layer2_weights_15_ce0,
        q0 => layer2_weights_15_q0);

    layer2_weights_16_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_16_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_16_address0,
        ce0 => layer2_weights_16_ce0,
        q0 => layer2_weights_16_q0);

    layer2_weights_17_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_17_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_17_address0,
        ce0 => layer2_weights_17_ce0,
        q0 => layer2_weights_17_q0);

    layer2_weights_18_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_18_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_18_address0,
        ce0 => layer2_weights_18_ce0,
        q0 => layer2_weights_18_q0);

    layer2_weights_19_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_weights_19_ROM_AUTO_1R
    generic map (
        DataWidth => 11,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_weights_19_address0,
        ce0 => layer2_weights_19_ce0,
        q0 => layer2_weights_19_q0);

    layer2_bias_U : component neural_network_neural_network_Pipeline_VITIS_LOOP_70_3_layer2_bias_ROM_AUTO_1R
    generic map (
        DataWidth => 9,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => layer2_bias_address0,
        ce0 => layer2_bias_ce0,
        q0 => layer2_bias_q0);

    mul_11s_16s_24_1_1_U81 : component neural_network_mul_11s_16s_24_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        dout_WIDTH => 24)
    port map (
        din0 => layer2_weights_0_load_reg_1492,
        din1 => mul_ln75_fu_704_p1,
        dout => mul_ln75_fu_704_p2);

    mac_muladd_11s_16s_24ns_24_4_1_U82 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_1_q0,
        din1 => grp_fu_1162_p1,
        din2 => grp_fu_1162_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1162_p3);

    mac_muladd_11s_16s_24ns_24_4_1_U83 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_2_q0,
        din1 => grp_fu_1170_p1,
        din2 => grp_fu_1170_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1170_p3);

    mac_muladd_11s_16s_24ns_24_4_1_U84 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_3_q0,
        din1 => grp_fu_1178_p1,
        din2 => grp_fu_1178_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1178_p3);

    mac_muladd_10s_16s_24ns_24_4_1_U85 : component neural_network_mac_muladd_10s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_4_q0,
        din1 => grp_fu_1186_p1,
        din2 => grp_fu_1186_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1186_p3);

    mac_muladd_10s_16s_24ns_24_4_1_U86 : component neural_network_mac_muladd_10s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_5_q0,
        din1 => grp_fu_1194_p1,
        din2 => grp_fu_1194_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1194_p3);

    mac_muladd_10s_16s_24ns_24_4_1_U87 : component neural_network_mac_muladd_10s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_6_q0,
        din1 => grp_fu_1202_p1,
        din2 => grp_fu_1202_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1202_p3);

    mac_muladd_10s_16s_24ns_24_4_1_U88 : component neural_network_mac_muladd_10s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_7_q0,
        din1 => grp_fu_1210_p1,
        din2 => grp_fu_1210_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1210_p3);

    mac_muladd_11s_16s_24ns_24_4_1_U89 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_8_q0,
        din1 => grp_fu_1218_p1,
        din2 => grp_fu_1218_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1218_p3);

    mac_muladd_11s_16s_24ns_24_4_1_U90 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_9_q0,
        din1 => grp_fu_1226_p1,
        din2 => grp_fu_1226_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1226_p3);

    mac_muladd_11s_16s_24ns_24_4_1_U91 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_10_q0,
        din1 => grp_fu_1234_p1,
        din2 => grp_fu_1234_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1234_p3);

    mac_muladd_10s_16s_24ns_24_4_1_U92 : component neural_network_mac_muladd_10s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_11_q0,
        din1 => grp_fu_1242_p1,
        din2 => grp_fu_1242_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1242_p3);

    mac_muladd_12s_16s_24ns_24_4_1_U93 : component neural_network_mac_muladd_12s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_12_q0,
        din1 => grp_fu_1250_p1,
        din2 => grp_fu_1250_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1250_p3);

    mac_muladd_11s_16s_24ns_24_4_1_U94 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_13_q0,
        din1 => grp_fu_1258_p1,
        din2 => grp_fu_1258_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1258_p3);

    mac_muladd_11s_16s_24ns_24_4_1_U95 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_14_q0,
        din1 => grp_fu_1266_p1,
        din2 => grp_fu_1266_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1266_p3);

    mac_muladd_10s_16s_24ns_24_4_1_U96 : component neural_network_mac_muladd_10s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 10,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_15_load_reg_1727,
        din1 => grp_fu_1274_p1,
        din2 => grp_fu_1274_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1274_p3);

    mac_muladd_11s_16s_24ns_24_4_1_U97 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_16_load_reg_1732_pp0_iter15_reg,
        din1 => grp_fu_1282_p1,
        din2 => grp_fu_1282_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1282_p3);

    mac_muladd_11s_16s_24ns_24_4_1_U98 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_17_load_reg_1737_pp0_iter16_reg,
        din1 => grp_fu_1290_p1,
        din2 => grp_fu_1290_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1290_p3);

    mac_muladd_11s_16s_24ns_24_4_1_U99 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_18_load_reg_1742_pp0_iter17_reg,
        din1 => grp_fu_1298_p1,
        din2 => grp_fu_1298_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1298_p3);

    mac_muladd_11s_16s_24ns_24_4_1_U100 : component neural_network_mac_muladd_11s_16s_24ns_24_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 11,
        din1_WIDTH => 16,
        din2_WIDTH => 24,
        dout_WIDTH => 24)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => layer2_weights_19_load_reg_1747_pp0_iter18_reg,
        din1 => grp_fu_1306_p1,
        din2 => grp_fu_1306_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_1306_p3);

    flow_control_loop_pipe_sequential_init_U : component neural_network_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter21_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln70_fu_674_p2 = ap_const_lv1_0))) then 
                    i_fu_134 <= add_ln70_fu_680_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_134 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                i_1_reg_1451_pp0_iter10_reg <= i_1_reg_1451_pp0_iter9_reg;
                i_1_reg_1451_pp0_iter11_reg <= i_1_reg_1451_pp0_iter10_reg;
                i_1_reg_1451_pp0_iter12_reg <= i_1_reg_1451_pp0_iter11_reg;
                i_1_reg_1451_pp0_iter13_reg <= i_1_reg_1451_pp0_iter12_reg;
                i_1_reg_1451_pp0_iter14_reg <= i_1_reg_1451_pp0_iter13_reg;
                i_1_reg_1451_pp0_iter15_reg <= i_1_reg_1451_pp0_iter14_reg;
                i_1_reg_1451_pp0_iter16_reg <= i_1_reg_1451_pp0_iter15_reg;
                i_1_reg_1451_pp0_iter17_reg <= i_1_reg_1451_pp0_iter16_reg;
                i_1_reg_1451_pp0_iter18_reg <= i_1_reg_1451_pp0_iter17_reg;
                i_1_reg_1451_pp0_iter19_reg <= i_1_reg_1451_pp0_iter18_reg;
                i_1_reg_1451_pp0_iter20_reg <= i_1_reg_1451_pp0_iter19_reg;
                i_1_reg_1451_pp0_iter21_reg <= i_1_reg_1451_pp0_iter20_reg;
                i_1_reg_1451_pp0_iter2_reg <= i_1_reg_1451_pp0_iter1_reg;
                i_1_reg_1451_pp0_iter3_reg <= i_1_reg_1451_pp0_iter2_reg;
                i_1_reg_1451_pp0_iter4_reg <= i_1_reg_1451_pp0_iter3_reg;
                i_1_reg_1451_pp0_iter5_reg <= i_1_reg_1451_pp0_iter4_reg;
                i_1_reg_1451_pp0_iter6_reg <= i_1_reg_1451_pp0_iter5_reg;
                i_1_reg_1451_pp0_iter7_reg <= i_1_reg_1451_pp0_iter6_reg;
                i_1_reg_1451_pp0_iter8_reg <= i_1_reg_1451_pp0_iter7_reg;
                i_1_reg_1451_pp0_iter9_reg <= i_1_reg_1451_pp0_iter8_reg;
                icmp_ln70_reg_1455_pp0_iter10_reg <= icmp_ln70_reg_1455_pp0_iter9_reg;
                icmp_ln70_reg_1455_pp0_iter11_reg <= icmp_ln70_reg_1455_pp0_iter10_reg;
                icmp_ln70_reg_1455_pp0_iter12_reg <= icmp_ln70_reg_1455_pp0_iter11_reg;
                icmp_ln70_reg_1455_pp0_iter13_reg <= icmp_ln70_reg_1455_pp0_iter12_reg;
                icmp_ln70_reg_1455_pp0_iter14_reg <= icmp_ln70_reg_1455_pp0_iter13_reg;
                icmp_ln70_reg_1455_pp0_iter15_reg <= icmp_ln70_reg_1455_pp0_iter14_reg;
                icmp_ln70_reg_1455_pp0_iter16_reg <= icmp_ln70_reg_1455_pp0_iter15_reg;
                icmp_ln70_reg_1455_pp0_iter17_reg <= icmp_ln70_reg_1455_pp0_iter16_reg;
                icmp_ln70_reg_1455_pp0_iter18_reg <= icmp_ln70_reg_1455_pp0_iter17_reg;
                icmp_ln70_reg_1455_pp0_iter19_reg <= icmp_ln70_reg_1455_pp0_iter18_reg;
                icmp_ln70_reg_1455_pp0_iter20_reg <= icmp_ln70_reg_1455_pp0_iter19_reg;
                icmp_ln70_reg_1455_pp0_iter2_reg <= icmp_ln70_reg_1455_pp0_iter1_reg;
                icmp_ln70_reg_1455_pp0_iter3_reg <= icmp_ln70_reg_1455_pp0_iter2_reg;
                icmp_ln70_reg_1455_pp0_iter4_reg <= icmp_ln70_reg_1455_pp0_iter3_reg;
                icmp_ln70_reg_1455_pp0_iter5_reg <= icmp_ln70_reg_1455_pp0_iter4_reg;
                icmp_ln70_reg_1455_pp0_iter6_reg <= icmp_ln70_reg_1455_pp0_iter5_reg;
                icmp_ln70_reg_1455_pp0_iter7_reg <= icmp_ln70_reg_1455_pp0_iter6_reg;
                icmp_ln70_reg_1455_pp0_iter8_reg <= icmp_ln70_reg_1455_pp0_iter7_reg;
                icmp_ln70_reg_1455_pp0_iter9_reg <= icmp_ln70_reg_1455_pp0_iter8_reg;
                layer2_bias_load_reg_1752 <= layer2_bias_q0;
                layer2_bias_load_reg_1752_pp0_iter15_reg <= layer2_bias_load_reg_1752;
                layer2_bias_load_reg_1752_pp0_iter16_reg <= layer2_bias_load_reg_1752_pp0_iter15_reg;
                layer2_bias_load_reg_1752_pp0_iter17_reg <= layer2_bias_load_reg_1752_pp0_iter16_reg;
                layer2_bias_load_reg_1752_pp0_iter18_reg <= layer2_bias_load_reg_1752_pp0_iter17_reg;
                layer2_bias_load_reg_1752_pp0_iter19_reg <= layer2_bias_load_reg_1752_pp0_iter18_reg;
                layer2_bias_load_reg_1752_pp0_iter20_reg <= layer2_bias_load_reg_1752_pp0_iter19_reg;
                layer2_bias_load_reg_1752_pp0_iter21_reg <= layer2_bias_load_reg_1752_pp0_iter20_reg;
                layer2_weights_15_load_reg_1727 <= layer2_weights_15_q0;
                layer2_weights_16_load_reg_1732 <= layer2_weights_16_q0;
                layer2_weights_16_load_reg_1732_pp0_iter15_reg <= layer2_weights_16_load_reg_1732;
                layer2_weights_17_load_reg_1737 <= layer2_weights_17_q0;
                layer2_weights_17_load_reg_1737_pp0_iter15_reg <= layer2_weights_17_load_reg_1737;
                layer2_weights_17_load_reg_1737_pp0_iter16_reg <= layer2_weights_17_load_reg_1737_pp0_iter15_reg;
                layer2_weights_18_load_reg_1742 <= layer2_weights_18_q0;
                layer2_weights_18_load_reg_1742_pp0_iter15_reg <= layer2_weights_18_load_reg_1742;
                layer2_weights_18_load_reg_1742_pp0_iter16_reg <= layer2_weights_18_load_reg_1742_pp0_iter15_reg;
                layer2_weights_18_load_reg_1742_pp0_iter17_reg <= layer2_weights_18_load_reg_1742_pp0_iter16_reg;
                layer2_weights_19_load_reg_1747 <= layer2_weights_19_q0;
                layer2_weights_19_load_reg_1747_pp0_iter15_reg <= layer2_weights_19_load_reg_1747;
                layer2_weights_19_load_reg_1747_pp0_iter16_reg <= layer2_weights_19_load_reg_1747_pp0_iter15_reg;
                layer2_weights_19_load_reg_1747_pp0_iter17_reg <= layer2_weights_19_load_reg_1747_pp0_iter16_reg;
                layer2_weights_19_load_reg_1747_pp0_iter18_reg <= layer2_weights_19_load_reg_1747_pp0_iter17_reg;
                tmp_s_reg_1507 <= mul_ln75_fu_704_p2(23 downto 8);
                    zext_ln70_reg_1459_pp0_iter10_reg(2 downto 0) <= zext_ln70_reg_1459_pp0_iter9_reg(2 downto 0);
                    zext_ln70_reg_1459_pp0_iter11_reg(2 downto 0) <= zext_ln70_reg_1459_pp0_iter10_reg(2 downto 0);
                    zext_ln70_reg_1459_pp0_iter12_reg(2 downto 0) <= zext_ln70_reg_1459_pp0_iter11_reg(2 downto 0);
                    zext_ln70_reg_1459_pp0_iter2_reg(2 downto 0) <= zext_ln70_reg_1459_pp0_iter1_reg(2 downto 0);
                    zext_ln70_reg_1459_pp0_iter3_reg(2 downto 0) <= zext_ln70_reg_1459_pp0_iter2_reg(2 downto 0);
                    zext_ln70_reg_1459_pp0_iter4_reg(2 downto 0) <= zext_ln70_reg_1459_pp0_iter3_reg(2 downto 0);
                    zext_ln70_reg_1459_pp0_iter5_reg(2 downto 0) <= zext_ln70_reg_1459_pp0_iter4_reg(2 downto 0);
                    zext_ln70_reg_1459_pp0_iter6_reg(2 downto 0) <= zext_ln70_reg_1459_pp0_iter5_reg(2 downto 0);
                    zext_ln70_reg_1459_pp0_iter7_reg(2 downto 0) <= zext_ln70_reg_1459_pp0_iter6_reg(2 downto 0);
                    zext_ln70_reg_1459_pp0_iter8_reg(2 downto 0) <= zext_ln70_reg_1459_pp0_iter7_reg(2 downto 0);
                    zext_ln70_reg_1459_pp0_iter9_reg(2 downto 0) <= zext_ln70_reg_1459_pp0_iter8_reg(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                i_1_reg_1451 <= ap_sig_allocacmp_i_1;
                i_1_reg_1451_pp0_iter1_reg <= i_1_reg_1451;
                icmp_ln70_reg_1455 <= icmp_ln70_fu_674_p2;
                icmp_ln70_reg_1455_pp0_iter1_reg <= icmp_ln70_reg_1455;
                layer2_weights_0_load_reg_1492 <= layer2_weights_0_q0;
                sext_ln75_10_cast_reg_1396 <= sext_ln75_10_cast_fu_622_p1;
                sext_ln75_11_cast_reg_1391 <= sext_ln75_11_cast_fu_618_p1;
                sext_ln75_12_cast_reg_1386 <= sext_ln75_12_cast_fu_614_p1;
                sext_ln75_13_cast_reg_1381 <= sext_ln75_13_cast_fu_610_p1;
                sext_ln75_14_cast_reg_1376 <= sext_ln75_14_cast_fu_606_p1;
                sext_ln75_15_cast_reg_1371 <= sext_ln75_15_cast_fu_602_p1;
                sext_ln75_16_cast_reg_1366 <= sext_ln75_16_cast_fu_598_p1;
                sext_ln75_17_cast_reg_1361 <= sext_ln75_17_cast_fu_594_p1;
                sext_ln75_18_cast_reg_1356 <= sext_ln75_18_cast_fu_590_p1;
                sext_ln75_19_cast_reg_1351 <= sext_ln75_19_cast_fu_586_p1;
                sext_ln75_1_cast_reg_1441 <= sext_ln75_1_cast_fu_658_p1;
                sext_ln75_2_cast_reg_1436 <= sext_ln75_2_cast_fu_654_p1;
                sext_ln75_3_cast_reg_1431 <= sext_ln75_3_cast_fu_650_p1;
                sext_ln75_4_cast_reg_1426 <= sext_ln75_4_cast_fu_646_p1;
                sext_ln75_5_cast_reg_1421 <= sext_ln75_5_cast_fu_642_p1;
                sext_ln75_6_cast_reg_1416 <= sext_ln75_6_cast_fu_638_p1;
                sext_ln75_7_cast_reg_1411 <= sext_ln75_7_cast_fu_634_p1;
                sext_ln75_8_cast_reg_1406 <= sext_ln75_8_cast_fu_630_p1;
                sext_ln75_9_cast_reg_1401 <= sext_ln75_9_cast_fu_626_p1;
                sext_ln75_cast_reg_1446 <= sext_ln75_cast_fu_662_p1;
                    zext_ln70_reg_1459_pp0_iter1_reg(2 downto 0) <= zext_ln70_reg_1459(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (i_1_reg_1451_pp0_iter21_reg = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                layer2_output_1_fu_142 <= layer2_output_6_fu_1111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (i_1_reg_1451_pp0_iter21_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                layer2_output_2_fu_146 <= layer2_output_6_fu_1111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (i_1_reg_1451_pp0_iter21_reg = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                layer2_output_3_fu_150 <= layer2_output_6_fu_1111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((i_1_reg_1451_pp0_iter21_reg = ap_const_lv3_3)) and not((i_1_reg_1451_pp0_iter21_reg = ap_const_lv3_2)) and not((i_1_reg_1451_pp0_iter21_reg = ap_const_lv3_1)) and not((i_1_reg_1451_pp0_iter21_reg = ap_const_lv3_0)) and (ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                layer2_output_4_fu_154 <= layer2_output_6_fu_1111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (i_1_reg_1451_pp0_iter21_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                layer2_output_fu_138 <= layer2_output_6_fu_1111_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln70_fu_674_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln70_reg_1459(2 downto 0) <= zext_ln70_fu_686_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln70_reg_1459(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_1459_pp0_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_1459_pp0_iter2_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_1459_pp0_iter3_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_1459_pp0_iter4_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_1459_pp0_iter5_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_1459_pp0_iter6_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_1459_pp0_iter7_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_1459_pp0_iter8_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_1459_pp0_iter9_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_1459_pp0_iter10_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_1459_pp0_iter11_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln70_reg_1459_pp0_iter12_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln70_fu_680_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv3_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln70_fu_674_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln70_fu_674_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter21_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter21_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_134, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_134;
        end if; 
    end process;

    grp_fu_1162_p1 <= sext_ln75_1_cast_reg_1441(16 - 1 downto 0);
    grp_fu_1162_p2 <= (tmp_s_reg_1507 & ap_const_lv8_0);
    grp_fu_1170_p1 <= sext_ln75_2_cast_reg_1436(16 - 1 downto 0);
    grp_fu_1170_p2 <= (tmp_1_fu_734_p4 & ap_const_lv8_0);
    grp_fu_1178_p1 <= sext_ln75_3_cast_reg_1431(16 - 1 downto 0);
    grp_fu_1178_p2 <= (tmp_2_fu_755_p4 & ap_const_lv8_0);
    grp_fu_1186_p1 <= sext_ln75_4_cast_reg_1426(16 - 1 downto 0);
    grp_fu_1186_p2 <= (tmp_3_fu_776_p4 & ap_const_lv8_0);
    grp_fu_1194_p1 <= sext_ln75_5_cast_reg_1421(16 - 1 downto 0);
    grp_fu_1194_p2 <= (tmp_4_fu_797_p4 & ap_const_lv8_0);
    grp_fu_1202_p1 <= sext_ln75_6_cast_reg_1416(16 - 1 downto 0);
    grp_fu_1202_p2 <= (tmp_5_fu_818_p4 & ap_const_lv8_0);
    grp_fu_1210_p1 <= sext_ln75_7_cast_reg_1411(16 - 1 downto 0);
    grp_fu_1210_p2 <= (tmp_6_fu_839_p4 & ap_const_lv8_0);
    grp_fu_1218_p1 <= sext_ln75_8_cast_reg_1406(16 - 1 downto 0);
    grp_fu_1218_p2 <= (tmp_7_fu_860_p4 & ap_const_lv8_0);
    grp_fu_1226_p1 <= sext_ln75_9_cast_reg_1401(16 - 1 downto 0);
    grp_fu_1226_p2 <= (tmp_8_fu_881_p4 & ap_const_lv8_0);
    grp_fu_1234_p1 <= sext_ln75_10_cast_reg_1396(16 - 1 downto 0);
    grp_fu_1234_p2 <= (tmp_9_fu_902_p4 & ap_const_lv8_0);
    grp_fu_1242_p1 <= sext_ln75_11_cast_reg_1391(16 - 1 downto 0);
    grp_fu_1242_p2 <= (tmp_10_fu_923_p4 & ap_const_lv8_0);
    grp_fu_1250_p1 <= sext_ln75_12_cast_reg_1386(16 - 1 downto 0);
    grp_fu_1250_p2 <= (tmp_11_fu_944_p4 & ap_const_lv8_0);
    grp_fu_1258_p1 <= sext_ln75_13_cast_reg_1381(16 - 1 downto 0);
    grp_fu_1258_p2 <= (tmp_12_fu_965_p4 & ap_const_lv8_0);
    grp_fu_1266_p1 <= sext_ln75_14_cast_reg_1376(16 - 1 downto 0);
    grp_fu_1266_p2 <= (tmp_13_fu_985_p4 & ap_const_lv8_0);
    grp_fu_1274_p1 <= sext_ln75_15_cast_reg_1371(16 - 1 downto 0);
    grp_fu_1274_p2 <= (tmp_14_fu_1005_p4 & ap_const_lv8_0);
    grp_fu_1282_p1 <= sext_ln75_16_cast_reg_1366(16 - 1 downto 0);
    grp_fu_1282_p2 <= (tmp_15_fu_1025_p4 & ap_const_lv8_0);
    grp_fu_1290_p1 <= sext_ln75_17_cast_reg_1361(16 - 1 downto 0);
    grp_fu_1290_p2 <= (tmp_16_fu_1045_p4 & ap_const_lv8_0);
    grp_fu_1298_p1 <= sext_ln75_18_cast_reg_1356(16 - 1 downto 0);
    grp_fu_1298_p2 <= (tmp_17_fu_1065_p4 & ap_const_lv8_0);
    grp_fu_1306_p1 <= sext_ln75_19_cast_reg_1351(16 - 1 downto 0);
    grp_fu_1306_p2 <= (tmp_18_fu_1082_p4 & ap_const_lv8_0);
    icmp_ln70_fu_674_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv3_5) else "0";
    layer2_bias_address0 <= zext_ln70_reg_1459_pp0_iter12_reg(3 - 1 downto 0);

    layer2_bias_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_bias_ce0 <= ap_const_logic_1;
        else 
            layer2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_1_out <= layer2_output_1_fu_142;

    layer2_output_1_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln70_reg_1455_pp0_iter20_reg)
    begin
        if (((icmp_ln70_reg_1455_pp0_iter20_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_output_1_out_ap_vld <= ap_const_logic_1;
        else 
            layer2_output_1_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_2_out <= layer2_output_2_fu_146;

    layer2_output_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln70_reg_1455_pp0_iter20_reg)
    begin
        if (((icmp_ln70_reg_1455_pp0_iter20_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_output_2_out_ap_vld <= ap_const_logic_1;
        else 
            layer2_output_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_3_out <= layer2_output_3_fu_150;

    layer2_output_3_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln70_reg_1455_pp0_iter20_reg)
    begin
        if (((icmp_ln70_reg_1455_pp0_iter20_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_output_3_out_ap_vld <= ap_const_logic_1;
        else 
            layer2_output_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_4_out <= layer2_output_4_fu_154;

    layer2_output_4_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln70_reg_1455_pp0_iter20_reg)
    begin
        if (((icmp_ln70_reg_1455_pp0_iter20_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_output_4_out_ap_vld <= ap_const_logic_1;
        else 
            layer2_output_4_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_output_6_fu_1111_p2 <= std_logic_vector(signed(sext_ln77_fu_1108_p1) + signed(sum_fu_1099_p4));
    layer2_output_out <= layer2_output_fu_138;

    layer2_output_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln70_reg_1455_pp0_iter20_reg)
    begin
        if (((icmp_ln70_reg_1455_pp0_iter20_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_output_out_ap_vld <= ap_const_logic_1;
        else 
            layer2_output_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_0_address0 <= zext_ln70_fu_686_p1(3 - 1 downto 0);

    layer2_weights_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_0_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_10_address0 <= zext_ln70_reg_1459_pp0_iter8_reg(3 - 1 downto 0);

    layer2_weights_10_ce0_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_10_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_11_address0 <= zext_ln70_reg_1459_pp0_iter9_reg(3 - 1 downto 0);

    layer2_weights_11_ce0_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_11_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_12_address0 <= zext_ln70_reg_1459_pp0_iter10_reg(3 - 1 downto 0);

    layer2_weights_12_ce0_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_12_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_13_address0 <= zext_ln70_reg_1459_pp0_iter11_reg(3 - 1 downto 0);

    layer2_weights_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_13_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_14_address0 <= zext_ln70_reg_1459_pp0_iter12_reg(3 - 1 downto 0);

    layer2_weights_14_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_14_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_15_address0 <= zext_ln70_reg_1459_pp0_iter12_reg(3 - 1 downto 0);

    layer2_weights_15_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_15_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_16_address0 <= zext_ln70_reg_1459_pp0_iter12_reg(3 - 1 downto 0);

    layer2_weights_16_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_16_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_16_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_17_address0 <= zext_ln70_reg_1459_pp0_iter12_reg(3 - 1 downto 0);

    layer2_weights_17_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_17_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_17_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_18_address0 <= zext_ln70_reg_1459_pp0_iter12_reg(3 - 1 downto 0);

    layer2_weights_18_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_18_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_18_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_19_address0 <= zext_ln70_reg_1459_pp0_iter12_reg(3 - 1 downto 0);

    layer2_weights_19_ce0_assign_proc : process(ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_19_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_19_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_1_address0 <= zext_ln70_fu_686_p1(3 - 1 downto 0);

    layer2_weights_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_1_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_2_address0 <= zext_ln70_reg_1459(3 - 1 downto 0);

    layer2_weights_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_2_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_3_address0 <= zext_ln70_reg_1459_pp0_iter1_reg(3 - 1 downto 0);

    layer2_weights_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_3_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_4_address0 <= zext_ln70_reg_1459_pp0_iter2_reg(3 - 1 downto 0);

    layer2_weights_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_4_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_5_address0 <= zext_ln70_reg_1459_pp0_iter3_reg(3 - 1 downto 0);

    layer2_weights_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_5_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_6_address0 <= zext_ln70_reg_1459_pp0_iter4_reg(3 - 1 downto 0);

    layer2_weights_6_ce0_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_6_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_7_address0 <= zext_ln70_reg_1459_pp0_iter5_reg(3 - 1 downto 0);

    layer2_weights_7_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_7_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_8_address0 <= zext_ln70_reg_1459_pp0_iter6_reg(3 - 1 downto 0);

    layer2_weights_8_ce0_assign_proc : process(ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_8_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    layer2_weights_9_address0 <= zext_ln70_reg_1459_pp0_iter7_reg(3 - 1 downto 0);

    layer2_weights_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            layer2_weights_9_ce0 <= ap_const_logic_1;
        else 
            layer2_weights_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln75_fu_704_p1 <= sext_ln75_cast_reg_1446(16 - 1 downto 0);
        sext_ln75_10_cast_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_10),24));

        sext_ln75_11_cast_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_11),24));

        sext_ln75_12_cast_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_12),24));

        sext_ln75_13_cast_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_13),24));

        sext_ln75_14_cast_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_14),24));

        sext_ln75_15_cast_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_15),24));

        sext_ln75_16_cast_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_16),24));

        sext_ln75_17_cast_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_17),24));

        sext_ln75_18_cast_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_18),24));

        sext_ln75_19_cast_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_19),24));

        sext_ln75_1_cast_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_1),24));

        sext_ln75_2_cast_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_2),24));

        sext_ln75_3_cast_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_3),24));

        sext_ln75_4_cast_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_4),24));

        sext_ln75_5_cast_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_5),24));

        sext_ln75_6_cast_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_6),24));

        sext_ln75_7_cast_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_7),24));

        sext_ln75_8_cast_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_8),24));

        sext_ln75_9_cast_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75_9),24));

        sext_ln75_cast_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75),24));

        sext_ln77_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(layer2_bias_load_reg_1752_pp0_iter21_reg),16));

    sum_fu_1099_p1 <= grp_fu_1306_p3;
    sum_fu_1099_p4 <= sum_fu_1099_p1(23 downto 8);
    tmp_10_fu_923_p1 <= grp_fu_1234_p3;
    tmp_10_fu_923_p4 <= tmp_10_fu_923_p1(23 downto 8);
    tmp_11_fu_944_p1 <= grp_fu_1242_p3;
    tmp_11_fu_944_p4 <= tmp_11_fu_944_p1(23 downto 8);
    tmp_12_fu_965_p1 <= grp_fu_1250_p3;
    tmp_12_fu_965_p4 <= tmp_12_fu_965_p1(23 downto 8);
    tmp_13_fu_985_p1 <= grp_fu_1258_p3;
    tmp_13_fu_985_p4 <= tmp_13_fu_985_p1(23 downto 8);
    tmp_14_fu_1005_p1 <= grp_fu_1266_p3;
    tmp_14_fu_1005_p4 <= tmp_14_fu_1005_p1(23 downto 8);
    tmp_15_fu_1025_p1 <= grp_fu_1274_p3;
    tmp_15_fu_1025_p4 <= tmp_15_fu_1025_p1(23 downto 8);
    tmp_16_fu_1045_p1 <= grp_fu_1282_p3;
    tmp_16_fu_1045_p4 <= tmp_16_fu_1045_p1(23 downto 8);
    tmp_17_fu_1065_p1 <= grp_fu_1290_p3;
    tmp_17_fu_1065_p4 <= tmp_17_fu_1065_p1(23 downto 8);
    tmp_18_fu_1082_p1 <= grp_fu_1298_p3;
    tmp_18_fu_1082_p4 <= tmp_18_fu_1082_p1(23 downto 8);
    tmp_1_fu_734_p1 <= grp_fu_1162_p3;
    tmp_1_fu_734_p4 <= tmp_1_fu_734_p1(23 downto 8);
    tmp_2_fu_755_p1 <= grp_fu_1170_p3;
    tmp_2_fu_755_p4 <= tmp_2_fu_755_p1(23 downto 8);
    tmp_3_fu_776_p1 <= grp_fu_1178_p3;
    tmp_3_fu_776_p4 <= tmp_3_fu_776_p1(23 downto 8);
    tmp_4_fu_797_p1 <= grp_fu_1186_p3;
    tmp_4_fu_797_p4 <= tmp_4_fu_797_p1(23 downto 8);
    tmp_5_fu_818_p1 <= grp_fu_1194_p3;
    tmp_5_fu_818_p4 <= tmp_5_fu_818_p1(23 downto 8);
    tmp_6_fu_839_p1 <= grp_fu_1202_p3;
    tmp_6_fu_839_p4 <= tmp_6_fu_839_p1(23 downto 8);
    tmp_7_fu_860_p1 <= grp_fu_1210_p3;
    tmp_7_fu_860_p4 <= tmp_7_fu_860_p1(23 downto 8);
    tmp_8_fu_881_p1 <= grp_fu_1218_p3;
    tmp_8_fu_881_p4 <= tmp_8_fu_881_p1(23 downto 8);
    tmp_9_fu_902_p1 <= grp_fu_1226_p3;
    tmp_9_fu_902_p4 <= tmp_9_fu_902_p1(23 downto 8);
    zext_ln70_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),64));
end behav;
