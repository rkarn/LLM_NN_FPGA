// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_exp_17_9_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x_val,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [16:0] x_val;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_subdone;
wire   [4:0] f_x_lsb_table_address0;
reg    f_x_lsb_table_ce0;
wire   [10:0] f_x_lsb_table_q0;
wire   [4:0] exp_x_msb_2_m_1_table_address0;
reg    exp_x_msb_2_m_1_table_ce0;
wire   [24:0] exp_x_msb_2_m_1_table_q0;
wire   [4:0] exp_x_msb_1_table_address0;
reg    exp_x_msb_1_table_ce0;
wire   [24:0] exp_x_msb_1_table_q0;
wire   [0:0] tmp_1_fu_179_p3;
reg   [0:0] tmp_1_reg_521;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] tmp_1_reg_521_pp0_iter1_reg;
reg   [0:0] tmp_1_reg_521_pp0_iter2_reg;
reg   [0:0] tmp_1_reg_521_pp0_iter3_reg;
reg   [0:0] tmp_1_reg_521_pp0_iter4_reg;
reg   [3:0] tmp_reg_527;
reg   [3:0] tmp_reg_527_pp0_iter1_reg;
wire   [1:0] trunc_ln217_fu_295_p1;
reg   [1:0] trunc_ln217_reg_532;
reg   [1:0] trunc_ln217_reg_532_pp0_iter1_reg;
reg   [1:0] trunc_ln217_reg_532_pp0_iter2_reg;
wire   [0:0] or_ln202_4_fu_341_p2;
reg   [0:0] or_ln202_4_reg_548;
reg   [0:0] or_ln202_4_reg_548_pp0_iter1_reg;
reg   [0:0] or_ln202_4_reg_548_pp0_iter2_reg;
reg   [0:0] or_ln202_4_reg_548_pp0_iter3_reg;
reg   [0:0] or_ln202_4_reg_548_pp0_iter4_reg;
reg   [10:0] f_x_lsb_reg_553;
reg   [10:0] f_x_lsb_reg_553_pp0_iter2_reg;
reg   [24:0] exp_x_msb_2_m_1_reg_559;
reg   [24:0] exp_x_msb_2_m_1_reg_559_pp0_iter2_reg;
reg   [18:0] trunc_ln3_reg_565;
wire   [24:0] exp_x_msb_2_lsb_m_1_fu_416_p2;
reg   [24:0] exp_x_msb_2_lsb_m_1_reg_575;
reg   [24:0] exp_x_msb_1_reg_580;
reg   [24:0] exp_x_msb_1_reg_580_pp0_iter4_reg;
reg   [24:0] y_lo_s_reg_586;
wire   [63:0] zext_ln230_fu_307_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln245_fu_312_p1;
wire   [63:0] zext_ln261_fu_384_p1;
wire   [24:0] y_lo_fu_153_p0;
wire   [24:0] y_lo_fu_153_p1;
wire   [7:0] trunc_ln194_fu_167_p1;
wire   [0:0] tmp_2_fu_187_p3;
wire   [0:0] tmp_3_fu_201_p3;
wire   [0:0] tmp_4_fu_215_p3;
wire   [0:0] tmp_5_fu_229_p3;
wire   [0:0] tmp_6_fu_243_p3;
wire   [3:0] x_l_int_fu_157_p4;
wire   [10:0] x_l_fract_fu_171_p3;
wire   [0:0] icmp_ln202_fu_257_p2;
wire   [0:0] icmp_ln202_1_fu_263_p2;
wire   [4:0] x_lsb_ind_fu_299_p3;
wire   [4:0] x_msb_ind_2_fu_285_p4;
wire   [0:0] xor_ln198_fu_209_p2;
wire   [0:0] overf_fu_195_p2;
wire   [0:0] xor_ln198_1_fu_223_p2;
wire   [0:0] xor_ln198_2_fu_237_p2;
wire   [0:0] or_ln202_1_fu_323_p2;
wire   [0:0] or_ln202_fu_317_p2;
wire   [0:0] and_ln202_fu_269_p2;
wire   [0:0] xor_ln198_3_fu_251_p2;
wire   [0:0] or_ln202_3_fu_335_p2;
wire   [0:0] or_ln202_2_fu_329_p2;
wire   [17:0] exp_x_lsb_m_1_fu_353_p4;
wire   [24:0] f_x_msb_2_lsb_fu_368_p0;
wire   [17:0] f_x_msb_2_lsb_fu_368_p1;
wire   [42:0] f_x_msb_2_lsb_fu_368_p2;
wire   [4:0] x_msb_ind_1_fu_347_p3;
wire   [18:0] shl_ln_fu_392_p5;
wire   [19:0] zext_ln249_1_fu_402_p1;
wire   [19:0] zext_ln249_fu_389_p1;
wire   [19:0] add_ln249_fu_406_p2;
wire   [24:0] zext_ln249_2_fu_412_p1;
wire   [49:0] y_lo_fu_153_p2;
wire   [0:0] y_fu_439_p2;
wire   [24:0] y_l_fu_452_p2;
wire   [21:0] select_ln190_fu_444_p3;
wire   [21:0] y_1_fu_456_p4;
wire   [21:0] y_2_fu_466_p3;
wire   [1:0] tmp_7_fu_473_p4;
wire   [0:0] tmp_8_fu_489_p3;
wire   [0:0] overf_1_fu_483_p2;
wire   [0:0] overf_2_fu_497_p2;
wire   [15:0] tmp_s_fu_503_p4;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to4;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [42:0] f_x_msb_2_lsb_fu_368_p00;
wire   [42:0] f_x_msb_2_lsb_fu_368_p10;
wire   [49:0] y_lo_fu_153_p00;
wire   [49:0] y_lo_fu_153_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

neural_network_exp_17_9_s_f_x_lsb_table_ROM_AUTO_1R #(
    .DataWidth( 11 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
f_x_lsb_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(f_x_lsb_table_address0),
    .ce0(f_x_lsb_table_ce0),
    .q0(f_x_lsb_table_q0)
);

neural_network_exp_17_9_s_exp_x_msb_2_m_1_table_ROM_AUTO_1R #(
    .DataWidth( 25 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
exp_x_msb_2_m_1_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_2_m_1_table_address0),
    .ce0(exp_x_msb_2_m_1_table_ce0),
    .q0(exp_x_msb_2_m_1_table_q0)
);

neural_network_exp_17_9_s_exp_x_msb_1_table_ROM_AUTO_1R #(
    .DataWidth( 25 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
exp_x_msb_1_table_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(exp_x_msb_1_table_address0),
    .ce0(exp_x_msb_1_table_ce0),
    .q0(exp_x_msb_1_table_q0)
);

neural_network_mul_25ns_25ns_50_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 25 ),
    .dout_WIDTH( 50 ))
mul_25ns_25ns_50_1_1_U330(
    .din0(y_lo_fu_153_p0),
    .din1(y_lo_fu_153_p1),
    .dout(y_lo_fu_153_p2)
);

neural_network_mul_25ns_18ns_43_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 25 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 43 ))
mul_25ns_18ns_43_1_1_U331(
    .din0(f_x_msb_2_lsb_fu_368_p0),
    .din1(f_x_msb_2_lsb_fu_368_p1),
    .dout(f_x_msb_2_lsb_fu_368_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln202_4_reg_548_pp0_iter2_reg == 1'd0))) begin
        exp_x_msb_1_reg_580 <= exp_x_msb_1_table_q0;
        exp_x_msb_2_lsb_m_1_reg_575 <= exp_x_msb_2_lsb_m_1_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        exp_x_msb_1_reg_580_pp0_iter4_reg <= exp_x_msb_1_reg_580;
        exp_x_msb_2_m_1_reg_559_pp0_iter2_reg <= exp_x_msb_2_m_1_reg_559;
        f_x_lsb_reg_553_pp0_iter2_reg <= f_x_lsb_reg_553;
        or_ln202_4_reg_548_pp0_iter2_reg <= or_ln202_4_reg_548_pp0_iter1_reg;
        or_ln202_4_reg_548_pp0_iter3_reg <= or_ln202_4_reg_548_pp0_iter2_reg;
        or_ln202_4_reg_548_pp0_iter4_reg <= or_ln202_4_reg_548_pp0_iter3_reg;
        tmp_1_reg_521_pp0_iter2_reg <= tmp_1_reg_521_pp0_iter1_reg;
        tmp_1_reg_521_pp0_iter3_reg <= tmp_1_reg_521_pp0_iter2_reg;
        tmp_1_reg_521_pp0_iter4_reg <= tmp_1_reg_521_pp0_iter3_reg;
        trunc_ln217_reg_532_pp0_iter2_reg <= trunc_ln217_reg_532_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_x_msb_2_m_1_reg_559 <= exp_x_msb_2_m_1_table_q0;
        f_x_lsb_reg_553 <= f_x_lsb_table_q0;
        or_ln202_4_reg_548 <= or_ln202_4_fu_341_p2;
        or_ln202_4_reg_548_pp0_iter1_reg <= or_ln202_4_reg_548;
        tmp_1_reg_521 <= x_val[32'd16];
        tmp_1_reg_521_pp0_iter1_reg <= tmp_1_reg_521;
        tmp_reg_527 <= {{x_val[10:7]}};
        tmp_reg_527_pp0_iter1_reg <= tmp_reg_527;
        trunc_ln217_reg_532 <= trunc_ln217_fu_295_p1;
        trunc_ln217_reg_532_pp0_iter1_reg <= trunc_ln217_reg_532;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln202_4_reg_548_pp0_iter1_reg == 1'd0))) begin
        trunc_ln3_reg_565 <= {{f_x_msb_2_lsb_fu_368_p2[42:24]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (or_ln202_4_reg_548_pp0_iter3_reg == 1'd0))) begin
        y_lo_s_reg_586 <= {{y_lo_fu_153_p2[49:25]}};
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to4 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        exp_x_msb_1_table_ce0 = 1'b1;
    end else begin
        exp_x_msb_1_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exp_x_msb_2_m_1_table_ce0 = 1'b1;
    end else begin
        exp_x_msb_2_m_1_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_x_lsb_table_ce0 = 1'b1;
    end else begin
        f_x_lsb_table_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln249_fu_406_p2 = (zext_ln249_1_fu_402_p1 + zext_ln249_fu_389_p1);

assign and_ln202_fu_269_p2 = (icmp_ln202_fu_257_p2 & icmp_ln202_1_fu_263_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((overf_2_fu_497_p2[0:0] == 1'b1) ? 16'd65535 : tmp_s_fu_503_p4);

assign exp_x_lsb_m_1_fu_353_p4 = {{{trunc_ln217_reg_532_pp0_iter1_reg}, {5'd0}}, {f_x_lsb_reg_553}};

assign exp_x_msb_1_table_address0 = zext_ln261_fu_384_p1;

assign exp_x_msb_2_lsb_m_1_fu_416_p2 = (exp_x_msb_2_m_1_reg_559_pp0_iter2_reg + zext_ln249_2_fu_412_p1);

assign exp_x_msb_2_m_1_table_address0 = zext_ln245_fu_312_p1;

assign f_x_lsb_table_address0 = zext_ln230_fu_307_p1;

assign f_x_msb_2_lsb_fu_368_p0 = f_x_msb_2_lsb_fu_368_p00;

assign f_x_msb_2_lsb_fu_368_p00 = exp_x_msb_2_m_1_reg_559;

assign f_x_msb_2_lsb_fu_368_p1 = f_x_msb_2_lsb_fu_368_p10;

assign f_x_msb_2_lsb_fu_368_p10 = exp_x_lsb_m_1_fu_353_p4;

assign icmp_ln202_1_fu_263_p2 = ((x_l_fract_fu_171_p3 > 11'd1280) ? 1'b1 : 1'b0);

assign icmp_ln202_fu_257_p2 = ((x_l_int_fu_157_p4 == 4'd7) ? 1'b1 : 1'b0);

assign or_ln202_1_fu_323_p2 = (xor_ln198_2_fu_237_p2 | xor_ln198_1_fu_223_p2);

assign or_ln202_2_fu_329_p2 = (or_ln202_fu_317_p2 | or_ln202_1_fu_323_p2);

assign or_ln202_3_fu_335_p2 = (xor_ln198_3_fu_251_p2 | and_ln202_fu_269_p2);

assign or_ln202_4_fu_341_p2 = (or_ln202_3_fu_335_p2 | or_ln202_2_fu_329_p2);

assign or_ln202_fu_317_p2 = (xor_ln198_fu_209_p2 | overf_fu_195_p2);

assign overf_1_fu_483_p2 = ((tmp_7_fu_473_p4 != 2'd0) ? 1'b1 : 1'b0);

assign overf_2_fu_497_p2 = (tmp_8_fu_489_p3 | overf_1_fu_483_p2);

assign overf_fu_195_p2 = (tmp_2_fu_187_p3 ^ tmp_1_fu_179_p3);

assign select_ln190_fu_444_p3 = ((y_fu_439_p2[0:0] == 1'b1) ? 22'd4194303 : 22'd0);

assign shl_ln_fu_392_p5 = {{{{trunc_ln217_reg_532_pp0_iter2_reg}, {5'd0}}, {f_x_lsb_reg_553_pp0_iter2_reg}}, {1'd0}};

assign tmp_1_fu_179_p3 = x_val[32'd16];

assign tmp_2_fu_187_p3 = x_val[32'd11];

assign tmp_3_fu_201_p3 = x_val[32'd12];

assign tmp_4_fu_215_p3 = x_val[32'd13];

assign tmp_5_fu_229_p3 = x_val[32'd14];

assign tmp_6_fu_243_p3 = x_val[32'd15];

assign tmp_7_fu_473_p4 = {{y_2_fu_466_p3[21:20]}};

assign tmp_8_fu_489_p3 = y_2_fu_466_p3[32'd19];

assign tmp_s_fu_503_p4 = {{y_2_fu_466_p3[18:3]}};

assign trunc_ln194_fu_167_p1 = x_val[7:0];

assign trunc_ln217_fu_295_p1 = x_val[1:0];

assign x_l_fract_fu_171_p3 = {{trunc_ln194_fu_167_p1}, {3'd0}};

assign x_l_int_fu_157_p4 = {{x_val[11:8]}};

assign x_lsb_ind_fu_299_p3 = {{trunc_ln217_fu_295_p1}, {3'd0}};

assign x_msb_ind_1_fu_347_p3 = {{tmp_1_reg_521_pp0_iter1_reg}, {tmp_reg_527_pp0_iter1_reg}};

assign x_msb_ind_2_fu_285_p4 = {{x_val[6:2]}};

assign xor_ln198_1_fu_223_p2 = (tmp_4_fu_215_p3 ^ tmp_1_fu_179_p3);

assign xor_ln198_2_fu_237_p2 = (tmp_5_fu_229_p3 ^ tmp_1_fu_179_p3);

assign xor_ln198_3_fu_251_p2 = (tmp_6_fu_243_p3 ^ tmp_1_fu_179_p3);

assign xor_ln198_fu_209_p2 = (tmp_3_fu_201_p3 ^ tmp_1_fu_179_p3);

assign y_1_fu_456_p4 = {{y_l_fu_452_p2[24:3]}};

assign y_2_fu_466_p3 = ((or_ln202_4_reg_548_pp0_iter4_reg[0:0] == 1'b1) ? select_ln190_fu_444_p3 : y_1_fu_456_p4);

assign y_fu_439_p2 = (tmp_1_reg_521_pp0_iter4_reg ^ 1'd1);

assign y_l_fu_452_p2 = (exp_x_msb_1_reg_580_pp0_iter4_reg + y_lo_s_reg_586);

assign y_lo_fu_153_p0 = y_lo_fu_153_p00;

assign y_lo_fu_153_p00 = exp_x_msb_2_lsb_m_1_reg_575;

assign y_lo_fu_153_p1 = y_lo_fu_153_p10;

assign y_lo_fu_153_p10 = exp_x_msb_1_reg_580;

assign zext_ln230_fu_307_p1 = x_lsb_ind_fu_299_p3;

assign zext_ln245_fu_312_p1 = x_msb_ind_2_fu_285_p4;

assign zext_ln249_1_fu_402_p1 = shl_ln_fu_392_p5;

assign zext_ln249_2_fu_412_p1 = add_ln249_fu_406_p2;

assign zext_ln249_fu_389_p1 = trunc_ln3_reg_565;

assign zext_ln261_fu_384_p1 = x_msb_ind_1_fu_347_p3;

endmodule //neural_network_exp_17_9_s
