// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module neural_network_neural_network_Pipeline_VITIS_LOOP_21_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        p_0_0_0114_i1,
        conv_i_i_le17_lcssa38,
        conv_i_i_le19_lcssa40,
        conv_i_i_le21_lcssa42,
        conv_i_i_le23_lcssa44,
        conv_i_i_le25_lcssa46,
        conv_i_i_le27_lcssa48,
        conv_i_i_le29_lcssa50,
        conv_i_i_le31_lcssa52,
        conv_i_i_le33_lcssa54,
        max_val_out,
        max_val_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] p_0_0_0114_i1;
input  [15:0] conv_i_i_le17_lcssa38;
input  [15:0] conv_i_i_le19_lcssa40;
input  [15:0] conv_i_i_le21_lcssa42;
input  [15:0] conv_i_i_le23_lcssa44;
input  [15:0] conv_i_i_le25_lcssa46;
input  [15:0] conv_i_i_le27_lcssa48;
input  [15:0] conv_i_i_le29_lcssa50;
input  [15:0] conv_i_i_le31_lcssa52;
input  [15:0] conv_i_i_le33_lcssa54;
output  [15:0] max_val_out;
output   max_val_out_ap_vld;

reg ap_idle;
reg max_val_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln21_fu_138_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [15:0] max_val_fu_50;
wire   [15:0] max_val_1_fu_179_p3;
wire    ap_loop_init;
reg   [15:0] ap_sig_allocacmp_max_val_load_1;
reg   [3:0] i_3_fu_54;
wire   [3:0] add_ln21_fu_187_p2;
reg   [3:0] ap_sig_allocacmp_i;
wire   [15:0] tmp_fu_147_p12;
wire   [0:0] icmp_ln23_fu_173_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

neural_network_mux_10_4_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 16 ),
    .din3_WIDTH( 16 ),
    .din4_WIDTH( 16 ),
    .din5_WIDTH( 16 ),
    .din6_WIDTH( 16 ),
    .din7_WIDTH( 16 ),
    .din8_WIDTH( 16 ),
    .din9_WIDTH( 16 ),
    .din10_WIDTH( 4 ),
    .dout_WIDTH( 16 ))
mux_10_4_16_1_1_U220(
    .din0(16'd0),
    .din1(conv_i_i_le17_lcssa38),
    .din2(conv_i_i_le19_lcssa40),
    .din3(conv_i_i_le21_lcssa42),
    .din4(conv_i_i_le23_lcssa44),
    .din5(conv_i_i_le25_lcssa46),
    .din6(conv_i_i_le27_lcssa48),
    .din7(conv_i_i_le29_lcssa50),
    .din8(conv_i_i_le31_lcssa52),
    .din9(conv_i_i_le33_lcssa54),
    .din10(ap_sig_allocacmp_i),
    .dout(tmp_fu_147_p12)
);

neural_network_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln21_fu_138_p2 == 1'd0)) begin
            i_3_fu_54 <= add_ln21_fu_187_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_3_fu_54 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        if ((icmp_ln21_fu_138_p2 == 1'd0)) begin
            max_val_fu_50 <= max_val_1_fu_179_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            max_val_fu_50 <= p_0_0_0114_i1;
        end
    end
end

always @ (*) begin
    if ((ap_start_int == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 4'd1;
    end else begin
        ap_sig_allocacmp_i = i_3_fu_54;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_max_val_load_1 = p_0_0_0114_i1;
    end else begin
        ap_sig_allocacmp_max_val_load_1 = max_val_fu_50;
    end
end

always @ (*) begin
    if (((icmp_ln21_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1) & (ap_start_int == 1'b1))) begin
        max_val_out_ap_vld = 1'b1;
    end else begin
        max_val_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_fu_187_p2 = (ap_sig_allocacmp_i + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln21_fu_138_p2 = ((ap_sig_allocacmp_i == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_173_p2 = (($signed(tmp_fu_147_p12) > $signed(ap_sig_allocacmp_max_val_load_1)) ? 1'b1 : 1'b0);

assign max_val_1_fu_179_p3 = ((icmp_ln23_fu_173_p2[0:0] == 1'b1) ? tmp_fu_147_p12 : ap_sig_allocacmp_max_val_load_1);

assign max_val_out = max_val_fu_50;

endmodule //neural_network_neural_network_Pipeline_VITIS_LOOP_21_1
